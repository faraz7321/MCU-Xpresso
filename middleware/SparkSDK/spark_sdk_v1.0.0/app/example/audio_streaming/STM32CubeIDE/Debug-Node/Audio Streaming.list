
Audio Streaming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a18  080142c8  080142c8  000242c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014ce0  08014ce0  0003071c  2**0
                  CONTENTS
  4 .ARM          00000008  08014ce0  08014ce0  00024ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014ce8  08014ce8  0003071c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014ce8  08014ce8  00024ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014cec  08014cec  00024cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000071c  20000000  08014cf0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a80  20000720  0801540c  00030720  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200061a0  0801540c  000361a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003071c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006c34c  00000000  00000000  0003074c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000dded  00000000  00000000  0009ca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00040d85  00000000  00000000  000aa885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d28  00000000  00000000  000eb610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00008b80  00000000  00000000  000ee338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000306e1  00000000  00000000  000f6eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005c95d  00000000  00000000  00127599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001039a7  00000000  00000000  00183ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0028789d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097f4  00000000  00000000  002878f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000720 	.word	0x20000720
 80001fc:	00000000 	.word	0x00000000
 8000200:	080142ac 	.word	0x080142ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000724 	.word	0x20000724
 800021c:	080142ac 	.word	0x080142ac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb0:	f000 b974 	b.w	8000f9c <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9d08      	ldr	r5, [sp, #32]
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	468e      	mov	lr, r1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d14d      	bne.n	8000d76 <__udivmoddi4+0xaa>
 8000cda:	428a      	cmp	r2, r1
 8000cdc:	4694      	mov	ip, r2
 8000cde:	d969      	bls.n	8000db4 <__udivmoddi4+0xe8>
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	b152      	cbz	r2, 8000cfc <__udivmoddi4+0x30>
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	f1c2 0120 	rsb	r1, r2, #32
 8000cee:	fa20 f101 	lsr.w	r1, r0, r1
 8000cf2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cfa:	4094      	lsls	r4, r2
 8000cfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d00:	0c21      	lsrs	r1, r4, #16
 8000d02:	fbbe f6f8 	udiv	r6, lr, r8
 8000d06:	fa1f f78c 	uxth.w	r7, ip
 8000d0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d12:	fb06 f107 	mul.w	r1, r6, r7
 8000d16:	4299      	cmp	r1, r3
 8000d18:	d90a      	bls.n	8000d30 <__udivmoddi4+0x64>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d22:	f080 811f 	bcs.w	8000f64 <__udivmoddi4+0x298>
 8000d26:	4299      	cmp	r1, r3
 8000d28:	f240 811c 	bls.w	8000f64 <__udivmoddi4+0x298>
 8000d2c:	3e02      	subs	r6, #2
 8000d2e:	4463      	add	r3, ip
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d38:	fb08 3310 	mls	r3, r8, r0, r3
 8000d3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d40:	fb00 f707 	mul.w	r7, r0, r7
 8000d44:	42a7      	cmp	r7, r4
 8000d46:	d90a      	bls.n	8000d5e <__udivmoddi4+0x92>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d50:	f080 810a 	bcs.w	8000f68 <__udivmoddi4+0x29c>
 8000d54:	42a7      	cmp	r7, r4
 8000d56:	f240 8107 	bls.w	8000f68 <__udivmoddi4+0x29c>
 8000d5a:	4464      	add	r4, ip
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d62:	1be4      	subs	r4, r4, r7
 8000d64:	2600      	movs	r6, #0
 8000d66:	b11d      	cbz	r5, 8000d70 <__udivmoddi4+0xa4>
 8000d68:	40d4      	lsrs	r4, r2
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d70:	4631      	mov	r1, r6
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d909      	bls.n	8000d8e <__udivmoddi4+0xc2>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	f000 80ef 	beq.w	8000f5e <__udivmoddi4+0x292>
 8000d80:	2600      	movs	r6, #0
 8000d82:	e9c5 0100 	strd	r0, r1, [r5]
 8000d86:	4630      	mov	r0, r6
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	fab3 f683 	clz	r6, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d14a      	bne.n	8000e2c <__udivmoddi4+0x160>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xd4>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 80f9 	bhi.w	8000f92 <__udivmoddi4+0x2c6>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb61 0303 	sbc.w	r3, r1, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	469e      	mov	lr, r3
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0e0      	beq.n	8000d70 <__udivmoddi4+0xa4>
 8000dae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000db2:	e7dd      	b.n	8000d70 <__udivmoddi4+0xa4>
 8000db4:	b902      	cbnz	r2, 8000db8 <__udivmoddi4+0xec>
 8000db6:	deff      	udf	#255	; 0xff
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	f040 8092 	bne.w	8000ee6 <__udivmoddi4+0x21a>
 8000dc2:	eba1 010c 	sub.w	r1, r1, ip
 8000dc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dca:	fa1f fe8c 	uxth.w	lr, ip
 8000dce:	2601      	movs	r6, #1
 8000dd0:	0c20      	lsrs	r0, r4, #16
 8000dd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dde:	fb0e f003 	mul.w	r0, lr, r3
 8000de2:	4288      	cmp	r0, r1
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x12c>
 8000de6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dea:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x12a>
 8000df0:	4288      	cmp	r0, r1
 8000df2:	f200 80cb 	bhi.w	8000f8c <__udivmoddi4+0x2c0>
 8000df6:	4643      	mov	r3, r8
 8000df8:	1a09      	subs	r1, r1, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e00:	fb07 1110 	mls	r1, r7, r0, r1
 8000e04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e08:	fb0e fe00 	mul.w	lr, lr, r0
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x156>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d202      	bcs.n	8000e20 <__udivmoddi4+0x154>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	f200 80bb 	bhi.w	8000f96 <__udivmoddi4+0x2ca>
 8000e20:	4608      	mov	r0, r1
 8000e22:	eba4 040e 	sub.w	r4, r4, lr
 8000e26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e2a:	e79c      	b.n	8000d66 <__udivmoddi4+0x9a>
 8000e2c:	f1c6 0720 	rsb	r7, r6, #32
 8000e30:	40b3      	lsls	r3, r6
 8000e32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e42:	431c      	orrs	r4, r3
 8000e44:	40f9      	lsrs	r1, r7
 8000e46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e52:	0c20      	lsrs	r0, r4, #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fb09 1118 	mls	r1, r9, r8, r1
 8000e5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e60:	fb08 f00e 	mul.w	r0, r8, lr
 8000e64:	4288      	cmp	r0, r1
 8000e66:	fa02 f206 	lsl.w	r2, r2, r6
 8000e6a:	d90b      	bls.n	8000e84 <__udivmoddi4+0x1b8>
 8000e6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e74:	f080 8088 	bcs.w	8000f88 <__udivmoddi4+0x2bc>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f240 8085 	bls.w	8000f88 <__udivmoddi4+0x2bc>
 8000e7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1a09      	subs	r1, r1, r0
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e98:	458e      	cmp	lr, r1
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x1e2>
 8000e9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ea4:	d26c      	bcs.n	8000f80 <__udivmoddi4+0x2b4>
 8000ea6:	458e      	cmp	lr, r1
 8000ea8:	d96a      	bls.n	8000f80 <__udivmoddi4+0x2b4>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	4461      	add	r1, ip
 8000eae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb6:	eba1 010e 	sub.w	r1, r1, lr
 8000eba:	42a1      	cmp	r1, r4
 8000ebc:	46c8      	mov	r8, r9
 8000ebe:	46a6      	mov	lr, r4
 8000ec0:	d356      	bcc.n	8000f70 <__udivmoddi4+0x2a4>
 8000ec2:	d053      	beq.n	8000f6c <__udivmoddi4+0x2a0>
 8000ec4:	b15d      	cbz	r5, 8000ede <__udivmoddi4+0x212>
 8000ec6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ece:	fa01 f707 	lsl.w	r7, r1, r7
 8000ed2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed6:	40f1      	lsrs	r1, r6
 8000ed8:	431f      	orrs	r7, r3
 8000eda:	e9c5 7100 	strd	r7, r1, [r5]
 8000ede:	2600      	movs	r6, #0
 8000ee0:	4631      	mov	r1, r6
 8000ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee6:	f1c2 0320 	rsb	r3, r2, #32
 8000eea:	40d8      	lsrs	r0, r3
 8000eec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef4:	4091      	lsls	r1, r2
 8000ef6:	4301      	orrs	r1, r0
 8000ef8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f04:	fb07 3610 	mls	r6, r7, r0, r3
 8000f08:	0c0b      	lsrs	r3, r1, #16
 8000f0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000f12:	429e      	cmp	r6, r3
 8000f14:	fa04 f402 	lsl.w	r4, r4, r2
 8000f18:	d908      	bls.n	8000f2c <__udivmoddi4+0x260>
 8000f1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f22:	d22f      	bcs.n	8000f84 <__udivmoddi4+0x2b8>
 8000f24:	429e      	cmp	r6, r3
 8000f26:	d92d      	bls.n	8000f84 <__udivmoddi4+0x2b8>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	4463      	add	r3, ip
 8000f2c:	1b9b      	subs	r3, r3, r6
 8000f2e:	b289      	uxth	r1, r1
 8000f30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f34:	fb07 3316 	mls	r3, r7, r6, r3
 8000f38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x28a>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f4c:	d216      	bcs.n	8000f7c <__udivmoddi4+0x2b0>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d914      	bls.n	8000f7c <__udivmoddi4+0x2b0>
 8000f52:	3e02      	subs	r6, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f5c:	e738      	b.n	8000dd0 <__udivmoddi4+0x104>
 8000f5e:	462e      	mov	r6, r5
 8000f60:	4628      	mov	r0, r5
 8000f62:	e705      	b.n	8000d70 <__udivmoddi4+0xa4>
 8000f64:	4606      	mov	r6, r0
 8000f66:	e6e3      	b.n	8000d30 <__udivmoddi4+0x64>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6f8      	b.n	8000d5e <__udivmoddi4+0x92>
 8000f6c:	454b      	cmp	r3, r9
 8000f6e:	d2a9      	bcs.n	8000ec4 <__udivmoddi4+0x1f8>
 8000f70:	ebb9 0802 	subs.w	r8, r9, r2
 8000f74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f78:	3801      	subs	r0, #1
 8000f7a:	e7a3      	b.n	8000ec4 <__udivmoddi4+0x1f8>
 8000f7c:	4646      	mov	r6, r8
 8000f7e:	e7ea      	b.n	8000f56 <__udivmoddi4+0x28a>
 8000f80:	4620      	mov	r0, r4
 8000f82:	e794      	b.n	8000eae <__udivmoddi4+0x1e2>
 8000f84:	4640      	mov	r0, r8
 8000f86:	e7d1      	b.n	8000f2c <__udivmoddi4+0x260>
 8000f88:	46d0      	mov	r8, sl
 8000f8a:	e77b      	b.n	8000e84 <__udivmoddi4+0x1b8>
 8000f8c:	3b02      	subs	r3, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	e732      	b.n	8000df8 <__udivmoddi4+0x12c>
 8000f92:	4630      	mov	r0, r6
 8000f94:	e709      	b.n	8000daa <__udivmoddi4+0xde>
 8000f96:	4464      	add	r4, ip
 8000f98:	3802      	subs	r0, #2
 8000f9a:	e742      	b.n	8000e22 <__udivmoddi4+0x156>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <audio_i2s_tx_complete_cb>:
 *  This feeds the codec with audio packets. It needs to be
 *  executed every time a DMA transfer to the codec is completed
 *  in order to keep the audio playing.
 */
static void audio_i2s_tx_complete_cb(void)
{
 8000fa0:	b500      	push	{lr}
    sac_error_t audio_err;

    sac_pipeline_consume(primary_audio_pipeline, &audio_err);
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <audio_i2s_tx_complete_cb+0x18>)
{
 8000fa4:	b083      	sub	sp, #12
    sac_pipeline_consume(primary_audio_pipeline, &audio_err);
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	f10d 0107 	add.w	r1, sp, #7
 8000fac:	f003 f904 	bl	80041b8 <sac_pipeline_consume>
}
 8000fb0:	b003      	add	sp, #12
 8000fb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fb6:	bf00      	nop
 8000fb8:	2000248c 	.word	0x2000248c

08000fbc <volume_down>:
    sac_processing_ctrl(volume_processing, AUDIO_VOLUME_DECREASE, SAC_NO_ARG);
 8000fbc:	4b02      	ldr	r3, [pc, #8]	; (8000fc8 <volume_down+0xc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	f003 b942 	b.w	800424c <sac_processing_ctrl>
 8000fc8:	20004bc4 	.word	0x20004bc4

08000fcc <volume_up>:
    sac_processing_ctrl(volume_processing, AUDIO_VOLUME_INCREASE, SAC_NO_ARG);
 8000fcc:	4b02      	ldr	r3, [pc, #8]	; (8000fd8 <volume_up+0xc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	f003 b93a 	b.w	800424c <sac_processing_ctrl>
 8000fd8:	20004bc4 	.word	0x20004bc4

08000fdc <conn_rx_success_callback>:
{
 8000fdc:	b500      	push	{lr}
 8000fde:	b083      	sub	sp, #12
    iface_rx_conn_status();
 8000fe0:	f002 fa58 	bl	8003494 <iface_rx_conn_status>
    sac_pipeline_produce(primary_audio_pipeline, &audio_err);
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <conn_rx_success_callback+0x1c>)
 8000fe6:	f10d 0107 	add.w	r1, sp, #7
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	f003 f8ba 	bl	8004164 <sac_pipeline_produce>
}
 8000ff0:	b003      	add	sp, #12
 8000ff2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ff6:	bf00      	nop
 8000ff8:	2000248c 	.word	0x2000248c

08000ffc <audio_i2s_rx_complete_cb>:
 *  This receives audio packets from the codec. It needs to be
 *  executed every time a DMA transfer from the codec is completed
 *  in order to keep recording audio.
 */
static void audio_i2s_rx_complete_cb(void)
{
 8000ffc:	b500      	push	{lr}
    sac_error_t audio_err;

    sac_pipeline_produce(secondary_audio_pipeline, &audio_err);
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <audio_i2s_rx_complete_cb+0x18>)
{
 8001000:	b083      	sub	sp, #12
    sac_pipeline_produce(secondary_audio_pipeline, &audio_err);
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	f10d 0107 	add.w	r1, sp, #7
 8001008:	f003 f8ac 	bl	8004164 <sac_pipeline_produce>
}
 800100c:	b003      	add	sp, #12
 800100e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001012:	bf00      	nop
 8001014:	20002494 	.word	0x20002494

08001018 <conn_tx_success_callback>:
    iface_tx_conn_status();
 8001018:	f002 ba38 	b.w	800348c <iface_tx_conn_status>

0800101c <main>:
{
 800101c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    iface_swc_hal_init(&hal);
 8001020:	4e48      	ldr	r6, [pc, #288]	; (8001144 <main+0x128>)
    swc_cfg_t core_cfg = {
 8001022:	4f49      	ldr	r7, [pc, #292]	; (8001148 <main+0x12c>)
{
 8001024:	b0cd      	sub	sp, #308	; 0x134
    iface_board_init();
 8001026:	f002 f9b5 	bl	8003394 <iface_board_init>
    iface_swc_hal_init(&hal);
 800102a:	4630      	mov	r0, r6
 800102c:	f002 fb3a 	bl	80036a4 <iface_swc_hal_init>
    iface_swc_handlers_init();
 8001030:	f002 fb84 	bl	800373c <iface_swc_handlers_init>
    swc_init(core_cfg, &hal, err);
 8001034:	f10d 0346 	add.w	r3, sp, #70	; 0x46
 8001038:	9304      	str	r3, [sp, #16]
    swc_cfg_t core_cfg = {
 800103a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800103c:	ac2b      	add	r4, sp, #172	; 0xac
    swc_init(core_cfg, &hal, err);
 800103e:	9603      	str	r6, [sp, #12]
 8001040:	4625      	mov	r5, r4
    swc_cfg_t core_cfg = {
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8001048:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    swc_init(core_cfg, &hal, err);
 800104c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001050:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001054:	f003 fa44 	bl	80044e0 <swc_init>
    if (*err != SWC_ERR_NONE) {
 8001058:	f89d 4046 	ldrb.w	r4, [sp, #70]	; 0x46
 800105c:	2c00      	cmp	r4, #0
 800105e:	f000 809b 	beq.w	8001198 <main+0x17c>
 8001062:	f10d 0b94 	add.w	fp, sp, #148	; 0x94
 8001066:	af28      	add	r7, sp, #160	; 0xa0
 8001068:	ab32      	add	r3, sp, #200	; 0xc8
 800106a:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8001190 <main+0x174>
 800106e:	930e      	str	r3, [sp, #56]	; 0x38
    if (swc_err != SWC_ERR_NONE) {
 8001070:	ab1f      	add	r3, sp, #124	; 0x7c
 8001072:	930d      	str	r3, [sp, #52]	; 0x34
 8001074:	ab3f      	add	r3, sp, #252	; 0xfc
 8001076:	4e35      	ldr	r6, [pc, #212]	; (800114c <main+0x130>)
 8001078:	930c      	str	r3, [sp, #48]	; 0x30
 800107a:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
 800107e:	b104      	cbz	r4, 8001082 <main+0x66>
        while (1);
 8001080:	e7fe      	b.n	8001080 <main+0x64>
    iface_audio_swc_endpoint_init(&swc_producer_iface, &swc_consumer_iface);
 8001082:	4629      	mov	r1, r5
 8001084:	4638      	mov	r0, r7
 8001086:	f002 fac5 	bl	8003614 <iface_audio_swc_endpoint_init>
    iface_audio_max98091_endpoint_init(&max98091_producer_iface, &max98091_consumer_iface);
 800108a:	4659      	mov	r1, fp
 800108c:	4650      	mov	r0, sl
 800108e:	f002 fadb 	bl	8003648 <iface_audio_max98091_endpoint_init>
    iface_audio_critical_section_init(&queue_critical);
 8001092:	ab12      	add	r3, sp, #72	; 0x48
 8001094:	4618      	mov	r0, r3
 8001096:	f002 fafb 	bl	8003690 <iface_audio_critical_section_init>
    iface->init = audio_volume_init;
 800109a:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <main+0x134>)
 800109c:	923f      	str	r2, [sp, #252]	; 0xfc
    iface->deinit = audio_volume_deinit;
 800109e:	4a2d      	ldr	r2, [pc, #180]	; (8001154 <main+0x138>)
 80010a0:	9240      	str	r2, [sp, #256]	; 0x100
    iface->ctrl = audio_volume_ctrl;
 80010a2:	4a2d      	ldr	r2, [pc, #180]	; (8001158 <main+0x13c>)
 80010a4:	9241      	str	r2, [sp, #260]	; 0x104
    iface->process = audio_volume_process;
 80010a6:	4a2d      	ldr	r2, [pc, #180]	; (800115c <main+0x140>)
 80010a8:	9242      	str	r2, [sp, #264]	; 0x108
    iface->init = audio_src_cmsis_init;
 80010aa:	4a2d      	ldr	r2, [pc, #180]	; (8001160 <main+0x144>)
 80010ac:	9232      	str	r2, [sp, #200]	; 0xc8
    iface->deinit = audio_src_cmsis_deinit;
 80010ae:	4a2d      	ldr	r2, [pc, #180]	; (8001164 <main+0x148>)
 80010b0:	9233      	str	r2, [sp, #204]	; 0xcc
    iface->ctrl = audio_src_cmsis_ctrl;
 80010b2:	4a2d      	ldr	r2, [pc, #180]	; (8001168 <main+0x14c>)
    iface_set_sai_complete_callback(audio_i2s_tx_complete_cb, audio_i2s_rx_complete_cb);
 80010b4:	492d      	ldr	r1, [pc, #180]	; (800116c <main+0x150>)
 80010b6:	482e      	ldr	r0, [pc, #184]	; (8001170 <main+0x154>)
    swc_producer_instance.connection = rx_conn;
 80010b8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8001194 <main+0x178>
    iface->ctrl = audio_src_cmsis_ctrl;
 80010bc:	9234      	str	r2, [sp, #208]	; 0xd0
    iface->process = audio_src_cmsis_process;
 80010be:	4a2d      	ldr	r2, [pc, #180]	; (8001174 <main+0x158>)
 80010c0:	9235      	str	r2, [sp, #212]	; 0xd4
    iface->gate = NULL;
 80010c2:	9443      	str	r4, [sp, #268]	; 0x10c
    iface->gate = NULL;
 80010c4:	9436      	str	r4, [sp, #216]	; 0xd8
    iface_set_sai_complete_callback(audio_i2s_tx_complete_cb, audio_i2s_rx_complete_cb);
 80010c6:	f002 f99f 	bl	8003408 <iface_set_sai_complete_callback>
    swc_producer_instance.connection = rx_conn;
 80010ca:	6832      	ldr	r2, [r6, #0]
    swc_consumer_instance.connection = tx_conn;
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <main+0x15c>)
    swc_producer_instance.connection = rx_conn;
 80010ce:	f8c8 2000 	str.w	r2, [r8]
    swc_consumer_instance.connection = tx_conn;
 80010d2:	f8d9 2000 	ldr.w	r2, [r9]
 80010d6:	601a      	str	r2, [r3, #0]
    sac_init(queue_critical, audio_memory_pool, SAC_MEM_POOL_SIZE);
 80010d8:	ab12      	add	r3, sp, #72	; 0x48
 80010da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010de:	4a27      	ldr	r2, [pc, #156]	; (800117c <main+0x160>)
    swc_producer = sac_endpoint_init((void *)&swc_producer_instance, "SWC EP (Producer)",
 80010e0:	4e27      	ldr	r6, [pc, #156]	; (8001180 <main+0x164>)
    sac_init(queue_critical, audio_memory_pool, SAC_MEM_POOL_SIZE);
 80010e2:	f641 43e8 	movw	r3, #7400	; 0x1ce8
 80010e6:	f002 fed7 	bl	8003e98 <sac_init>
    audio_endpoint_cfg_t swc_producer_cfg = {
 80010ea:	f04f 0301 	mov.w	r3, #1
 80010ee:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
 80010f2:	f04f 0354 	mov.w	r3, #84	; 0x54
 80010f6:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 80010fa:	f241 0902 	movw	r9, #4098	; 0x1002
 80010fe:	f04f 0303 	mov.w	r3, #3
 8001102:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
 8001106:	f8ad 9052 	strh.w	r9, [sp, #82]	; 0x52
    swc_producer = sac_endpoint_init((void *)&swc_producer_instance, "SWC EP (Producer)",
 800110a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800110e:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8001112:	9203      	str	r2, [sp, #12]
 8001114:	aa01      	add	r2, sp, #4
 8001116:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001118:	920f      	str	r2, [sp, #60]	; 0x3c
 800111a:	e882 0003 	stmia.w	r2, {r0, r1}
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	e897 000c 	ldmia.w	r7, {r2, r3}
 8001124:	4917      	ldr	r1, [pc, #92]	; (8001184 <main+0x168>)
 8001126:	4640      	mov	r0, r8
 8001128:	f002 fef4 	bl	8003f14 <sac_endpoint_init>
    if (*audio_err != SAC_ERR_NONE) {
 800112c:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    swc_producer = sac_endpoint_init((void *)&swc_producer_instance, "SWC EP (Producer)",
 8001130:	6030      	str	r0, [r6, #0]
    if (*audio_err != SAC_ERR_NONE) {
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8158 	beq.w	80013e8 <main+0x3cc>
 8001138:	4e13      	ldr	r6, [pc, #76]	; (8001188 <main+0x16c>)
 800113a:	4c14      	ldr	r4, [pc, #80]	; (800118c <main+0x170>)
    if (audio_err != SAC_ERR_NONE) {
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 8249 	beq.w	80015d4 <main+0x5b8>
        while (1);
 8001142:	e7fe      	b.n	8001142 <main+0x126>
 8001144:	2000243c 	.word	0x2000243c
 8001148:	080142c8 	.word	0x080142c8
 800114c:	20002490 	.word	0x20002490
 8001150:	08003b29 	.word	0x08003b29
 8001154:	08003b49 	.word	0x08003b49
 8001158:	08003b51 	.word	0x08003b51
 800115c:	08003bf9 	.word	0x08003bf9
 8001160:	08003a7d 	.word	0x08003a7d
 8001164:	08003ae5 	.word	0x08003ae5
 8001168:	08003ae9 	.word	0x08003ae9
 800116c:	08000ffd 	.word	0x08000ffd
 8001170:	08000fa1 	.word	0x08000fa1
 8001174:	08003aed 	.word	0x08003aed
 8001178:	20002498 	.word	0x20002498
 800117c:	2000073c 	.word	0x2000073c
 8001180:	20004bac 	.word	0x20004bac
 8001184:	080143c8 	.word	0x080143c8
 8001188:	2000248c 	.word	0x2000248c
 800118c:	20002494 	.word	0x20002494
 8001190:	20004bb4 	.word	0x20004bb4
 8001194:	20004bb0 	.word	0x20004bb0
    swc_node_cfg_t node_cfg = {
 8001198:	f640 33cd 	movw	r3, #3021	; 0xbcd
 800119c:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
 80011a0:	f240 2301 	movw	r3, #513	; 0x201
 80011a4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 80011a8:	f04f 0901 	mov.w	r9, #1
 80011ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011b0:	f88d 9094 	strb.w	r9, [sp, #148]	; 0x94
 80011b4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    node = swc_node_init(node_cfg, err);
 80011b8:	f10d 0b94 	add.w	fp, sp, #148	; 0x94
 80011bc:	e89b 0003 	ldmia.w	fp, {r0, r1}
 80011c0:	f10d 0246 	add.w	r2, sp, #70	; 0x46
 80011c4:	f003 fa18 	bl	80045f8 <swc_node_init>
 80011c8:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80013e0 <main+0x3c4>
    if (*err != SWC_ERR_NONE) {
 80011cc:	f89d 4046 	ldrb.w	r4, [sp, #70]	; 0x46
    node = swc_node_init(node_cfg, err);
 80011d0:	f8c8 0000 	str.w	r0, [r8]
    if (*err != SWC_ERR_NONE) {
 80011d4:	2c00      	cmp	r4, #0
 80011d6:	f47f af46 	bne.w	8001066 <main+0x4a>
    swc_node_add_radio(node, radio_cfg, &hal, err);;
 80011da:	f10d 0346 	add.w	r3, sp, #70	; 0x46
 80011de:	9300      	str	r3, [sp, #0]
    swc_radio_cfg_t radio_cfg = {
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	9328      	str	r3, [sp, #160]	; 0xa0
 80011e4:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    swc_node_add_radio(node, radio_cfg, &hal, err);;
 80011e8:	af28      	add	r7, sp, #160	; 0xa0
 80011ea:	e897 0006 	ldmia.w	r7, {r1, r2}
 80011ee:	4633      	mov	r3, r6
 80011f0:	f003 fa70 	bl	80046d4 <swc_node_add_radio>
    if (*err != SWC_ERR_NONE) {
 80011f4:	f89d 4046 	ldrb.w	r4, [sp, #70]	; 0x46
 80011f8:	2c00      	cmp	r4, #0
 80011fa:	f47f af35 	bne.w	8001068 <main+0x4c>
    swc_connection_cfg_t tx_conn_cfg = {
 80011fe:	4b6e      	ldr	r3, [pc, #440]	; (80013b8 <main+0x39c>)
 8001200:	9332      	str	r3, [sp, #200]	; 0xc8
 8001202:	4621      	mov	r1, r4
 8001204:	2230      	movs	r2, #48	; 0x30
 8001206:	a833      	add	r0, sp, #204	; 0xcc
 8001208:	f010 fdd8 	bl	8011dbc <memset>
    tx_conn = swc_connection_init(node, tx_conn_cfg, &hal, err);
 800120c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
 8001210:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
    swc_connection_cfg_t tx_conn_cfg = {
 8001214:	4b69      	ldr	r3, [pc, #420]	; (80013bc <main+0x3a0>)
 8001216:	9333      	str	r3, [sp, #204]	; 0xcc
 8001218:	f103 7331 	add.w	r3, r3, #46399488	; 0x2c40000
 800121c:	f603 3302 	addw	r3, r3, #2818	; 0xb02
 8001220:	9335      	str	r3, [sp, #212]	; 0xd4
 8001222:	4b67      	ldr	r3, [pc, #412]	; (80013c0 <main+0x3a4>)
 8001224:	9336      	str	r3, [sp, #216]	; 0xd8
 8001226:	f240 1301 	movw	r3, #257	; 0x101
 800122a:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
 800122e:	f8cd 90dc 	str.w	r9, [sp, #220]	; 0xdc
 8001232:	f88d 90e2 	strb.w	r9, [sp, #226]	; 0xe2
    tx_conn = swc_connection_init(node, tx_conn_cfg, &hal, err);
 8001236:	ab32      	add	r3, sp, #200	; 0xc8
 8001238:	f10d 0cd4 	add.w	ip, sp, #212	; 0xd4
 800123c:	930e      	str	r3, [sp, #56]	; 0x38
 800123e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001242:	466c      	mov	r4, sp
    swc_connection_cfg_t tx_conn_cfg = {
 8001244:	f04f 0a02 	mov.w	sl, #2
 8001248:	f8cd a0d0 	str.w	sl, [sp, #208]	; 0xd0
    tx_conn = swc_connection_init(node, tx_conn_cfg, &hal, err);
 800124c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001254:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001258:	e884 0003 	stmia.w	r4, {r0, r1}
 800125c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800125e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80013e4 <main+0x3c8>
 8001262:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001264:	f8d8 0000 	ldr.w	r0, [r8]
 8001268:	f003 fa88 	bl	800477c <swc_connection_init>
    if (*err != SWC_ERR_NONE) {
 800126c:	f89d 4046 	ldrb.w	r4, [sp, #70]	; 0x46
    tx_conn = swc_connection_init(node, tx_conn_cfg, &hal, err);
 8001270:	f8c9 0000 	str.w	r0, [r9]
    if (*err != SWC_ERR_NONE) {
 8001274:	2c00      	cmp	r4, #0
 8001276:	f47f aefb 	bne.w	8001070 <main+0x54>
    swc_channel_cfg_t tx_channel_cfg = {
 800127a:	2305      	movs	r3, #5
 800127c:	941f      	str	r4, [sp, #124]	; 0x7c
 800127e:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
 8001282:	2303      	movs	r3, #3
 8001284:	4c4f      	ldr	r4, [pc, #316]	; (80013c4 <main+0x3a8>)
 8001286:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    for (uint8_t i = 0; i < ARRAY_SIZE(channel_sequence); i++) {
 800128a:	ab1f      	add	r3, sp, #124	; 0x7c
    swc_channel_cfg_t tx_channel_cfg = {
 800128c:	f88d a07d 	strb.w	sl, [sp, #125]	; 0x7d
 8001290:	940f      	str	r4, [sp, #60]	; 0x3c
 8001292:	f04f 0a04 	mov.w	sl, #4
 8001296:	930d      	str	r3, [sp, #52]	; 0x34
        tx_channel_cfg.frequency = channel_frequency[i];
 8001298:	f854 3b04 	ldr.w	r3, [r4], #4
 800129c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
        swc_connection_add_channel(tx_conn, node, tx_channel_cfg, err);
 80012a0:	f10d 0346 	add.w	r3, sp, #70	; 0x46
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012a8:	f8d8 1000 	ldr.w	r1, [r8]
 80012ac:	f8d9 0000 	ldr.w	r0, [r9]
 80012b0:	cb0c      	ldmia	r3, {r2, r3}
 80012b2:	f003 fbab 	bl	8004a0c <swc_connection_add_channel>
        if (*err != SWC_ERR_NONE) {
 80012b6:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    for (uint8_t i = 0; i < ARRAY_SIZE(channel_sequence); i++) {
 80012ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
        if (*err != SWC_ERR_NONE) {
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 81b3 	bne.w	800162a <main+0x60e>
    for (uint8_t i = 0; i < ARRAY_SIZE(channel_sequence); i++) {
 80012c4:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 80012c8:	d1e6      	bne.n	8001298 <main+0x27c>
    swc_connection_set_tx_success_callback(tx_conn, conn_tx_success_callback);
 80012ca:	493f      	ldr	r1, [pc, #252]	; (80013c8 <main+0x3ac>)
 80012cc:	f8d9 0000 	ldr.w	r0, [r9]
 80012d0:	f003 fc02 	bl	8004ad8 <swc_connection_set_tx_success_callback>
    swc_connection_cfg_t rx_conn_cfg = {
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <main+0x3b0>)
 80012d6:	933f      	str	r3, [sp, #252]	; 0xfc
 80012d8:	2230      	movs	r2, #48	; 0x30
 80012da:	4651      	mov	r1, sl
 80012dc:	a840      	add	r0, sp, #256	; 0x100
 80012de:	f010 fd6d 	bl	8011dbc <memset>
    rx_conn = swc_connection_init(node, rx_conn_cfg, &hal, err);
 80012e2:	f10d 0346 	add.w	r3, sp, #70	; 0x46
 80012e6:	930b      	str	r3, [sp, #44]	; 0x2c
    swc_connection_cfg_t rx_conn_cfg = {
 80012e8:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <main+0x3b4>)
 80012ea:	9340      	str	r3, [sp, #256]	; 0x100
 80012ec:	f103 732b 	add.w	r3, r3, #44826624	; 0x2ac0000
 80012f0:	f603 2303 	addw	r3, r3, #2563	; 0xa03
 80012f4:	9342      	str	r3, [sp, #264]	; 0x108
 80012f6:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <main+0x3b8>)
 80012f8:	9343      	str	r3, [sp, #268]	; 0x10c
 80012fa:	2304      	movs	r3, #4
 80012fc:	9344      	str	r3, [sp, #272]	; 0x110
 80012fe:	f240 1301 	movw	r3, #257	; 0x101
 8001302:	f8ad 3114 	strh.w	r3, [sp, #276]	; 0x114
 8001306:	f04f 0301 	mov.w	r3, #1
 800130a:	f88d 3116 	strb.w	r3, [sp, #278]	; 0x116
 800130e:	2302      	movs	r3, #2
    rx_conn = swc_connection_init(node, rx_conn_cfg, &hal, err);
 8001310:	960a      	str	r6, [sp, #40]	; 0x28
    swc_connection_cfg_t rx_conn_cfg = {
 8001312:	9341      	str	r3, [sp, #260]	; 0x104
    rx_conn = swc_connection_init(node, rx_conn_cfg, &hal, err);
 8001314:	f50d 7c84 	add.w	ip, sp, #264	; 0x108
 8001318:	ab3f      	add	r3, sp, #252	; 0xfc
 800131a:	930c      	str	r3, [sp, #48]	; 0x30
 800131c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001320:	466c      	mov	r4, sp
 8001322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001324:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800132e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001334:	4e28      	ldr	r6, [pc, #160]	; (80013d8 <main+0x3bc>)
 8001336:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001338:	f8d8 0000 	ldr.w	r0, [r8]
 800133c:	f003 fa1e 	bl	800477c <swc_connection_init>
    if (*err != SWC_ERR_NONE) {
 8001340:	f89d 4046 	ldrb.w	r4, [sp, #70]	; 0x46
    rx_conn = swc_connection_init(node, rx_conn_cfg, &hal, err);
 8001344:	6030      	str	r0, [r6, #0]
    if (*err != SWC_ERR_NONE) {
 8001346:	2c00      	cmp	r4, #0
 8001348:	f040 8164 	bne.w	8001614 <main+0x5f8>
    swc_channel_cfg_t rx_channel_cfg = {
 800134c:	f04f 0301 	mov.w	r3, #1
 8001350:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8001354:	2303      	movs	r3, #3
 8001356:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 800135a:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
 800135e:	2306      	movs	r3, #6
 8001360:	2404      	movs	r4, #4
 8001362:	f88d 308a 	strb.w	r3, [sp, #138]	; 0x8a
 8001366:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
        rx_channel_cfg.frequency = channel_frequency[i];
 800136a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800136c:	f852 3b04 	ldr.w	r3, [r2], #4
 8001370:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
        swc_connection_add_channel(rx_conn, node, rx_channel_cfg, err);
 8001374:	f10d 0346 	add.w	r3, sp, #70	; 0x46
 8001378:	9300      	str	r3, [sp, #0]
        rx_channel_cfg.frequency = channel_frequency[i];
 800137a:	920f      	str	r2, [sp, #60]	; 0x3c
        swc_connection_add_channel(rx_conn, node, rx_channel_cfg, err);
 800137c:	f8d8 1000 	ldr.w	r1, [r8]
 8001380:	6830      	ldr	r0, [r6, #0]
 8001382:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8001386:	f003 fb41 	bl	8004a0c <swc_connection_add_channel>
        if (*err != SWC_ERR_NONE) {
 800138a:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    for (uint8_t i = 0; i < ARRAY_SIZE(channel_sequence); i++) {
 800138e:	3c01      	subs	r4, #1
        if (*err != SWC_ERR_NONE) {
 8001390:	2b00      	cmp	r3, #0
 8001392:	f040 8154 	bne.w	800163e <main+0x622>
    for (uint8_t i = 0; i < ARRAY_SIZE(channel_sequence); i++) {
 8001396:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800139a:	d1e6      	bne.n	800136a <main+0x34e>
    swc_connection_set_rx_success_callback(rx_conn, conn_rx_success_callback);
 800139c:	490f      	ldr	r1, [pc, #60]	; (80013dc <main+0x3c0>)
 800139e:	6830      	ldr	r0, [r6, #0]
 80013a0:	f003 fba0 	bl	8004ae4 <swc_connection_set_rx_success_callback>
    swc_setup(node);
 80013a4:	f8d8 0000 	ldr.w	r0, [r8]
 80013a8:	f003 fbde 	bl	8004b68 <swc_setup>
 80013ac:	f89d 4046 	ldrb.w	r4, [sp, #70]	; 0x46
    if (swc_err != SWC_ERR_NONE) {
 80013b0:	2c00      	cmp	r4, #0
 80013b2:	f47f ae65 	bne.w	8001080 <main+0x64>
 80013b6:	e664      	b.n	8001082 <main+0x66>
 80013b8:	080143a8 	.word	0x080143a8
 80013bc:	003e0102 	.word	0x003e0102
 80013c0:	20000034 	.word	0x20000034
 80013c4:	0801446c 	.word	0x0801446c
 80013c8:	08001019 	.word	0x08001019
 80013cc:	080143b8 	.word	0x080143b8
 80013d0:	00560201 	.word	0x00560201
 80013d4:	20000010 	.word	0x20000010
 80013d8:	20002490 	.word	0x20002490
 80013dc:	08000fdd 	.word	0x08000fdd
 80013e0:	20002488 	.word	0x20002488
 80013e4:	20004bb4 	.word	0x20004bb4
    volume_instance.bit_depth = AUDIO_16BITS;
 80013e8:	4f97      	ldr	r7, [pc, #604]	; (8001648 <main+0x62c>)
    volume_processing = sac_processing_stage_init((void *)&volume_instance, "Digital Volume Control", volume_iface, audio_err);
 80013ea:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 800168c <main+0x670>
 80013ee:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 80013f2:	9303      	str	r3, [sp, #12]
    volume_instance.bit_depth = AUDIO_16BITS;
 80013f4:	f246 4210 	movw	r2, #25616	; 0x6410
    volume_processing = sac_processing_stage_init((void *)&volume_instance, "Digital Volume Control", volume_iface, audio_err);
 80013f8:	ab41      	add	r3, sp, #260	; 0x104
    volume_instance.bit_depth = AUDIO_16BITS;
 80013fa:	803a      	strh	r2, [r7, #0]
    volume_processing = sac_processing_stage_init((void *)&volume_instance, "Digital Volume Control", volume_iface, audio_err);
 80013fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001400:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001406:	4991      	ldr	r1, [pc, #580]	; (800164c <main+0x630>)
 8001408:	cb0c      	ldmia	r3, {r2, r3}
 800140a:	4638      	mov	r0, r7
 800140c:	f002 fdc2 	bl	8003f94 <sac_processing_stage_init>
    if (*audio_err != SAC_ERR_NONE) {
 8001410:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    volume_processing = sac_processing_stage_init((void *)&volume_instance, "Digital Volume Control", volume_iface, audio_err);
 8001414:	f8c8 0000 	str.w	r0, [r8]
    if (*audio_err != SAC_ERR_NONE) {
 8001418:	2b00      	cmp	r3, #0
 800141a:	f47f ae8d 	bne.w	8001138 <main+0x11c>
    audio_endpoint_cfg_t max98091_consumer_cfg = {
 800141e:	f04f 0354 	mov.w	r3, #84	; 0x54
 8001422:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    max98091_consumer = sac_endpoint_init(NULL, "MAX98091 EP (Consumer)",
 8001426:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 800142a:	9303      	str	r3, [sp, #12]
    audio_endpoint_cfg_t max98091_consumer_cfg = {
 800142c:	f44f 7780 	mov.w	r7, #256	; 0x100
 8001430:	2314      	movs	r3, #20
 8001432:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 8001436:	f8ad 905a 	strh.w	r9, [sp, #90]	; 0x5a
 800143a:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
    max98091_consumer = sac_endpoint_init(NULL, "MAX98091 EP (Consumer)",
 800143e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8001442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001444:	e883 0003 	stmia.w	r3, {r0, r1}
 8001448:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	e89b 000c 	ldmia.w	fp, {r2, r3}
 8001450:	497f      	ldr	r1, [pc, #508]	; (8001650 <main+0x634>)
 8001452:	4620      	mov	r0, r4
 8001454:	f002 fd5e 	bl	8003f14 <sac_endpoint_init>
    if (*audio_err != SAC_ERR_NONE) {
 8001458:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 800145c:	2b00      	cmp	r3, #0
 800145e:	f47f ae6b 	bne.w	8001138 <main+0x11c>
    sac_pipeline_cfg_t primary_pipeline_cfg = {
 8001462:	f04f 0301 	mov.w	r3, #1
 8001466:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
    primary_audio_pipeline = sac_pipeline_init("SWC -> Codec", swc_producer,
 800146a:	9001      	str	r0, [sp, #4]
    sac_pipeline_cfg_t primary_pipeline_cfg = {
 800146c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    primary_audio_pipeline = sac_pipeline_init("SWC -> Codec", swc_producer,
 8001470:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 8001474:	6831      	ldr	r1, [r6, #0]
 8001476:	9302      	str	r3, [sp, #8]
    sac_pipeline_cfg_t primary_pipeline_cfg = {
 8001478:	f44f 53b4 	mov.w	r3, #5760	; 0x1680
 800147c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
 8001480:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001484:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    primary_audio_pipeline = sac_pipeline_init("SWC -> Codec", swc_producer,
 8001488:	f8ad 4000 	strh.w	r4, [sp]
    sac_pipeline_cfg_t primary_pipeline_cfg = {
 800148c:	ab1c      	add	r3, sp, #112	; 0x70
    primary_audio_pipeline = sac_pipeline_init("SWC -> Codec", swc_producer,
 800148e:	cb0c      	ldmia	r3, {r2, r3}
 8001490:	4870      	ldr	r0, [pc, #448]	; (8001654 <main+0x638>)
    sac_pipeline_cfg_t primary_pipeline_cfg = {
 8001492:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    primary_audio_pipeline = sac_pipeline_init("SWC -> Codec", swc_producer,
 8001496:	f002 fd15 	bl	8003ec4 <sac_pipeline_init>
 800149a:	4e6f      	ldr	r6, [pc, #444]	; (8001658 <main+0x63c>)
    if (*audio_err != SAC_ERR_NONE) {
 800149c:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    primary_audio_pipeline = sac_pipeline_init("SWC -> Codec", swc_producer,
 80014a0:	6030      	str	r0, [r6, #0]
    if (*audio_err != SAC_ERR_NONE) {
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f040 80bc 	bne.w	8001620 <main+0x604>
    sac_pipeline_add_processing(primary_audio_pipeline, volume_processing);
 80014a8:	f8d8 1000 	ldr.w	r1, [r8]
 80014ac:	f002 fd98 	bl	8003fe0 <sac_pipeline_add_processing>
    sac_pipeline_setup(primary_audio_pipeline, audio_err);
 80014b0:	6830      	ldr	r0, [r6, #0]
 80014b2:	f10d 0147 	add.w	r1, sp, #71	; 0x47
 80014b6:	f002 fd9d 	bl	8003ff4 <sac_pipeline_setup>
    if (*audio_err != SAC_ERR_NONE) {
 80014ba:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f040 80ae 	bne.w	8001620 <main+0x604>
    audio_endpoint_cfg_t max98091_producer_cfg = {
 80014c4:	f04f 0303 	mov.w	r3, #3
 80014c8:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
    max98091_producer = sac_endpoint_init(NULL, "MAX98091 EP (Producer)",
 80014cc:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 80014d0:	9303      	str	r3, [sp, #12]
    audio_endpoint_cfg_t max98091_producer_cfg = {
 80014d2:	f241 0801 	movw	r8, #4097	; 0x1001
 80014d6:	23b4      	movs	r3, #180	; 0xb4
 80014d8:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
 80014dc:	f8ad 7060 	strh.w	r7, [sp, #96]	; 0x60
 80014e0:	f8ad 8062 	strh.w	r8, [sp, #98]	; 0x62
    max98091_producer = sac_endpoint_init(NULL, "MAX98091 EP (Producer)",
 80014e4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80014e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80014ea:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8001690 <main+0x674>
 80014ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80014f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80014fa:	4958      	ldr	r1, [pc, #352]	; (800165c <main+0x640>)
 80014fc:	4620      	mov	r0, r4
 80014fe:	f002 fd09 	bl	8003f14 <sac_endpoint_init>
    if (*audio_err != SAC_ERR_NONE) {
 8001502:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    max98091_producer = sac_endpoint_init(NULL, "MAX98091 EP (Producer)",
 8001506:	f8c9 0000 	str.w	r0, [r9]
    if (*audio_err != SAC_ERR_NONE) {
 800150a:	2b00      	cmp	r3, #0
 800150c:	f040 8088 	bne.w	8001620 <main+0x604>
    downsampling_processing = sac_processing_stage_init((void *)&downsampling_instance, "Audio Downsampling", downsampling_iface, audio_err);
 8001510:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 8001514:	9303      	str	r3, [sp, #12]
    downsampling_instance.cfg.ratio = AUDIO_SRC_THREE;
 8001516:	4b52      	ldr	r3, [pc, #328]	; (8001660 <main+0x644>)
 8001518:	4952      	ldr	r1, [pc, #328]	; (8001664 <main+0x648>)
 800151a:	6019      	str	r1, [r3, #0]
    downsampling_processing = sac_processing_stage_init((void *)&downsampling_instance, "Audio Downsampling", downsampling_iface, audio_err);
 800151c:	aa34      	add	r2, sp, #208	; 0xd0
    downsampling_instance.cfg.bit_depth = max98091_producer_cfg.bit_depth;
 800151e:	2110      	movs	r1, #16
 8001520:	7119      	strb	r1, [r3, #4]
    downsampling_processing = sac_processing_stage_init((void *)&downsampling_instance, "Audio Downsampling", downsampling_iface, audio_err);
 8001522:	ca07      	ldmia	r2, {r0, r1, r2}
 8001524:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001528:	4618      	mov	r0, r3
 800152a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800152c:	494e      	ldr	r1, [pc, #312]	; (8001668 <main+0x64c>)
 800152e:	4f4f      	ldr	r7, [pc, #316]	; (800166c <main+0x650>)
 8001530:	cb0c      	ldmia	r3, {r2, r3}
 8001532:	f002 fd2f 	bl	8003f94 <sac_processing_stage_init>
    if (*audio_err != SAC_ERR_NONE) {
 8001536:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    downsampling_processing = sac_processing_stage_init((void *)&downsampling_instance, "Audio Downsampling", downsampling_iface, audio_err);
 800153a:	6038      	str	r0, [r7, #0]
    if (*audio_err != SAC_ERR_NONE) {
 800153c:	2b00      	cmp	r3, #0
 800153e:	d16f      	bne.n	8001620 <main+0x604>
    audio_endpoint_cfg_t swc_consumer_cfg = {
 8001540:	f04f 0301 	mov.w	r3, #1
 8001544:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    swc_consumer = sac_endpoint_init((void *)&swc_consumer_instance, "SWC EP (Consumer)",
 8001548:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 800154c:	9303      	str	r3, [sp, #12]
    audio_endpoint_cfg_t swc_consumer_cfg = {
 800154e:	233c      	movs	r3, #60	; 0x3c
 8001550:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8001554:	2309      	movs	r3, #9
 8001556:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
 800155a:	f8ad 806a 	strh.w	r8, [sp, #106]	; 0x6a
    swc_consumer = sac_endpoint_init((void *)&swc_consumer_instance, "SWC EP (Consumer)",
 800155e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8001562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001564:	e883 0003 	stmia.w	r3, {r0, r1}
 8001568:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8001570:	483f      	ldr	r0, [pc, #252]	; (8001670 <main+0x654>)
 8001572:	4940      	ldr	r1, [pc, #256]	; (8001674 <main+0x658>)
 8001574:	f002 fcce 	bl	8003f14 <sac_endpoint_init>
    if (*audio_err != SAC_ERR_NONE) {
 8001578:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 800157c:	2b00      	cmp	r3, #0
 800157e:	d14f      	bne.n	8001620 <main+0x604>
    sac_pipeline_cfg_t secondary_pipeline_cfg = {
 8001580:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    secondary_audio_pipeline = sac_pipeline_init("Codec -> SWC", max98091_producer,
 8001582:	9001      	str	r0, [sp, #4]
    sac_pipeline_cfg_t secondary_pipeline_cfg = {
 8001584:	f04f 0301 	mov.w	r3, #1
 8001588:	941f      	str	r4, [sp, #124]	; 0x7c
 800158a:	6054      	str	r4, [r2, #4]
 800158c:	8114      	strh	r4, [r2, #8]
 800158e:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
    secondary_audio_pipeline = sac_pipeline_init("Codec -> SWC", max98091_producer,
 8001592:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 8001596:	f8d9 1000 	ldr.w	r1, [r9]
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 80015a0:	f8ad 3000 	strh.w	r3, [sp]
 80015a4:	ca0c      	ldmia	r2, {r2, r3}
 80015a6:	4834      	ldr	r0, [pc, #208]	; (8001678 <main+0x65c>)
 80015a8:	4c34      	ldr	r4, [pc, #208]	; (800167c <main+0x660>)
 80015aa:	f002 fc8b 	bl	8003ec4 <sac_pipeline_init>
    if (*audio_err != SAC_ERR_NONE) {
 80015ae:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    secondary_audio_pipeline = sac_pipeline_init("Codec -> SWC", max98091_producer,
 80015b2:	6020      	str	r0, [r4, #0]
    if (*audio_err != SAC_ERR_NONE) {
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f47f adc1 	bne.w	800113c <main+0x120>
    sac_pipeline_add_processing(secondary_audio_pipeline, downsampling_processing);
 80015ba:	6839      	ldr	r1, [r7, #0]
 80015bc:	f002 fd10 	bl	8003fe0 <sac_pipeline_add_processing>
    sac_pipeline_setup(secondary_audio_pipeline, audio_err);
 80015c0:	6820      	ldr	r0, [r4, #0]
 80015c2:	f10d 0147 	add.w	r1, sp, #71	; 0x47
 80015c6:	f002 fd15 	bl	8003ff4 <sac_pipeline_setup>
        return;
 80015ca:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    if (audio_err != SAC_ERR_NONE) {
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f47f adb7 	bne.w	8001142 <main+0x126>
    iface_audio_node_init();
 80015d4:	f001 fef2 	bl	80033bc <iface_audio_node_init>
    sac_pipeline_start(primary_audio_pipeline);
 80015d8:	6830      	ldr	r0, [r6, #0]
        iface_button_handling(volume_up, volume_down);
 80015da:	4f29      	ldr	r7, [pc, #164]	; (8001680 <main+0x664>)
 80015dc:	4d29      	ldr	r5, [pc, #164]	; (8001684 <main+0x668>)
    sac_pipeline_start(primary_audio_pipeline);
 80015de:	f002 fe29 	bl	8004234 <sac_pipeline_start>
    sac_pipeline_start(secondary_audio_pipeline);
 80015e2:	6820      	ldr	r0, [r4, #0]
 80015e4:	f002 fe26 	bl	8004234 <sac_pipeline_start>
    swc_connect();
 80015e8:	f003 facc 	bl	8004b84 <swc_connect>
        sac_pipeline_process(primary_audio_pipeline, &audio_err);
 80015ec:	6830      	ldr	r0, [r6, #0]
 80015ee:	f10d 0147 	add.w	r1, sp, #71	; 0x47
 80015f2:	f002 fe2f 	bl	8004254 <sac_pipeline_process>
        sac_pipeline_process(secondary_audio_pipeline, &audio_err);
 80015f6:	6820      	ldr	r0, [r4, #0]
 80015f8:	f10d 0147 	add.w	r1, sp, #71	; 0x47
 80015fc:	f002 fe2a 	bl	8004254 <sac_pipeline_process>
        sac_pipeline_consume(secondary_audio_pipeline, &audio_err);
 8001600:	6820      	ldr	r0, [r4, #0]
 8001602:	f10d 0147 	add.w	r1, sp, #71	; 0x47
 8001606:	f002 fdd7 	bl	80041b8 <sac_pipeline_consume>
        iface_button_handling(volume_up, volume_down);
 800160a:	4639      	mov	r1, r7
 800160c:	4628      	mov	r0, r5
 800160e:	f001 ff05 	bl	800341c <iface_button_handling>
    while (1) {
 8001612:	e7eb      	b.n	80015ec <main+0x5d0>
 8001614:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
    if (swc_err != SWC_ERR_NONE) {
 8001618:	2c00      	cmp	r4, #0
 800161a:	f47f ad31 	bne.w	8001080 <main+0x64>
 800161e:	e530      	b.n	8001082 <main+0x66>
 8001620:	4c16      	ldr	r4, [pc, #88]	; (800167c <main+0x660>)
    if (audio_err != SAC_ERR_NONE) {
 8001622:	2b00      	cmp	r3, #0
 8001624:	f47f ad8d 	bne.w	8001142 <main+0x126>
 8001628:	e7d4      	b.n	80015d4 <main+0x5b8>
 800162a:	461c      	mov	r4, r3
 800162c:	ab3f      	add	r3, sp, #252	; 0xfc
 800162e:	4e16      	ldr	r6, [pc, #88]	; (8001688 <main+0x66c>)
 8001630:	930c      	str	r3, [sp, #48]	; 0x30
 8001632:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
    if (swc_err != SWC_ERR_NONE) {
 8001636:	2c00      	cmp	r4, #0
 8001638:	f47f ad22 	bne.w	8001080 <main+0x64>
 800163c:	e521      	b.n	8001082 <main+0x66>
 800163e:	461c      	mov	r4, r3
 8001640:	2c00      	cmp	r4, #0
 8001642:	f47f ad1d 	bne.w	8001080 <main+0x64>
 8001646:	e51c      	b.n	8001082 <main+0x66>
 8001648:	20004bb8 	.word	0x20004bb8
 800164c:	080143dc 	.word	0x080143dc
 8001650:	080143f4 	.word	0x080143f4
 8001654:	0801440c 	.word	0x0801440c
 8001658:	2000248c 	.word	0x2000248c
 800165c:	0801441c 	.word	0x0801441c
 8001660:	20002424 	.word	0x20002424
 8001664:	00b40103 	.word	0x00b40103
 8001668:	08014434 	.word	0x08014434
 800166c:	20002438 	.word	0x20002438
 8001670:	20002498 	.word	0x20002498
 8001674:	08014448 	.word	0x08014448
 8001678:	0801445c 	.word	0x0801445c
 800167c:	20002494 	.word	0x20002494
 8001680:	08000fbd 	.word	0x08000fbd
 8001684:	08000fcd 	.word	0x08000fcd
 8001688:	20002490 	.word	0x20002490
 800168c:	20004bc4 	.word	0x20004bc4
 8001690:	20002484 	.word	0x20002484

08001694 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001696:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800169a:	490e      	ldr	r1, [pc, #56]	; (80016d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800169c:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <LoopForever+0xe>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b0:	4c0b      	ldr	r4, [pc, #44]	; (80016e0 <LoopForever+0x16>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016be:	f001 fb27 	bl	8002d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c2:	f010 fb27 	bl	8011d14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016c6:	f7ff fca9 	bl	800101c <main>

080016ca <LoopForever>:

LoopForever:
    b LoopForever
 80016ca:	e7fe      	b.n	80016ca <LoopForever>
  ldr   r0, =_estack
 80016cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	2000071c 	.word	0x2000071c
  ldr r2, =_sidata
 80016d8:	08014cf0 	.word	0x08014cf0
  ldr r2, =_sbss
 80016dc:	20000720 	.word	0x20000720
  ldr r4, =_ebss
 80016e0:	200061a0 	.word	0x200061a0

080016e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC1_2_IRQHandler>
	...

080016e8 <evk_init>:
static void init_dma1_clock(void);
static void init_dma2_clock(void);

/* PUBLIC FUNCTION ************************************************************/
void evk_init(void)
{
 80016e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/* CLOCK */
/** @brief Enable all GPIO's peripheral clock.
 */
static void init_all_gpio_clocks(void)
{
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4dbb      	ldr	r5, [pc, #748]	; (80019dc <evk_init+0x2f4>)
{
 80016ee:	b093      	sub	sp, #76	; 0x4c
    HAL_Init();
 80016f0:	f00b f8ce 	bl	800c890 <HAL_Init>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    evk_set_system_clock(CLK_169_98MHZ);
 80016f6:	48ba      	ldr	r0, [pc, #744]	; (80019e0 <evk_init+0x2f8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	64eb      	str	r3, [r5, #76]	; 0x4c
 80016fe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	9306      	str	r3, [sp, #24]
 8001706:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001708:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001710:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	9307      	str	r3, [sp, #28]
 8001718:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001722:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	9308      	str	r3, [sp, #32]
 800172a:	9b08      	ldr	r3, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001734:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	9309      	str	r3, [sp, #36]	; 0x24
 800173c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800173e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001746:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	930a      	str	r3, [sp, #40]	; 0x28
 800174e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001750:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001752:	f043 0320 	orr.w	r3, r3, #32
 8001756:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001758:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800175a:	f003 0320 	and.w	r3, r3, #32
 800175e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001762:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001768:	64eb      	str	r3, [r5, #76]	; 0x4c
 800176a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800176c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001770:	930c      	str	r3, [sp, #48]	; 0x30
 8001772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 *  @li Radio Module
 *  @li UART Module
 */
static void init_dma1_clock(void)
{
    __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001774:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	64ab      	str	r3, [r5, #72]	; 0x48
 800177c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	9304      	str	r3, [sp, #16]
 8001784:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001786:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	64ab      	str	r3, [r5, #72]	; 0x48
 800178e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	9305      	str	r3, [sp, #20]
 8001796:	9b05      	ldr	r3, [sp, #20]
 *  The DMA2 is used by multiple peripherals from different modules such as
 *  @li Audio Module
 */
static void init_dma2_clock(void)
{
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001798:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	64ab      	str	r3, [r5, #72]	; 0x48
 80017a0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	9301      	str	r3, [sp, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	2400      	movs	r4, #0
    __HAL_RCC_DMA2_CLK_ENABLE();
 80017aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin  = BTN0_PIN;
 80017ac:	f44f 7980 	mov.w	r9, #256	; 0x100
    evk_set_system_clock(CLK_169_98MHZ);
 80017b0:	f000 fc96 	bl	80020e0 <evk_set_system_clock>
    HAL_GPIO_Init(BTN0_PORT, &GPIO_InitStruct);
 80017b4:	488b      	ldr	r0, [pc, #556]	; (80019e4 <evk_init+0x2fc>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	9411      	str	r4, [sp, #68]	; 0x44
    HAL_GPIO_Init(BTN0_PORT, &GPIO_InitStruct);
 80017b8:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Pin  = BTN1_PIN;
 80017ba:	2708      	movs	r7, #8
    GPIO_InitStruct.Pin  = BTN0_PIN;
 80017bc:	e9cd 940d 	strd	r9, r4, [sp, #52]	; 0x34
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(BTN0_PORT, &GPIO_InitStruct);
 80017c4:	f00b fa9e 	bl	800cd04 <HAL_GPIO_Init>
    HAL_GPIO_Init(BTN1_PORT, &GPIO_InitStruct);
 80017c8:	4887      	ldr	r0, [pc, #540]	; (80019e8 <evk_init+0x300>)
    GPIO_InitStruct.Pin  = BTN1_PIN;
 80017ca:	970d      	str	r7, [sp, #52]	; 0x34
    HAL_GPIO_Init(BTN1_PORT, &GPIO_InitStruct);
 80017cc:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    HAL_GPIO_Init(BTN1_PORT, &GPIO_InitStruct);
 80017d2:	f00b fa97 	bl	800cd04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(port, pin, state);
 80017d6:	4622      	mov	r2, r4
 80017d8:	4883      	ldr	r0, [pc, #524]	; (80019e8 <evk_init+0x300>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	9411      	str	r4, [sp, #68]	; 0x44
    HAL_GPIO_WritePin(port, pin, state);
 80017dc:	2120      	movs	r1, #32
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80017de:	2601      	movs	r6, #1
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80017e4:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_WritePin(port, pin, state);
 80017e8:	f00b fb9a 	bl	800cf20 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin   = pin;
 80017ec:	2320      	movs	r3, #32
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80017ee:	487e      	ldr	r0, [pc, #504]	; (80019e8 <evk_init+0x300>)
    GPIO_InitStruct.Pin   = pin;
 80017f0:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80017f2:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80017f4:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80017f8:	960e      	str	r6, [sp, #56]	; 0x38
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80017fa:	f00b fa83 	bl	800cd04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(port, pin, state);
 80017fe:	4622      	mov	r2, r4
 8001800:	4878      	ldr	r0, [pc, #480]	; (80019e4 <evk_init+0x2fc>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	9411      	str	r4, [sp, #68]	; 0x44
    HAL_GPIO_WritePin(port, pin, state);
 8001804:	f44f 6180 	mov.w	r1, #1024	; 0x400
    GPIO_InitStruct.Pin   = pin;
 8001808:	f44f 6880 	mov.w	r8, #1024	; 0x400
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001810:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_WritePin(port, pin, state);
 8001814:	f00b fb84 	bl	800cf20 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001818:	4872      	ldr	r0, [pc, #456]	; (80019e4 <evk_init+0x2fc>)
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800181a:	960e      	str	r6, [sp, #56]	; 0x38
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 800181c:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800181e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin   = pin;
 8001822:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001826:	f00b fa6d 	bl	800cd04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(port, pin, state);
 800182a:	4622      	mov	r2, r4
 800182c:	486e      	ldr	r0, [pc, #440]	; (80019e8 <evk_init+0x300>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	9411      	str	r4, [sp, #68]	; 0x44
    HAL_GPIO_WritePin(port, pin, state);
 8001830:	2140      	movs	r1, #64	; 0x40
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001832:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001836:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_WritePin(port, pin, state);
 800183a:	f00b fb71 	bl	800cf20 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin   = pin;
 800183e:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001840:	4869      	ldr	r0, [pc, #420]	; (80019e8 <evk_init+0x300>)
    GPIO_InitStruct.Pin   = pin;
 8001842:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001844:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001846:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800184a:	960e      	str	r6, [sp, #56]	; 0x38
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 800184c:	f00b fa5a 	bl	800cd04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(port, pin, state);
 8001850:	4622      	mov	r2, r4
 8001852:	4865      	ldr	r0, [pc, #404]	; (80019e8 <evk_init+0x300>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	9411      	str	r4, [sp, #68]	; 0x44
    HAL_GPIO_WritePin(port, pin, state);
 8001856:	2180      	movs	r1, #128	; 0x80
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 800185c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_WritePin(port, pin, state);
 8001860:	f00b fb5e 	bl	800cf20 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin   = pin;
 8001864:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001866:	4860      	ldr	r0, [pc, #384]	; (80019e8 <evk_init+0x300>)
    GPIO_InitStruct.Pin   = pin;
 8001868:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 800186a:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800186c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001870:	960e      	str	r6, [sp, #56]	; 0x38
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001872:	f00b fa47 	bl	800cd04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(port, pin, state);
 8001876:	4622      	mov	r2, r4
 8001878:	485b      	ldr	r0, [pc, #364]	; (80019e8 <evk_init+0x300>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	9411      	str	r4, [sp, #68]	; 0x44
    HAL_GPIO_WritePin(port, pin, state);
 800187c:	4649      	mov	r1, r9
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001882:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_WritePin(port, pin, state);
 8001886:	f00b fb4b 	bl	800cf20 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 800188a:	4857      	ldr	r0, [pc, #348]	; (80019e8 <evk_init+0x300>)
 800188c:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800188e:	e9cd 960d 	strd	r9, r6, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001892:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001896:	f00b fa35 	bl	800cd04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(port, pin, state);
 800189a:	4622      	mov	r2, r4
 800189c:	4852      	ldr	r0, [pc, #328]	; (80019e8 <evk_init+0x300>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	9411      	str	r4, [sp, #68]	; 0x44
    HAL_GPIO_WritePin(port, pin, state);
 80018a0:	4641      	mov	r1, r8
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80018a6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_WritePin(port, pin, state);
 80018aa:	f00b fb39 	bl	800cf20 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80018ae:	484e      	ldr	r0, [pc, #312]	; (80019e8 <evk_init+0x300>)
 80018b0:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80018b2:	e9cd 860d 	strd	r8, r6, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80018b6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80018ba:	f00b fa23 	bl	800cd04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(port, pin, state);
 80018be:	4622      	mov	r2, r4
 80018c0:	4849      	ldr	r0, [pc, #292]	; (80019e8 <evk_init+0x300>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c2:	9411      	str	r4, [sp, #68]	; 0x44
    HAL_GPIO_WritePin(port, pin, state);
 80018c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80018cc:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_WritePin(port, pin, state);
 80018d0:	f00b fb26 	bl	800cf20 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin   = pin;
 80018d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80018d8:	4843      	ldr	r0, [pc, #268]	; (80019e8 <evk_init+0x300>)
    GPIO_InitStruct.Pin   = pin;
 80018da:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80018dc:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80018de:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80018e2:	960e      	str	r6, [sp, #56]	; 0x38
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80018e4:	f00b fa0e 	bl	800cd04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(port, pin, state);
 80018e8:	4622      	mov	r2, r4
 80018ea:	4639      	mov	r1, r7
 80018ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80018f4:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 80018f8:	9411      	str	r4, [sp, #68]	; 0x44
    HAL_GPIO_WritePin(port, pin, state);
 80018fa:	f00b fb11 	bl	800cf20 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 80018fe:	a90d      	add	r1, sp, #52	; 0x34
 8001900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001904:	e9cd 760d 	strd	r7, r6, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001908:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 800190c:	f00b f9fa 	bl	800cd04 <HAL_GPIO_Init>
    evk_set_board_voltage(vdd);
 8001910:	4630      	mov	r0, r6
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001916:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800191a:	9411      	str	r4, [sp, #68]	; 0x44
    evk_set_board_voltage(vdd);
 800191c:	f000 ff46 	bl	80027ac <evk_set_board_voltage>
    GPIO_InitStruct.Pin   = VOLTAGE_SEL_PIN;
 8001920:	2304      	movs	r3, #4
    HAL_GPIO_Init(VOLTAGE_SEL_PORT, &GPIO_InitStruct);
 8001922:	4832      	ldr	r0, [pc, #200]	; (80019ec <evk_init+0x304>)
    GPIO_InitStruct.Pin   = VOLTAGE_SEL_PIN;
 8001924:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(VOLTAGE_SEL_PORT, &GPIO_InitStruct);
 8001926:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001928:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800192c:	960e      	str	r6, [sp, #56]	; 0x38
    HAL_GPIO_Init(VOLTAGE_SEL_PORT, &GPIO_InitStruct);
 800192e:	f00b f9e9 	bl	800cd04 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING_FALLING;
 8001932:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <evk_init+0x308>)
 8001934:	930e      	str	r3, [sp, #56]	; 0x38
    HAL_GPIO_Init(USB_DETECT_PORT, &GPIO_InitStruct);
 8001936:	a90d      	add	r1, sp, #52	; 0x34
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin   = USB_DETECT_PIN;
 8001940:	960d      	str	r6, [sp, #52]	; 0x34
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	9411      	str	r4, [sp, #68]	; 0x44
    HAL_GPIO_Init(USB_DETECT_PORT, &GPIO_InitStruct);
 8001944:	f00b f9de 	bl	800cd04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(NVIC_USB_DET_IRQ, PRIO_USB_DET_IRQ, 0);
 8001948:	4622      	mov	r2, r4
 800194a:	210e      	movs	r1, #14
 800194c:	2006      	movs	r0, #6
 800194e:	f00a ffe5 	bl	800c91c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(NVIC_USB_DET_IRQ);
 8001952:	2006      	movs	r0, #6
 8001954:	f00b f820 	bl	800c998 <HAL_NVIC_EnableIRQ>
    evk_init_usb_clock();
 8001958:	f000 fdae 	bl	80024b8 <evk_init_usb_clock>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800195c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	65ab      	str	r3, [r5, #88]	; 0x58
 8001964:	6dab      	ldr	r3, [r5, #88]	; 0x58
    htim3.Instance = TIM3;
 8001966:	4d23      	ldr	r5, [pc, #140]	; (80019f4 <evk_init+0x30c>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	9303      	str	r3, [sp, #12]
 800196e:	9b03      	ldr	r3, [sp, #12]
    SystemCoreClockUpdate();
 8001970:	f001 f9dc 	bl	8002d2c <SystemCoreClockUpdate>
    htim3.Instance = TIM3;
 8001974:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <evk_init+0x310>)
 8001976:	602b      	str	r3, [r5, #0]
    htim3.Init.Prescaler = ((HAL_RCC_GetPCLK2Freq() / 1000000)) - 1;
 8001978:	f00d faa4 	bl	800eec4 <HAL_RCC_GetPCLK2Freq>
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <evk_init+0x314>)
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197e:	60ac      	str	r4, [r5, #8]
    htim3.Init.Prescaler = ((HAL_RCC_GetPCLK2Freq() / 1000000)) - 1;
 8001980:	fba3 3000 	umull	r3, r0, r3, r0
 8001984:	0c80      	lsrs	r0, r0, #18
 8001986:	3801      	subs	r0, #1
 8001988:	6068      	str	r0, [r5, #4]
    htim3.Init.Period = 0xffff;
 800198a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800198e:	4628      	mov	r0, r5
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001990:	612c      	str	r4, [r5, #16]
    htim3.Init.Period = 0xffff;
 8001992:	60eb      	str	r3, [r5, #12]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001994:	f00e fcde 	bl	8010354 <HAL_TIM_Base_Init>
 8001998:	2800      	cmp	r0, #0
 800199a:	f040 8116 	bne.w	8001bca <evk_init+0x4e2>
    if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 800199e:	4815      	ldr	r0, [pc, #84]	; (80019f4 <evk_init+0x30c>)
 80019a0:	f00e fada 	bl	800ff58 <HAL_TIM_Base_Start>
 80019a4:	2800      	cmp	r0, #0
 80019a6:	f040 8118 	bne.w	8001bda <evk_init+0x4f2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <evk_init+0x2f4>)
    htim6.Instance = TIM6;
 80019ac:	4c14      	ldr	r4, [pc, #80]	; (8001a00 <evk_init+0x318>)
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019b0:	f042 0210 	orr.w	r2, r2, #16
 80019b4:	659a      	str	r2, [r3, #88]	; 0x58
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	9b02      	ldr	r3, [sp, #8]
    SystemCoreClockUpdate();
 80019c0:	f001 f9b4 	bl	8002d2c <SystemCoreClockUpdate>
    htim6.Instance = TIM6;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <evk_init+0x31c>)
 80019c6:	6023      	str	r3, [r4, #0]
    htim6.Init.Prescaler     = (evk_get_system_clock_freq() / FREE_RUNNING_TICK_FREQ) - 1;
 80019c8:	f000 fcd6 	bl	8002378 <evk_get_system_clock_freq>
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <evk_init+0x320>)
 80019ce:	fba3 3000 	umull	r3, r0, r3, r0
 80019d2:	0a03      	lsrs	r3, r0, #8
 80019d4:	3b01      	subs	r3, #1
    htim6.Init.CounterMode   = TIM_COUNTERMODE_UP;
 80019d6:	2200      	movs	r2, #0
 80019d8:	e018      	b.n	8001a0c <evk_init+0x324>
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
 80019e0:	0a21c000 	.word	0x0a21c000
 80019e4:	48000400 	.word	0x48000400
 80019e8:	48000800 	.word	0x48000800
 80019ec:	48000c00 	.word	0x48000c00
 80019f0:	10310000 	.word	0x10310000
 80019f4:	200002e0 	.word	0x200002e0
 80019f8:	40000400 	.word	0x40000400
 80019fc:	431bde83 	.word	0x431bde83
 8001a00:	2000032c 	.word	0x2000032c
 8001a04:	40001000 	.word	0x40001000
 8001a08:	10624dd3 	.word	0x10624dd3
 8001a0c:	e9c4 3201 	strd	r3, r2, [r4, #4]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001a10:	4620      	mov	r0, r4
    htim6.Init.Period        = 0xffff;
 8001a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
    htim6.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a16:	6122      	str	r2, [r4, #16]
    htim6.Init.Period        = 0xffff;
 8001a18:	60e3      	str	r3, [r4, #12]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001a1a:	f00e fc9b 	bl	8010354 <HAL_TIM_Base_Init>
 8001a1e:	2800      	cmp	r0, #0
 8001a20:	f040 80f2 	bne.w	8001c08 <evk_init+0x520>
    if (HAL_TIM_Base_Start(&htim6) != HAL_OK) {
 8001a24:	487a      	ldr	r0, [pc, #488]	; (8001c10 <evk_init+0x528>)
 8001a26:	f00e fa97 	bl	800ff58 <HAL_TIM_Base_Start>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	f040 80e9 	bne.w	8001c02 <evk_init+0x51a>
    HAL_NVIC_SetPriority(NVIC_RADIO_DMA_RX_CPLT, PRIO_RADIO_DMA_RX_CPLT, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2102      	movs	r1, #2
 8001a34:	200c      	movs	r0, #12
 8001a36:	f00a ff71 	bl	800c91c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(NVIC_RADIO_DMA_RX_CPLT);
 8001a3a:	200c      	movs	r0, #12
 8001a3c:	f00a ffac 	bl	800c998 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(NVIC_RADIO_DMA_TX_CPLT, PRIO_RADIO_DMA_TX_CPLT, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2102      	movs	r1, #2
 8001a44:	200b      	movs	r0, #11
 8001a46:	f00a ff69 	bl	800c91c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(NVIC_RADIO_DMA_TX_CPLT);
 8001a4a:	200b      	movs	r0, #11
 8001a4c:	f00a ffa4 	bl	800c998 <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a50:	4a70      	ldr	r2, [pc, #448]	; (8001c14 <evk_init+0x52c>)
    HAL_GPIO_Init(RADIO_IRQ_PORT, &GPIO_InitStruct);
 8001a52:	4871      	ldr	r0, [pc, #452]	; (8001c18 <evk_init+0x530>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = RADIO_IRQ_PIN;
 8001a56:	2304      	movs	r3, #4
    HAL_GPIO_Init(RADIO_IRQ_PORT, &GPIO_InitStruct);
 8001a58:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Pin = RADIO_IRQ_PIN;
 8001a5a:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
 8001a60:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    HAL_GPIO_Init(RADIO_IRQ_PORT, &GPIO_InitStruct);
 8001a64:	f00b f94e 	bl	800cd04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(NVIC_RADIO_IRQ, PRIO_RADIO_IRQ, 0);
 8001a68:	4622      	mov	r2, r4
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	2008      	movs	r0, #8
 8001a6e:	f00a ff55 	bl	800c91c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(NVIC_RADIO_IRQ);
 8001a72:	2008      	movs	r0, #8
 8001a74:	f00a ff90 	bl	800c998 <HAL_NVIC_EnableIRQ>
    HAL_GPIO_WritePin(RADIO_SHUTDOWN_PORT, RADIO_SHUTDOWN_PIN, GPIO_PIN_RESET);
 8001a78:	4622      	mov	r2, r4
 8001a7a:	4867      	ldr	r0, [pc, #412]	; (8001c18 <evk_init+0x530>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	9411      	str	r4, [sp, #68]	; 0x44
    HAL_GPIO_WritePin(RADIO_SHUTDOWN_PORT, RADIO_SHUTDOWN_PIN, GPIO_PIN_RESET);
 8001a7e:	2102      	movs	r1, #2
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a80:	2501      	movs	r5, #1
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001a86:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_WritePin(RADIO_SHUTDOWN_PORT, RADIO_SHUTDOWN_PIN, GPIO_PIN_RESET);
 8001a8a:	f00b fa49 	bl	800cf20 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin   = RADIO_SHUTDOWN_PIN;
 8001a8e:	2302      	movs	r3, #2
    HAL_GPIO_Init(RADIO_SHUTDOWN_PORT, &GPIO_InitStruct);
 8001a90:	4861      	ldr	r0, [pc, #388]	; (8001c18 <evk_init+0x530>)
 8001a92:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a94:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001a98:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(RADIO_SHUTDOWN_PORT, &GPIO_InitStruct);
 8001a9c:	f00b f932 	bl	800cd04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_SET);
 8001aa0:	462a      	mov	r2, r5
 8001aa2:	485d      	ldr	r0, [pc, #372]	; (8001c18 <evk_init+0x530>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	9411      	str	r4, [sp, #68]	; 0x44
    HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_SET);
 8001aa6:	4629      	mov	r1, r5
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001aac:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_SET);
 8001ab0:	f00b fa36 	bl	800cf20 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(RADIO_RESET_PORT, &GPIO_InitStruct);
 8001ab4:	4858      	ldr	r0, [pc, #352]	; (8001c18 <evk_init+0x530>)
 8001ab6:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001ab8:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001abc:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(RADIO_RESET_PORT, &GPIO_InitStruct);
 8001ac0:	f00b f920 	bl	800cd04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(RADIO_DEBUG_EN_PORT, RADIO_DEBUG_EN_PIN, GPIO_PIN_RESET);
 8001ac4:	4854      	ldr	r0, [pc, #336]	; (8001c18 <evk_init+0x530>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	9411      	str	r4, [sp, #68]	; 0x44
    HAL_GPIO_WritePin(RADIO_DEBUG_EN_PORT, RADIO_DEBUG_EN_PIN, GPIO_PIN_RESET);
 8001ac8:	4622      	mov	r2, r4
 8001aca:	f44f 7100 	mov.w	r1, #512	; 0x200
    GPIO_InitStruct.Pin   = RADIO_DEBUG_EN_PIN;
 8001ace:	f44f 7600 	mov.w	r6, #512	; 0x200
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001ad6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_WritePin(RADIO_DEBUG_EN_PORT, RADIO_DEBUG_EN_PIN, GPIO_PIN_RESET);
 8001ada:	f00b fa21 	bl	800cf20 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(RADIO_DEBUG_EN_PORT, &GPIO_InitStruct);
 8001ade:	484e      	ldr	r0, [pc, #312]	; (8001c18 <evk_init+0x530>)
 8001ae0:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001ae2:	e9cd 650d 	strd	r6, r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001ae6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(RADIO_DEBUG_EN_PORT, &GPIO_InitStruct);
 8001aea:	f00b f90b 	bl	800cd04 <HAL_GPIO_Init>
    hradio_spi.Instance = SPI2;
 8001aee:	484b      	ldr	r0, [pc, #300]	; (8001c1c <evk_init+0x534>)
 8001af0:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <evk_init+0x538>)
 8001af2:	6003      	str	r3, [r0, #0]
    hradio_spi.Init.Mode = SPI_MODE_MASTER;
 8001af4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001af8:	6043      	str	r3, [r0, #4]
    hradio_spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8001afa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001afe:	e9c0 4302 	strd	r4, r3, [r0, #8]
    hradio_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b02:	2308      	movs	r3, #8
 8001b04:	e9c0 6306 	strd	r6, r3, [r0, #24]
    hradio_spi.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b08:	6343      	str	r3, [r0, #52]	; 0x34
    hradio_spi.Init.CRCPolynomial = 7;
 8001b0a:	2307      	movs	r3, #7
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001b10:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    hradio_spi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b14:	e9c0 4404 	strd	r4, r4, [r0, #16]
    hradio_spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b18:	e9c0 4408 	strd	r4, r4, [r0, #32]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	9411      	str	r4, [sp, #68]	; 0x44
    hradio_spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b1e:	6284      	str	r4, [r0, #40]	; 0x28
    hradio_spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b20:	6304      	str	r4, [r0, #48]	; 0x30
    hradio_spi.Init.CRCPolynomial = 7;
 8001b22:	62c3      	str	r3, [r0, #44]	; 0x2c
    if (HAL_SPI_Init(&hradio_spi) != HAL_OK) {
 8001b24:	f00e f844 	bl	800fbb0 <HAL_SPI_Init>
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	d167      	bne.n	8001bfc <evk_init+0x514>
    HAL_GPIO_WritePin(RADIO_CS_PORT, RADIO_CS_PIN, GPIO_PIN_SET);
 8001b2c:	483a      	ldr	r0, [pc, #232]	; (8001c18 <evk_init+0x530>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b34:	f00b f9f4 	bl	800cf20 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001b38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b3c:	2301      	movs	r3, #1
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001b3e:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001b40:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(RADIO_CS_PORT, &GPIO_InitStruct);
 8001b44:	4834      	ldr	r0, [pc, #208]	; (8001c18 <evk_init+0x530>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
    HAL_GPIO_Init(RADIO_CS_PORT, &GPIO_InitStruct);
 8001b48:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001b4a:	e9cd 430f 	strd	r4, r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(RADIO_CS_PORT, &GPIO_InitStruct);
 8001b4e:	f00b f8d9 	bl	800cd04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(NVIC_PENDSV_IRQ, PRIO_PEND_SV_IRQ, 0);
 8001b52:	4622      	mov	r2, r4
 8001b54:	210f      	movs	r1, #15
 8001b56:	f06f 0001 	mvn.w	r0, #1
 8001b5a:	f00a fedf 	bl	800c91c <HAL_NVIC_SetPriority>
    HAL_NVIC_ClearPendingIRQ(NVIC_PENDSV_IRQ);
 8001b5e:	f06f 0001 	mvn.w	r0, #1
 8001b62:	f00a ff55 	bl	800ca10 <HAL_NVIC_ClearPendingIRQ>
    HAL_NVIC_EnableIRQ(NVIC_PENDSV_IRQ);
 8001b66:	f06f 0001 	mvn.w	r0, #1
 8001b6a:	f00a ff15 	bl	800c998 <HAL_NVIC_EnableIRQ>
    evk_init_ext_osc_clk();
 8001b6e:	f000 fc1f 	bl	80023b0 <evk_init_ext_osc_clk>
    evk_init_xtal_clk();
 8001b72:	f000 fc3b 	bl	80023ec <evk_init_xtal_clk>
    evk_radio_set_reset_pin();
 8001b76:	f000 fe69 	bl	800284c <evk_radio_set_reset_pin>
    evk_radio_reset_reset_pin();
 8001b7a:	f000 fe6f 	bl	800285c <evk_radio_reset_reset_pin>
    hlp_uart.Instance                    = LPUART1;
 8001b7e:	4829      	ldr	r0, [pc, #164]	; (8001c24 <evk_init+0x53c>)
 8001b80:	4a29      	ldr	r2, [pc, #164]	; (8001c28 <evk_init+0x540>)
    hlp_uart.Init.BaudRate               = 1152000;
 8001b82:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <evk_init+0x544>)
    hlp_uart.Init.HwFlowCtl              = UART_HWCONTROL_NONE;
 8001b84:	6184      	str	r4, [r0, #24]
    hlp_uart.Init.BaudRate               = 1152000;
 8001b86:	e9c0 2300 	strd	r2, r3, [r0]
    hlp_uart.Init.Mode                   = UART_MODE_TX_RX;
 8001b8a:	210c      	movs	r1, #12
    hlp_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001b8c:	2208      	movs	r2, #8
    hlp_uart.AdvancedInit.Swap           = UART_ADVFEATURE_SWAP_ENABLE;
 8001b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    hlp_uart.Init.StopBits               = UART_STOPBITS_1;
 8001b92:	e9c0 4402 	strd	r4, r4, [r0, #8]
    hlp_uart.Init.Mode                   = UART_MODE_TX_RX;
 8001b96:	e9c0 4104 	strd	r4, r1, [r0, #16]
    hlp_uart.Init.ClockPrescaler         = UART_PRESCALER_DIV1;
 8001b9a:	e9c0 4408 	strd	r4, r4, [r0, #32]
    hlp_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001b9e:	6282      	str	r2, [r0, #40]	; 0x28
    hlp_uart.AdvancedInit.Swap           = UART_ADVFEATURE_SWAP_ENABLE;
 8001ba0:	6383      	str	r3, [r0, #56]	; 0x38
    if (HAL_UART_Init(&hlp_uart) != HAL_OK) {
 8001ba2:	f00f f97d 	bl	8010ea0 <HAL_UART_Init>
 8001ba6:	bb30      	cbnz	r0, 8001bf6 <evk_init+0x50e>
    if (HAL_UARTEx_SetTxFifoThreshold(&hlp_uart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8001ba8:	481e      	ldr	r0, [pc, #120]	; (8001c24 <evk_init+0x53c>)
 8001baa:	2100      	movs	r1, #0
 8001bac:	f00f f9f0 	bl	8010f90 <HAL_UARTEx_SetTxFifoThreshold>
 8001bb0:	b9f0      	cbnz	r0, 8001bf0 <evk_init+0x508>
    if (HAL_UARTEx_SetRxFifoThreshold(&hlp_uart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8001bb2:	481c      	ldr	r0, [pc, #112]	; (8001c24 <evk_init+0x53c>)
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	f00f fa15 	bl	8010fe4 <HAL_UARTEx_SetRxFifoThreshold>
 8001bba:	b9b0      	cbnz	r0, 8001bea <evk_init+0x502>
    if (HAL_UARTEx_DisableFifoMode(&hlp_uart) != HAL_OK) {
 8001bbc:	4819      	ldr	r0, [pc, #100]	; (8001c24 <evk_init+0x53c>)
 8001bbe:	f00f f9c9 	bl	8010f54 <HAL_UARTEx_DisableFifoMode>
 8001bc2:	b968      	cbnz	r0, 8001be0 <evk_init+0x4f8>
}
 8001bc4:	b013      	add	sp, #76	; 0x4c
 8001bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Error_Handler();
 8001bca:	f000 fcfd 	bl	80025c8 <Error_Handler>
    if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 8001bce:	4818      	ldr	r0, [pc, #96]	; (8001c30 <evk_init+0x548>)
 8001bd0:	f00e f9c2 	bl	800ff58 <HAL_TIM_Base_Start>
 8001bd4:	2800      	cmp	r0, #0
 8001bd6:	f43f aee8 	beq.w	80019aa <evk_init+0x2c2>
        Error_Handler();
 8001bda:	f000 fcf5 	bl	80025c8 <Error_Handler>
 8001bde:	e6e4      	b.n	80019aa <evk_init+0x2c2>
}
 8001be0:	b013      	add	sp, #76	; 0x4c
 8001be2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Error_Handler();
 8001be6:	f000 bcef 	b.w	80025c8 <Error_Handler>
        Error_Handler();
 8001bea:	f000 fced 	bl	80025c8 <Error_Handler>
 8001bee:	e7e5      	b.n	8001bbc <evk_init+0x4d4>
        Error_Handler();
 8001bf0:	f000 fcea 	bl	80025c8 <Error_Handler>
 8001bf4:	e7dd      	b.n	8001bb2 <evk_init+0x4ca>
        Error_Handler();
 8001bf6:	f000 fce7 	bl	80025c8 <Error_Handler>
 8001bfa:	e7d5      	b.n	8001ba8 <evk_init+0x4c0>
        Error_Handler();
 8001bfc:	f000 fce4 	bl	80025c8 <Error_Handler>
 8001c00:	e794      	b.n	8001b2c <evk_init+0x444>
        Error_Handler();
 8001c02:	f000 fce1 	bl	80025c8 <Error_Handler>
 8001c06:	e713      	b.n	8001a30 <evk_init+0x348>
        Error_Handler();
 8001c08:	f000 fcde 	bl	80025c8 <Error_Handler>
 8001c0c:	e70a      	b.n	8001a24 <evk_init+0x33c>
 8001c0e:	bf00      	nop
 8001c10:	2000032c 	.word	0x2000032c
 8001c14:	10110000 	.word	0x10110000
 8001c18:	48000400 	.word	0x48000400
 8001c1c:	20004ce4 	.word	0x20004ce4
 8001c20:	40003800 	.word	0x40003800
 8001c24:	20004e18 	.word	0x20004e18
 8001c28:	40008000 	.word	0x40008000
 8001c2c:	00119400 	.word	0x00119400
 8001c30:	200002e0 	.word	0x200002e0

08001c34 <sai_dma_start_it>:
 *  @param[in] sample_count      The number of audio samples.
 *  @param[in] direction         From the Memory to Peripheral or from the Peripheral to the Memory.
 */
static void sai_dma_start_it(DMA_HandleTypeDef *hdma, uint32_t source_addr, uint32_t destination_addr, uint32_t sample_count,
                             sai_direction_t direction)
{
 8001c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c36:	6804      	ldr	r4, [r0, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c38:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8001c3a:	6825      	ldr	r5, [r4, #0]
{
 8001c3c:	f89d 7014 	ldrb.w	r7, [sp, #20]
    __HAL_DMA_DISABLE(hdma);
 8001c40:	f025 0501 	bic.w	r5, r5, #1
 8001c44:	6025      	str	r5, [r4, #0]
{
 8001c46:	469e      	mov	lr, r3
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c48:	e9d0 3514 	ldrd	r3, r5, [r0, #80]	; 0x50
 8001c4c:	6073      	str	r3, [r6, #4]

    if (hdma->DMAmuxRequestGen != 0U) {
 8001c4e:	b115      	cbz	r5, 8001c56 <sai_dma_start_it+0x22>
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c50:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
 8001c54:	6073      	str	r3, [r6, #4]
    }
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c56:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001c58:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c5a:	f006 0c1f 	and.w	ip, r6, #31
 8001c5e:	2601      	movs	r6, #1
 8001c60:	fa06 f60c 	lsl.w	r6, r6, ip
 8001c64:	605e      	str	r6, [r3, #4]

    /* Configure DMA Channel data length */
    hdma->Instance->CNDTR = sample_count;
 8001c66:	f8c4 e004 	str.w	lr, [r4, #4]

    if (direction == SAI_MCU_TO_CODEC) {
 8001c6a:	b9bf      	cbnz	r7, 8001c9c <sai_dma_start_it+0x68>
        /* Configure DMA Channel destination address */
        hdma->Instance->CPAR = destination_addr;
 8001c6c:	60a2      	str	r2, [r4, #8]

        /* Configure DMA Channel source address */
        hdma->Instance->CMAR = source_addr;
 8001c6e:	60e1      	str	r1, [r4, #12]
        /* Configure DMA Channel destination address */
        hdma->Instance->CMAR = destination_addr;
    }

    /* Enable transfert complete and Transfert error */
    __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8001c70:	6823      	ldr	r3, [r4, #0]

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c72:	6c82      	ldr	r2, [r0, #72]	; 0x48
    __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c7a:	6813      	ldr	r3, [r2, #0]
 8001c7c:	03db      	lsls	r3, r3, #15
 8001c7e:	d503      	bpl.n	8001c88 <sai_dma_start_it+0x54>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c80:	6813      	ldr	r3, [r2, #0]
 8001c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c86:	6013      	str	r3, [r2, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c88:	b11d      	cbz	r5, 8001c92 <sai_dma_start_it+0x5e>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c8a:	682b      	ldr	r3, [r5, #0]
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c90:	602b      	str	r3, [r5, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6023      	str	r3, [r4, #0]
}
 8001c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hdma->Instance->CPAR = source_addr;
 8001c9c:	60a1      	str	r1, [r4, #8]
        hdma->Instance->CMAR = destination_addr;
 8001c9e:	60e2      	str	r2, [r4, #12]
 8001ca0:	e7e6      	b.n	8001c70 <sai_dma_start_it+0x3c>
 8001ca2:	bf00      	nop

08001ca4 <sai_dma_tx_complete_callback>:
 */
static void sai_dma_tx_complete_callback(DMA_HandleTypeDef *hdma)
{
    /* Disable SAI Tx DMA Request */
    hdma->Instance->CCR &= (uint32_t)(~SAI_xCR1_DMAEN);
    sai_dma_tx_irq_callback();
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <sai_dma_tx_complete_callback+0x10>)
    hdma->Instance->CCR &= (uint32_t)(~SAI_xCR1_DMAEN);
 8001ca6:	6802      	ldr	r2, [r0, #0]
    sai_dma_tx_irq_callback();
 8001ca8:	6819      	ldr	r1, [r3, #0]
    hdma->Instance->CCR &= (uint32_t)(~SAI_xCR1_DMAEN);
 8001caa:	6813      	ldr	r3, [r2, #0]
 8001cac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001cb0:	6013      	str	r3, [r2, #0]
    sai_dma_tx_irq_callback();
 8001cb2:	4708      	bx	r1
 8001cb4:	20004bcc 	.word	0x20004bcc

08001cb8 <sai_dma_rx_complete_callback>:
 */
static void sai_dma_rx_complete_callback(DMA_HandleTypeDef *hdma)
{
    /* Disable SAI Rx DMA Request */
    hdma->Instance->CCR &= (uint32_t)(~SAI_xCR1_DMAEN);
    sai_dma_rx_irq_callback();
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <sai_dma_rx_complete_callback+0x10>)
    hdma->Instance->CCR &= (uint32_t)(~SAI_xCR1_DMAEN);
 8001cba:	6802      	ldr	r2, [r0, #0]
    sai_dma_rx_irq_callback();
 8001cbc:	6819      	ldr	r1, [r3, #0]
    hdma->Instance->CCR &= (uint32_t)(~SAI_xCR1_DMAEN);
 8001cbe:	6813      	ldr	r3, [r2, #0]
 8001cc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001cc4:	6013      	str	r3, [r2, #0]
    sai_dma_rx_irq_callback();
 8001cc6:	4708      	bx	r1
 8001cc8:	20004bc8 	.word	0x20004bc8

08001ccc <evk_audio_i2c_write_byte_blocking>:
{
 8001ccc:	b500      	push	{lr}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	4686      	mov	lr, r0
    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)dev_addr, (uint8_t*)payload, sizeof(payload), AUDIO_I2C_TIMEOUT_MS);
 8001cd2:	23c8      	movs	r3, #200	; 0xc8
{
 8001cd4:	468c      	mov	ip, r1
    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)dev_addr, (uint8_t*)payload, sizeof(payload), AUDIO_I2C_TIMEOUT_MS);
 8001cd6:	9300      	str	r3, [sp, #0]
    uint8_t payload[2] = {
 8001cd8:	f88d 200d 	strb.w	r2, [sp, #13]
    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)dev_addr, (uint8_t*)payload, sizeof(payload), AUDIO_I2C_TIMEOUT_MS);
 8001cdc:	2302      	movs	r3, #2
 8001cde:	4671      	mov	r1, lr
 8001ce0:	aa03      	add	r2, sp, #12
 8001ce2:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <evk_audio_i2c_write_byte_blocking+0x28>)
    uint8_t payload[2] = {
 8001ce4:	f88d c00c 	strb.w	ip, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)dev_addr, (uint8_t*)payload, sizeof(payload), AUDIO_I2C_TIMEOUT_MS);
 8001ce8:	f00b fa82 	bl	800d1f0 <HAL_I2C_Master_Transmit>
}
 8001cec:	b005      	add	sp, #20
 8001cee:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cf2:	bf00      	nop
 8001cf4:	200000f8 	.word	0x200000f8

08001cf8 <evk_audio_i2c_read_byte_blocking>:
{
 8001cf8:	b500      	push	{lr}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	4684      	mov	ip, r0
    HAL_I2C_Mem_Read(&hi2c1, (uint16_t)dev_addr, mem_addr, I2C_MEMADD_SIZE_8BIT, data, 1, AUDIO_I2C_TIMEOUT_MS);
 8001cfe:	2301      	movs	r3, #1
 8001d00:	20c8      	movs	r0, #200	; 0xc8
 8001d02:	e9cd 2300 	strd	r2, r3, [sp]
 8001d06:	9002      	str	r0, [sp, #8]
 8001d08:	460a      	mov	r2, r1
 8001d0a:	4803      	ldr	r0, [pc, #12]	; (8001d18 <evk_audio_i2c_read_byte_blocking+0x20>)
 8001d0c:	4661      	mov	r1, ip
 8001d0e:	f00b fb47 	bl	800d3a0 <HAL_I2C_Mem_Read>
}
 8001d12:	b005      	add	sp, #20
 8001d14:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d18:	200000f8 	.word	0x200000f8

08001d1c <evk_audio_sai_configuration>:
{
 8001d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GPIO_InitTypeDef mc0_config = {
 8001d20:	4c93      	ldr	r4, [pc, #588]	; (8001f70 <evk_audio_sai_configuration+0x254>)
{
 8001d22:	4606      	mov	r6, r0
    GPIO_InitTypeDef mc0_config = {
 8001d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
 8001d26:	b0b4      	sub	sp, #208	; 0xd0
    GPIO_InitTypeDef mc0_config = {
 8001d28:	f10d 0c04 	add.w	ip, sp, #4
 8001d2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001d30:	4625      	mov	r5, r4
    HAL_GPIO_Init(AUDIO_MCO_CLK_PORT, &mc0_config);
 8001d32:	a901      	add	r1, sp, #4
    GPIO_InitTypeDef mc0_config = {
 8001d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d38:	f8cc 3000 	str.w	r3, [ip]
    HAL_GPIO_Init(AUDIO_MCO_CLK_PORT, &mc0_config);
 8001d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d40:	f00a ffe0 	bl	800cd04 <HAL_GPIO_Init>
    GPIO_InitTypeDef clk_in_config = {
 8001d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d46:	f10d 0c18 	add.w	ip, sp, #24
 8001d4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001d4e:	682b      	ldr	r3, [r5, #0]
    HAL_GPIO_Init(AUDIO_SAI_IN_CLK_PORT, &clk_in_config);
 8001d50:	4888      	ldr	r0, [pc, #544]	; (8001f74 <evk_audio_sai_configuration+0x258>)
    GPIO_InitTypeDef clk_in_config = {
 8001d52:	f8cc 3000 	str.w	r3, [ip]
    HAL_GPIO_Init(AUDIO_SAI_IN_CLK_PORT, &clk_in_config);
 8001d56:	a906      	add	r1, sp, #24
 8001d58:	f00a ffd4 	bl	800cd04 <HAL_GPIO_Init>
    GPIO_InitTypeDef mclk_config = {
 8001d5c:	f104 0c18 	add.w	ip, r4, #24
 8001d60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001d64:	ad0b      	add	r5, sp, #44	; 0x2c
 8001d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d68:	f8dc 3000 	ldr.w	r3, [ip]
 8001d6c:	602b      	str	r3, [r5, #0]
    HAL_GPIO_Init(AUDIO_SAI_MCLK_PORT, &mclk_config);
 8001d6e:	4882      	ldr	r0, [pc, #520]	; (8001f78 <evk_audio_sai_configuration+0x25c>)
 8001d70:	a90b      	add	r1, sp, #44	; 0x2c
 8001d72:	f00a ffc7 	bl	800cd04 <HAL_GPIO_Init>
    GPIO_InitTypeDef sck_config = {
 8001d76:	f104 0c2c 	add.w	ip, r4, #44	; 0x2c
 8001d7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001d7e:	ad10      	add	r5, sp, #64	; 0x40
 8001d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d82:	f8dc 3000 	ldr.w	r3, [ip]
 8001d86:	602b      	str	r3, [r5, #0]
    HAL_GPIO_Init(AUDIO_SAI_SCK_PORT, &sck_config);
 8001d88:	487b      	ldr	r0, [pc, #492]	; (8001f78 <evk_audio_sai_configuration+0x25c>)
 8001d8a:	a910      	add	r1, sp, #64	; 0x40
 8001d8c:	f00a ffba 	bl	800cd04 <HAL_GPIO_Init>
    GPIO_InitTypeDef fs_config = {
 8001d90:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8001d94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001d98:	ad15      	add	r5, sp, #84	; 0x54
 8001d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9c:	f8dc 3000 	ldr.w	r3, [ip]
 8001da0:	602b      	str	r3, [r5, #0]
    HAL_GPIO_Init(AUDIO_SAI_FS_PORT, &fs_config);
 8001da2:	4875      	ldr	r0, [pc, #468]	; (8001f78 <evk_audio_sai_configuration+0x25c>)
 8001da4:	a915      	add	r1, sp, #84	; 0x54
 8001da6:	f00a ffad 	bl	800cd04 <HAL_GPIO_Init>
    GPIO_InitTypeDef sda_config = {
 8001daa:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 8001dae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001db2:	ad1a      	add	r5, sp, #104	; 0x68
 8001db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db6:	f8dc 3000 	ldr.w	r3, [ip]
 8001dba:	602b      	str	r3, [r5, #0]
    HAL_GPIO_Init(AUDIO_SAI_SD_A_PORT, &sda_config);
 8001dbc:	a91a      	add	r1, sp, #104	; 0x68
 8001dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitTypeDef sdb_config = {
 8001dc2:	3468      	adds	r4, #104	; 0x68
    HAL_GPIO_Init(AUDIO_SAI_SD_A_PORT, &sda_config);
 8001dc4:	f00a ff9e 	bl	800cd04 <HAL_GPIO_Init>
    GPIO_InitTypeDef sdb_config = {
 8001dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dca:	ad1f      	add	r5, sp, #124	; 0x7c
 8001dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	602b      	str	r3, [r5, #0]
    HAL_GPIO_Init(AUDIO_SAI_SD_B_PORT, &sdb_config);
 8001dd2:	4869      	ldr	r0, [pc, #420]	; (8001f78 <evk_audio_sai_configuration+0x25c>)
 8001dd4:	a91f      	add	r1, sp, #124	; 0x7c
 8001dd6:	f00a ff95 	bl	800cd04 <HAL_GPIO_Init>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dda:	2250      	movs	r2, #80	; 0x50
 8001ddc:	2100      	movs	r1, #0
 8001dde:	a820      	add	r0, sp, #128	; 0x80
 8001de0:	f00f ffec 	bl	8011dbc <memset>
    __HAL_RCC_SAI1_CLK_ENABLE();
 8001de4:	4b65      	ldr	r3, [pc, #404]	; (8001f7c <evk_audio_sai_configuration+0x260>)
 8001de6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001de8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001dec:	661a      	str	r2, [r3, #96]	; 0x60
 8001dee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001df0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001df4:	9210      	str	r2, [sp, #64]	; 0x40
 8001df6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001df8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dfa:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001dfe:	659a      	str	r2, [r3, #88]	; 0x58
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e06:	9315      	str	r3, [sp, #84]	; 0x54
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
    PeriphClkInit.Sai1ClockSelection   = RCC_SAI1CLKSOURCE_EXT;
 8001e0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001e10:	a81f      	add	r0, sp, #124	; 0x7c
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e12:	9915      	ldr	r1, [sp, #84]	; 0x54
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001e14:	921f      	str	r2, [sp, #124]	; 0x7c
    PeriphClkInit.Sai1ClockSelection   = RCC_SAI1CLKSOURCE_EXT;
 8001e16:	932b      	str	r3, [sp, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001e18:	f00d f888 	bl	800ef2c <HAL_RCCEx_PeriphCLKConfig>
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	f040 808c 	bne.w	8001f3a <evk_audio_sai_configuration+0x21e>
    HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001e22:	2200      	movs	r2, #0
 8001e24:	4610      	mov	r0, r2
 8001e26:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001e2a:	f00c fec7 	bl	800ebbc <HAL_RCC_MCOConfig>
    if (mode == EVK_SAI_MODE_MONO) {
 8001e2e:	7873      	ldrb	r3, [r6, #1]
 8001e30:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8001f84 <evk_audio_sai_configuration+0x268>
 8001e34:	4f52      	ldr	r7, [pc, #328]	; (8001f80 <evk_audio_sai_configuration+0x264>)
        hsai_block_b1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	bf0c      	ite	eq
 8001e3a:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8001e3e:	2300      	movne	r3, #0
 8001e40:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
    if (mode == EVK_SAI_MODE_MONO) {
 8001e44:	7833      	ldrb	r3, [r6, #0]
        hsai_block_a1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	bf0c      	ite	eq
 8001e4a:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8001e4e:	2300      	movne	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    init_audio_sai_peripheral(sai_config->sai_bit_depth);
 8001e52:	78b4      	ldrb	r4, [r6, #2]
    if (HAL_SAI_InitProtocol(&hsai_block_a1, SAI_I2S_LSBJUSTIFIED, sai_bit_depth, EVK_SAI_NB_OF_SLOTS) != HAL_OK) {
 8001e54:	2302      	movs	r3, #2
 8001e56:	4622      	mov	r2, r4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4638      	mov	r0, r7
 8001e5c:	f00d fdf8 	bl	800fa50 <HAL_SAI_InitProtocol>
 8001e60:	2800      	cmp	r0, #0
 8001e62:	f040 8081 	bne.w	8001f68 <evk_audio_sai_configuration+0x24c>
    if (HAL_SAI_InitProtocol(&hsai_block_b1, SAI_I2S_LSBJUSTIFIED, sai_bit_depth, EVK_SAI_NB_OF_SLOTS) != HAL_OK) {
 8001e66:	2302      	movs	r3, #2
 8001e68:	4846      	ldr	r0, [pc, #280]	; (8001f84 <evk_audio_sai_configuration+0x268>)
 8001e6a:	4622      	mov	r2, r4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f00d fdef 	bl	800fa50 <HAL_SAI_InitProtocol>
 8001e72:	2800      	cmp	r0, #0
 8001e74:	d175      	bne.n	8001f62 <evk_audio_sai_configuration+0x246>
        hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e76:	4d44      	ldr	r5, [pc, #272]	; (8001f88 <evk_audio_sai_configuration+0x26c>)
    if (sai_bit_depth != EVK_SAI_BIT_DEPTH_16BITS) {
 8001e78:	2c00      	cmp	r4, #0
 8001e7a:	d154      	bne.n	8001f26 <evk_audio_sai_configuration+0x20a>
 8001e7c:	4c43      	ldr	r4, [pc, #268]	; (8001f8c <evk_audio_sai_configuration+0x270>)
    HAL_NVIC_SetPriority(NVIC_SAI_DMA_RX_CPLT, PRIO_AUDIO_SAI_DMA_RX_IRQ, PRIO_AUDIO_SAI_DMA_RX_IRQ);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4611      	mov	r1, r2
 8001e82:	203c      	movs	r0, #60	; 0x3c
 8001e84:	f00a fd4a 	bl	800c91c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(NVIC_SAI_DMA_RX_CPLT);
 8001e88:	203c      	movs	r0, #60	; 0x3c
 8001e8a:	f00a fd85 	bl	800c998 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(NVIC_SAI_DMA_TX_CPLT, PRIO_AUDIO_SAI_DMA_TX_IRQ, PRIO_AUDIO_SAI_DMA_TX_IRQ);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4611      	mov	r1, r2
 8001e92:	2061      	movs	r0, #97	; 0x61
 8001e94:	f00a fd42 	bl	800c91c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(NVIC_SAI_DMA_TX_CPLT);
 8001e98:	2061      	movs	r0, #97	; 0x61
 8001e9a:	f00a fd7d 	bl	800c998 <HAL_NVIC_EnableIRQ>
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK) {
 8001e9e:	483a      	ldr	r0, [pc, #232]	; (8001f88 <evk_audio_sai_configuration+0x26c>)
 8001ea0:	f00a fdd2 	bl	800ca48 <HAL_DMA_Init>
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	d159      	bne.n	8001f5c <evk_audio_sai_configuration+0x240>
    hdma_sai1_a.XferCpltCallback = sai_dma_rx_complete_callback;
 8001ea8:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <evk_audio_sai_configuration+0x274>)
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK) {
 8001eaa:	4838      	ldr	r0, [pc, #224]	; (8001f8c <evk_audio_sai_configuration+0x270>)
    __HAL_LINKDMA(&hsai_block_a1, hdmarx, hdma_sai1_a);
 8001eac:	f8c7 5084 	str.w	r5, [r7, #132]	; 0x84
 8001eb0:	62af      	str	r7, [r5, #40]	; 0x28
    hdma_sai1_a.XferCpltCallback = sai_dma_rx_complete_callback;
 8001eb2:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK) {
 8001eb4:	f00a fdc8 	bl	800ca48 <HAL_DMA_Init>
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	d14c      	bne.n	8001f56 <evk_audio_sai_configuration+0x23a>
    hdma_sai1_b.XferCpltCallback = sai_dma_tx_complete_callback;
 8001ebc:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <evk_audio_sai_configuration+0x278>)
    __HAL_LINKDMA(&hsai_block_b1, hdmatx, hdma_sai1_b);
 8001ebe:	f8c8 4080 	str.w	r4, [r8, #128]	; 0x80
    hdma_sai1_b.XferCpltCallback = sai_dma_tx_complete_callback;
 8001ec2:	e9c4 830a 	strd	r8, r3, [r4, #40]	; 0x28
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <evk_audio_sai_configuration+0x260>)
    GPIO_InitTypeDef scl_i2c_config = {
 8001ec8:	4c33      	ldr	r4, [pc, #204]	; (8001f98 <evk_audio_sai_configuration+0x27c>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ecc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001ed0:	659a      	str	r2, [r3, #88]	; 0x58
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed8:	930b      	str	r3, [sp, #44]	; 0x2c
 8001eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitTypeDef scl_i2c_config = {
 8001edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ede:	ad1a      	add	r5, sp, #104	; 0x68
 8001ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee2:	f854 3b04 	ldr.w	r3, [r4], #4
 8001ee6:	602b      	str	r3, [r5, #0]
    HAL_GPIO_Init(AUDIO_I2C_SCL_PORT, &scl_i2c_config);
 8001ee8:	a91a      	add	r1, sp, #104	; 0x68
 8001eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eee:	f00a ff09 	bl	800cd04 <HAL_GPIO_Init>
    GPIO_InitTypeDef sda_i2c_config = {
 8001ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef4:	ad1f      	add	r5, sp, #124	; 0x7c
 8001ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef8:	6823      	ldr	r3, [r4, #0]
    HAL_GPIO_Init(AUDIO_I2C_SDA_PORT, &sda_i2c_config);
 8001efa:	481f      	ldr	r0, [pc, #124]	; (8001f78 <evk_audio_sai_configuration+0x25c>)
    GPIO_InitTypeDef sda_i2c_config = {
 8001efc:	602b      	str	r3, [r5, #0]
    HAL_GPIO_Init(AUDIO_I2C_SDA_PORT, &sda_i2c_config);
 8001efe:	a91f      	add	r1, sp, #124	; 0x7c
 8001f00:	f00a ff00 	bl	800cd04 <HAL_GPIO_Init>
    if(HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001f04:	4825      	ldr	r0, [pc, #148]	; (8001f9c <evk_audio_sai_configuration+0x280>)
 8001f06:	f00b f91f 	bl	800d148 <HAL_I2C_Init>
 8001f0a:	bb08      	cbnz	r0, 8001f50 <evk_audio_sai_configuration+0x234>
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001f0c:	4823      	ldr	r0, [pc, #140]	; (8001f9c <evk_audio_sai_configuration+0x280>)
 8001f0e:	2100      	movs	r1, #0
 8001f10:	f00b fb42 	bl	800d598 <HAL_I2CEx_ConfigAnalogFilter>
 8001f14:	b9c8      	cbnz	r0, 8001f4a <evk_audio_sai_configuration+0x22e>
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001f16:	4821      	ldr	r0, [pc, #132]	; (8001f9c <evk_audio_sai_configuration+0x280>)
 8001f18:	2100      	movs	r1, #0
 8001f1a:	f00b fb67 	bl	800d5ec <HAL_I2CEx_ConfigDigitalFilter>
 8001f1e:	b978      	cbnz	r0, 8001f40 <evk_audio_sai_configuration+0x224>
}
 8001f20:	b034      	add	sp, #208	; 0xd0
 8001f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f26:	4c19      	ldr	r4, [pc, #100]	; (8001f8c <evk_audio_sai_configuration+0x270>)
        hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2c:	616b      	str	r3, [r5, #20]
        hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f2e:	6163      	str	r3, [r4, #20]
        hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f34:	61ab      	str	r3, [r5, #24]
        hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f36:	61a3      	str	r3, [r4, #24]
 8001f38:	e7a1      	b.n	8001e7e <evk_audio_sai_configuration+0x162>
        Error_Handler();
 8001f3a:	f000 fb45 	bl	80025c8 <Error_Handler>
 8001f3e:	e770      	b.n	8001e22 <evk_audio_sai_configuration+0x106>
}
 8001f40:	b034      	add	sp, #208	; 0xd0
 8001f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        Error_Handler();
 8001f46:	f000 bb3f 	b.w	80025c8 <Error_Handler>
        Error_Handler();
 8001f4a:	f000 fb3d 	bl	80025c8 <Error_Handler>
 8001f4e:	e7e2      	b.n	8001f16 <evk_audio_sai_configuration+0x1fa>
        Error_Handler();
 8001f50:	f000 fb3a 	bl	80025c8 <Error_Handler>
 8001f54:	e7da      	b.n	8001f0c <evk_audio_sai_configuration+0x1f0>
        Error_Handler();
 8001f56:	f000 fb37 	bl	80025c8 <Error_Handler>
 8001f5a:	e7af      	b.n	8001ebc <evk_audio_sai_configuration+0x1a0>
            Error_Handler();
 8001f5c:	f000 fb34 	bl	80025c8 <Error_Handler>
 8001f60:	e7a2      	b.n	8001ea8 <evk_audio_sai_configuration+0x18c>
        Error_Handler();
 8001f62:	f000 fb31 	bl	80025c8 <Error_Handler>
 8001f66:	e786      	b.n	8001e76 <evk_audio_sai_configuration+0x15a>
        Error_Handler();
 8001f68:	f000 fb2e 	bl	80025c8 <Error_Handler>
 8001f6c:	e77b      	b.n	8001e66 <evk_audio_sai_configuration+0x14a>
 8001f6e:	bf00      	nop
 8001f70:	080142e4 	.word	0x080142e4
 8001f74:	48000800 	.word	0x48000800
 8001f78:	48000400 	.word	0x48000400
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	20000144 	.word	0x20000144
 8001f84:	200001dc 	.word	0x200001dc
 8001f88:	20000038 	.word	0x20000038
 8001f8c:	20000098 	.word	0x20000098
 8001f90:	08001cb9 	.word	0x08001cb9
 8001f94:	08001ca5 	.word	0x08001ca5
 8001f98:	08014370 	.word	0x08014370
 8001f9c:	200000f8 	.word	0x200000f8

08001fa0 <evk_audio_sai_write_non_blocking>:
{
 8001fa0:	b510      	push	{r4, lr}
    uint32_t sample_count = size / sai_block_size_to_bytes(hsai_block_b1.Init.DataSize);
 8001fa2:	4c13      	ldr	r4, [pc, #76]	; (8001ff0 <evk_audio_sai_write_non_blocking+0x50>)
 8001fa4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 *                             defined in stm32g4xx_hal_sai.h.
 *  @return Size in bytes, -1 if error.
 */
static int8_t sai_block_size_to_bytes(uint32_t sai_block_size)
{
    switch (sai_block_size) {
 8001fa6:	2a80      	cmp	r2, #128	; 0x80
{
 8001fa8:	460b      	mov	r3, r1
 8001faa:	b082      	sub	sp, #8
 8001fac:	4601      	mov	r1, r0
    switch (sai_block_size) {
 8001fae:	d01a      	beq.n	8001fe6 <evk_audio_sai_write_non_blocking+0x46>
 8001fb0:	d813      	bhi.n	8001fda <evk_audio_sai_write_non_blocking+0x3a>
 8001fb2:	2a40      	cmp	r2, #64	; 0x40
 8001fb4:	d115      	bne.n	8001fe2 <evk_audio_sai_write_non_blocking+0x42>
    sai_dma_start_it(&hdma_sai1_b, (uint32_t)data, (uint32_t)&hsai_block_b1.Instance->DR, sample_count, SAI_MCU_TO_CODEC);
 8001fb6:	6822      	ldr	r2, [r4, #0]
 8001fb8:	2000      	movs	r0, #0
 8001fba:	9000      	str	r0, [sp, #0]
 8001fbc:	321c      	adds	r2, #28
 8001fbe:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <evk_audio_sai_write_non_blocking+0x54>)
 8001fc0:	f7ff fe38 	bl	8001c34 <sai_dma_start_it>
    hsai_block_b1.Instance->CR1 |= SAI_xCR1_DMAEN;
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001fcc:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE(&hsai_block_b1);
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fd4:	601a      	str	r2, [r3, #0]
}
 8001fd6:	b002      	add	sp, #8
 8001fd8:	bd10      	pop	{r4, pc}
    switch (sai_block_size) {
 8001fda:	f022 0220 	bic.w	r2, r2, #32
 8001fde:	2ac0      	cmp	r2, #192	; 0xc0
 8001fe0:	d003      	beq.n	8001fea <evk_audio_sai_write_non_blocking+0x4a>
    case SAI_DATASIZE_32:
        return 4;
    case SAI_DATASIZE_10:
    case SAI_DATASIZE_20:
    default:
        return -1;
 8001fe2:	425b      	negs	r3, r3
 8001fe4:	e7e7      	b.n	8001fb6 <evk_audio_sai_write_non_blocking+0x16>
    uint32_t sample_count = size / sai_block_size_to_bytes(hsai_block_b1.Init.DataSize);
 8001fe6:	105b      	asrs	r3, r3, #1
        return 2;
 8001fe8:	e7e5      	b.n	8001fb6 <evk_audio_sai_write_non_blocking+0x16>
    uint32_t sample_count = size / sai_block_size_to_bytes(hsai_block_b1.Init.DataSize);
 8001fea:	109b      	asrs	r3, r3, #2
        return 4;
 8001fec:	e7e3      	b.n	8001fb6 <evk_audio_sai_write_non_blocking+0x16>
 8001fee:	bf00      	nop
 8001ff0:	200001dc 	.word	0x200001dc
 8001ff4:	20000098 	.word	0x20000098

08001ff8 <evk_audio_sai_read_non_blocking>:
{
 8001ff8:	b530      	push	{r4, r5, lr}
    uint32_t sample_count = size / sai_block_size_to_bytes(hsai_block_a1.Init.DataSize);
 8001ffa:	4d13      	ldr	r5, [pc, #76]	; (8002048 <evk_audio_sai_read_non_blocking+0x50>)
 8001ffc:	6cac      	ldr	r4, [r5, #72]	; 0x48
    switch (sai_block_size) {
 8001ffe:	2c80      	cmp	r4, #128	; 0x80
{
 8002000:	b083      	sub	sp, #12
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
    switch (sai_block_size) {
 8002006:	d01a      	beq.n	800203e <evk_audio_sai_read_non_blocking+0x46>
 8002008:	d813      	bhi.n	8002032 <evk_audio_sai_read_non_blocking+0x3a>
 800200a:	2c40      	cmp	r4, #64	; 0x40
 800200c:	d115      	bne.n	800203a <evk_audio_sai_read_non_blocking+0x42>
    sai_dma_start_it(&hdma_sai1_a, (uint32_t)&hsai_block_a1.Instance->DR, (uint32_t)data, sample_count, SAI_CODEC_TO_MCU);
 800200e:	6829      	ldr	r1, [r5, #0]
 8002010:	2001      	movs	r0, #1
 8002012:	9000      	str	r0, [sp, #0]
 8002014:	311c      	adds	r1, #28
 8002016:	480d      	ldr	r0, [pc, #52]	; (800204c <evk_audio_sai_read_non_blocking+0x54>)
 8002018:	f7ff fe0c 	bl	8001c34 <sai_dma_start_it>
    hsai_block_a1.Instance->CR1 |= SAI_xCR1_DMAEN;
 800201c:	682b      	ldr	r3, [r5, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002024:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE(&hsai_block_a1);
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800202c:	601a      	str	r2, [r3, #0]
}
 800202e:	b003      	add	sp, #12
 8002030:	bd30      	pop	{r4, r5, pc}
    switch (sai_block_size) {
 8002032:	f024 0420 	bic.w	r4, r4, #32
 8002036:	2cc0      	cmp	r4, #192	; 0xc0
 8002038:	d003      	beq.n	8002042 <evk_audio_sai_read_non_blocking+0x4a>
        return -1;
 800203a:	425b      	negs	r3, r3
 800203c:	e7e7      	b.n	800200e <evk_audio_sai_read_non_blocking+0x16>
    uint32_t sample_count = size / sai_block_size_to_bytes(hsai_block_a1.Init.DataSize);
 800203e:	104b      	asrs	r3, r1, #1
        return 2;
 8002040:	e7e5      	b.n	800200e <evk_audio_sai_read_non_blocking+0x16>
    uint32_t sample_count = size / sai_block_size_to_bytes(hsai_block_a1.Init.DataSize);
 8002042:	108b      	asrs	r3, r1, #2
        return 4;
 8002044:	e7e3      	b.n	800200e <evk_audio_sai_read_non_blocking+0x16>
 8002046:	bf00      	nop
 8002048:	20000144 	.word	0x20000144
 800204c:	20000038 	.word	0x20000038

08002050 <evk_audio_set_sai_tx_dma_cplt_callback>:
    sai_dma_tx_irq_callback = callback;
 8002050:	4b01      	ldr	r3, [pc, #4]	; (8002058 <evk_audio_set_sai_tx_dma_cplt_callback+0x8>)
 8002052:	6018      	str	r0, [r3, #0]
}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20004bcc 	.word	0x20004bcc

0800205c <evk_audio_set_sai_rx_dma_cplt_callback>:
    sai_dma_rx_irq_callback = callback;
 800205c:	4b01      	ldr	r3, [pc, #4]	; (8002064 <evk_audio_set_sai_rx_dma_cplt_callback+0x8>)
 800205e:	6018      	str	r0, [r3, #0]
}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20004bc8 	.word	0x20004bc8

08002068 <evk_audio_sai_start_write_non_blocking>:
    sai_dma_tx_irq_callback();
 8002068:	4b01      	ldr	r3, [pc, #4]	; (8002070 <evk_audio_sai_start_write_non_blocking+0x8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4718      	bx	r3
 800206e:	bf00      	nop
 8002070:	20004bcc 	.word	0x20004bcc

08002074 <evk_audio_sai_start_read_non_blocking>:
    sai_dma_rx_irq_callback();
 8002074:	4b01      	ldr	r3, [pc, #4]	; (800207c <evk_audio_sai_start_read_non_blocking+0x8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4718      	bx	r3
 800207a:	bf00      	nop
 800207c:	20004bc8 	.word	0x20004bc8

08002080 <evk_audio_sai_stop_write_non_blocking>:
    if (hsai_block_b1.hdmatx->Instance->CCR & (DMA_IT_TC | DMA_IT_TE)) {
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <evk_audio_sai_stop_write_non_blocking+0x20>)
 8002082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f013 0f0a 	tst.w	r3, #10
 800208e:	d005      	beq.n	800209c <evk_audio_sai_stop_write_non_blocking+0x1c>
        __HAL_DMA_DISABLE(&hdma_sai1_b);
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <evk_audio_sai_stop_write_non_blocking+0x24>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	200001dc 	.word	0x200001dc
 80020a4:	20000098 	.word	0x20000098

080020a8 <evk_read_btn_state>:
/* INCLUDES *******************************************************************/
#include "evk_button.h"

/* PUBLIC FUNCTIONS ***********************************************************/
bool evk_read_btn_state(evk_btn_t btn)
{
 80020a8:	b508      	push	{r3, lr}
    bool btn_state = false;

    switch (btn) {
 80020aa:	b158      	cbz	r0, 80020c4 <evk_read_btn_state+0x1c>
 80020ac:	2801      	cmp	r0, #1
 80020ae:	d107      	bne.n	80020c0 <evk_read_btn_state+0x18>
    case BTN1:
        btn_state = HAL_GPIO_ReadPin(BTN0_PORT, BTN0_PIN);
        break;
    case BTN2:
        btn_state = HAL_GPIO_ReadPin(BTN1_PORT, BTN1_PIN);
 80020b0:	2108      	movs	r1, #8
 80020b2:	4809      	ldr	r0, [pc, #36]	; (80020d8 <evk_read_btn_state+0x30>)
 80020b4:	f00a ff2e 	bl	800cf14 <HAL_GPIO_ReadPin>
 80020b8:	3800      	subs	r0, #0
 80020ba:	bf18      	it	ne
 80020bc:	2001      	movne	r0, #1
        break;
    default:
        break;
    }
    return btn_state;
}
 80020be:	bd08      	pop	{r3, pc}
    switch (btn) {
 80020c0:	2000      	movs	r0, #0
}
 80020c2:	bd08      	pop	{r3, pc}
        btn_state = HAL_GPIO_ReadPin(BTN0_PORT, BTN0_PIN);
 80020c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c8:	4804      	ldr	r0, [pc, #16]	; (80020dc <evk_read_btn_state+0x34>)
 80020ca:	f00a ff23 	bl	800cf14 <HAL_GPIO_ReadPin>
 80020ce:	3800      	subs	r0, #0
 80020d0:	bf18      	it	ne
 80020d2:	2001      	movne	r0, #1
}
 80020d4:	bd08      	pop	{r3, pc}
 80020d6:	bf00      	nop
 80020d8:	48000800 	.word	0x48000800
 80020dc:	48000400 	.word	0x48000400

080020e0 <evk_set_system_clock>:
static void gpio_pll_sel_init(void);
static void gpio_xtal_clk_init(void);

/* PUBLIC FUNCTIONS ***********************************************************/
void evk_set_system_clock(evk_clk_freq_t evk_clk_freq)
{
 80020e0:	b510      	push	{r4, lr}

    uint32_t voltage_scale = 0;
    uint32_t flash_latency = 0;

    /* Used by the USB stack */
    clk_freq = evk_clk_freq;
 80020e2:	4b93      	ldr	r3, [pc, #588]	; (8002330 <evk_set_system_clock+0x250>)
{
 80020e4:	b094      	sub	sp, #80	; 0x50
 80020e6:	4604      	mov	r4, r0
    clk_freq = evk_clk_freq;
 80020e8:	6018      	str	r0, [r3, #0]

    /* Disable clocks */
    HAL_RCC_DeInit();
 80020ea:	f00c fabb 	bl	800e664 <HAL_RCC_DeInit>
 */
static void config_clock_freq(RCC_OscInitTypeDef *RCC_OscInitStruct,
                              RCC_ClkInitTypeDef *RCC_ClkInitStruct,
                              evk_clk_freq_t evk_clk_freq)
{
    switch(evk_clk_freq) {
 80020ee:	4b91      	ldr	r3, [pc, #580]	; (8002334 <evk_set_system_clock+0x254>)
 80020f0:	429c      	cmp	r4, r3
 80020f2:	f000 80c1 	beq.w	8002278 <evk_set_system_clock+0x198>
 80020f6:	d83d      	bhi.n	8002174 <evk_set_system_clock+0x94>
 80020f8:	4b8f      	ldr	r3, [pc, #572]	; (8002338 <evk_set_system_clock+0x258>)
 80020fa:	429c      	cmp	r4, r3
 80020fc:	f000 80d8 	beq.w	80022b0 <evk_set_system_clock+0x1d0>
 8002100:	f503 0390 	add.w	r3, r3, #4718592	; 0x480000
 8002104:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8002108:	429c      	cmp	r4, r3
 800210a:	d15b      	bne.n	80021c4 <evk_set_system_clock+0xe4>
 *  @param[in] RCC_OscInitStruct  RCC Oscillator configuration structure definition.
 */
static void set_oscillator_pll_25_20mhz(RCC_OscInitTypeDef *RCC_OscInitStruct)
{
    RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 800210c:	2401      	movs	r4, #1
 800210e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002112:	e9cd 4006 	strd	r4, r0, [sp, #24]
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct->PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002116:	2203      	movs	r2, #3
    RCC_OscInitStruct->PLL.PLLM = RCC_PLLM_DIV3;
    RCC_OscInitStruct->PLL.PLLN = 50;
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV8;
 8002118:	2108      	movs	r1, #8
static void set_system_clock_pll(RCC_ClkInitTypeDef *RCC_ClkInitStruct)
{
    RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct->SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct->AHBCLKDivider = RCC_SYSCLK_DIV1;
 800211a:	2300      	movs	r3, #0
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800211c:	2402      	movs	r4, #2
    RCC_OscInitStruct->PLL.PLLN = 50;
 800211e:	2032      	movs	r0, #50	; 0x32
    RCC_OscInitStruct->PLL.PLLN = 40;
 8002120:	e9cd 200f 	strd	r2, r0, [sp, #60]	; 0x3c
    RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002124:	200f      	movs	r0, #15
    RCC_OscInitStruct->PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002126:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
    RCC_OscInitStruct->PLL.PLLQ = RCC_PLLQ_DIV8;
 800212a:	e9cd 1111 	strd	r1, r1, [sp, #68]	; 0x44
    RCC_ClkInitStruct->SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800212e:	e9cd 0201 	strd	r0, r2, [sp, #4]
    RCC_ClkInitStruct->APB1CLKDivider = RCC_HCLK_DIV1;
 8002132:	e9cd 3303 	strd	r3, r3, [sp, #12]
    RCC_OscInitStruct->PLL.PLLR = RCC_PLLR_DIV8;
 8002136:	9113      	str	r1, [sp, #76]	; 0x4c
    RCC_ClkInitStruct->APB2CLKDivider = RCC_HCLK_DIV1;
 8002138:	9305      	str	r3, [sp, #20]
    HAL_PWREx_ControlVoltageScaling(voltage_scale);
 800213a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800213e:	f00c fa13 	bl	800e568 <HAL_PWREx_ControlVoltageScaling>
            /* Unsupported frequency */
            Error_Handler();
        }
    } else if (voltage_scale == PWR_REGULATOR_VOLTAGE_SCALE2) {
        if (evk_clk_freq <= RANGE2_0WS_FREQ) {
            flash_latency = FLASH_ACR_LATENCY_0WS;
 8002142:	2400      	movs	r4, #0
    if (HAL_RCC_OscConfig(RCC_OscInitStruct) != HAL_OK) {
 8002144:	a806      	add	r0, sp, #24
 8002146:	f00c faed 	bl	800e724 <HAL_RCC_OscConfig>
 800214a:	2800      	cmp	r0, #0
 800214c:	d169      	bne.n	8002222 <evk_set_system_clock+0x142>
    if (HAL_RCC_ClockConfig(RCC_ClkInitStruct, flash_latency) != HAL_OK) {
 800214e:	4621      	mov	r1, r4
 8002150:	a801      	add	r0, sp, #4
 8002152:	f00c fd93 	bl	800ec7c <HAL_RCC_ClockConfig>
 8002156:	2800      	cmp	r0, #0
 8002158:	d16b      	bne.n	8002232 <evk_set_system_clock+0x152>
    return SystemCoreClock;
 800215a:	4a78      	ldr	r2, [pc, #480]	; (800233c <evk_set_system_clock+0x25c>)
    HAL_SYSTICK_Config(evk_get_system_clock_freq()/1000);
 800215c:	4b78      	ldr	r3, [pc, #480]	; (8002340 <evk_set_system_clock+0x260>)
 800215e:	6810      	ldr	r0, [r2, #0]
 8002160:	fba3 3000 	umull	r3, r0, r3, r0
 8002164:	0980      	lsrs	r0, r0, #6
 8002166:	f00a fc39 	bl	800c9dc <HAL_SYSTICK_Config>
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800216a:	2004      	movs	r0, #4
 800216c:	f00a fc60 	bl	800ca30 <HAL_SYSTICK_CLKSourceConfig>
}
 8002170:	b014      	add	sp, #80	; 0x50
 8002172:	bd10      	pop	{r4, pc}
    switch(evk_clk_freq) {
 8002174:	4b73      	ldr	r3, [pc, #460]	; (8002344 <evk_set_system_clock+0x264>)
 8002176:	429c      	cmp	r4, r3
 8002178:	f000 80a5 	beq.w	80022c6 <evk_set_system_clock+0x1e6>
 800217c:	4b72      	ldr	r3, [pc, #456]	; (8002348 <evk_set_system_clock+0x268>)
 800217e:	429c      	cmp	r4, r3
 8002180:	d12c      	bne.n	80021dc <evk_set_system_clock+0xfc>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8002182:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002186:	f04f 0e01 	mov.w	lr, #1
    RCC_OscInitStruct->PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800218a:	2203      	movs	r2, #3
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 800218c:	e9cd e006 	strd	lr, r0, [sp, #24]
    RCC_OscInitStruct->PLL.PLLN = 83;
 8002190:	2053      	movs	r0, #83	; 0x53
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8002192:	2102      	movs	r1, #2
    RCC_OscInitStruct->PLL.PLLN = 83;
 8002194:	e9cd 200f 	strd	r2, r0, [sp, #60]	; 0x3c
    RCC_OscInitStruct->PLL.PLLQ = RCC_PLLQ_DIV6;
 8002198:	2006      	movs	r0, #6
    RCC_ClkInitStruct->AHBCLKDivider = RCC_SYSCLK_DIV1;
 800219a:	2300      	movs	r3, #0
    RCC_OscInitStruct->PLL.PLLQ = RCC_PLLQ_DIV6;
 800219c:	e9cd 1011 	strd	r1, r0, [sp, #68]	; 0x44
    RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a0:	200f      	movs	r0, #15
    RCC_OscInitStruct->PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021a2:	e9cd 120d 	strd	r1, r2, [sp, #52]	; 0x34
    RCC_ClkInitStruct->SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a6:	e9cd 0201 	strd	r0, r2, [sp, #4]
    RCC_ClkInitStruct->APB1CLKDivider = RCC_HCLK_DIV1;
 80021aa:	e9cd 3303 	strd	r3, r3, [sp, #12]
    RCC_OscInitStruct->PLL.PLLR = RCC_PLLR_DIV2;
 80021ae:	9113      	str	r1, [sp, #76]	; 0x4c
    RCC_ClkInitStruct->APB2CLKDivider = RCC_HCLK_DIV1;
 80021b0:	9305      	str	r3, [sp, #20]
    HAL_PWREx_ControlVoltageScaling(voltage_scale);
 80021b2:	2000      	movs	r0, #0
 80021b4:	f00c f9d8 	bl	800e568 <HAL_PWREx_ControlVoltageScaling>
        } else if (evk_clk_freq <= RANGE1_7WS_FREQ) {
 80021b8:	4b64      	ldr	r3, [pc, #400]	; (800234c <evk_set_system_clock+0x26c>)
 80021ba:	429c      	cmp	r4, r3
 80021bc:	f200 809b 	bhi.w	80022f6 <evk_set_system_clock+0x216>
            flash_latency = FLASH_ACR_LATENCY_7WS;
 80021c0:	2407      	movs	r4, #7
 80021c2:	e7bf      	b.n	8002144 <evk_set_system_clock+0x64>
    switch(evk_clk_freq) {
 80021c4:	4b62      	ldr	r3, [pc, #392]	; (8002350 <evk_set_system_clock+0x270>)
 80021c6:	429c      	cmp	r4, r3
 80021c8:	d147      	bne.n	800225a <evk_set_system_clock+0x17a>
    RCC_ClkInitStruct->AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ca:	2300      	movs	r3, #0
    RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021cc:	210f      	movs	r1, #15
        RCC_ClkInitStruct->SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80021ce:	2201      	movs	r2, #1
    RCC_ClkInitStruct->APB1CLKDivider = RCC_HCLK_DIV1;
 80021d0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021d4:	9101      	str	r1, [sp, #4]
    RCC_ClkInitStruct->APB2CLKDivider = RCC_HCLK_DIV1;
 80021d6:	9305      	str	r3, [sp, #20]
        RCC_ClkInitStruct->SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80021d8:	9202      	str	r2, [sp, #8]
        break;
 80021da:	e7ae      	b.n	800213a <evk_set_system_clock+0x5a>
    switch(evk_clk_freq) {
 80021dc:	4b5d      	ldr	r3, [pc, #372]	; (8002354 <evk_set_system_clock+0x274>)
 80021de:	429c      	cmp	r4, r3
 80021e0:	d12a      	bne.n	8002238 <evk_set_system_clock+0x158>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80021e2:	2001      	movs	r0, #1
 80021e4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    RCC_OscInitStruct->PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021e8:	2203      	movs	r2, #3
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80021ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80021ee:	2002      	movs	r0, #2
    RCC_OscInitStruct->PLL.PLLN = 80;
 80021f0:	2150      	movs	r1, #80	; 0x50
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV4;
 80021f2:	2404      	movs	r4, #4
    RCC_ClkInitStruct->AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f4:	2300      	movs	r3, #0
    RCC_OscInitStruct->PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021f6:	e9cd 020d 	strd	r0, r2, [sp, #52]	; 0x34
    RCC_OscInitStruct->PLL.PLLN = 80;
 80021fa:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
    HAL_PWREx_ControlVoltageScaling(voltage_scale);
 80021fe:	f44f 7000 	mov.w	r0, #512	; 0x200
    RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002202:	210f      	movs	r1, #15
    RCC_OscInitStruct->PLL.PLLQ = RCC_PLLQ_DIV4;
 8002204:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
    RCC_ClkInitStruct->AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002208:	e9cd 2302 	strd	r2, r3, [sp, #8]
    RCC_ClkInitStruct->APB2CLKDivider = RCC_HCLK_DIV1;
 800220c:	e9cd 3304 	strd	r3, r3, [sp, #16]
    RCC_OscInitStruct->PLL.PLLR = RCC_PLLR_DIV4;
 8002210:	9413      	str	r4, [sp, #76]	; 0x4c
    RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002212:	9101      	str	r1, [sp, #4]
    HAL_PWREx_ControlVoltageScaling(voltage_scale);
 8002214:	f00c f9a8 	bl	800e568 <HAL_PWREx_ControlVoltageScaling>
    if (HAL_RCC_OscConfig(RCC_OscInitStruct) != HAL_OK) {
 8002218:	a806      	add	r0, sp, #24
 800221a:	f00c fa83 	bl	800e724 <HAL_RCC_OscConfig>
 800221e:	2800      	cmp	r0, #0
 8002220:	d095      	beq.n	800214e <evk_set_system_clock+0x6e>
        Error_Handler();
 8002222:	f000 f9d1 	bl	80025c8 <Error_Handler>
    if (HAL_RCC_ClockConfig(RCC_ClkInitStruct, flash_latency) != HAL_OK) {
 8002226:	4621      	mov	r1, r4
 8002228:	a801      	add	r0, sp, #4
 800222a:	f00c fd27 	bl	800ec7c <HAL_RCC_ClockConfig>
 800222e:	2800      	cmp	r0, #0
 8002230:	d093      	beq.n	800215a <evk_set_system_clock+0x7a>
        Error_Handler();
 8002232:	f000 f9c9 	bl	80025c8 <Error_Handler>
 8002236:	e790      	b.n	800215a <evk_set_system_clock+0x7a>
        Error_Handler();
 8002238:	f000 f9c6 	bl	80025c8 <Error_Handler>
    } else if (evk_clk_freq <= RANGE1_BOOST1_LIMIT) {
 800223c:	4b46      	ldr	r3, [pc, #280]	; (8002358 <evk_set_system_clock+0x278>)
 800223e:	429c      	cmp	r4, r3
 8002240:	d911      	bls.n	8002266 <evk_set_system_clock+0x186>
    } else if (evk_clk_freq <= RANGE1_BOOST0_LIMIT) {
 8002242:	4b46      	ldr	r3, [pc, #280]	; (800235c <evk_set_system_clock+0x27c>)
 8002244:	429c      	cmp	r4, r3
 8002246:	d9b4      	bls.n	80021b2 <evk_set_system_clock+0xd2>
        Error_Handler();
 8002248:	f000 f9be 	bl	80025c8 <Error_Handler>
    HAL_PWREx_ControlVoltageScaling(voltage_scale);
 800224c:	2000      	movs	r0, #0
 800224e:	f00c f98b 	bl	800e568 <HAL_PWREx_ControlVoltageScaling>
            Error_Handler();
 8002252:	f000 f9b9 	bl	80025c8 <Error_Handler>
    uint32_t flash_latency = 0;
 8002256:	2400      	movs	r4, #0
 8002258:	e774      	b.n	8002144 <evk_set_system_clock+0x64>
        Error_Handler();
 800225a:	f000 f9b5 	bl	80025c8 <Error_Handler>
    if (evk_clk_freq < RANGE2_LOWPOW_LIMIT) {
 800225e:	4b40      	ldr	r3, [pc, #256]	; (8002360 <evk_set_system_clock+0x280>)
 8002260:	429c      	cmp	r4, r3
 8002262:	f67f af6a 	bls.w	800213a <evk_set_system_clock+0x5a>
    HAL_PWREx_ControlVoltageScaling(voltage_scale);
 8002266:	f44f 7000 	mov.w	r0, #512	; 0x200
 800226a:	f00c f97d 	bl	800e568 <HAL_PWREx_ControlVoltageScaling>
        } else if (evk_clk_freq <= RANGE1_2WS_FREQ) {
 800226e:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <evk_set_system_clock+0x284>)
 8002270:	429c      	cmp	r4, r3
 8002272:	d847      	bhi.n	8002304 <evk_set_system_clock+0x224>
            flash_latency = FLASH_ACR_LATENCY_1WS;
 8002274:	2401      	movs	r4, #1
 8002276:	e765      	b.n	8002144 <evk_set_system_clock+0x64>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8002278:	2401      	movs	r4, #1
 800227a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800227e:	e9cd 4006 	strd	r4, r0, [sp, #24]
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8002282:	2002      	movs	r0, #2
 8002284:	900d      	str	r0, [sp, #52]	; 0x34
    RCC_OscInitStruct->PLL.PLLN = 80;
 8002286:	2050      	movs	r0, #80	; 0x50
 8002288:	9010      	str	r0, [sp, #64]	; 0x40
    RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800228a:	200f      	movs	r0, #15
    RCC_OscInitStruct->PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800228c:	2203      	movs	r2, #3
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV8;
 800228e:	2108      	movs	r1, #8
    RCC_ClkInitStruct->AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002290:	2300      	movs	r3, #0
    RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002292:	9001      	str	r0, [sp, #4]
    HAL_PWREx_ControlVoltageScaling(voltage_scale);
 8002294:	f44f 7000 	mov.w	r0, #512	; 0x200
    RCC_OscInitStruct->PLL.PLLM = RCC_PLLM_DIV3;
 8002298:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
    RCC_OscInitStruct->PLL.PLLQ = RCC_PLLQ_DIV8;
 800229c:	e9cd 1111 	strd	r1, r1, [sp, #68]	; 0x44
    RCC_ClkInitStruct->AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    RCC_ClkInitStruct->APB2CLKDivider = RCC_HCLK_DIV1;
 80022a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
    RCC_OscInitStruct->PLL.PLLR = RCC_PLLR_DIV8;
 80022a8:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_PWREx_ControlVoltageScaling(voltage_scale);
 80022aa:	f00c f95d 	bl	800e568 <HAL_PWREx_ControlVoltageScaling>
        } else if (evk_clk_freq <= RANGE1_2WS_FREQ) {
 80022ae:	e7b3      	b.n	8002218 <evk_set_system_clock+0x138>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80022b0:	2401      	movs	r4, #1
 80022b2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80022b6:	e9cd 4006 	strd	r4, r0, [sp, #24]
    RCC_OscInitStruct->PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ba:	2203      	movs	r2, #3
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV8;
 80022bc:	2108      	movs	r1, #8
    RCC_ClkInitStruct->AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022be:	2300      	movs	r3, #0
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80022c0:	2402      	movs	r4, #2
    RCC_OscInitStruct->PLL.PLLN = 40;
 80022c2:	2028      	movs	r0, #40	; 0x28
 80022c4:	e72c      	b.n	8002120 <evk_set_system_clock+0x40>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80022c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80022ca:	f04f 0c01 	mov.w	ip, #1
    RCC_OscInitStruct->PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ce:	2103      	movs	r1, #3
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80022d0:	e9cd c006 	strd	ip, r0, [sp, #24]
    RCC_OscInitStruct->PLL.PLLN = 80;
 80022d4:	2050      	movs	r0, #80	; 0x50
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80022d6:	2302      	movs	r3, #2
    RCC_ClkInitStruct->AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d8:	2200      	movs	r2, #0
    RCC_OscInitStruct->PLL.PLLN = 80;
 80022da:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
    RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022de:	200f      	movs	r0, #15
    RCC_OscInitStruct->PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022e0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    RCC_OscInitStruct->PLL.PLLQ = RCC_PLLQ_DIV2;
 80022e4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    RCC_ClkInitStruct->SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e8:	e9cd 0101 	strd	r0, r1, [sp, #4]
    RCC_ClkInitStruct->APB1CLKDivider = RCC_HCLK_DIV1;
 80022ec:	e9cd 2203 	strd	r2, r2, [sp, #12]
    RCC_OscInitStruct->PLL.PLLR = RCC_PLLR_DIV2;
 80022f0:	9313      	str	r3, [sp, #76]	; 0x4c
    RCC_ClkInitStruct->APB2CLKDivider = RCC_HCLK_DIV1;
 80022f2:	9205      	str	r2, [sp, #20]
}
 80022f4:	e75d      	b.n	80021b2 <evk_set_system_clock+0xd2>
        } else if (evk_clk_freq <= RANGE1_8WS_FREQ) {
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <evk_set_system_clock+0x27c>)
 80022f8:	429c      	cmp	r4, r3
            flash_latency = FLASH_ACR_LATENCY_8WS;
 80022fa:	bf98      	it	ls
 80022fc:	2408      	movls	r4, #8
        } else if (evk_clk_freq <= RANGE1_8WS_FREQ) {
 80022fe:	f67f af21 	bls.w	8002144 <evk_set_system_clock+0x64>
 8002302:	e7a6      	b.n	8002252 <evk_set_system_clock+0x172>
        } else if (evk_clk_freq <= RANGE1_3WS_FREQ) {
 8002304:	4b18      	ldr	r3, [pc, #96]	; (8002368 <evk_set_system_clock+0x288>)
 8002306:	429c      	cmp	r4, r3
 8002308:	d801      	bhi.n	800230e <evk_set_system_clock+0x22e>
            flash_latency = FLASH_ACR_LATENCY_3WS;
 800230a:	2403      	movs	r4, #3
 800230c:	e71a      	b.n	8002144 <evk_set_system_clock+0x64>
        } else if (evk_clk_freq <= RANGE1_4WS_FREQ) {
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <evk_set_system_clock+0x28c>)
 8002310:	429c      	cmp	r4, r3
 8002312:	d90b      	bls.n	800232c <evk_set_system_clock+0x24c>
        } else if (evk_clk_freq <= RANGE1_5WS_FREQ) {
 8002314:	4b16      	ldr	r3, [pc, #88]	; (8002370 <evk_set_system_clock+0x290>)
 8002316:	429c      	cmp	r4, r3
 8002318:	d801      	bhi.n	800231e <evk_set_system_clock+0x23e>
            flash_latency = FLASH_ACR_LATENCY_5WS;
 800231a:	2405      	movs	r4, #5
 800231c:	e712      	b.n	8002144 <evk_set_system_clock+0x64>
        } else if (evk_clk_freq <= RANGE1_6WS_FREQ) {
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <evk_set_system_clock+0x294>)
 8002320:	429c      	cmp	r4, r3
            flash_latency = FLASH_ACR_LATENCY_6WS;
 8002322:	bf98      	it	ls
 8002324:	2406      	movls	r4, #6
        } else if (evk_clk_freq <= RANGE1_6WS_FREQ) {
 8002326:	f67f af0d 	bls.w	8002144 <evk_set_system_clock+0x64>
 800232a:	e745      	b.n	80021b8 <evk_set_system_clock+0xd8>
            flash_latency = FLASH_ACR_LATENCY_4WS;
 800232c:	2404      	movs	r4, #4
 800232e:	e709      	b.n	8002144 <evk_set_system_clock+0x64>
 8002330:	20004bd0 	.word	0x20004bd0
 8002334:	02710000 	.word	0x02710000
 8002338:	01388000 	.word	0x01388000
 800233c:	200003c4 	.word	0x200003c4
 8002340:	10624dd3 	.word	0x10624dd3
 8002344:	09c40000 	.word	0x09c40000
 8002348:	0a21c000 	.word	0x0a21c000
 800234c:	09896800 	.word	0x09896800
 8002350:	00f42400 	.word	0x00f42400
 8002354:	04e20000 	.word	0x04e20000
 8002358:	08f0d180 	.word	0x08f0d180
 800235c:	0a21fe80 	.word	0x0a21fe80
 8002360:	018cba7f 	.word	0x018cba7f
 8002364:	03938700 	.word	0x03938700
 8002368:	04c4b400 	.word	0x04c4b400
 800236c:	05f5e100 	.word	0x05f5e100
 8002370:	07270e00 	.word	0x07270e00
 8002374:	08583b00 	.word	0x08583b00

08002378 <evk_get_system_clock_freq>:
    return SystemCoreClock;
 8002378:	4b01      	ldr	r3, [pc, #4]	; (8002380 <evk_get_system_clock_freq+0x8>)
}
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	200003c4 	.word	0x200003c4

08002384 <evk_usb_clock_deinit>:
{
 8002384:	b500      	push	{lr}
 8002386:	b08f      	sub	sp, #60	; 0x3c
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002388:	2234      	movs	r2, #52	; 0x34
 800238a:	2100      	movs	r1, #0
 800238c:	a801      	add	r0, sp, #4
 800238e:	f00f fd15 	bl	8011dbc <memset>
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8002392:	2320      	movs	r3, #32
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002394:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8002396:	9300      	str	r3, [sp, #0]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002398:	f00c f9c4 	bl	800e724 <HAL_RCC_OscConfig>
 800239c:	b910      	cbnz	r0, 80023a4 <evk_usb_clock_deinit+0x20>
}
 800239e:	b00f      	add	sp, #60	; 0x3c
 80023a0:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80023a4:	f000 f910 	bl	80025c8 <Error_Handler>
}
 80023a8:	b00f      	add	sp, #60	; 0x3c
 80023aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80023ae:	bf00      	nop

080023b0 <evk_init_ext_osc_clk>:
{
 80023b0:	b510      	push	{r4, lr}
 *
 *  The oscillator is used as an external PLL for the SR radio.
 */
static void gpio_pll_sel_init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b2:	2400      	movs	r4, #0
{
 80023b4:	b086      	sub	sp, #24

    /* Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(PLL_SEL_PORT, PLL_SEL_PIN, GPIO_PIN_RESET);
 80023b6:	4622      	mov	r2, r4
 80023b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80023c4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80023c8:	9405      	str	r4, [sp, #20]
    HAL_GPIO_WritePin(PLL_SEL_PORT, PLL_SEL_PIN, GPIO_PIN_RESET);
 80023ca:	f00a fda9 	bl	800cf20 <HAL_GPIO_WritePin>

    /* Configure GPIO pins */
    GPIO_InitStruct.Pin   = PLL_SEL_PIN;
 80023ce:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80023d2:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
    HAL_GPIO_Init(PLL_SEL_PORT, &GPIO_InitStruct);
 80023d4:	a901      	add	r1, sp, #4
 80023d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80023da:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80023de:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(PLL_SEL_PORT, &GPIO_InitStruct);
 80023e2:	f00a fc8f 	bl	800cd04 <HAL_GPIO_Init>
}
 80023e6:	b006      	add	sp, #24
 80023e8:	bd10      	pop	{r4, pc}
 80023ea:	bf00      	nop

080023ec <evk_init_xtal_clk>:
{
 80023ec:	b510      	push	{r4, lr}
    return SystemCoreClock;
 80023ee:	4b2e      	ldr	r3, [pc, #184]	; (80024a8 <evk_init_xtal_clk+0xbc>)
{
 80023f0:	b090      	sub	sp, #64	; 0x40
    return SystemCoreClock;
 80023f2:	681a      	ldr	r2, [r3, #0]
    TIM_MasterConfigTypeDef master_config = {0};
 80023f4:	2300      	movs	r3, #0
 80023f6:	e9cd 3301 	strd	r3, r3, [sp, #4]
    TIM_OC_InitTypeDef config_oc = {0};
 80023fa:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80023fe:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8002402:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    TIM_MasterConfigTypeDef master_config = {0};
 8002406:	9303      	str	r3, [sp, #12]
    TIM_OC_InitTypeDef config_oc = {0};
 8002408:	930f      	str	r3, [sp, #60]	; 0x3c
    if ((system_clock_freq % XTAL_CLK_FREQ) == 0) {
 800240a:	f3c2 030e 	ubfx	r3, r2, #0, #15
 800240e:	2b00      	cmp	r3, #0
 8002410:	d137      	bne.n	8002482 <evk_init_xtal_clk+0x96>
    htim5.Instance = TIM5;
 8002412:	4826      	ldr	r0, [pc, #152]	; (80024ac <evk_init_xtal_clk+0xc0>)
        __HAL_RCC_TIM5_CLK_ENABLE();
 8002414:	4926      	ldr	r1, [pc, #152]	; (80024b0 <evk_init_xtal_clk+0xc4>)
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	6103      	str	r3, [r0, #16]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002418:	e9c0 3301 	strd	r3, r3, [r0, #4]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241c:	6183      	str	r3, [r0, #24]
        __HAL_RCC_TIM5_CLK_ENABLE();
 800241e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8002420:	f043 0308 	orr.w	r3, r3, #8
 8002424:	658b      	str	r3, [r1, #88]	; 0x58
 8002426:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	9300      	str	r3, [sp, #0]
    htim5.Instance = TIM5;
 800242e:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <evk_init_xtal_clk+0xc8>)
 8002430:	6003      	str	r3, [r0, #0]
    htim5.Init.Period = pwm_period - 1;
 8002432:	f3c2 33cf 	ubfx	r3, r2, #15, #16
 8002436:	3b01      	subs	r3, #1
    config_oc->Pulse = (pwm_period / 2) - 1;
 8002438:	f3c2 420e 	ubfx	r2, r2, #16, #15
 800243c:	3a01      	subs	r2, #1
    htim5.Init.Period = pwm_period - 1;
 800243e:	60c3      	str	r3, [r0, #12]
    config_oc->OCMode = TIM_OCMODE_PWM1;
 8002440:	2360      	movs	r3, #96	; 0x60
        __HAL_RCC_TIM5_CLK_ENABLE();
 8002442:	9900      	ldr	r1, [sp, #0]
    config_oc->Pulse = (pwm_period / 2) - 1;
 8002444:	920a      	str	r2, [sp, #40]	; 0x28
    config_oc->OCMode = TIM_OCMODE_PWM1;
 8002446:	9309      	str	r3, [sp, #36]	; 0x24
        if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8002448:	f00d ffb6 	bl	80103b8 <HAL_TIM_PWM_Init>
 800244c:	bb00      	cbnz	r0, 8002490 <evk_init_xtal_clk+0xa4>
        if (HAL_TIMEx_MasterConfigSynchronization(&htim5, master_config) != HAL_OK) {
 800244e:	4817      	ldr	r0, [pc, #92]	; (80024ac <evk_init_xtal_clk+0xc0>)
 8002450:	a901      	add	r1, sp, #4
 8002452:	f00e f8cd 	bl	80105f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002456:	bb18      	cbnz	r0, 80024a0 <evk_init_xtal_clk+0xb4>
        if (HAL_TIM_PWM_ConfigChannel(&htim5, config_oc, TIM_CHANNEL_3) != HAL_OK) {
 8002458:	4814      	ldr	r0, [pc, #80]	; (80024ac <evk_init_xtal_clk+0xc0>)
 800245a:	2208      	movs	r2, #8
 800245c:	a909      	add	r1, sp, #36	; 0x24
 800245e:	f00e f82f 	bl	80104c0 <HAL_TIM_PWM_ConfigChannel>
 8002462:	b990      	cbnz	r0, 800248a <evk_init_xtal_clk+0x9e>
static void gpio_xtal_clk_init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    GPIO_InitStruct.Pin = XTAL_CLK_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002466:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = XTAL_CLK_PIN;
 8002468:	2404      	movs	r4, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(XTAL_CLK_PORT, &GPIO_InitStruct);
 800246a:	a904      	add	r1, sp, #16
 800246c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	e9cd 2206 	strd	r2, r2, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	e9cd 4304 	strd	r4, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002478:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(XTAL_CLK_PORT, &GPIO_InitStruct);
 800247a:	f00a fc43 	bl	800cd04 <HAL_GPIO_Init>
}
 800247e:	b010      	add	sp, #64	; 0x40
 8002480:	bd10      	pop	{r4, pc}
        Error_Handler();
 8002482:	f000 f8a1 	bl	80025c8 <Error_Handler>
}
 8002486:	b010      	add	sp, #64	; 0x40
 8002488:	bd10      	pop	{r4, pc}
            Error_Handler();
 800248a:	f000 f89d 	bl	80025c8 <Error_Handler>
 800248e:	e7e9      	b.n	8002464 <evk_init_xtal_clk+0x78>
            Error_Handler();
 8002490:	f000 f89a 	bl	80025c8 <Error_Handler>
        if (HAL_TIMEx_MasterConfigSynchronization(&htim5, master_config) != HAL_OK) {
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <evk_init_xtal_clk+0xc0>)
 8002496:	a901      	add	r1, sp, #4
 8002498:	f00e f8aa 	bl	80105f0 <HAL_TIMEx_MasterConfigSynchronization>
 800249c:	2800      	cmp	r0, #0
 800249e:	d0db      	beq.n	8002458 <evk_init_xtal_clk+0x6c>
            Error_Handler();
 80024a0:	f000 f892 	bl	80025c8 <Error_Handler>
 80024a4:	e7d8      	b.n	8002458 <evk_init_xtal_clk+0x6c>
 80024a6:	bf00      	nop
 80024a8:	200003c4 	.word	0x200003c4
 80024ac:	20004bd4 	.word	0x20004bd4
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40000c00 	.word	0x40000c00

080024b8 <evk_init_usb_clock>:
{
 80024b8:	b500      	push	{lr}
 80024ba:	b0a5      	sub	sp, #148	; 0x94
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024bc:	2234      	movs	r2, #52	; 0x34
 80024be:	2100      	movs	r1, #0
 80024c0:	a802      	add	r0, sp, #8
 80024c2:	f00f fc7b 	bl	8011dbc <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c6:	2254      	movs	r2, #84	; 0x54
 80024c8:	2100      	movs	r1, #0
 80024ca:	a80f      	add	r0, sp, #60	; 0x3c
 80024cc:	f00f fc76 	bl	8011dbc <memset>
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80024d0:	2220      	movs	r2, #32
    RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80024d2:	2301      	movs	r3, #1
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80024d4:	a801      	add	r0, sp, #4
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80024d6:	9201      	str	r2, [sp, #4]
    RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80024d8:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80024da:	f00c f923 	bl	800e724 <HAL_RCC_OscConfig>
 80024de:	b958      	cbnz	r0, 80024f8 <evk_init_usb_clock+0x40>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80024e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80024e4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80024e6:	a80f      	add	r0, sp, #60	; 0x3c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80024e8:	920f      	str	r2, [sp, #60]	; 0x3c
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80024ea:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80024ec:	f00c fd1e 	bl	800ef2c <HAL_RCCEx_PeriphCLKConfig>
 80024f0:	b928      	cbnz	r0, 80024fe <evk_init_usb_clock+0x46>
}
 80024f2:	b025      	add	sp, #148	; 0x94
 80024f4:	f85d fb04 	ldr.w	pc, [sp], #4
        Error_Handler();
 80024f8:	f000 f866 	bl	80025c8 <Error_Handler>
 80024fc:	e7f0      	b.n	80024e0 <evk_init_usb_clock+0x28>
        Error_Handler();
 80024fe:	f000 f863 	bl	80025c8 <Error_Handler>
}
 8002502:	b025      	add	sp, #148	; 0x94
 8002504:	f85d fb04 	ldr.w	pc, [sp], #4

08002508 <SystemClock_Config>:
{
 8002508:	b508      	push	{r3, lr}
    evk_set_system_clock(clk_freq);
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <SystemClock_Config+0x14>)
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	f7ff fde7 	bl	80020e0 <evk_set_system_clock>
}
 8002512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    evk_init_usb_clock();
 8002516:	f7ff bfcf 	b.w	80024b8 <evk_init_usb_clock>
 800251a:	bf00      	nop
 800251c:	20004bd0 	.word	0x20004bd0

08002520 <HAL_MspInit>:
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002520:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <HAL_MspInit+0x38>)
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002522:	490e      	ldr	r1, [pc, #56]	; (800255c <HAL_MspInit+0x3c>)
 8002524:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	661a      	str	r2, [r3, #96]	; 0x60
 800252c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800252e:	b082      	sub	sp, #8
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002530:	f002 0201 	and.w	r2, r2, #1
 8002534:	9200      	str	r2, [sp, #0]
 8002536:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800253a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800253e:	659a      	str	r2, [r3, #88]	; 0x58
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	9b01      	ldr	r3, [sp, #4]
 800254a:	688b      	ldr	r3, [r1, #8]
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	608b      	str	r3, [r1, #8]
}
 8002552:	b002      	add	sp, #8
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	40007000 	.word	0x40007000

08002560 <default_irq_callback>:
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop

08002564 <evk_set_usb_detect_callback>:
    common_callback = callback;
}

void evk_set_usb_detect_callback(irq_callback callback)
{
    exti0_irq_callback = callback;
 8002564:	4b01      	ldr	r3, [pc, #4]	; (800256c <evk_set_usb_detect_callback+0x8>)
 8002566:	6018      	str	r0, [r3, #0]
}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	2000027c 	.word	0x2000027c

08002570 <evk_set_radio_irq_callback>:

void evk_set_radio_irq_callback(irq_callback callback)
{
    exti2_irq_callback = callback;
 8002570:	4b01      	ldr	r3, [pc, #4]	; (8002578 <evk_set_radio_irq_callback+0x8>)
 8002572:	6018      	str	r0, [r3, #0]
}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000280 	.word	0x20000280

0800257c <evk_set_radio_dma_rx_callback>:

void evk_set_radio_dma_rx_callback(irq_callback callback)
{
    radio1_dma_callback = callback;
 800257c:	4b01      	ldr	r3, [pc, #4]	; (8002584 <evk_set_radio_dma_rx_callback+0x8>)
 800257e:	6018      	str	r0, [r3, #0]
}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000288 	.word	0x20000288

08002588 <evk_set_pendsv_callback>:
    app_timer_callback = callback;
}

void evk_set_pendsv_callback(irq_callback callback)
{
    pendsv_irq_callback = callback;
 8002588:	4b01      	ldr	r3, [pc, #4]	; (8002590 <evk_set_pendsv_callback+0x8>)
 800258a:	6018      	str	r0, [r3, #0]
}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000284 	.word	0x20000284

08002594 <evk_set_usb_irq_callback>:

void evk_set_usb_irq_callback(irq_callback callback)
{
    usb_irq_callback = callback;
 8002594:	4b01      	ldr	r3, [pc, #4]	; (800259c <evk_set_usb_irq_callback+0x8>)
 8002596:	6018      	str	r0, [r3, #0]
}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000290 	.word	0x20000290

080025a0 <evk_enter_critical>:

void evk_enter_critical(void)
{
    if (!nested_critical) {
 80025a0:	4a03      	ldr	r2, [pc, #12]	; (80025b0 <evk_enter_critical+0x10>)
 80025a2:	6813      	ldr	r3, [r2, #0]
 80025a4:	b90b      	cbnz	r3, 80025aa <evk_enter_critical+0xa>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a6:	b672      	cpsid	i
        /* First time enter critical */
        __disable_irq();
    }
    ++nested_critical;
 80025a8:	6813      	ldr	r3, [r2, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	6013      	str	r3, [r2, #0]
}
 80025ae:	4770      	bx	lr
 80025b0:	20004c20 	.word	0x20004c20

080025b4 <evk_exit_critical>:

void evk_exit_critical(void)
{
    --nested_critical;
 80025b4:	4a03      	ldr	r2, [pc, #12]	; (80025c4 <evk_exit_critical+0x10>)
 80025b6:	6813      	ldr	r3, [r2, #0]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	6013      	str	r3, [r2, #0]
    if (!nested_critical) {
 80025bc:	b903      	cbnz	r3, 80025c0 <evk_exit_critical+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
 80025be:	b662      	cpsie	i
        /* Last time exit critical */
        __enable_irq();
    }
}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20004c20 	.word	0x20004c20

080025c8 <Error_Handler>:

void Error_Handler(void)
{

}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop

080025cc <HardFault_Handler>:

/** @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
    while (1) {
 80025cc:	e7fe      	b.n	80025cc <HardFault_Handler>
 80025ce:	bf00      	nop

080025d0 <MemManage_Handler>:

/** @brief This function handles Memory Management fault.
 */
void MemManage_Handler(void)
{
    while (1) {
 80025d0:	e7fe      	b.n	80025d0 <MemManage_Handler>
 80025d2:	bf00      	nop

080025d4 <BusFault_Handler>:

/** @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
    while (1) {
 80025d4:	e7fe      	b.n	80025d4 <BusFault_Handler>
 80025d6:	bf00      	nop

080025d8 <UsageFault_Handler>:

/** @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
    while (1) {
 80025d8:	e7fe      	b.n	80025d8 <UsageFault_Handler>
 80025da:	bf00      	nop

080025dc <SVC_Handler>:
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop

080025e0 <DebugMon_Handler>:
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop

080025e4 <PendSV_Handler>:

/** @brief This function handles Pendable request for System Service.
 */
void PendSV_Handler(void)
{
    CLEAR_BIT(SCB->ICSR, SCB_ICSR_PENDSVSET_Msk);
 80025e4:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <PendSV_Handler+0x10>)
    pendsv_irq_callback();
 80025e6:	4904      	ldr	r1, [pc, #16]	; (80025f8 <PendSV_Handler+0x14>)
    CLEAR_BIT(SCB->ICSR, SCB_ICSR_PENDSVSET_Msk);
 80025e8:	6853      	ldr	r3, [r2, #4]
 80025ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ee:	6053      	str	r3, [r2, #4]
    pendsv_irq_callback();
 80025f0:	680b      	ldr	r3, [r1, #0]
 80025f2:	4718      	bx	r3
 80025f4:	e000ed00 	.word	0xe000ed00
 80025f8:	20000284 	.word	0x20000284

080025fc <SysTick_Handler>:
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop

08002600 <EXTI0_IRQHandler>:

/** @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void)
{
    common_callback();
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <EXTI0_IRQHandler+0x18>)
{
 8002602:	b510      	push	{r4, lr}
    common_callback();
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4798      	blx	r3
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002608:	2001      	movs	r0, #1
 800260a:	f00a fc9b 	bl	800cf44 <HAL_GPIO_EXTI_IRQHandler>
    exti0_irq_callback();
 800260e:	4b03      	ldr	r3, [pc, #12]	; (800261c <EXTI0_IRQHandler+0x1c>)
}
 8002610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    exti0_irq_callback();
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4718      	bx	r3
 8002618:	20000278 	.word	0x20000278
 800261c:	2000027c 	.word	0x2000027c

08002620 <EXTI2_IRQHandler>:

/** @brief This function handles EXTI line2 interrupt.
 */
void EXTI2_IRQHandler(void)
{
 8002620:	b510      	push	{r4, lr}
    common_callback();
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <EXTI2_IRQHandler+0x18>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4798      	blx	r3
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <EXTI2_IRQHandler+0x1c>)
    exti2_irq_callback();
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <EXTI2_IRQHandler+0x20>)
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 800262c:	2104      	movs	r1, #4
}
 800262e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    exti2_irq_callback();
 8002632:	681b      	ldr	r3, [r3, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 8002634:	6151      	str	r1, [r2, #20]
    exti2_irq_callback();
 8002636:	4718      	bx	r3
 8002638:	20000278 	.word	0x20000278
 800263c:	40010400 	.word	0x40010400
 8002640:	20000280 	.word	0x20000280

08002644 <DMA1_Channel2_IRQHandler>:

/** @brief DMA1 Channel 2 IRQ Handler.
 */
void DMA1_Channel2_IRQHandler(void)
{
    common_callback();
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <DMA1_Channel2_IRQHandler+0x30>)
{
 8002646:	b510      	push	{r4, lr}
    common_callback();
 8002648:	681b      	ldr	r3, [r3, #0]
    (&hradio_dma_spi_rx)->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << ((&hradio_dma_spi_rx)->ChannelIndex & 0x1FU));

    /* Process Unlocked */
    __HAL_UNLOCK(&hradio_dma_spi_rx);

    radio1_dma_callback();
 800264a:	4c0b      	ldr	r4, [pc, #44]	; (8002678 <DMA1_Channel2_IRQHandler+0x34>)
    common_callback();
 800264c:	4798      	blx	r3
    (&hradio_dma_spi_rx)->State = HAL_DMA_STATE_READY;
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <DMA1_Channel2_IRQHandler+0x38>)
    (&hradio_dma_spi_rx)->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << ((&hradio_dma_spi_rx)->ChannelIndex & 0x1FU));
 8002650:	e9d3 0210 	ldrd	r0, r2, [r3, #64]	; 0x40
 8002654:	f002 011f 	and.w	r1, r2, #31
 8002658:	2202      	movs	r2, #2
 800265a:	408a      	lsls	r2, r1
    (&hradio_dma_spi_rx)->State = HAL_DMA_STATE_READY;
 800265c:	f04f 0c01 	mov.w	ip, #1
 8002660:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
    (&hradio_dma_spi_rx)->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << ((&hradio_dma_spi_rx)->ChannelIndex & 0x1FU));
 8002664:	6042      	str	r2, [r0, #4]
    __HAL_UNLOCK(&hradio_dma_spi_rx);
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    radio1_dma_callback();
 800266c:	6821      	ldr	r1, [r4, #0]
}
 800266e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    radio1_dma_callback();
 8002672:	4708      	bx	r1
 8002674:	20000278 	.word	0x20000278
 8002678:	20000288 	.word	0x20000288
 800267c:	20004c24 	.word	0x20004c24

08002680 <DMA2_Channel5_IRQHandler>:

/** @brief This function handles DMA2 channel5 global interrupt.
 */
void DMA2_Channel5_IRQHandler(void)
{
 8002680:	b508      	push	{r3, lr}
    common_callback();
 8002682:	4b04      	ldr	r3, [pc, #16]	; (8002694 <DMA2_Channel5_IRQHandler+0x14>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4798      	blx	r3
    HAL_DMA_IRQHandler(&hdma_sai1_a);
}
 8002688:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_DMA_IRQHandler(&hdma_sai1_a);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <DMA2_Channel5_IRQHandler+0x18>)
 800268e:	f00a baeb 	b.w	800cc68 <HAL_DMA_IRQHandler>
 8002692:	bf00      	nop
 8002694:	20000278 	.word	0x20000278
 8002698:	20000038 	.word	0x20000038

0800269c <DMA2_Channel6_IRQHandler>:

/** @brief This function handles DMA2 channel6 global interrupt.
 */
void DMA2_Channel6_IRQHandler(void)
{
 800269c:	b508      	push	{r3, lr}
    common_callback();
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <DMA2_Channel6_IRQHandler+0x14>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4798      	blx	r3
    HAL_DMA_IRQHandler(&hdma_sai1_b);
}
 80026a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_DMA_IRQHandler(&hdma_sai1_b);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <DMA2_Channel6_IRQHandler+0x18>)
 80026aa:	f00a badd 	b.w	800cc68 <HAL_DMA_IRQHandler>
 80026ae:	bf00      	nop
 80026b0:	20000278 	.word	0x20000278
 80026b4:	20000098 	.word	0x20000098

080026b8 <DMA1_Channel5_IRQHandler>:

/** @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void)
{
 80026b8:	b508      	push	{r3, lr}
    common_callback();
 80026ba:	4b04      	ldr	r3, [pc, #16]	; (80026cc <DMA1_Channel5_IRQHandler+0x14>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4798      	blx	r3
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
}
 80026c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <DMA1_Channel5_IRQHandler+0x18>)
 80026c6:	f00a bacf 	b.w	800cc68 <HAL_DMA_IRQHandler>
 80026ca:	bf00      	nop
 80026cc:	20000278 	.word	0x20000278
 80026d0:	20004db8 	.word	0x20004db8

080026d4 <DMA1_Channel6_IRQHandler>:

/** @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void)
{
 80026d4:	b508      	push	{r3, lr}
    common_callback();
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <DMA1_Channel6_IRQHandler+0x14>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4798      	blx	r3
    HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
}
 80026dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <DMA1_Channel6_IRQHandler+0x18>)
 80026e2:	f00a bac1 	b.w	800cc68 <HAL_DMA_IRQHandler>
 80026e6:	bf00      	nop
 80026e8:	20000278 	.word	0x20000278
 80026ec:	20004d58 	.word	0x20004d58

080026f0 <USB_LP_IRQHandler>:

/** @brief This function handles USB low priority interrupt remap.
 */
void USB_LP_IRQHandler(void)
{
 80026f0:	b510      	push	{r4, lr}
    common_callback();
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <USB_LP_IRQHandler+0x14>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4798      	blx	r3
    usb_irq_callback();
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <USB_LP_IRQHandler+0x18>)
}
 80026fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    usb_irq_callback();
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4718      	bx	r3
 8002702:	bf00      	nop
 8002704:	20000278 	.word	0x20000278
 8002708:	20000290 	.word	0x20000290

0800270c <TIM2_IRQHandler>:

/** @brief This function handles Timer 2 interrupt.
 */
void TIM2_IRQHandler(void)
{
 800270c:	b508      	push	{r3, lr}
    HAL_TIM_IRQHandler(&htim2);
 800270e:	4803      	ldr	r0, [pc, #12]	; (800271c <TIM2_IRQHandler+0x10>)
 8002710:	f00d fcac 	bl	801006c <HAL_TIM_IRQHandler>
    HAL_IncTick();
}
 8002714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_IncTick();
 8002718:	f00a b8ca 	b.w	800c8b0 <HAL_IncTick>
 800271c:	20004eac 	.word	0x20004eac

08002720 <TIM8_UP_IRQHandler>:

void TIM8_UP_IRQHandler(void)
{
    __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_UPDATE);
 8002720:	4a06      	ldr	r2, [pc, #24]	; (800273c <TIM8_UP_IRQHandler+0x1c>)
    common_callback();
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <TIM8_UP_IRQHandler+0x20>)
    __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_UPDATE);
 8002724:	6812      	ldr	r2, [r2, #0]
    common_callback();
 8002726:	681b      	ldr	r3, [r3, #0]
{
 8002728:	b510      	push	{r4, lr}
    __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_UPDATE);
 800272a:	f06f 0101 	mvn.w	r1, #1
 800272e:	6111      	str	r1, [r2, #16]
    common_callback();
 8002730:	4798      	blx	r3
    systick_callback();
 8002732:	4b04      	ldr	r3, [pc, #16]	; (8002744 <TIM8_UP_IRQHandler+0x24>)
}
 8002734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    systick_callback();
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4718      	bx	r3
 800273c:	20000378 	.word	0x20000378
 8002740:	20000278 	.word	0x20000278
 8002744:	2000028c 	.word	0x2000028c

08002748 <TIM20_UP_IRQHandler>:

/** @brief This function handles Timer 20 interrupt.
 */
void TIM20_UP_IRQHandler(void)
{
    __HAL_TIM_CLEAR_IT(&htim20, TIM_IT_UPDATE);
 8002748:	4a03      	ldr	r2, [pc, #12]	; (8002758 <TIM20_UP_IRQHandler+0x10>)
    app_timer_callback();
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <TIM20_UP_IRQHandler+0x14>)
    __HAL_TIM_CLEAR_IT(&htim20, TIM_IT_UPDATE);
 800274c:	6812      	ldr	r2, [r2, #0]
    app_timer_callback();
 800274e:	681b      	ldr	r3, [r3, #0]
    __HAL_TIM_CLEAR_IT(&htim20, TIM_IT_UPDATE);
 8002750:	f06f 0101 	mvn.w	r1, #1
 8002754:	6111      	str	r1, [r2, #16]
    app_timer_callback();
 8002756:	4718      	bx	r3
 8002758:	20000294 	.word	0x20000294
 800275c:	20000274 	.word	0x20000274

08002760 <LPUART1_IRQHandler>:
}

/** @brief This function handles LPUART1 global interrupt.
 */
void LPUART1_IRQHandler(void)
{
 8002760:	b508      	push	{r3, lr}
    common_callback();
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <LPUART1_IRQHandler+0x14>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4798      	blx	r3
    HAL_UART_IRQHandler(&hlp_uart);
}
 8002768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_UART_IRQHandler(&hlp_uart);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <LPUART1_IRQHandler+0x18>)
 800276e:	f00d bfb7 	b.w	80106e0 <HAL_UART_IRQHandler>
 8002772:	bf00      	nop
 8002774:	20000278 	.word	0x20000278
 8002778:	20004e18 	.word	0x20004e18

0800277c <evk_led_toggle>:
    }
}

void evk_led_toggle(evk_led_t led)
{
    switch (led) {
 800277c:	2801      	cmp	r0, #1
 800277e:	d003      	beq.n	8002788 <evk_led_toggle+0xc>
 8002780:	2802      	cmp	r0, #2
 8002782:	d00a      	beq.n	800279a <evk_led_toggle+0x1e>
 8002784:	b128      	cbz	r0, 8002792 <evk_led_toggle+0x16>
        HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
        break;
    default:
        break;
    }
}
 8002786:	4770      	bx	lr
        HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 8002788:	4806      	ldr	r0, [pc, #24]	; (80027a4 <evk_led_toggle+0x28>)
 800278a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800278e:	f00a bbcd 	b.w	800cf2c <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(LED0_PORT, LED0_PIN);
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <evk_led_toggle+0x2c>)
 8002794:	2120      	movs	r1, #32
 8002796:	f00a bbc9 	b.w	800cf2c <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 800279a:	4803      	ldr	r0, [pc, #12]	; (80027a8 <evk_led_toggle+0x2c>)
 800279c:	2140      	movs	r1, #64	; 0x40
 800279e:	f00a bbc5 	b.w	800cf2c <HAL_GPIO_TogglePin>
 80027a2:	bf00      	nop
 80027a4:	48000400 	.word	0x48000400
 80027a8:	48000800 	.word	0x48000800

080027ac <evk_set_board_voltage>:
#include "evk_power.h"

/* PUBLIC FUNCTIONS ***********************************************************/
void evk_set_board_voltage(evk_vdd_t vdd)
{
    if (vdd == VDD_1V8) {
 80027ac:	4602      	mov	r2, r0
 80027ae:	b110      	cbz	r0, 80027b6 <evk_set_board_voltage+0xa>
        HAL_GPIO_WritePin(VOLTAGE_SEL_PORT, VOLTAGE_SEL_PIN, GPIO_PIN_RESET);
    } else if (vdd == VDD_3V3) {
 80027b0:	2801      	cmp	r0, #1
 80027b2:	d000      	beq.n	80027b6 <evk_set_board_voltage+0xa>
        HAL_GPIO_WritePin(VOLTAGE_SEL_PORT, VOLTAGE_SEL_PIN, GPIO_PIN_SET);
    }
}
 80027b4:	4770      	bx	lr
        HAL_GPIO_WritePin(VOLTAGE_SEL_PORT, VOLTAGE_SEL_PIN, GPIO_PIN_SET);
 80027b6:	4802      	ldr	r0, [pc, #8]	; (80027c0 <evk_set_board_voltage+0x14>)
 80027b8:	2104      	movs	r1, #4
 80027ba:	f00a bbb1 	b.w	800cf20 <HAL_GPIO_WritePin>
 80027be:	bf00      	nop
 80027c0:	48000c00 	.word	0x48000c00

080027c4 <evk_radio_read_irq_pin>:
DMA_HandleTypeDef  hradio_dma_spi_rx;
DMA_HandleTypeDef  hradio_dma_spi_tx;

/* PUBLIC FUNCTIONS ***********************************************************/
bool evk_radio_read_irq_pin(void)
{
 80027c4:	b508      	push	{r3, lr}
    if (HAL_GPIO_ReadPin(RADIO_IRQ_PORT, RADIO_IRQ_PIN)) {
 80027c6:	2104      	movs	r1, #4
 80027c8:	4803      	ldr	r0, [pc, #12]	; (80027d8 <evk_radio_read_irq_pin+0x14>)
 80027ca:	f00a fba3 	bl	800cf14 <HAL_GPIO_ReadPin>
        return true;
    } else {
        return false;
    }
}
 80027ce:	3800      	subs	r0, #0
 80027d0:	bf18      	it	ne
 80027d2:	2001      	movne	r0, #1
 80027d4:	bd08      	pop	{r3, pc}
 80027d6:	bf00      	nop
 80027d8:	48000400 	.word	0x48000400

080027dc <evk_radio_enable_irq_it>:

void evk_radio_enable_irq_it(void)
{
    SET_BIT(EXTI->IMR1, RADIO_IRQ_PIN);
 80027dc:	4a02      	ldr	r2, [pc, #8]	; (80027e8 <evk_radio_enable_irq_it+0xc>)
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	6013      	str	r3, [r2, #0]
}
 80027e6:	4770      	bx	lr
 80027e8:	40010400 	.word	0x40010400

080027ec <evk_radio_disable_irq_it>:

void evk_radio_disable_irq_it(void)
{
    CLEAR_BIT(EXTI->IMR1, RADIO_IRQ_PIN);
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <evk_radio_disable_irq_it+0x14>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	f022 0204 	bic.w	r2, r2, #4
 80027f4:	601a      	str	r2, [r3, #0]
    SET_BIT(EXTI->PR1, RADIO_IRQ_PIN);
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	f042 0204 	orr.w	r2, r2, #4
 80027fc:	615a      	str	r2, [r3, #20]
}
 80027fe:	4770      	bx	lr
 8002800:	40010400 	.word	0x40010400

08002804 <evk_radio_enable_dma_irq_it>:
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002804:	4b02      	ldr	r3, [pc, #8]	; (8002810 <evk_radio_enable_dma_irq_it+0xc>)
 8002806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800280a:	601a      	str	r2, [r3, #0]

void evk_radio_enable_dma_irq_it(void)
{
    NVIC_EnableIRQ(NVIC_RADIO_DMA_RX_CPLT);
}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000e100 	.word	0xe000e100

08002814 <evk_radio_disable_dma_irq_it>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <evk_radio_disable_dma_irq_it+0x14>)
 8002816:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800281a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800281e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002822:	f3bf 8f6f 	isb	sy

void evk_radio_disable_dma_irq_it(void)
{
    NVIC_DisableIRQ(NVIC_RADIO_DMA_RX_CPLT);
}
 8002826:	4770      	bx	lr
 8002828:	e000e100 	.word	0xe000e100

0800282c <evk_radio_set_shutdown_pin>:

void evk_radio_set_shutdown_pin(void)
{
    HAL_GPIO_WritePin(RADIO_SHUTDOWN_PORT, RADIO_SHUTDOWN_PIN, GPIO_PIN_SET);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <evk_radio_set_shutdown_pin+0xc>)
 800282e:	2201      	movs	r2, #1
 8002830:	2102      	movs	r1, #2
 8002832:	f00a bb75 	b.w	800cf20 <HAL_GPIO_WritePin>
 8002836:	bf00      	nop
 8002838:	48000400 	.word	0x48000400

0800283c <evk_radio_reset_shutdown_pin>:
}

void evk_radio_reset_shutdown_pin(void)
{
    HAL_GPIO_WritePin(RADIO_SHUTDOWN_PORT, RADIO_SHUTDOWN_PIN, GPIO_PIN_RESET);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <evk_radio_reset_shutdown_pin+0xc>)
 800283e:	2200      	movs	r2, #0
 8002840:	2102      	movs	r1, #2
 8002842:	f00a bb6d 	b.w	800cf20 <HAL_GPIO_WritePin>
 8002846:	bf00      	nop
 8002848:	48000400 	.word	0x48000400

0800284c <evk_radio_set_reset_pin>:
}

void evk_radio_set_reset_pin(void)
{
    HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_SET);
 800284c:	2201      	movs	r2, #1
 800284e:	4802      	ldr	r0, [pc, #8]	; (8002858 <evk_radio_set_reset_pin+0xc>)
 8002850:	4611      	mov	r1, r2
 8002852:	f00a bb65 	b.w	800cf20 <HAL_GPIO_WritePin>
 8002856:	bf00      	nop
 8002858:	48000400 	.word	0x48000400

0800285c <evk_radio_reset_reset_pin>:
}

void evk_radio_reset_reset_pin(void)
{
    HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <evk_radio_reset_reset_pin+0xc>)
 800285e:	2200      	movs	r2, #0
 8002860:	2101      	movs	r1, #1
 8002862:	f00a bb5d 	b.w	800cf20 <HAL_GPIO_WritePin>
 8002866:	bf00      	nop
 8002868:	48000400 	.word	0x48000400

0800286c <evk_radio_spi_set_cs>:
}

void evk_radio_spi_set_cs(void)
{
    (RADIO_CS_PORT)->BSRR = (uint32_t)RADIO_CS_PIN;
 800286c:	4b02      	ldr	r3, [pc, #8]	; (8002878 <evk_radio_spi_set_cs+0xc>)
 800286e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002872:	619a      	str	r2, [r3, #24]
}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	48000400 	.word	0x48000400

0800287c <evk_radio_spi_reset_cs>:

void evk_radio_spi_reset_cs(void)
{
    (RADIO_CS_PORT)->BRR = (uint32_t)RADIO_CS_PIN;
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <evk_radio_spi_reset_cs+0xc>)
 800287e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	48000400 	.word	0x48000400

0800288c <evk_radio_spi_transfer_full_duplex_blocking>:

    hradio_spi.State = HAL_SPI_STATE_READY;
}

void evk_radio_spi_transfer_full_duplex_blocking(uint8_t *tx_data, uint8_t *rx_data, uint16_t size)
{
 800288c:	b430      	push	{r4, r5}
    if (hradio_spi.State != HAL_SPI_STATE_READY) {
 800288e:	4c18      	ldr	r4, [pc, #96]	; (80028f0 <evk_radio_spi_transfer_full_duplex_blocking+0x64>)
 8002890:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002894:	2b01      	cmp	r3, #1
 8002896:	d128      	bne.n	80028ea <evk_radio_spi_transfer_full_duplex_blocking+0x5e>
    (RADIO_CS_PORT)->BRR = (uint32_t)RADIO_CS_PIN;
 8002898:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <evk_radio_spi_transfer_full_duplex_blocking+0x68>)
 800289a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800289e:	629d      	str	r5, [r3, #40]	; 0x28
        return;
    }

    evk_radio_spi_reset_cs();

    hradio_spi.State = HAL_SPI_STATE_BUSY_TX_RX;
 80028a0:	2305      	movs	r3, #5
 80028a2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

    if ((hradio_spi.Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	681d      	ldr	r5, [r3, #0]
 80028aa:	066d      	lsls	r5, r5, #25
 80028ac:	d403      	bmi.n	80028b6 <evk_radio_spi_transfer_full_duplex_blocking+0x2a>
        /* Enable SPI peripheral */
        SET_BIT(hradio_spi.Instance->CR1, SPI_CR1_SPE);
 80028ae:	681d      	ldr	r5, [r3, #0]
 80028b0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80028b4:	601d      	str	r5, [r3, #0]
    }
    while (size--) {
 80028b6:	b18a      	cbz	r2, 80028dc <evk_radio_spi_transfer_full_duplex_blocking+0x50>
 80028b8:	eb01 0c02 	add.w	ip, r1, r2
        while (!(hradio_spi.Instance->SR & SPI_SR_TXE))
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	0795      	lsls	r5, r2, #30
 80028c0:	d5fc      	bpl.n	80028bc <evk_radio_spi_transfer_full_duplex_blocking+0x30>
            ;
        *(volatile uint8_t *)&hradio_spi.Instance->DR = *tx_data++;
 80028c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028c6:	731a      	strb	r2, [r3, #12]
        while (!(hradio_spi.Instance->SR & SPI_SR_RXNE))
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	07d2      	lsls	r2, r2, #31
 80028cc:	d5fc      	bpl.n	80028c8 <evk_radio_spi_transfer_full_duplex_blocking+0x3c>
            ;
        *rx_data++ = *(volatile uint8_t *)&hradio_spi.Instance->DR;
 80028ce:	7b1b      	ldrb	r3, [r3, #12]
 80028d0:	f801 3b01 	strb.w	r3, [r1], #1
    while (size--) {
 80028d4:	4561      	cmp	r1, ip
 80028d6:	d001      	beq.n	80028dc <evk_radio_spi_transfer_full_duplex_blocking+0x50>
        while (!(hradio_spi.Instance->SR & SPI_SR_TXE))
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	e7ef      	b.n	80028bc <evk_radio_spi_transfer_full_duplex_blocking+0x30>
    (RADIO_CS_PORT)->BSRR = (uint32_t)RADIO_CS_PIN;
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <evk_radio_spi_transfer_full_duplex_blocking+0x68>)
    }

    hradio_spi.State = HAL_SPI_STATE_READY;
 80028de:	2101      	movs	r1, #1
    (RADIO_CS_PORT)->BSRR = (uint32_t)RADIO_CS_PIN;
 80028e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hradio_spi.State = HAL_SPI_STATE_READY;
 80028e4:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
    (RADIO_CS_PORT)->BSRR = (uint32_t)RADIO_CS_PIN;
 80028e8:	619a      	str	r2, [r3, #24]

    evk_radio_spi_set_cs();
}
 80028ea:	bc30      	pop	{r4, r5}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20004ce4 	.word	0x20004ce4
 80028f4:	48000400 	.word	0x48000400

080028f8 <evk_radio_spi_transfer_full_duplex_non_blocking>:
    (RADIO_CS_PORT)->BRR = (uint32_t)RADIO_CS_PIN;
 80028f8:	4b16      	ldr	r3, [pc, #88]	; (8002954 <evk_radio_spi_transfer_full_duplex_non_blocking+0x5c>)

void evk_radio_spi_transfer_full_duplex_non_blocking(uint8_t *tx_data, uint8_t *rx_data, uint16_t size)
{
 80028fa:	b470      	push	{r4, r5, r6}
    (RADIO_CS_PORT)->BRR = (uint32_t)RADIO_CS_PIN;
 80028fc:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002900:	629c      	str	r4, [r3, #40]	; 0x28
    SPI_HandleTypeDef *spi_local = &hradio_spi;

    evk_radio_spi_reset_cs();

    /* Disable the peripheral */
    __HAL_DMA_DISABLE((spi_local)->hdmarx);
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <evk_radio_spi_transfer_full_duplex_non_blocking+0x60>)
 8002904:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8002906:	6824      	ldr	r4, [r4, #0]
 8002908:	6825      	ldr	r5, [r4, #0]
 800290a:	f025 0501 	bic.w	r5, r5, #1
 800290e:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    (spi_local)->hdmarx->Instance->CNDTR = size;

    /* Configure DMA Channel source address */
    (spi_local)->hdmarx->Instance->CPAR = (uint32_t) & (spi_local)->Instance->DR;
 8002910:	681d      	ldr	r5, [r3, #0]

    /* Enable Rx DMA Request */
    SET_BIT((spi_local)->Instance->CR2, SPI_CR2_RXDMAEN);

    /* Disable the peripheral */
    __HAL_DMA_DISABLE((spi_local)->hdmatx);
 8002912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    (spi_local)->hdmarx->Instance->CNDTR = size;
 8002914:	6062      	str	r2, [r4, #4]
    (spi_local)->hdmarx->Instance->CPAR = (uint32_t) & (spi_local)->Instance->DR;
 8002916:	f105 060c 	add.w	r6, r5, #12
    __HAL_DMA_DISABLE((spi_local)->hdmatx);
 800291a:	681b      	ldr	r3, [r3, #0]
    (spi_local)->hdmarx->Instance->CPAR = (uint32_t) & (spi_local)->Instance->DR;
 800291c:	60a6      	str	r6, [r4, #8]
    (spi_local)->hdmarx->Instance->CMAR = (uint32_t)rx_data;
 800291e:	60e1      	str	r1, [r4, #12]
    __HAL_DMA_ENABLE((spi_local)->hdmarx);
 8002920:	6821      	ldr	r1, [r4, #0]
 8002922:	f041 0101 	orr.w	r1, r1, #1
 8002926:	6021      	str	r1, [r4, #0]
    SET_BIT((spi_local)->Instance->CR2, SPI_CR2_RXDMAEN);
 8002928:	6869      	ldr	r1, [r5, #4]
 800292a:	f041 0101 	orr.w	r1, r1, #1
 800292e:	6069      	str	r1, [r5, #4]
    __HAL_DMA_DISABLE((spi_local)->hdmatx);
 8002930:	6819      	ldr	r1, [r3, #0]
 8002932:	f021 0101 	bic.w	r1, r1, #1
 8002936:	6019      	str	r1, [r3, #0]

    /* Configure DMA Channel data length */
    (spi_local)->hdmatx->Instance->CNDTR = size;
 8002938:	605a      	str	r2, [r3, #4]

    /* Configure DMA Channel destination address */
    (spi_local)->hdmatx->Instance->CPAR = (uint32_t) & (spi_local)->Instance->DR;
 800293a:	609e      	str	r6, [r3, #8]

    /* Configure DMA Channel source address */
    (spi_local)->hdmatx->Instance->CMAR = (uint32_t)tx_data;
 800293c:	60d8      	str	r0, [r3, #12]

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE((spi_local)->hdmatx);
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]

    /* Enable Tx DMA Request */
    SET_BIT((spi_local)->Instance->CR2, SPI_CR2_TXDMAEN);
 8002946:	686b      	ldr	r3, [r5, #4]
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	606b      	str	r3, [r5, #4]
}
 800294e:	bc70      	pop	{r4, r5, r6}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	48000400 	.word	0x48000400
 8002958:	20004ce4 	.word	0x20004ce4

0800295c <evk_radio_is_spi_busy>:

bool evk_radio_is_spi_busy(void)
{
    return (&hradio_spi)->Instance->SR & SPI_SR_BSY;
 800295c:	4b02      	ldr	r3, [pc, #8]	; (8002968 <evk_radio_is_spi_busy+0xc>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6898      	ldr	r0, [r3, #8]
}
 8002962:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8002966:	4770      	bx	lr
 8002968:	20004ce4 	.word	0x20004ce4

0800296c <evk_radio_context_switch>:

void evk_radio_context_switch(void)
{
    NVIC->ISPR[(((uint32_t)NVIC_RADIO_IRQ) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)NVIC_RADIO_IRQ) & 0x1FUL));
 800296c:	4b02      	ldr	r3, [pc, #8]	; (8002978 <evk_radio_context_switch+0xc>)
 800296e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002972:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 8002976:	4770      	bx	lr
 8002978:	e000e100 	.word	0xe000e100

0800297c <evk_radio_callback_context_switch>:

void evk_radio_callback_context_switch(void)
{
    SET_BIT(SCB->ICSR, SCB_ICSR_PENDSVSET_Msk);
 800297c:	4a02      	ldr	r2, [pc, #8]	; (8002988 <evk_radio_callback_context_switch+0xc>)
 800297e:	6853      	ldr	r3, [r2, #4]
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	6053      	str	r3, [r2, #4]
}
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <HAL_SPI_MspInit>:
/** @brief Initializes the SPI pins.
 *
 *  @param[in] spi_handle  SPI instance handle
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *spi_handle)
{
 800298c:	b570      	push	{r4, r5, r6, lr}
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    if (spi_handle->Instance == SPI2) {
 800298e:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_SPI_MspInit+0xb8>)
 8002990:	6802      	ldr	r2, [r0, #0]
{
 8002992:	b086      	sub	sp, #24
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	2400      	movs	r4, #0
    if (spi_handle->Instance == SPI2) {
 8002996:	429a      	cmp	r2, r3
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800299c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80029a0:	9405      	str	r4, [sp, #20]
    if (spi_handle->Instance == SPI2) {
 80029a2:	d001      	beq.n	80029a8 <HAL_SPI_MspInit+0x1c>
        }

        __HAL_DMA_ENABLE_IT(&hradio_dma_spi_rx, (DMA_IT_TC | DMA_IT_TE));
        __HAL_LINKDMA(spi_handle, hdmarx, hradio_dma_spi_rx);
    }
}
 80029a4:	b006      	add	sp, #24
 80029a6:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_RCC_SPI2_CLK_ENABLE();
 80029a8:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80029ac:	4605      	mov	r5, r0
 80029ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
        hradio_dma_spi_tx.Instance                 = DMA1_CHANNEL_RADIO_TX;
 80029b0:	4e25      	ldr	r6, [pc, #148]	; (8002a48 <HAL_SPI_MspInit+0xbc>)
        __HAL_RCC_SPI2_CLK_ENABLE();
 80029b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029b6:	659a      	str	r2, [r3, #88]	; 0x58
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	9300      	str	r3, [sp, #0]
        GPIO_InitStruct.Pin       = RADIO_SCK_PIN | RADIO_MISO_PIN | RADIO_MOSI_PIN;
 80029c0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
        GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
        __HAL_RCC_SPI2_CLK_ENABLE();
 80029c6:	9800      	ldr	r0, [sp, #0]
        GPIO_InitStruct.Pin       = RADIO_SCK_PIN | RADIO_MISO_PIN | RADIO_MOSI_PIN;
 80029c8:	9201      	str	r2, [sp, #4]
        HAL_GPIO_Init(RADIO_SCK_PORT, &GPIO_InitStruct);
 80029ca:	4820      	ldr	r0, [pc, #128]	; (8002a4c <HAL_SPI_MspInit+0xc0>)
        GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80029cc:	9302      	str	r3, [sp, #8]
        GPIO_InitStruct.Alternate = RADIO_SCK_AF;
 80029ce:	2205      	movs	r2, #5
        HAL_GPIO_Init(RADIO_SCK_PORT, &GPIO_InitStruct);
 80029d0:	a901      	add	r1, sp, #4
        GPIO_InitStruct.Alternate = RADIO_SCK_AF;
 80029d2:	e9cd 3204 	strd	r3, r2, [sp, #16]
        HAL_GPIO_Init(RADIO_SCK_PORT, &GPIO_InitStruct);
 80029d6:	f00a f995 	bl	800cd04 <HAL_GPIO_Init>
        hradio_dma_spi_tx.Init.Request             = DMA_REQUEST_SPI2_TX;
 80029da:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <HAL_SPI_MspInit+0xc4>)
 80029dc:	230d      	movs	r3, #13
 80029de:	e9c6 2300 	strd	r2, r3, [r6]
        if (HAL_DMA_Init(&hradio_dma_spi_tx) != HAL_OK) {
 80029e2:	4630      	mov	r0, r6
        hradio_dma_spi_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80029e4:	2210      	movs	r2, #16
        hradio_dma_spi_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80029e6:	2380      	movs	r3, #128	; 0x80
        hradio_dma_spi_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80029e8:	e9c6 2402 	strd	r2, r4, [r6, #8]
        hradio_dma_spi_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80029ec:	e9c6 4405 	strd	r4, r4, [r6, #20]
        hradio_dma_spi_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80029f0:	e9c6 4407 	strd	r4, r4, [r6, #28]
        hradio_dma_spi_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80029f4:	6133      	str	r3, [r6, #16]
        if (HAL_DMA_Init(&hradio_dma_spi_tx) != HAL_OK) {
 80029f6:	f00a f827 	bl	800ca48 <HAL_DMA_Init>
 80029fa:	b9e0      	cbnz	r0, 8002a36 <HAL_SPI_MspInit+0xaa>
        hradio_dma_spi_rx.Instance                 = DMA1_CHANNEL_RADIO_RX;
 80029fc:	4c15      	ldr	r4, [pc, #84]	; (8002a54 <HAL_SPI_MspInit+0xc8>)
 80029fe:	4916      	ldr	r1, [pc, #88]	; (8002a58 <HAL_SPI_MspInit+0xcc>)
        __HAL_LINKDMA(spi_handle, hdmatx, hradio_dma_spi_tx);
 8002a00:	656e      	str	r6, [r5, #84]	; 0x54
        hradio_dma_spi_rx.Init.Request             = DMA_REQUEST_SPI2_RX;
 8002a02:	220c      	movs	r2, #12
        hradio_dma_spi_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002a04:	2300      	movs	r3, #0
        hradio_dma_spi_rx.Init.Request             = DMA_REQUEST_SPI2_RX;
 8002a06:	e9c4 1200 	strd	r1, r2, [r4]
        if (HAL_DMA_Init(&hradio_dma_spi_rx) != HAL_OK) {
 8002a0a:	4620      	mov	r0, r4
        hradio_dma_spi_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002a0c:	2280      	movs	r2, #128	; 0x80
        hradio_dma_spi_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002a0e:	e9c4 3302 	strd	r3, r3, [r4, #8]
        hradio_dma_spi_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a12:	e9c4 2304 	strd	r2, r3, [r4, #16]
        hradio_dma_spi_rx.Init.Mode                = DMA_NORMAL;
 8002a16:	e9c4 3306 	strd	r3, r3, [r4, #24]
        __HAL_LINKDMA(spi_handle, hdmatx, hradio_dma_spi_tx);
 8002a1a:	62b5      	str	r5, [r6, #40]	; 0x28
        hradio_dma_spi_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8002a1c:	6223      	str	r3, [r4, #32]
        if (HAL_DMA_Init(&hradio_dma_spi_rx) != HAL_OK) {
 8002a1e:	f00a f813 	bl	800ca48 <HAL_DMA_Init>
 8002a22:	b958      	cbnz	r0, 8002a3c <HAL_SPI_MspInit+0xb0>
        __HAL_DMA_ENABLE_IT(&hradio_dma_spi_rx, (DMA_IT_TC | DMA_IT_TE));
 8002a24:	6822      	ldr	r2, [r4, #0]
 8002a26:	6813      	ldr	r3, [r2, #0]
 8002a28:	f043 030a 	orr.w	r3, r3, #10
 8002a2c:	6013      	str	r3, [r2, #0]
        __HAL_LINKDMA(spi_handle, hdmarx, hradio_dma_spi_rx);
 8002a2e:	65ac      	str	r4, [r5, #88]	; 0x58
 8002a30:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8002a32:	b006      	add	sp, #24
 8002a34:	bd70      	pop	{r4, r5, r6, pc}
            Error_Handler();
 8002a36:	f7ff fdc7 	bl	80025c8 <Error_Handler>
 8002a3a:	e7df      	b.n	80029fc <HAL_SPI_MspInit+0x70>
            Error_Handler();
 8002a3c:	f7ff fdc4 	bl	80025c8 <Error_Handler>
 8002a40:	e7f0      	b.n	8002a24 <HAL_SPI_MspInit+0x98>
 8002a42:	bf00      	nop
 8002a44:	40003800 	.word	0x40003800
 8002a48:	20004c84 	.word	0x20004c84
 8002a4c:	48000400 	.word	0x48000400
 8002a50:	40020008 	.word	0x40020008
 8002a54:	20004c24 	.word	0x20004c24
 8002a58:	4002001c 	.word	0x4002001c

08002a5c <evk_timer_delay_ms>:
    return HAL_GetTick();
}

void evk_timer_delay_ms(uint32_t ms)
{
    HAL_Delay(ms);
 8002a5c:	f009 bf3a 	b.w	800c8d4 <HAL_Delay>

08002a60 <evk_timer_get_free_running_tick_ms>:

    while(__HAL_TIM_GET_COUNTER(&htim3) < delay);
}

uint64_t evk_timer_get_free_running_tick_ms(void)
{
 8002a60:	b538      	push	{r3, r4, r5, lr}
    static uint64_t count;
    static uint32_t last_time;
    uint64_t ret_count;

    evk_enter_critical();
 8002a62:	f7ff fd9d 	bl	80025a0 <evk_enter_critical>
    uint32_t current_time = __HAL_TIM_GET_COUNTER(&htim6) / 4;
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <evk_timer_get_free_running_tick_ms+0x4c>)
    if(last_time > current_time)
 8002a68:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <evk_timer_get_free_running_tick_ms+0x50>)
    uint32_t current_time = __HAL_TIM_GET_COUNTER(&htim6) / 4;
 8002a6a:	681b      	ldr	r3, [r3, #0]
    if(last_time > current_time)
 8002a6c:	6814      	ldr	r4, [r2, #0]
    uint32_t current_time = __HAL_TIM_GET_COUNTER(&htim6) / 4;
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if(last_time > current_time)
 8002a70:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
    uint32_t current_time = __HAL_TIM_GET_COUNTER(&htim6) / 4;
 8002a74:	ea4f 0193 	mov.w	r1, r3, lsr #2
    {
        count += (((MAX_VALUE_UINT16_T) / 4) - last_time) + current_time ;
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <evk_timer_get_free_running_tick_ms+0x54>)
    if(last_time > current_time)
 8002a7a:	d910      	bls.n	8002a9e <evk_timer_get_free_running_tick_ms+0x3e>
        count += (((MAX_VALUE_UINT16_T) / 4) - last_time) + current_time ;
 8002a7c:	f5c4 547f 	rsb	r4, r4, #16320	; 0x3fc0
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	685d      	ldr	r5, [r3, #4]
 8002a84:	343f      	adds	r4, #63	; 0x3f
 8002a86:	440c      	add	r4, r1
 8002a88:	1824      	adds	r4, r4, r0
 8002a8a:	f145 0500 	adc.w	r5, r5, #0
    } else {
        count += current_time - last_time;
    }
    last_time = current_time;
 8002a8e:	6011      	str	r1, [r2, #0]
 8002a90:	e9c3 4500 	strd	r4, r5, [r3]
    ret_count = count;
    evk_exit_critical();
 8002a94:	f7ff fd8e 	bl	80025b4 <evk_exit_critical>
    return ret_count;
}
 8002a98:	4620      	mov	r0, r4
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	bd38      	pop	{r3, r4, r5, pc}
        count += current_time - last_time;
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	685d      	ldr	r5, [r3, #4]
 8002aa2:	1b0c      	subs	r4, r1, r4
 8002aa4:	1824      	adds	r4, r4, r0
 8002aa6:	f145 0500 	adc.w	r5, r5, #0
 8002aaa:	e7f0      	b.n	8002a8e <evk_timer_get_free_running_tick_ms+0x2e>
 8002aac:	2000032c 	.word	0x2000032c
 8002ab0:	20004d50 	.word	0x20004d50
 8002ab4:	20004d48 	.word	0x20004d48

08002ab8 <HAL_UART_TxCpltCallback>:
    }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart == &hlp_uart) {
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_UART_TxCpltCallback+0x18>)
 8002aba:	4283      	cmp	r3, r0
 8002abc:	d003      	beq.n	8002ac6 <HAL_UART_TxCpltCallback+0xe>
        if (stlink_uart_tx_callback != NULL) {
            stlink_uart_tx_callback();
        }
    } else {
        if (exp_uart_tx_callback != NULL) {
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_UART_TxCpltCallback+0x1c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	b123      	cbz	r3, 8002ace <HAL_UART_TxCpltCallback+0x16>
            exp_uart_tx_callback();
 8002ac4:	4718      	bx	r3
        if (stlink_uart_tx_callback != NULL) {
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <HAL_UART_TxCpltCallback+0x20>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1fa      	bne.n	8002ac4 <HAL_UART_TxCpltCallback+0xc>
        }
    }
}
 8002ace:	4770      	bx	lr
 8002ad0:	20004e18 	.word	0x20004e18
 8002ad4:	20004d54 	.word	0x20004d54
 8002ad8:	20004ea8 	.word	0x20004ea8

08002adc <HAL_UART_MspInit>:
/** @brief Initialize the UART pins.
 *
 *  @param[in] huart  UART handler pointer.
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002adc:	b570      	push	{r4, r5, r6, lr}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    if (huart->Instance == LPUART1) {
 8002ade:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <HAL_UART_MspInit+0xd8>)
 8002ae0:	6802      	ldr	r2, [r0, #0]
{
 8002ae2:	b086      	sub	sp, #24
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	2400      	movs	r4, #0
    if (huart->Instance == LPUART1) {
 8002ae6:	429a      	cmp	r2, r3
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002aec:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002af0:	9405      	str	r4, [sp, #20]
    if (huart->Instance == LPUART1) {
 8002af2:	d001      	beq.n	8002af8 <HAL_UART_MspInit+0x1c>
        HAL_NVIC_EnableIRQ(NVIC_LPUART_TX_CPLT);

        HAL_NVIC_SetPriority(NVIC_LPUART_RX_CPLT, PRIO_LPUART_DMA_RX_CPLT, 0);
        HAL_NVIC_EnableIRQ(NVIC_LPUART_RX_CPLT);
    }
}
 8002af4:	b006      	add	sp, #24
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_RCC_LPUART1_CLK_ENABLE();
 8002af8:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002afc:	4605      	mov	r5, r0
 8002afe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b00:	482d      	ldr	r0, [pc, #180]	; (8002bb8 <HAL_UART_MspInit+0xdc>)
        hdma_lpuart1_tx.Instance                 = DMA1_CHANNEL_LPUART_TX;
 8002b02:	4e2e      	ldr	r6, [pc, #184]	; (8002bbc <HAL_UART_MspInit+0xe0>)
        __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	9300      	str	r3, [sp, #0]
        GPIO_InitStruct.Pin       = GPIO_PIN_0 | GPIO_PIN_1;
 8002b12:	2303      	movs	r3, #3
 8002b14:	9301      	str	r3, [sp, #4]
        __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b16:	9b00      	ldr	r3, [sp, #0]
        GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	9302      	str	r3, [sp, #8]
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b1c:	a901      	add	r1, sp, #4
        GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b1e:	2308      	movs	r3, #8
 8002b20:	9305      	str	r3, [sp, #20]
        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b22:	f00a f8ef 	bl	800cd04 <HAL_GPIO_Init>
        hdma_lpuart1_tx.Init.Request             = DMA_REQUEST_LPUART1_TX;
 8002b26:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <HAL_UART_MspInit+0xe4>)
 8002b28:	2323      	movs	r3, #35	; 0x23
 8002b2a:	e9c6 2300 	strd	r2, r3, [r6]
        if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK) {
 8002b2e:	4630      	mov	r0, r6
        hdma_lpuart1_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002b30:	2210      	movs	r2, #16
        hdma_lpuart1_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002b32:	2380      	movs	r3, #128	; 0x80
        hdma_lpuart1_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002b34:	e9c6 2402 	strd	r2, r4, [r6, #8]
        hdma_lpuart1_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002b38:	e9c6 4405 	strd	r4, r4, [r6, #20]
        hdma_lpuart1_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8002b3c:	e9c6 4407 	strd	r4, r4, [r6, #28]
        hdma_lpuart1_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002b40:	6133      	str	r3, [r6, #16]
        if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK) {
 8002b42:	f009 ff81 	bl	800ca48 <HAL_DMA_Init>
 8002b46:	bb78      	cbnz	r0, 8002ba8 <HAL_UART_MspInit+0xcc>
        hdma_lpuart1_rx.Instance                 = DMA1_CHANNEL_LPUART_RX;
 8002b48:	4c1e      	ldr	r4, [pc, #120]	; (8002bc4 <HAL_UART_MspInit+0xe8>)
        hdma_lpuart1_rx.Init.Request             = DMA_REQUEST_LPUART1_RX;
 8002b4a:	491f      	ldr	r1, [pc, #124]	; (8002bc8 <HAL_UART_MspInit+0xec>)
 8002b4c:	2222      	movs	r2, #34	; 0x22
        hdma_lpuart1_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002b4e:	2300      	movs	r3, #0
        hdma_lpuart1_rx.Init.Request             = DMA_REQUEST_LPUART1_RX;
 8002b50:	e9c4 1200 	strd	r1, r2, [r4]
        if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK) {
 8002b54:	4620      	mov	r0, r4
        hdma_lpuart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002b56:	2280      	movs	r2, #128	; 0x80
        hdma_lpuart1_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002b58:	e9c4 3302 	strd	r3, r3, [r4, #8]
        hdma_lpuart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002b5c:	e9c4 3305 	strd	r3, r3, [r4, #20]
        hdma_lpuart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8002b60:	e9c4 3307 	strd	r3, r3, [r4, #28]
        hdma_lpuart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002b64:	6122      	str	r2, [r4, #16]
        if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK) {
 8002b66:	f009 ff6f 	bl	800ca48 <HAL_DMA_Init>
 8002b6a:	bb00      	cbnz	r0, 8002bae <HAL_UART_MspInit+0xd2>
        HAL_NVIC_SetPriority(NVIC_LPUART_IRQ, PRIO_LPUART_IRQ, 0);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	210e      	movs	r1, #14
        __HAL_LINKDMA(huart, hdmarx, hdma_lpuart1_rx);
 8002b70:	e9c5 641e 	strd	r6, r4, [r5, #120]	; 0x78
        HAL_NVIC_SetPriority(NVIC_LPUART_IRQ, PRIO_LPUART_IRQ, 0);
 8002b74:	205b      	movs	r0, #91	; 0x5b
        __HAL_LINKDMA(huart, hdmatx, hdma_lpuart1_tx);
 8002b76:	62b5      	str	r5, [r6, #40]	; 0x28
        __HAL_LINKDMA(huart, hdmarx, hdma_lpuart1_rx);
 8002b78:	62a5      	str	r5, [r4, #40]	; 0x28
        HAL_NVIC_SetPriority(NVIC_LPUART_IRQ, PRIO_LPUART_IRQ, 0);
 8002b7a:	f009 fecf 	bl	800c91c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(NVIC_LPUART_IRQ);
 8002b7e:	205b      	movs	r0, #91	; 0x5b
 8002b80:	f009 ff0a 	bl	800c998 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(NVIC_LPUART_TX_CPLT, PRIO_LPUART_DMA_TX_CPLT, 0);
 8002b84:	2200      	movs	r2, #0
 8002b86:	210e      	movs	r1, #14
 8002b88:	200f      	movs	r0, #15
 8002b8a:	f009 fec7 	bl	800c91c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(NVIC_LPUART_TX_CPLT);
 8002b8e:	200f      	movs	r0, #15
 8002b90:	f009 ff02 	bl	800c998 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(NVIC_LPUART_RX_CPLT, PRIO_LPUART_DMA_RX_CPLT, 0);
 8002b94:	2200      	movs	r2, #0
 8002b96:	210e      	movs	r1, #14
 8002b98:	2010      	movs	r0, #16
 8002b9a:	f009 febf 	bl	800c91c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(NVIC_LPUART_RX_CPLT);
 8002b9e:	2010      	movs	r0, #16
 8002ba0:	f009 fefa 	bl	800c998 <HAL_NVIC_EnableIRQ>
}
 8002ba4:	b006      	add	sp, #24
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
            Error_Handler();
 8002ba8:	f7ff fd0e 	bl	80025c8 <Error_Handler>
 8002bac:	e7cc      	b.n	8002b48 <HAL_UART_MspInit+0x6c>
            Error_Handler();
 8002bae:	f7ff fd0b 	bl	80025c8 <Error_Handler>
 8002bb2:	e7db      	b.n	8002b6c <HAL_UART_MspInit+0x90>
 8002bb4:	40008000 	.word	0x40008000
 8002bb8:	48000800 	.word	0x48000800
 8002bbc:	20004db8 	.word	0x20004db8
 8002bc0:	40020058 	.word	0x40020058
 8002bc4:	20004d58 	.word	0x20004d58
 8002bc8:	4002006c 	.word	0x4002006c

08002bcc <evk_is_usb_detected>:
/* INCLUDES *******************************************************************/
#include "evk_usb.h"

/* PUBLIC FUNCTIONS ***********************************************************/
bool evk_is_usb_detected(void)
{
 8002bcc:	b508      	push	{r3, lr}
    if (HAL_GPIO_ReadPin(USB_DETECT_PORT, USB_DETECT_PIN) == GPIO_PIN_RESET) {
 8002bce:	2101      	movs	r1, #1
 8002bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd4:	f00a f99e 	bl	800cf14 <HAL_GPIO_ReadPin>
        return true;
    } else {
        return false;
    }
}
 8002bd8:	fab0 f080 	clz	r0, r0
 8002bdc:	0940      	lsrs	r0, r0, #5
 8002bde:	bd08      	pop	{r3, pc}

08002be0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be0:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;

  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 10);
 8002be2:	4601      	mov	r1, r0
{
 8002be4:	b088      	sub	sp, #32
 8002be6:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 10);
 8002be8:	220a      	movs	r2, #10
 8002bea:	201c      	movs	r0, #28
 8002bec:	f009 fe96 	bl	800c91c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002bf0:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <HAL_InitTick+0x74>)

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bf2:	201c      	movs	r0, #28
  uwTickPrio = TickPriority;
 8002bf4:	601c      	str	r4, [r3, #0]
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bf6:	f009 fecf 	bl	800c998 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002bfa:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <HAL_InitTick+0x78>)

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002bfc:	4c17      	ldr	r4, [pc, #92]	; (8002c5c <HAL_InitTick+0x7c>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002bfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	659a      	str	r2, [r3, #88]	; 0x58
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c0c:	a901      	add	r1, sp, #4
 8002c0e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002c10:	9302      	str	r3, [sp, #8]
 8002c12:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c14:	f00c f968 	bl	800eee8 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c18:	f00c f942 	bl	800eea0 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002c1c:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_InitTick+0x80>)
 8002c1e:	fba3 3000 	umull	r3, r0, r3, r0
 8002c22:	0c83      	lsrs	r3, r0, #18
  htim2.Instance = TIM2;
 8002c24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8002c28:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002c2a:	3b01      	subs	r3, #1
  htim2.Init.Period = (1000000 / 1000) - 1;
 8002c2c:	f240 31e7 	movw	r1, #999	; 0x3e7
  htim2.Instance = TIM2;
 8002c30:	6020      	str	r0, [r4, #0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002c32:	4620      	mov	r0, r4
  htim2.Init.Period = (1000000 / 1000) - 1;
 8002c34:	60e1      	str	r1, [r4, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002c36:	6063      	str	r3, [r4, #4]
  htim2.Init.ClockDivision = 0;
 8002c38:	6122      	str	r2, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3a:	60a2      	str	r2, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002c3c:	f00d fb8a 	bl	8010354 <HAL_TIM_Base_Init>
 8002c40:	b110      	cbz	r0, 8002c48 <HAL_InitTick+0x68>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }

  /* Return function status */
  return HAL_ERROR;
 8002c42:	2001      	movs	r0, #1
}
 8002c44:	b008      	add	sp, #32
 8002c46:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f00d f9c1 	bl	800ffd0 <HAL_TIM_Base_Start_IT>
}
 8002c4e:	b008      	add	sp, #32
 8002c50:	bd10      	pop	{r4, pc}
 8002c52:	bf00      	nop
 8002c54:	200006b4 	.word	0x200006b4
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	20004eac 	.word	0x20004eac
 8002c60:	431bde83 	.word	0x431bde83

08002c64 <_getpid>:
}

int _getpid(void)
{
    return 1;
}
 8002c64:	2001      	movs	r0, #1
 8002c66:	4770      	bx	lr

08002c68 <_kill>:

int _kill(int pid, int sig)
{
 8002c68:	b508      	push	{r3, lr}
    UNUSED(pid);
    UNUSED(sig);
    errno = EINVAL;
 8002c6a:	f00f f84d 	bl	8011d08 <__errno>
 8002c6e:	2316      	movs	r3, #22
 8002c70:	6003      	str	r3, [r0, #0]
    return -1;
}
 8002c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c76:	bd08      	pop	{r3, pc}

08002c78 <_exit>:

void _exit (int status)
{
 8002c78:	b508      	push	{r3, lr}
    errno = EINVAL;
 8002c7a:	f00f f845 	bl	8011d08 <__errno>
 8002c7e:	2316      	movs	r3, #22
 8002c80:	6003      	str	r3, [r0, #0]
    _kill(status, -1);
    while (1) {}		/* Make sure we hang here */
 8002c82:	e7fe      	b.n	8002c82 <_exit+0xa>

08002c84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c84:	b570      	push	{r4, r5, r6, lr}
    int DataIdx;

    UNUSED(file);
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c86:	1e16      	subs	r6, r2, #0
 8002c88:	dd07      	ble.n	8002c9a <_read+0x16>
 8002c8a:	460c      	mov	r4, r1
 8002c8c:	198d      	adds	r5, r1, r6
    {
        *ptr++ = __io_getchar();
 8002c8e:	f3af 8000 	nop.w
 8002c92:	f804 0b01 	strb.w	r0, [r4], #1
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c96:	42a5      	cmp	r5, r4
 8002c98:	d1f9      	bne.n	8002c8e <_read+0xa>
    }

    return len;
}
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	bd70      	pop	{r4, r5, r6, pc}
 8002c9e:	bf00      	nop

08002ca0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ca0:	b570      	push	{r4, r5, r6, lr}
    int DataIdx;

    UNUSED(file);

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca2:	1e16      	subs	r6, r2, #0
 8002ca4:	dd07      	ble.n	8002cb6 <_write+0x16>
 8002ca6:	460c      	mov	r4, r1
 8002ca8:	198d      	adds	r5, r1, r6
    {
        __io_putchar(*ptr++);
 8002caa:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002cae:	f3af 8000 	nop.w
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb2:	42a5      	cmp	r5, r4
 8002cb4:	d1f9      	bne.n	8002caa <_write+0xa>
    }
    return len;
}
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	bd70      	pop	{r4, r5, r6, pc}
 8002cba:	bf00      	nop

08002cbc <_sbrk>:
{
    extern char end asm("end");
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
 8002cbc:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <_sbrk+0x30>)
{
 8002cbe:	b508      	push	{r3, lr}
 8002cc0:	4603      	mov	r3, r0
    if (heap_end == 0)
 8002cc2:	6810      	ldr	r0, [r2, #0]
 8002cc4:	b128      	cbz	r0, 8002cd2 <_sbrk+0x16>
        heap_end = &end;

    prev_heap_end = heap_end;
    if (heap_end + incr > stack_ptr)
 8002cc6:	4403      	add	r3, r0
 8002cc8:	4669      	mov	r1, sp
 8002cca:	428b      	cmp	r3, r1
 8002ccc:	d807      	bhi.n	8002cde <_sbrk+0x22>
        //abort();
        errno = ENOMEM;
        return (caddr_t) -1;
    }

    heap_end += incr;
 8002cce:	6013      	str	r3, [r2, #0]

    return (caddr_t) prev_heap_end;
    }
 8002cd0:	bd08      	pop	{r3, pc}
        heap_end = &end;
 8002cd2:	4807      	ldr	r0, [pc, #28]	; (8002cf0 <_sbrk+0x34>)
 8002cd4:	6010      	str	r0, [r2, #0]
    if (heap_end + incr > stack_ptr)
 8002cd6:	4403      	add	r3, r0
 8002cd8:	4669      	mov	r1, sp
 8002cda:	428b      	cmp	r3, r1
 8002cdc:	d9f7      	bls.n	8002cce <_sbrk+0x12>
        errno = ENOMEM;
 8002cde:	f00f f813 	bl	8011d08 <__errno>
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	6003      	str	r3, [r0, #0]
        return (caddr_t) -1;
 8002ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
 8002cea:	bd08      	pop	{r3, pc}
 8002cec:	20004ef8 	.word	0x20004ef8
 8002cf0:	200061a0 	.word	0x200061a0

08002cf4 <_close>:

int _close(int file)
{
    UNUSED(file);
    return -1;
}
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop

08002cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
    UNUSED(file);
    st->st_mode = S_IFCHR;
 8002cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d00:	604b      	str	r3, [r1, #4]
    return 0;
}
 8002d02:	2000      	movs	r0, #0
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop

08002d08 <_isatty>:

int _isatty(int file)
{
    UNUSED(file);
    return 1;
}
 8002d08:	2001      	movs	r0, #1
 8002d0a:	4770      	bx	lr

08002d0c <_lseek>:
{
    UNUSED(file);
    UNUSED(ptr);
    UNUSED(dir);
    return 0;
}
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	4770      	bx	lr

08002d10 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <SystemInit+0x18>)
 8002d12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d16:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d1a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d22:	6099      	str	r1, [r3, #8]
#endif
}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, pllvco, pllr, pllsource, pllm;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d2c:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <SystemCoreClockUpdate+0x70>)
 8002d2e:	6893      	ldr	r3, [r2, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d02d      	beq.n	8002d94 <SystemCoreClockUpdate+0x68>
 8002d38:	2b0c      	cmp	r3, #12
 8002d3a:	d00f      	beq.n	8002d5c <SystemCoreClockUpdate+0x30>
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d00a      	beq.n	8002d56 <SystemCoreClockUpdate+0x2a>
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002d40:	4917      	ldr	r1, [pc, #92]	; (8002da0 <SystemCoreClockUpdate+0x74>)
 8002d42:	680b      	ldr	r3, [r1, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002d44:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <SystemCoreClockUpdate+0x70>)
 8002d46:	4817      	ldr	r0, [pc, #92]	; (8002da4 <SystemCoreClockUpdate+0x78>)
 8002d48:	6892      	ldr	r2, [r2, #8]
 8002d4a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002d4e:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 8002d50:	40d3      	lsrs	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]
}
 8002d54:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <SystemCoreClockUpdate+0x7c>)
 8002d58:	4911      	ldr	r1, [pc, #68]	; (8002da0 <SystemCoreClockUpdate+0x74>)
 8002d5a:	e7f3      	b.n	8002d44 <SystemCoreClockUpdate+0x18>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002d5c:	68d1      	ldr	r1, [r2, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1U ;
 8002d5e:	68d3      	ldr	r3, [r2, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002d60:	f001 0203 	and.w	r2, r1, #3
      if (pllsource == 0x02UL) /* HSI used as PLL clock source */
 8002d64:	2a02      	cmp	r2, #2
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8002d66:	4a0d      	ldr	r2, [pc, #52]	; (8002d9c <SystemCoreClockUpdate+0x70>)
        pllvco = (HSI_VALUE / pllm);
 8002d68:	bf0c      	ite	eq
 8002d6a:	480f      	ldreq	r0, [pc, #60]	; (8002da8 <SystemCoreClockUpdate+0x7c>)
        pllvco = (HSE_VALUE / pllm);
 8002d6c:	480f      	ldrne	r0, [pc, #60]	; (8002dac <SystemCoreClockUpdate+0x80>)
 8002d6e:	490c      	ldr	r1, [pc, #48]	; (8002da0 <SystemCoreClockUpdate+0x74>)
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1U ;
 8002d70:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d74:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm);
 8002d76:	fbb0 f0f3 	udiv	r0, r0, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8002d7a:	68d3      	ldr	r3, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1U) * 2U;
 8002d7c:	68d2      	ldr	r2, [r2, #12]
 8002d7e:	f3c2 6241 	ubfx	r2, r2, #25, #2
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8002d82:	f3c3 2306 	ubfx	r3, r3, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1U) * 2U;
 8002d86:	3201      	adds	r2, #1
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8002d88:	fb00 f303 	mul.w	r3, r0, r3
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1U) * 2U;
 8002d8c:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 8002d8e:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8002d92:	e7d7      	b.n	8002d44 <SystemCoreClockUpdate+0x18>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <SystemCoreClockUpdate+0x80>)
 8002d96:	4902      	ldr	r1, [pc, #8]	; (8002da0 <SystemCoreClockUpdate+0x74>)
 8002d98:	e7d4      	b.n	8002d44 <SystemCoreClockUpdate+0x18>
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	200003c4 	.word	0x200003c4
 8002da4:	0801447c 	.word	0x0801447c
 8002da8:	00f42400 	.word	0x00f42400
 8002dac:	00bb8000 	.word	0x00bb8000

08002db0 <CDC_DeInit_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  usb_state = DISABLE;
 8002db0:	4b01      	ldr	r3, [pc, #4]	; (8002db8 <CDC_DeInit_FS+0x8>)
 8002db2:	2000      	movs	r0, #0
 8002db4:	7018      	strb	r0, [r3, #0]
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8002db6:	4770      	bx	lr
 8002db8:	2000524c 	.word	0x2000524c

08002dbc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	4770      	bx	lr

08002dc0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8002dc0:	b508      	push	{r3, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  tx_usb_user_callback(Buf, Len);
 8002dc2:	4b02      	ldr	r3, [pc, #8]	; (8002dcc <CDC_TransmitCplt_FS+0xc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4798      	blx	r3
  /* USER CODE END 13 */
  return result;
}
 8002dc8:	2000      	movs	r0, #0
 8002dca:	bd08      	pop	{r3, pc}
 8002dcc:	200003e4 	.word	0x200003e4

08002dd0 <default_init_callback>:
}
/* USER CODE END PRIVATE_FUNCTIONS_IMPLEMENTATION */
int8_t default_init_callback(void)
{
    return 0;
}
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	4770      	bx	lr

08002dd4 <default_txrx_callback>:
int8_t default_txrx_callback(uint8_t *buf, uint32_t *len)
{
  (void)buf;
  (void)len;
  return 0;
}
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	4770      	bx	lr

08002dd8 <CDC_Receive_FS>:
{
 8002dd8:	b538      	push	{r3, r4, r5, lr}
  if (usb_state == ENABLE) {
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <CDC_Receive_FS+0x30>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d002      	beq.n	8002de8 <CDC_Receive_FS+0x10>
 8002de2:	2400      	movs	r4, #0
}
 8002de4:	4620      	mov	r0, r4
 8002de6:	bd38      	pop	{r3, r4, r5, pc}
    if(rx_usb_user_callback(Buf, Len) != USBD_OK) {
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <CDC_Receive_FS+0x34>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4605      	mov	r5, r0
 8002dee:	4798      	blx	r3
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002df0:	4629      	mov	r1, r5
    if(rx_usb_user_callback(Buf, Len) != USBD_OK) {
 8002df2:	1e04      	subs	r4, r0, #0
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002df4:	4806      	ldr	r0, [pc, #24]	; (8002e10 <CDC_Receive_FS+0x38>)
    if(rx_usb_user_callback(Buf, Len) != USBD_OK) {
 8002df6:	bf18      	it	ne
 8002df8:	2403      	movne	r4, #3
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8002dfa:	f009 f8a9 	bl	800bf50 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8002dfe:	4804      	ldr	r0, [pc, #16]	; (8002e10 <CDC_Receive_FS+0x38>)
 8002e00:	f009 f8c8 	bl	800bf94 <USBD_CDC_ReceivePacket>
}
 8002e04:	4620      	mov	r0, r4
 8002e06:	bd38      	pop	{r3, r4, r5, pc}
 8002e08:	2000524c 	.word	0x2000524c
 8002e0c:	200003e0 	.word	0x200003e0
 8002e10:	20004efc 	.word	0x20004efc

08002e14 <CDC_Init_FS>:
{
 8002e14:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002e16:	4c09      	ldr	r4, [pc, #36]	; (8002e3c <CDC_Init_FS+0x28>)
 8002e18:	4909      	ldr	r1, [pc, #36]	; (8002e40 <CDC_Init_FS+0x2c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f009 f88b 	bl	800bf38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002e22:	4908      	ldr	r1, [pc, #32]	; (8002e44 <CDC_Init_FS+0x30>)
 8002e24:	4620      	mov	r0, r4
 8002e26:	f009 f893 	bl	800bf50 <USBD_CDC_SetRxBuffer>
  init_usb_user_callback();
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <CDC_Init_FS+0x34>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4798      	blx	r3
  usb_state = ENABLE;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <CDC_Init_FS+0x38>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
}
 8002e36:	2000      	movs	r0, #0
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20004efc 	.word	0x20004efc
 8002e40:	2000520c 	.word	0x2000520c
 8002e44:	200051cc 	.word	0x200051cc
 8002e48:	200003dc 	.word	0x200003dc
 8002e4c:	2000524c 	.word	0x2000524c

08002e50 <CDC_Transmit_FS>:
  if (usb_state == ENABLE) {
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <CDC_Transmit_FS+0x34>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d002      	beq.n	8002e5e <CDC_Transmit_FS+0xe>
  uint8_t result = USBD_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	4770      	bx	lr
{
 8002e5e:	b510      	push	{r4, lr}
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002e60:	4c09      	ldr	r4, [pc, #36]	; (8002e88 <CDC_Transmit_FS+0x38>)
 8002e62:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
    if (hcdc->TxState != 0) {
 8002e66:	f8d2 2214 	ldr.w	r2, [r2, #532]	; 0x214
 8002e6a:	b10a      	cbz	r2, 8002e70 <CDC_Transmit_FS+0x20>
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd10      	pop	{r4, pc}
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8002e70:	460a      	mov	r2, r1
 8002e72:	4601      	mov	r1, r0
 8002e74:	4620      	mov	r0, r4
 8002e76:	f009 f85f 	bl	800bf38 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002e7a:	4620      	mov	r0, r4
}
 8002e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002e80:	f009 b870 	b.w	800bf64 <USBD_CDC_TransmitPacket>
 8002e84:	2000524c 	.word	0x2000524c
 8002e88:	20004efc 	.word	0x20004efc

08002e8c <USBD_CDC_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8002e8c:	2312      	movs	r3, #18
  return USBD_CDC_DeviceDesc;
}
 8002e8e:	4801      	ldr	r0, [pc, #4]	; (8002e94 <USBD_CDC_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_CDC_DeviceDesc);
 8002e90:	800b      	strh	r3, [r1, #0]
}
 8002e92:	4770      	bx	lr
 8002e94:	20000404 	.word	0x20000404

08002e98 <USBD_CDC_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002e98:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002e9a:	4801      	ldr	r0, [pc, #4]	; (8002ea0 <USBD_CDC_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002e9c:	800b      	strh	r3, [r1, #0]
}
 8002e9e:	4770      	bx	lr
 8002ea0:	20000418 	.word	0x20000418

08002ea4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002ea4:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002ea6:	4c04      	ldr	r4, [pc, #16]	; (8002eb8 <USBD_CDC_ManufacturerStrDescriptor+0x14>)
 8002ea8:	4804      	ldr	r0, [pc, #16]	; (8002ebc <USBD_CDC_ManufacturerStrDescriptor+0x18>)
{
 8002eaa:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002eac:	4621      	mov	r1, r4
 8002eae:	f009 fc81 	bl	800c7b4 <USBD_GetString>
  return USBD_StrDesc;
}
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	bd10      	pop	{r4, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20005250 	.word	0x20005250
 8002ebc:	08014494 	.word	0x08014494

08002ec0 <USBD_CDC_ProductStrDescriptor>:
{
 8002ec0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8002ec2:	4c04      	ldr	r4, [pc, #16]	; (8002ed4 <USBD_CDC_ProductStrDescriptor+0x14>)
 8002ec4:	4804      	ldr	r0, [pc, #16]	; (8002ed8 <USBD_CDC_ProductStrDescriptor+0x18>)
{
 8002ec6:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8002ec8:	4621      	mov	r1, r4
 8002eca:	f009 fc73 	bl	800c7b4 <USBD_GetString>
}
 8002ece:	4620      	mov	r0, r4
 8002ed0:	bd10      	pop	{r4, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20005250 	.word	0x20005250
 8002ed8:	080144ac 	.word	0x080144ac

08002edc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002edc:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8002ede:	4c04      	ldr	r4, [pc, #16]	; (8002ef0 <USBD_CDC_ConfigStrDescriptor+0x14>)
 8002ee0:	4804      	ldr	r0, [pc, #16]	; (8002ef4 <USBD_CDC_ConfigStrDescriptor+0x18>)
{
 8002ee2:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	f009 fc65 	bl	800c7b4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002eea:	4620      	mov	r0, r4
 8002eec:	bd10      	pop	{r4, pc}
 8002eee:	bf00      	nop
 8002ef0:	20005250 	.word	0x20005250
 8002ef4:	080144b4 	.word	0x080144b4

08002ef8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002ef8:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8002efa:	4c04      	ldr	r4, [pc, #16]	; (8002f0c <USBD_CDC_InterfaceStrDescriptor+0x14>)
 8002efc:	4804      	ldr	r0, [pc, #16]	; (8002f10 <USBD_CDC_InterfaceStrDescriptor+0x18>)
{
 8002efe:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8002f00:	4621      	mov	r1, r4
 8002f02:	f009 fc57 	bl	800c7b4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002f06:	4620      	mov	r0, r4
 8002f08:	bd10      	pop	{r4, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20005250 	.word	0x20005250
 8002f10:	080144c0 	.word	0x080144c0

08002f14 <USBD_CDC_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002f14:	4820      	ldr	r0, [pc, #128]	; (8002f98 <USBD_CDC_SerialStrDescriptor+0x84>)
 8002f16:	f8d0 3590 	ldr.w	r3, [r0, #1424]	; 0x590
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8002f1a:	f8d0 2598 	ldr.w	r2, [r0, #1432]	; 0x598
{
 8002f1e:	b530      	push	{r4, r5, lr}

  if (deviceserial0 != 0)
 8002f20:	189b      	adds	r3, r3, r2
  *length = USB_SIZ_STRING_SERIAL;
 8002f22:	f04f 041a 	mov.w	r4, #26
 8002f26:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 8002f28:	d101      	bne.n	8002f2e <USBD_CDC_SerialStrDescriptor+0x1a>
}
 8002f2a:	481c      	ldr	r0, [pc, #112]	; (8002f9c <USBD_CDC_SerialStrDescriptor+0x88>)
 8002f2c:	bd30      	pop	{r4, r5, pc}
 8002f2e:	4a1b      	ldr	r2, [pc, #108]	; (8002f9c <USBD_CDC_SerialStrDescriptor+0x88>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002f30:	f8d0 1594 	ldr.w	r1, [r0, #1428]	; 0x594
 8002f34:	f04f 0e00 	mov.w	lr, #0
 8002f38:	4610      	mov	r0, r2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8002f3a:	4675      	mov	r5, lr
    if (((value >> 28)) < 0xA)
 8002f3c:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8002f40:	ea4f 7c13 	mov.w	ip, r3, lsr #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8002f44:	f10c 0430 	add.w	r4, ip, #48	; 0x30
  for (idx = 0; idx < len; idx++)
 8002f48:	f10e 0e02 	add.w	lr, lr, #2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002f4c:	bf2a      	itet	cs
 8002f4e:	f10c 0c37 	addcs.w	ip, ip, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8002f52:	7084      	strbcc	r4, [r0, #2]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002f54:	f880 c002 	strbcs.w	ip, [r0, #2]
  for (idx = 0; idx < len; idx++)
 8002f58:	f1be 0f10 	cmp.w	lr, #16
    pbuf[2 * idx + 1] = 0;
 8002f5c:	70c5      	strb	r5, [r0, #3]
    value = value << 4;
 8002f5e:	ea4f 1303 	mov.w	r3, r3, lsl #4
  for (idx = 0; idx < len; idx++)
 8002f62:	f100 0002 	add.w	r0, r0, #2
 8002f66:	d1e9      	bne.n	8002f3c <USBD_CDC_SerialStrDescriptor+0x28>
 8002f68:	2000      	movs	r0, #0
    pbuf[2 * idx + 1] = 0;
 8002f6a:	4604      	mov	r4, r0
    if (((value >> 28)) < 0xA)
 8002f6c:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 8002f70:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8002f74:	f103 0c30 	add.w	ip, r3, #48	; 0x30
  for (idx = 0; idx < len; idx++)
 8002f78:	f100 0002 	add.w	r0, r0, #2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002f7c:	bf2a      	itet	cs
 8002f7e:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8002f80:	f882 c012 	strbcc.w	ip, [r2, #18]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002f84:	7493      	strbcs	r3, [r2, #18]
  for (idx = 0; idx < len; idx++)
 8002f86:	2808      	cmp	r0, #8
    pbuf[2 * idx + 1] = 0;
 8002f88:	74d4      	strb	r4, [r2, #19]
    value = value << 4;
 8002f8a:	ea4f 1101 	mov.w	r1, r1, lsl #4
  for (idx = 0; idx < len; idx++)
 8002f8e:	f102 0202 	add.w	r2, r2, #2
 8002f92:	d1eb      	bne.n	8002f6c <USBD_CDC_SerialStrDescriptor+0x58>
}
 8002f94:	4801      	ldr	r0, [pc, #4]	; (8002f9c <USBD_CDC_SerialStrDescriptor+0x88>)
 8002f96:	bd30      	pop	{r4, r5, pc}
 8002f98:	1fff7000 	.word	0x1fff7000
 8002f9c:	2000041c 	.word	0x2000041c

08002fa0 <usb_irq_callback>:
/* PRIVATE FUNCTIONS **********************************************************/
/** @brief USB IRQ Callback.
 */
static void usb_irq_callback(void)
{
    HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002fa0:	4801      	ldr	r0, [pc, #4]	; (8002fa8 <usb_irq_callback+0x8>)
 8002fa2:	f00a bbfb 	b.w	800d79c <HAL_PCD_IRQHandler>
 8002fa6:	bf00      	nop
 8002fa8:	20005450 	.word	0x20005450

08002fac <evk_usb_device_cdc_init>:
{
 8002fac:	b508      	push	{r3, lr}
    evk_init_usb_clock();
 8002fae:	f7ff fa83 	bl	80024b8 <evk_init_usb_clock>
    evk_set_usb_irq_callback(usb_irq_callback);
 8002fb2:	480f      	ldr	r0, [pc, #60]	; (8002ff0 <evk_usb_device_cdc_init+0x44>)
 8002fb4:	f7ff faee 	bl	8002594 <evk_set_usb_irq_callback>
    err = USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS);
 8002fb8:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <evk_usb_device_cdc_init+0x48>)
 8002fba:	480f      	ldr	r0, [pc, #60]	; (8002ff8 <evk_usb_device_cdc_init+0x4c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f009 f803 	bl	800bfc8 <USBD_Init>
    if (err != USBD_OK) {
 8002fc2:	b108      	cbz	r0, 8002fc8 <evk_usb_device_cdc_init+0x1c>
        return false;
 8002fc4:	2000      	movs	r0, #0
}
 8002fc6:	bd08      	pop	{r3, pc}
    err = USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8002fc8:	490c      	ldr	r1, [pc, #48]	; (8002ffc <evk_usb_device_cdc_init+0x50>)
 8002fca:	480b      	ldr	r0, [pc, #44]	; (8002ff8 <evk_usb_device_cdc_init+0x4c>)
 8002fcc:	f009 f82e 	bl	800c02c <USBD_RegisterClass>
    if (err != USBD_OK) {
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	d1f7      	bne.n	8002fc4 <evk_usb_device_cdc_init+0x18>
    err = USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8002fd4:	490a      	ldr	r1, [pc, #40]	; (8003000 <evk_usb_device_cdc_init+0x54>)
 8002fd6:	4808      	ldr	r0, [pc, #32]	; (8002ff8 <evk_usb_device_cdc_init+0x4c>)
 8002fd8:	f008 ffa6 	bl	800bf28 <USBD_CDC_RegisterInterface>
    if (err != USBD_OK) {
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d1f1      	bne.n	8002fc4 <evk_usb_device_cdc_init+0x18>
    err = USBD_Start(&hUsbDeviceFS);
 8002fe0:	4805      	ldr	r0, [pc, #20]	; (8002ff8 <evk_usb_device_cdc_init+0x4c>)
 8002fe2:	f009 f83d 	bl	800c060 <USBD_Start>
    if (err != USBD_OK) {
 8002fe6:	fab0 f080 	clz	r0, r0
 8002fea:	0940      	lsrs	r0, r0, #5
}
 8002fec:	bd08      	pop	{r3, pc}
 8002fee:	bf00      	nop
 8002ff0:	08002fa1 	.word	0x08002fa1
 8002ff4:	200003e8 	.word	0x200003e8
 8002ff8:	20004efc 	.word	0x20004efc
 8002ffc:	200005a0 	.word	0x200005a0
 8003000:	200003c8 	.word	0x200003c8

08003004 <evk_usb_device_connect>:
{
 8003004:	b508      	push	{r3, lr}
    if (evk_is_usb_detected()) {
 8003006:	f7ff fde1 	bl	8002bcc <evk_is_usb_detected>
 800300a:	b900      	cbnz	r0, 800300e <evk_usb_device_connect+0xa>
}
 800300c:	bd08      	pop	{r3, pc}
 800300e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        success = evk_usb_device_cdc_init();
 8003012:	f7ff bfcb 	b.w	8002fac <evk_usb_device_cdc_init>
 8003016:	bf00      	nop

08003018 <evk_usb_device_disconnect>:
{
 8003018:	b508      	push	{r3, lr}
    if (!evk_is_usb_detected()) {
 800301a:	f7ff fdd7 	bl	8002bcc <evk_is_usb_detected>
 800301e:	b108      	cbz	r0, 8003024 <evk_usb_device_disconnect+0xc>
    bool success = false;
 8003020:	2000      	movs	r0, #0
}
 8003022:	bd08      	pop	{r3, pc}
    err = USBD_DeInit(&hUsbDeviceFS);
 8003024:	4804      	ldr	r0, [pc, #16]	; (8003038 <evk_usb_device_disconnect+0x20>)
 8003026:	f008 ffe3 	bl	800bff0 <USBD_DeInit>
    if (err != USBD_OK) {
 800302a:	2800      	cmp	r0, #0
 800302c:	d1f8      	bne.n	8003020 <evk_usb_device_disconnect+0x8>
    evk_usb_clock_deinit();
 800302e:	f7ff f9a9 	bl	8002384 <evk_usb_clock_deinit>
    return true;
 8003032:	2001      	movs	r0, #1
}
 8003034:	bd08      	pop	{r3, pc}
 8003036:	bf00      	nop
 8003038:	20004efc 	.word	0x20004efc

0800303c <evk_usb_device_cdc_send_buf>:
    CDC_Transmit_FS(buf, buf_len);
 800303c:	f7ff bf08 	b.w	8002e50 <CDC_Transmit_FS>

08003040 <HAL_PCD_MspInit>:
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
  if(pcdHandle->Instance==USB)
 8003040:	4b0e      	ldr	r3, [pc, #56]	; (800307c <HAL_PCD_MspInit+0x3c>)
 8003042:	6802      	ldr	r2, [r0, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d000      	beq.n	800304a <HAL_PCD_MspInit+0xa>
 8003048:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800304a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
{
 800304e:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 8003050:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003052:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003056:	6599      	str	r1, [r3, #88]	; 0x58
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 800305a:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800305c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003060:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(NVIC_USB_LP_IRQ, PRIO_USB_LP_IRQ, 0);
 8003062:	2014      	movs	r0, #20
 8003064:	2200      	movs	r2, #0
 8003066:	2108      	movs	r1, #8
    __HAL_RCC_USB_CLK_ENABLE();
 8003068:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(NVIC_USB_LP_IRQ, PRIO_USB_LP_IRQ, 0);
 800306a:	f009 fc57 	bl	800c91c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(NVIC_USB_LP_IRQ);
 800306e:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003070:	b003      	add	sp, #12
 8003072:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(NVIC_USB_LP_IRQ);
 8003076:	f009 bc8f 	b.w	800c998 <HAL_NVIC_EnableIRQ>
 800307a:	bf00      	nop
 800307c:	40005c00 	.word	0x40005c00

08003080 <HAL_PCD_MspDeInit>:
static void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
  if(pcdHandle->Instance==USB)
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_PCD_MspDeInit+0x1c>)
 8003082:	6802      	ldr	r2, [r0, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d000      	beq.n	800308a <HAL_PCD_MspDeInit+0xa>

  /* USER CODE BEGIN USB_MspDeInit 1 */

  /* USER CODE END USB_MspDeInit 1 */
  }
}
 8003088:	4770      	bx	lr
    __HAL_RCC_USB_CLK_DISABLE();
 800308a:	4a05      	ldr	r2, [pc, #20]	; (80030a0 <HAL_PCD_MspDeInit+0x20>)
 800308c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800308e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    HAL_NVIC_DisableIRQ(NVIC_USB_LP_IRQ);
 8003092:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_DISABLE();
 8003094:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_NVIC_DisableIRQ(NVIC_USB_LP_IRQ);
 8003096:	f009 bc8d 	b.w	800c9b4 <HAL_NVIC_DisableIRQ>
 800309a:	bf00      	nop
 800309c:	40005c00 	.word	0x40005c00
 80030a0:	40021000 	.word	0x40021000

080030a4 <HAL_PCD_SetupStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80030a4:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80030a8:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80030ac:	f008 bfea 	b.w	800c084 <USBD_LL_SetupStage>

080030b0 <HAL_PCD_DataOutStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80030b0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80030b4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80030b8:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80030bc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80030c0:	f009 b810 	b.w	800c0e4 <USBD_LL_DataOutStage>

080030c4 <HAL_PCD_DataInStageCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80030c4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80030c8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80030cc:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80030d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030d2:	f009 b83b 	b.w	800c14c <USBD_LL_DataInStage>
 80030d6:	bf00      	nop

080030d8 <HAL_PCD_SOFCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80030d8:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80030dc:	f009 b8d4 	b.w	800c288 <USBD_LL_SOF>

080030e0 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80030e0:	b510      	push	{r4, lr}
 80030e2:	4604      	mov	r4, r0

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
  {
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80030e4:	2101      	movs	r1, #1
 80030e6:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 80030ea:	f009 f8b1 	bl	800c250 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80030ee:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80030f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80030f6:	f009 b87f 	b.w	800c1f8 <USBD_LL_Reset>
 80030fa:	bf00      	nop

080030fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80030fc:	b510      	push	{r4, lr}
 80030fe:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003100:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 8003104:	f009 f8a8 	bl	800c258 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003108:	69a3      	ldr	r3, [r4, #24]
 800310a:	b123      	cbz	r3, 8003116 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800310c:	4a02      	ldr	r2, [pc, #8]	; (8003118 <HAL_PCD_SuspendCallback+0x1c>)
 800310e:	6913      	ldr	r3, [r2, #16]
 8003110:	f043 0306 	orr.w	r3, r3, #6
 8003114:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8003116:	bd10      	pop	{r4, pc}
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <HAL_PCD_ResumeCallback>:
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800311c:	6983      	ldr	r3, [r0, #24]
{
 800311e:	b510      	push	{r4, lr}
 8003120:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 8003122:	b92b      	cbnz	r3, 8003130 <HAL_PCD_ResumeCallback+0x14>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003124:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8003128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800312c:	f009 b8a0 	b.w	800c270 <USBD_LL_Resume>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003130:	4a06      	ldr	r2, [pc, #24]	; (800314c <HAL_PCD_ResumeCallback+0x30>)
 8003132:	6913      	ldr	r3, [r2, #16]
 8003134:	f023 0306 	bic.w	r3, r3, #6
 8003138:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 800313a:	f7ff f9e5 	bl	8002508 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800313e:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 8003142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003146:	f009 b893 	b.w	800c270 <USBD_LL_Resume>
 800314a:	bf00      	nop
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <USBD_LL_Init>:
{
 8003150:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_FS.pData = pdev;
 8003152:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8003154:	491e      	ldr	r1, [pc, #120]	; (80031d0 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.pData = pdev;
 8003156:	f8c3 02f0 	str.w	r0, [r3, #752]	; 0x2f0
{
 800315a:	4605      	mov	r5, r0
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800315c:	2400      	movs	r4, #0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800315e:	2202      	movs	r2, #2
  pdev->pData = &hpcd_USB_FS;
 8003160:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  hpcd_USB_FS.Instance = USB;
 8003164:	6019      	str	r1, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003166:	4618      	mov	r0, r3
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003168:	2108      	movs	r1, #8
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800316a:	e9c3 2404 	strd	r2, r4, [r3, #16]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800316e:	e9c3 4406 	strd	r4, r4, [r3, #24]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003172:	6059      	str	r1, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003174:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003176:	621c      	str	r4, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003178:	f00a fa64 	bl	800d644 <HAL_PCD_Init>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800317c:	4622      	mov	r2, r4
 800317e:	4621      	mov	r1, r4
 8003180:	f8d5 02c4 	ldr.w	r0, [r5, #708]	; 0x2c4
 8003184:	2318      	movs	r3, #24
 8003186:	f00b f9b9 	bl	800e4fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800318a:	4622      	mov	r2, r4
 800318c:	f8d5 02c4 	ldr.w	r0, [r5, #708]	; 0x2c4
 8003190:	2358      	movs	r3, #88	; 0x58
 8003192:	2180      	movs	r1, #128	; 0x80
 8003194:	f00b f9b2 	bl	800e4fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8003198:	4622      	mov	r2, r4
 800319a:	f8d5 02c4 	ldr.w	r0, [r5, #708]	; 0x2c4
 800319e:	23c0      	movs	r3, #192	; 0xc0
 80031a0:	2181      	movs	r1, #129	; 0x81
 80031a2:	f00b f9ab 	bl	800e4fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80031a6:	4622      	mov	r2, r4
 80031a8:	f8d5 02c4 	ldr.w	r0, [r5, #708]	; 0x2c4
 80031ac:	f44f 7388 	mov.w	r3, #272	; 0x110
 80031b0:	2101      	movs	r1, #1
 80031b2:	f00b f9a3 	bl	800e4fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80031b6:	f8d5 02c4 	ldr.w	r0, [r5, #708]	; 0x2c4
 80031ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031be:	4622      	mov	r2, r4
 80031c0:	2182      	movs	r1, #130	; 0x82
 80031c2:	f00b f99b 	bl	800e4fc <HAL_PCDEx_PMAConfig>
}
 80031c6:	4620      	mov	r0, r4
 80031c8:	bd38      	pop	{r3, r4, r5, pc}
 80031ca:	bf00      	nop
 80031cc:	20005450 	.word	0x20005450
 80031d0:	40005c00 	.word	0x40005c00

080031d4 <USBD_LL_DeInit>:
{
 80031d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_DeInit(pdev->pData);
 80031d6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80031da:	f00a fa9d 	bl	800d718 <HAL_PCD_DeInit>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80031de:	2803      	cmp	r0, #3
 80031e0:	bf96      	itet	ls
 80031e2:	4b02      	ldrls	r3, [pc, #8]	; (80031ec <USBD_LL_DeInit+0x18>)
  hal_status = HAL_PCD_DeInit(pdev->pData);
 80031e4:	2003      	movhi	r0, #3
 80031e6:	5c18      	ldrbls	r0, [r3, r0]
}
 80031e8:	bd08      	pop	{r3, pc}
 80031ea:	bf00      	nop
 80031ec:	080144d0 	.word	0x080144d0

080031f0 <USBD_LL_Start>:
{
 80031f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80031f2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80031f6:	f00a faa5 	bl	800d744 <HAL_PCD_Start>
  switch (hal_status)
 80031fa:	2803      	cmp	r0, #3
 80031fc:	bf96      	itet	ls
 80031fe:	4b02      	ldrls	r3, [pc, #8]	; (8003208 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8003200:	2003      	movhi	r0, #3
 8003202:	5c18      	ldrbls	r0, [r3, r0]
}
 8003204:	bd08      	pop	{r3, pc}
 8003206:	bf00      	nop
 8003208:	080144d0 	.word	0x080144d0

0800320c <USBD_LL_Stop>:
{
 800320c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 800320e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003212:	f00a faad 	bl	800d770 <HAL_PCD_Stop>
  switch (hal_status)
 8003216:	2803      	cmp	r0, #3
 8003218:	bf96      	itet	ls
 800321a:	4b02      	ldrls	r3, [pc, #8]	; (8003224 <USBD_LL_Stop+0x18>)
  hal_status = HAL_PCD_Stop(pdev->pData);
 800321c:	2003      	movhi	r0, #3
 800321e:	5c18      	ldrbls	r0, [r3, r0]
}
 8003220:	bd08      	pop	{r3, pc}
 8003222:	bf00      	nop
 8003224:	080144d0 	.word	0x080144d0

08003228 <USBD_LL_OpenEP>:
{
 8003228:	4694      	mov	ip, r2
 800322a:	b508      	push	{r3, lr}
 800322c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800322e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003232:	4663      	mov	r3, ip
 8003234:	f00b f83a 	bl	800e2ac <HAL_PCD_EP_Open>
  switch (hal_status)
 8003238:	2803      	cmp	r0, #3
 800323a:	bf96      	itet	ls
 800323c:	4b01      	ldrls	r3, [pc, #4]	; (8003244 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800323e:	2003      	movhi	r0, #3
 8003240:	5c18      	ldrbls	r0, [r3, r0]
}
 8003242:	bd08      	pop	{r3, pc}
 8003244:	080144d0 	.word	0x080144d0

08003248 <USBD_LL_CloseEP>:
{
 8003248:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800324a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800324e:	f00b f869 	bl	800e324 <HAL_PCD_EP_Close>
  switch (hal_status)
 8003252:	2803      	cmp	r0, #3
 8003254:	bf96      	itet	ls
 8003256:	4b02      	ldrls	r3, [pc, #8]	; (8003260 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003258:	2003      	movhi	r0, #3
 800325a:	5c18      	ldrbls	r0, [r3, r0]
}
 800325c:	bd08      	pop	{r3, pc}
 800325e:	bf00      	nop
 8003260:	080144d0 	.word	0x080144d0

08003264 <USBD_LL_StallEP>:
{
 8003264:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003266:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800326a:	f00b f8d3 	bl	800e414 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800326e:	2803      	cmp	r0, #3
 8003270:	bf96      	itet	ls
 8003272:	4b02      	ldrls	r3, [pc, #8]	; (800327c <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003274:	2003      	movhi	r0, #3
 8003276:	5c18      	ldrbls	r0, [r3, r0]
}
 8003278:	bd08      	pop	{r3, pc}
 800327a:	bf00      	nop
 800327c:	080144d0 	.word	0x080144d0

08003280 <USBD_LL_ClearStallEP>:
{
 8003280:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003282:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003286:	f00b f8fd 	bl	800e484 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800328a:	2803      	cmp	r0, #3
 800328c:	bf96      	itet	ls
 800328e:	4b02      	ldrls	r3, [pc, #8]	; (8003298 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003290:	2003      	movhi	r0, #3
 8003292:	5c18      	ldrbls	r0, [r3, r0]
}
 8003294:	bd08      	pop	{r3, pc}
 8003296:	bf00      	nop
 8003298:	080144d0 	.word	0x080144d0

0800329c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800329c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800329e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80032a2:	d406      	bmi.n	80032b2 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80032a4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80032a8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80032ac:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 80032b0:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80032b2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80032b6:	3101      	adds	r1, #1
 80032b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80032bc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80032c0:	7888      	ldrb	r0, [r1, #2]
 80032c2:	4770      	bx	lr

080032c4 <USBD_LL_SetUSBAddress>:
{
 80032c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80032c6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80032ca:	f00a ffdb 	bl	800e284 <HAL_PCD_SetAddress>
  switch (hal_status)
 80032ce:	2803      	cmp	r0, #3
 80032d0:	bf96      	itet	ls
 80032d2:	4b02      	ldrls	r3, [pc, #8]	; (80032dc <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80032d4:	2003      	movhi	r0, #3
 80032d6:	5c18      	ldrbls	r0, [r3, r0]
}
 80032d8:	bd08      	pop	{r3, pc}
 80032da:	bf00      	nop
 80032dc:	080144d0 	.word	0x080144d0

080032e0 <USBD_LL_Transmit>:
{
 80032e0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80032e2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80032e6:	f00b f871 	bl	800e3cc <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80032ea:	2803      	cmp	r0, #3
 80032ec:	bf96      	itet	ls
 80032ee:	4b02      	ldrls	r3, [pc, #8]	; (80032f8 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80032f0:	2003      	movhi	r0, #3
 80032f2:	5c18      	ldrbls	r0, [r3, r0]
}
 80032f4:	bd08      	pop	{r3, pc}
 80032f6:	bf00      	nop
 80032f8:	080144d0 	.word	0x080144d0

080032fc <USBD_LL_PrepareReceive>:
{
 80032fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80032fe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003302:	f00b f83f 	bl	800e384 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8003306:	2803      	cmp	r0, #3
 8003308:	bf96      	itet	ls
 800330a:	4b02      	ldrls	r3, [pc, #8]	; (8003314 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800330c:	2003      	movhi	r0, #3
 800330e:	5c18      	ldrbls	r0, [r3, r0]
}
 8003310:	bd08      	pop	{r3, pc}
 8003312:	bf00      	nop
 8003314:	080144d0 	.word	0x080144d0

08003318 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003318:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800331c:	f00b b84c 	b.w	800e3b8 <HAL_PCD_EP_GetRxCount>

08003320 <HAL_PCDEx_LPM_Callback>:
{
 8003320:	b510      	push	{r4, lr}
 8003322:	4604      	mov	r4, r0
  switch (msg)
 8003324:	b169      	cbz	r1, 8003342 <HAL_PCDEx_LPM_Callback+0x22>
 8003326:	2901      	cmp	r1, #1
 8003328:	d10a      	bne.n	8003340 <HAL_PCDEx_LPM_Callback+0x20>
    USBD_LL_Suspend(hpcd->pData);
 800332a:	f8d0 02f0 	ldr.w	r0, [r0, #752]	; 0x2f0
 800332e:	f008 ff93 	bl	800c258 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8003332:	69a3      	ldr	r3, [r4, #24]
 8003334:	b123      	cbz	r3, 8003340 <HAL_PCDEx_LPM_Callback+0x20>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003336:	4a0d      	ldr	r2, [pc, #52]	; (800336c <HAL_PCDEx_LPM_Callback+0x4c>)
 8003338:	6913      	ldr	r3, [r2, #16]
 800333a:	f043 0306 	orr.w	r3, r3, #6
 800333e:	6113      	str	r3, [r2, #16]
}
 8003340:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8003342:	6983      	ldr	r3, [r0, #24]
 8003344:	b92b      	cbnz	r3, 8003352 <HAL_PCDEx_LPM_Callback+0x32>
    USBD_LL_Resume(hpcd->pData);
 8003346:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
}
 800334a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 800334e:	f008 bf8f 	b.w	800c270 <USBD_LL_Resume>
  SystemClock_Config();
 8003352:	f7ff f8d9 	bl	8002508 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003356:	4a05      	ldr	r2, [pc, #20]	; (800336c <HAL_PCDEx_LPM_Callback+0x4c>)
    USBD_LL_Resume(hpcd->pData);
 8003358:	f8d4 02f0 	ldr.w	r0, [r4, #752]	; 0x2f0
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800335c:	6913      	ldr	r3, [r2, #16]
 800335e:	f023 0306 	bic.w	r3, r3, #6
}
 8003362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003366:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8003368:	f008 bf82 	b.w	800c270 <USBD_LL_Resume>
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <USBD_static_malloc>:
}
 8003370:	4800      	ldr	r0, [pc, #0]	; (8003374 <USBD_static_malloc+0x4>)
 8003372:	4770      	bx	lr
 8003374:	20005744 	.word	0x20005744

08003378 <USBD_static_free>:
}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop

0800337c <usb_connect_callback>:

/* PRIVATE FUNCTIONS **********************************************************/
/** @brief USB line detection callback.
 */
static void usb_connect_callback(void)
{
 800337c:	b508      	push	{r3, lr}
    if (evk_is_usb_detected()) {
 800337e:	f7ff fc25 	bl	8002bcc <evk_is_usb_detected>
 8003382:	b118      	cbz	r0, 800338c <usb_connect_callback+0x10>
        evk_usb_device_connect();
    } else {
        evk_usb_device_disconnect();
    }
}
 8003384:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        evk_usb_device_connect();
 8003388:	f7ff be3c 	b.w	8003004 <evk_usb_device_connect>
}
 800338c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        evk_usb_device_disconnect();
 8003390:	f7ff be42 	b.w	8003018 <evk_usb_device_disconnect>

08003394 <iface_board_init>:
{
 8003394:	b508      	push	{r3, lr}
    evk_init();
 8003396:	f7fe f9a7 	bl	80016e8 <evk_init>

/** @brief Initialize the USB detect event callback function.
 */
static void usb_detect_callback_init(void)
{
    evk_set_usb_detect_callback(usb_connect_callback);
 800339a:	4807      	ldr	r0, [pc, #28]	; (80033b8 <iface_board_init+0x24>)
 800339c:	f7ff f8e2 	bl	8002564 <evk_set_usb_detect_callback>

/** @brief Handle USB connection on initialization.
 */
static void usb_connection_init(void)
{
    if (evk_is_usb_detected()) {
 80033a0:	f7ff fc14 	bl	8002bcc <evk_is_usb_detected>
 80033a4:	b900      	cbnz	r0, 80033a8 <iface_board_init+0x14>
}
 80033a6:	bd08      	pop	{r3, pc}
        evk_usb_device_connect();
 80033a8:	f7ff fe2c 	bl	8003004 <evk_usb_device_connect>
}
 80033ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        evk_timer_delay_ms(1000);
 80033b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033b4:	f7ff bb52 	b.w	8002a5c <evk_timer_delay_ms>
 80033b8:	0800337d 	.word	0x0800337d

080033bc <iface_audio_node_init>:
{
 80033bc:	b510      	push	{r4, lr}
    evk_sai_config_t sai_config = {
 80033be:	4c0f      	ldr	r4, [pc, #60]	; (80033fc <iface_audio_node_init+0x40>)
{
 80033c0:	b086      	sub	sp, #24
    evk_sai_config_t sai_config = {
 80033c2:	68e3      	ldr	r3, [r4, #12]
 80033c4:	f8ad 3000 	strh.w	r3, [sp]
    evk_audio_sai_configuration(&sai_config);
 80033c8:	4668      	mov	r0, sp
    evk_sai_config_t sai_config = {
 80033ca:	0c1b      	lsrs	r3, r3, #16
    max98091_codec_cfg_t cfg = {
 80033cc:	3404      	adds	r4, #4
    evk_sai_config_t sai_config = {
 80033ce:	f88d 3002 	strb.w	r3, [sp, #2]
    evk_audio_sai_configuration(&sai_config);
 80033d2:	f7fe fca3 	bl	8001d1c <evk_audio_sai_configuration>
    max98091_codec_cfg_t cfg = {
 80033d6:	e894 0003 	ldmia.w	r4, {r0, r1}
    hal.read     = evk_audio_i2c_read_byte_blocking;
 80033da:	4a09      	ldr	r2, [pc, #36]	; (8003400 <iface_audio_node_init+0x44>)
    hal.write    = evk_audio_i2c_write_byte_blocking;
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <iface_audio_node_init+0x48>)
    max98091_codec_cfg_t cfg = {
 80033de:	9001      	str	r0, [sp, #4]
 80033e0:	f8ad 1008 	strh.w	r1, [sp, #8]
    hal.i2c_addr = MAX98091A_I2C_ADDR;
 80033e4:	2420      	movs	r4, #32
    max98091_init(&hal, &cfg);
 80033e6:	a803      	add	r0, sp, #12
 80033e8:	a901      	add	r1, sp, #4
    hal.write    = evk_audio_i2c_write_byte_blocking;
 80033ea:	e9cd 3204 	strd	r3, r2, [sp, #16]
    hal.i2c_addr = MAX98091A_I2C_ADDR;
 80033ee:	f88d 400c 	strb.w	r4, [sp, #12]
    max98091_init(&hal, &cfg);
 80033f2:	f007 fa05 	bl	800a800 <max98091_init>
}
 80033f6:	b006      	add	sp, #24
 80033f8:	bd10      	pop	{r4, pc}
 80033fa:	bf00      	nop
 80033fc:	08014398 	.word	0x08014398
 8003400:	08001cf9 	.word	0x08001cf9
 8003404:	08001ccd 	.word	0x08001ccd

08003408 <iface_set_sai_complete_callback>:
{
 8003408:	b510      	push	{r4, lr}
 800340a:	460c      	mov	r4, r1
    evk_audio_set_sai_tx_dma_cplt_callback((irq_callback)tx_callback);
 800340c:	f7fe fe20 	bl	8002050 <evk_audio_set_sai_tx_dma_cplt_callback>
    evk_audio_set_sai_rx_dma_cplt_callback((irq_callback)rx_callback);
 8003410:	4620      	mov	r0, r4
}
 8003412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    evk_audio_set_sai_rx_dma_cplt_callback((irq_callback)rx_callback);
 8003416:	f7fe be21 	b.w	800205c <evk_audio_set_sai_rx_dma_cplt_callback>
 800341a:	bf00      	nop

0800341c <iface_button_handling>:
{
 800341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (btn1_active) {
 800341e:	4c19      	ldr	r4, [pc, #100]	; (8003484 <iface_button_handling+0x68>)
    if (btn2_active) {
 8003420:	4d19      	ldr	r5, [pc, #100]	; (8003488 <iface_button_handling+0x6c>)
    if (btn1_active) {
 8003422:	7823      	ldrb	r3, [r4, #0]
{
 8003424:	4607      	mov	r7, r0
 8003426:	460e      	mov	r6, r1
    if (btn1_active) {
 8003428:	b973      	cbnz	r3, 8003448 <iface_button_handling+0x2c>
    if (btn2_active) {
 800342a:	782b      	ldrb	r3, [r5, #0]
 800342c:	b913      	cbnz	r3, 8003434 <iface_button_handling+0x18>
    if (!btn1_active && !btn2_active) {
 800342e:	7823      	ldrb	r3, [r4, #0]
 8003430:	b19b      	cbz	r3, 800345a <iface_button_handling+0x3e>
}
 8003432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!evk_read_btn_state(BTN2)) {
 8003434:	2001      	movs	r0, #1
 8003436:	f7fe fe37 	bl	80020a8 <evk_read_btn_state>
 800343a:	b1b8      	cbz	r0, 800346c <iface_button_handling+0x50>
    if (!btn1_active && !btn2_active) {
 800343c:	7823      	ldrb	r3, [r4, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f7      	bne.n	8003432 <iface_button_handling+0x16>
 8003442:	782b      	ldrb	r3, [r5, #0]
 8003444:	b14b      	cbz	r3, 800345a <iface_button_handling+0x3e>
}
 8003446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!evk_read_btn_state(BTN1)) {
 8003448:	2000      	movs	r0, #0
 800344a:	f7fe fe2d 	bl	80020a8 <evk_read_btn_state>
 800344e:	2800      	cmp	r0, #0
 8003450:	d1eb      	bne.n	800342a <iface_button_handling+0xe>
    if (btn2_active) {
 8003452:	782b      	ldrb	r3, [r5, #0]
            btn1_active = false;
 8003454:	7020      	strb	r0, [r4, #0]
    if (btn2_active) {
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ec      	bne.n	8003434 <iface_button_handling+0x18>
        if (evk_read_btn_state(BTN1)) {
 800345a:	2000      	movs	r0, #0
 800345c:	f7fe fe24 	bl	80020a8 <evk_read_btn_state>
 8003460:	b130      	cbz	r0, 8003470 <iface_button_handling+0x54>
            if (button1_callback != NULL) {
 8003462:	b107      	cbz	r7, 8003466 <iface_button_handling+0x4a>
                button1_callback();
 8003464:	47b8      	blx	r7
            btn1_active = true;
 8003466:	2301      	movs	r3, #1
 8003468:	7023      	strb	r3, [r4, #0]
}
 800346a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            btn2_active = false;
 800346c:	7028      	strb	r0, [r5, #0]
 800346e:	e7de      	b.n	800342e <iface_button_handling+0x12>
        } else if (evk_read_btn_state(BTN2)) {
 8003470:	2001      	movs	r0, #1
 8003472:	f7fe fe19 	bl	80020a8 <evk_read_btn_state>
 8003476:	2800      	cmp	r0, #0
 8003478:	d0db      	beq.n	8003432 <iface_button_handling+0x16>
            if (button2_callback != NULL) {
 800347a:	b106      	cbz	r6, 800347e <iface_button_handling+0x62>
                button2_callback();
 800347c:	47b0      	blx	r6
            btn2_active = true;
 800347e:	2301      	movs	r3, #1
 8003480:	702b      	strb	r3, [r5, #0]
}
 8003482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003484:	20005964 	.word	0x20005964
 8003488:	20005965 	.word	0x20005965

0800348c <iface_tx_conn_status>:
    evk_led_toggle(LED0);
 800348c:	2000      	movs	r0, #0
 800348e:	f7ff b975 	b.w	800277c <evk_led_toggle>
 8003492:	bf00      	nop

08003494 <iface_rx_conn_status>:
    evk_led_toggle(LED1);
 8003494:	2001      	movs	r0, #1
 8003496:	f7ff b971 	b.w	800277c <evk_led_toggle>
 800349a:	bf00      	nop

0800349c <ep_max98091_stop_produce>:
static void ep_max98091_stop_produce(void *instance)
{
    (void)instance;

    // evk_audio_sai_stop_read_non_blocking();
}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop

080034a0 <ep_swc_consume>:
 *  @param[in] samples   Samples to consume.
 *  @param[in] size      Size of samples to consume in bytes.
 *  @return Number of bytes consumed.
 */
static uint16_t ep_swc_consume(void *instance, uint8_t *samples, uint16_t size)
{
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	4605      	mov	r5, r0
 80034a6:	4614      	mov	r4, r2
    uint8_t *buf;
    swc_error_t err;
    ep_swc_instance_t *inst = (ep_swc_instance_t *)instance;

    swc_connection_get_payload_buffer(inst->connection, &buf, &err);
 80034a8:	6800      	ldr	r0, [r0, #0]
 80034aa:	f10d 0203 	add.w	r2, sp, #3
{
 80034ae:	460e      	mov	r6, r1
    swc_connection_get_payload_buffer(inst->connection, &buf, &err);
 80034b0:	a901      	add	r1, sp, #4
 80034b2:	f001 fb1d 	bl	8004af0 <swc_connection_get_payload_buffer>
    if (buf != NULL)
 80034b6:	9801      	ldr	r0, [sp, #4]
 80034b8:	b158      	cbz	r0, 80034d2 <ep_swc_consume+0x32>
    {
        memcpy(buf, samples, size);
 80034ba:	4631      	mov	r1, r6
 80034bc:	4622      	mov	r2, r4
 80034be:	f00e fc55 	bl	8011d6c <memcpy>
        swc_connection_send(inst->connection, buf, size, &err);
 80034c2:	6828      	ldr	r0, [r5, #0]
 80034c4:	9901      	ldr	r1, [sp, #4]
 80034c6:	f10d 0303 	add.w	r3, sp, #3
 80034ca:	b2e2      	uxtb	r2, r4
 80034cc:	f001 fb20 	bl	8004b10 <swc_connection_send>
        return size;
 80034d0:	4620      	mov	r0, r4
    }
    else
    {
        return 0;
    }
}
 80034d2:	b002      	add	sp, #8
 80034d4:	bd70      	pop	{r4, r5, r6, pc}
 80034d6:	bf00      	nop

080034d8 <ep_swc_produce>:
{
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	b082      	sub	sp, #8
    uint8_t *payload = NULL;
 80034dc:	2300      	movs	r3, #0
{
 80034de:	4605      	mov	r5, r0
 80034e0:	460e      	mov	r6, r1
    payload_size = swc_connection_receive(inst->connection, &payload, &err);
 80034e2:	f10d 0203 	add.w	r2, sp, #3
 80034e6:	a901      	add	r1, sp, #4
 80034e8:	6800      	ldr	r0, [r0, #0]
    uint8_t *payload = NULL;
 80034ea:	9301      	str	r3, [sp, #4]
    payload_size = swc_connection_receive(inst->connection, &payload, &err);
 80034ec:	f001 fb1e 	bl	8004b2c <swc_connection_receive>
    memcpy(samples, payload, payload_size);
 80034f0:	9901      	ldr	r1, [sp, #4]
 80034f2:	4602      	mov	r2, r0
    payload_size = swc_connection_receive(inst->connection, &payload, &err);
 80034f4:	4604      	mov	r4, r0
    memcpy(samples, payload, payload_size);
 80034f6:	4630      	mov	r0, r6
 80034f8:	f00e fc38 	bl	8011d6c <memcpy>
    swc_connection_receive_complete(inst->connection, &err);
 80034fc:	6828      	ldr	r0, [r5, #0]
 80034fe:	f10d 0103 	add.w	r1, sp, #3
 8003502:	f001 fb25 	bl	8004b50 <swc_connection_receive_complete>
}
 8003506:	b2a0      	uxth	r0, r4
 8003508:	b002      	add	sp, #8
 800350a:	bd70      	pop	{r4, r5, r6, pc}

0800350c <ep_max98091_stop_consume>:
    evk_audio_sai_stop_write_non_blocking();
 800350c:	f7fe bdb8 	b.w	8002080 <evk_audio_sai_stop_write_non_blocking>

08003510 <ep_max98091_start_consume>:
    evk_audio_sai_start_write_non_blocking();
 8003510:	f7fe bdaa 	b.w	8002068 <evk_audio_sai_start_write_non_blocking>

08003514 <ep_max98091_action_consume>:
{
 8003514:	b508      	push	{r3, lr}
    evk_audio_sai_write_non_blocking(samples, size);
 8003516:	4608      	mov	r0, r1
 8003518:	4611      	mov	r1, r2
 800351a:	f7fe fd41 	bl	8001fa0 <evk_audio_sai_write_non_blocking>
}
 800351e:	2000      	movs	r0, #0
 8003520:	bd08      	pop	{r3, pc}
 8003522:	bf00      	nop

08003524 <ep_max98091_start_produce>:
    evk_audio_sai_start_read_non_blocking();
 8003524:	f7fe bda6 	b.w	8002074 <evk_audio_sai_start_read_non_blocking>

08003528 <ep_max98091_action_produce>:
{
 8003528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t data[size];
 800352c:	0053      	lsls	r3, r2, #1
{
 800352e:	b087      	sub	sp, #28
    uint16_t data[size];
 8003530:	3307      	adds	r3, #7
 8003532:	4668      	mov	r0, sp
{
 8003534:	af00      	add	r7, sp, #0
    uint16_t data[size];
 8003536:	08db      	lsrs	r3, r3, #3
 8003538:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
{
 800353c:	60ba      	str	r2, [r7, #8]
    uint16_t data[size];
 800353e:	469d      	mov	sp, r3
    for (int n = 0; n < size; n++)
 8003540:	2a00      	cmp	r2, #0
 8003542:	d051      	beq.n	80035e8 <ep_max98091_action_produce+0xc0>
 8003544:	4b2e      	ldr	r3, [pc, #184]	; (8003600 <ep_max98091_action_produce+0xd8>)
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	681c      	ldr	r4, [r3, #0]
 800354a:	68bb      	ldr	r3, [r7, #8]
        data[n] = (u_int16_t)(127.0 * sin(2 * 3.14 * count) + 127.0); // calculating the sin value at each time instance
 800354c:	f20f 0ba0 	addw	fp, pc, #160	; 0xa0
 8003550:	e9db ab00 	ldrd	sl, fp, [fp]
 8003554:	f20f 09a0 	addw	r9, pc, #160	; 0xa0
 8003558:	e9d9 8900 	ldrd	r8, r9, [r9]
 800355c:	466e      	mov	r6, sp
 800355e:	4423      	add	r3, r4
 8003560:	3e02      	subs	r6, #2
 8003562:	1e4d      	subs	r5, r1, #1
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	4620      	mov	r0, r4
 8003568:	f7fc fffc 	bl	8000564 <__aeabi_i2d>
 800356c:	4652      	mov	r2, sl
 800356e:	465b      	mov	r3, fp
 8003570:	f7fd f862 	bl	8000638 <__aeabi_dmul>
 8003574:	ec41 0b10 	vmov	d0, r0, r1
 8003578:	f00f fe4e 	bl	8013218 <sin>
 800357c:	4642      	mov	r2, r8
 800357e:	ec51 0b10 	vmov	r0, r1, d0
 8003582:	464b      	mov	r3, r9
 8003584:	f7fd f858 	bl	8000638 <__aeabi_dmul>
 8003588:	464b      	mov	r3, r9
 800358a:	4642      	mov	r2, r8
 800358c:	f7fc fe9e 	bl	80002cc <__adddf3>
 8003590:	f7fd fb14 	bl	8000bbc <__aeabi_d2uiz>
    for (int n = 0; n < size; n++)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3401      	adds	r4, #1
        data[n] = (u_int16_t)(127.0 * sin(2 * 3.14 * count) + 127.0); // calculating the sin value at each time instance
 8003598:	b280      	uxth	r0, r0
    for (int n = 0; n < size; n++)
 800359a:	42a3      	cmp	r3, r4
        data[n] = (u_int16_t)(127.0 * sin(2 * 3.14 * count) + 127.0); // calculating the sin value at each time instance
 800359c:	f826 0f02 	strh.w	r0, [r6, #2]!
        samples[n] = (u_int16_t)data[n];
 80035a0:	f805 0f01 	strb.w	r0, [r5, #1]!
    for (int n = 0; n < size; n++)
 80035a4:	d1df      	bne.n	8003566 <ep_max98091_action_produce+0x3e>
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6013      	str	r3, [r2, #0]
    int length = snprintf( NULL, 0, "%d", count );
 80035aa:	2100      	movs	r1, #0
 80035ac:	4a15      	ldr	r2, [pc, #84]	; (8003604 <ep_max98091_action_produce+0xdc>)
 80035ae:	4608      	mov	r0, r1
 80035b0:	f00e fd68 	bl	8012084 <sniprintf>
    char* str = malloc( length + 1 );
 80035b4:	1c41      	adds	r1, r0, #1
    int length = snprintf( NULL, 0, "%d", count );
 80035b6:	4604      	mov	r4, r0
    char* str = malloc( length + 1 );
 80035b8:	4608      	mov	r0, r1
 80035ba:	60f9      	str	r1, [r7, #12]
 80035bc:	f00e fbce 	bl	8011d5c <malloc>
    snprintf( str, length + 1, "%d", count );
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a10      	ldr	r2, [pc, #64]	; (8003604 <ep_max98091_action_produce+0xdc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	f00e fd5c 	bl	8012084 <sniprintf>
    evk_usb_device_cdc_send_buf((uint8_t *)snum, length);
 80035cc:	f107 0010 	add.w	r0, r7, #16
 80035d0:	b2a1      	uxth	r1, r4
 80035d2:	f7ff fd33 	bl	800303c <evk_usb_device_cdc_send_buf>
    evk_audio_sai_read_non_blocking(dummy, size);
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	480b      	ldr	r0, [pc, #44]	; (8003608 <ep_max98091_action_produce+0xe0>)
 80035da:	f7fe fd0d 	bl	8001ff8 <evk_audio_sai_read_non_blocking>
}
 80035de:	2000      	movs	r0, #0
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int length = snprintf( NULL, 0, "%d", count );
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <ep_max98091_action_produce+0xd8>)
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	e7dc      	b.n	80035aa <ep_max98091_action_produce+0x82>
 80035f0:	51eb851f 	.word	0x51eb851f
 80035f4:	40191eb8 	.word	0x40191eb8
 80035f8:	00000000 	.word	0x00000000
 80035fc:	405fc000 	.word	0x405fc000
 8003600:	20005968 	.word	0x20005968
 8003604:	080144d4 	.word	0x080144d4
 8003608:	2000596c 	.word	0x2000596c

0800360c <ep_swc_stop>:
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop

08003610 <ep_swc_start>:
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop

08003614 <iface_audio_swc_endpoint_init>:
{
 8003614:	b410      	push	{r4}
    if (swc_producer_iface != NULL)
 8003616:	b128      	cbz	r0, 8003624 <iface_audio_swc_endpoint_init+0x10>
        swc_producer_iface->action = ep_swc_produce;
 8003618:	4c07      	ldr	r4, [pc, #28]	; (8003638 <iface_audio_swc_endpoint_init+0x24>)
        swc_producer_iface->start = ep_swc_start;
 800361a:	4a08      	ldr	r2, [pc, #32]	; (800363c <iface_audio_swc_endpoint_init+0x28>)
        swc_producer_iface->stop = ep_swc_stop;
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <iface_audio_swc_endpoint_init+0x2c>)
 800361e:	6083      	str	r3, [r0, #8]
        swc_producer_iface->start = ep_swc_start;
 8003620:	e9c0 4200 	strd	r4, r2, [r0]
    if (swc_consumer_iface != NULL)
 8003624:	b129      	cbz	r1, 8003632 <iface_audio_swc_endpoint_init+0x1e>
        swc_consumer_iface->action = ep_swc_consume;
 8003626:	4807      	ldr	r0, [pc, #28]	; (8003644 <iface_audio_swc_endpoint_init+0x30>)
        swc_consumer_iface->start = ep_swc_start;
 8003628:	4a04      	ldr	r2, [pc, #16]	; (800363c <iface_audio_swc_endpoint_init+0x28>)
        swc_consumer_iface->stop = ep_swc_stop;
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <iface_audio_swc_endpoint_init+0x2c>)
 800362c:	608b      	str	r3, [r1, #8]
        swc_consumer_iface->start = ep_swc_start;
 800362e:	e9c1 0200 	strd	r0, r2, [r1]
}
 8003632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	080034d9 	.word	0x080034d9
 800363c:	08003611 	.word	0x08003611
 8003640:	0800360d 	.word	0x0800360d
 8003644:	080034a1 	.word	0x080034a1

08003648 <iface_audio_max98091_endpoint_init>:
{
 8003648:	b410      	push	{r4}
    if (max98091_producer_iface != NULL)
 800364a:	b140      	cbz	r0, 800365e <iface_audio_max98091_endpoint_init+0x16>
        max98091_producer_iface->action = ep_max98091_action_produce;
 800364c:	4c09      	ldr	r4, [pc, #36]	; (8003674 <iface_audio_max98091_endpoint_init+0x2c>)
        max98091_producer_iface->start = ep_max98091_start_produce;
 800364e:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <iface_audio_max98091_endpoint_init+0x30>)
        count = 0;
 8003650:	4b0a      	ldr	r3, [pc, #40]	; (800367c <iface_audio_max98091_endpoint_init+0x34>)
        max98091_producer_iface->start = ep_max98091_start_produce;
 8003652:	e9c0 4200 	strd	r4, r2, [r0]
        max98091_producer_iface->stop = ep_max98091_stop_produce;
 8003656:	4c0a      	ldr	r4, [pc, #40]	; (8003680 <iface_audio_max98091_endpoint_init+0x38>)
 8003658:	6084      	str	r4, [r0, #8]
        count = 0;
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
    if (max98091_consumer_iface != NULL)
 800365e:	b129      	cbz	r1, 800366c <iface_audio_max98091_endpoint_init+0x24>
        max98091_consumer_iface->action = ep_max98091_action_consume;
 8003660:	4808      	ldr	r0, [pc, #32]	; (8003684 <iface_audio_max98091_endpoint_init+0x3c>)
        max98091_consumer_iface->start = ep_max98091_start_consume;
 8003662:	4a09      	ldr	r2, [pc, #36]	; (8003688 <iface_audio_max98091_endpoint_init+0x40>)
        max98091_consumer_iface->stop = ep_max98091_stop_consume;
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <iface_audio_max98091_endpoint_init+0x44>)
 8003666:	608b      	str	r3, [r1, #8]
        max98091_consumer_iface->start = ep_max98091_start_consume;
 8003668:	e9c1 0200 	strd	r0, r2, [r1]
}
 800366c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	08003529 	.word	0x08003529
 8003678:	08003525 	.word	0x08003525
 800367c:	20005968 	.word	0x20005968
 8003680:	0800349d 	.word	0x0800349d
 8003684:	08003515 	.word	0x08003515
 8003688:	08003511 	.word	0x08003511
 800368c:	0800350d 	.word	0x0800350d

08003690 <iface_audio_critical_section_init>:
    queue_critical->enter_critical = evk_enter_critical;
 8003690:	4a02      	ldr	r2, [pc, #8]	; (800369c <iface_audio_critical_section_init+0xc>)
    queue_critical->exit_critical = evk_exit_critical;
 8003692:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <iface_audio_critical_section_init+0x10>)
 8003694:	e9c0 2300 	strd	r2, r3, [r0]
}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	080025a1 	.word	0x080025a1
 80036a0:	080025b5 	.word	0x080025b5

080036a4 <iface_swc_hal_init>:
#include "evk.h"

/* PUBLIC FUNCTIONS ***********************************************************/
void iface_swc_hal_init(swc_hal_t *hal)
{
    hal->radio_hal[0].set_shutdown_pin   = evk_radio_set_shutdown_pin;
 80036a4:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <iface_swc_hal_init+0x50>)
    hal->radio_hal[0].reset_shutdown_pin = evk_radio_reset_shutdown_pin;
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <iface_swc_hal_init+0x54>)
    hal->radio_hal[0].set_reset_pin      = evk_radio_set_reset_pin;
    hal->radio_hal[0].reset_reset_pin    = evk_radio_reset_reset_pin;
 80036a8:	4914      	ldr	r1, [pc, #80]	; (80036fc <iface_swc_hal_init+0x58>)
{
 80036aa:	b410      	push	{r4}
    hal->radio_hal[0].reset_shutdown_pin = evk_radio_reset_shutdown_pin;
 80036ac:	e9c0 2300 	strd	r2, r3, [r0]
    hal->radio_hal[0].set_reset_pin      = evk_radio_set_reset_pin;
 80036b0:	4c13      	ldr	r4, [pc, #76]	; (8003700 <iface_swc_hal_init+0x5c>)
    hal->radio_hal[0].read_irq_pin       = evk_radio_read_irq_pin;
 80036b2:	4a14      	ldr	r2, [pc, #80]	; (8003704 <iface_swc_hal_init+0x60>)
    hal->radio_hal[0].set_cs             = evk_radio_spi_set_cs;
 80036b4:	4b14      	ldr	r3, [pc, #80]	; (8003708 <iface_swc_hal_init+0x64>)
    hal->radio_hal[0].reset_reset_pin    = evk_radio_reset_reset_pin;
 80036b6:	e9c0 4102 	strd	r4, r1, [r0, #8]
    hal->radio_hal[0].set_cs             = evk_radio_spi_set_cs;
 80036ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
    hal->radio_hal[0].reset_cs           = evk_radio_spi_reset_cs;
 80036be:	4c13      	ldr	r4, [pc, #76]	; (800370c <iface_swc_hal_init+0x68>)
    hal->radio_hal[0].delay_ms           = evk_timer_delay_ms;
 80036c0:	4913      	ldr	r1, [pc, #76]	; (8003710 <iface_swc_hal_init+0x6c>)

    hal->radio_hal[0].transfer_full_duplex_blocking     = evk_radio_spi_transfer_full_duplex_blocking;
 80036c2:	4a14      	ldr	r2, [pc, #80]	; (8003714 <iface_swc_hal_init+0x70>)
    hal->radio_hal[0].transfer_full_duplex_non_blocking = evk_radio_spi_transfer_full_duplex_non_blocking;
 80036c4:	4b14      	ldr	r3, [pc, #80]	; (8003718 <iface_swc_hal_init+0x74>)
    hal->radio_hal[0].delay_ms           = evk_timer_delay_ms;
 80036c6:	e9c0 4106 	strd	r4, r1, [r0, #24]
    hal->radio_hal[0].transfer_full_duplex_non_blocking = evk_radio_spi_transfer_full_duplex_non_blocking;
 80036ca:	e9c0 2308 	strd	r2, r3, [r0, #32]
    hal->radio_hal[0].is_spi_busy                       = evk_radio_is_spi_busy;
 80036ce:	4c13      	ldr	r4, [pc, #76]	; (800371c <iface_swc_hal_init+0x78>)
    hal->radio_hal[0].context_switch                    = evk_radio_context_switch;
 80036d0:	4913      	ldr	r1, [pc, #76]	; (8003720 <iface_swc_hal_init+0x7c>)
    hal->radio_hal[0].disable_radio_irq                 = evk_radio_disable_irq_it;
 80036d2:	4a14      	ldr	r2, [pc, #80]	; (8003724 <iface_swc_hal_init+0x80>)
    hal->radio_hal[0].enable_radio_irq                  = evk_radio_enable_irq_it;
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <iface_swc_hal_init+0x84>)
    hal->radio_hal[0].context_switch                    = evk_radio_context_switch;
 80036d6:	e9c0 410a 	strd	r4, r1, [r0, #40]	; 0x28
    hal->radio_hal[0].enable_radio_irq                  = evk_radio_enable_irq_it;
 80036da:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    hal->radio_hal[0].disable_radio_dma_irq             = evk_radio_disable_dma_irq_it;
 80036de:	4c13      	ldr	r4, [pc, #76]	; (800372c <iface_swc_hal_init+0x88>)
    hal->radio_hal[0].enable_radio_dma_irq              = evk_radio_enable_dma_irq_it;
 80036e0:	4913      	ldr	r1, [pc, #76]	; (8003730 <iface_swc_hal_init+0x8c>)

    hal->context_switch = evk_radio_callback_context_switch;
 80036e2:	4a14      	ldr	r2, [pc, #80]	; (8003734 <iface_swc_hal_init+0x90>)

    hal->get_tick_quarter_ms = evk_timer_get_free_running_tick_ms;
 80036e4:	4b14      	ldr	r3, [pc, #80]	; (8003738 <iface_swc_hal_init+0x94>)
    hal->radio_hal[0].enable_radio_dma_irq              = evk_radio_enable_dma_irq_it;
 80036e6:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
    hal->get_tick_quarter_ms = evk_timer_get_free_running_tick_ms;
 80036ea:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
}
 80036ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	0800282d 	.word	0x0800282d
 80036f8:	0800283d 	.word	0x0800283d
 80036fc:	0800285d 	.word	0x0800285d
 8003700:	0800284d 	.word	0x0800284d
 8003704:	080027c5 	.word	0x080027c5
 8003708:	0800286d 	.word	0x0800286d
 800370c:	0800287d 	.word	0x0800287d
 8003710:	08002a5d 	.word	0x08002a5d
 8003714:	0800288d 	.word	0x0800288d
 8003718:	080028f9 	.word	0x080028f9
 800371c:	0800295d 	.word	0x0800295d
 8003720:	0800296d 	.word	0x0800296d
 8003724:	080027ed 	.word	0x080027ed
 8003728:	080027dd 	.word	0x080027dd
 800372c:	08002815 	.word	0x08002815
 8003730:	08002805 	.word	0x08002805
 8003734:	0800297d 	.word	0x0800297d
 8003738:	08002a61 	.word	0x08002a61

0800373c <iface_swc_handlers_init>:

void iface_swc_handlers_init(void)
{
 800373c:	b508      	push	{r3, lr}
    evk_set_radio_irq_callback(swc_radio_irq_handler);
 800373e:	4805      	ldr	r0, [pc, #20]	; (8003754 <iface_swc_handlers_init+0x18>)
 8003740:	f7fe ff16 	bl	8002570 <evk_set_radio_irq_callback>
    evk_set_radio_dma_rx_callback(swc_radio_spi_receive_complete_handler);
 8003744:	4804      	ldr	r0, [pc, #16]	; (8003758 <iface_swc_handlers_init+0x1c>)
 8003746:	f7fe ff19 	bl	800257c <evk_set_radio_dma_rx_callback>
    evk_set_pendsv_callback(swc_connection_callbacks_processing_handler);
}
 800374a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    evk_set_pendsv_callback(swc_connection_callbacks_processing_handler);
 800374e:	4803      	ldr	r0, [pc, #12]	; (800375c <iface_swc_handlers_init+0x20>)
 8003750:	f7fe bf1a 	b.w	8002588 <evk_set_pendsv_callback>
 8003754:	08004ba9 	.word	0x08004ba9
 8003758:	08004c25 	.word	0x08004c25
 800375c:	08004b9d 	.word	0x08004b9d

08003760 <audio_cdc_module_init>:
static void cdc_update_queue_status(sac_cdc_instance_t *instance, queue_node_t *in_node);
static uint16_t cdc_compensate(sac_cdc_instance_t *instance, queue_node_t *in_node, queue_node_t *out_node);

/* PUBLIC FUNCTIONS ***********************************************************/
void audio_cdc_module_init(sac_pipeline_t *pipeline, mem_pool_t *mem_pool, sac_error_t *err)
{
 8003760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003764:	460f      	mov	r7, r1
    sac_cdc_instance_t *cdc_instance;

    *err = SAC_ERR_NONE;
 8003766:	f04f 0800 	mov.w	r8, #0
{
 800376a:	4605      	mov	r5, r0
 800376c:	b082      	sub	sp, #8
    *err = SAC_ERR_NONE;
 800376e:	f882 8000 	strb.w	r8, [r2]

    pipeline->_cdc_instance = mem_pool_malloc(mem_pool, sizeof(sac_cdc_instance_t));
 8003772:	2160      	movs	r1, #96	; 0x60
 8003774:	4638      	mov	r0, r7
{
 8003776:	4616      	mov	r6, r2
    pipeline->_cdc_instance = mem_pool_malloc(mem_pool, sizeof(sac_cdc_instance_t));
 8003778:	f007 fbae 	bl	800aed8 <mem_pool_malloc>
 800377c:	63e8      	str	r0, [r5, #60]	; 0x3c
    if (pipeline->_cdc_instance == NULL) {
 800377e:	b1f0      	cbz	r0, 80037be <audio_cdc_module_init+0x5e>
        *err = SAC_ERR_NOT_ENOUGH_MEMORY;
        return;
    }
    cdc_instance = pipeline->_cdc_instance;

    cdc_instance->avg_sum = 0;
 8003780:	4604      	mov	r4, r0
    cdc_instance->avg_val = 0;
    cdc_instance->avg_idx = 0;
    cdc_instance->queue_avg_size = pipeline->cfg.cdc_queue_avg_size;
 8003782:	8aa9      	ldrh	r1, [r5, #20]
    cdc_instance->avg_idx = 0;
 8003784:	f8a0 8054 	strh.w	r8, [r0, #84]	; 0x54
    cdc_instance->avg_val = 0;
 8003788:	e9c0 8812 	strd	r8, r8, [r0, #72]	; 0x48

    /* Allocate rolling average memory */
    cdc_instance->avg_arr = (uint8_t *)mem_pool_malloc(mem_pool, cdc_instance->queue_avg_size);
 800378c:	4638      	mov	r0, r7
    cdc_instance->queue_avg_size = pipeline->cfg.cdc_queue_avg_size;
 800378e:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
    cdc_instance->avg_arr = (uint8_t *)mem_pool_malloc(mem_pool, cdc_instance->queue_avg_size);
 8003792:	f007 fba1 	bl	800aed8 <mem_pool_malloc>
 8003796:	6460      	str	r0, [r4, #68]	; 0x44
    if (cdc_instance->avg_arr == NULL) {
 8003798:	b188      	cbz	r0, 80037be <audio_cdc_module_init+0x5e>
        *err = SAC_ERR_NOT_ENOUGH_MEMORY;
        return;
    }
    memset(cdc_instance->avg_arr, 0, cdc_instance->queue_avg_size);
 800379a:	4641      	mov	r1, r8
 800379c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 80037a0:	f00e fb0c 	bl	8011dbc <memset>

    /* Initialize resampling configuration */
    switch (pipeline->consumer->cfg.bit_depth) {
 80037a4:	68e9      	ldr	r1, [r5, #12]
 80037a6:	7dcb      	ldrb	r3, [r1, #23]
 80037a8:	2b14      	cmp	r3, #20
 80037aa:	d00d      	beq.n	80037c8 <audio_cdc_module_init+0x68>
 80037ac:	2b18      	cmp	r3, #24
 80037ae:	d00b      	beq.n	80037c8 <audio_cdc_module_init+0x68>
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d03c      	beq.n	800382e <audio_cdc_module_init+0xce>

    resampling_config.buffer_type = pipeline->consumer->cfg.bit_depth - 1;

    /* Initialize the resampling instance */
    if (resampling_init(&cdc_instance->resampling_instance, &resampling_config) != RESAMPLING_NO_ERROR) {
        *err = SAC_ERR_CDC_INIT_FAILURE;
 80037b4:	2307      	movs	r3, #7
 80037b6:	7033      	strb	r3, [r6, #0]
    /* Configure threshold */
    cdc_instance->normal_queue_size = pipeline->consumer->cfg.queue_size * DECIMAL_FACTOR;
    uint8_t sample_amount = pipeline->consumer->cfg.audio_payload_size /
                            (pipeline->consumer->cfg.channel_count * cdc_instance->size_of_buffer_type);
    cdc_instance->max_queue_offset = DECIMAL_FACTOR / sample_amount;
}
 80037b8:	b002      	add	sp, #8
 80037ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *err = SAC_ERR_NOT_ENOUGH_MEMORY;
 80037be:	2301      	movs	r3, #1
 80037c0:	7033      	strb	r3, [r6, #0]
}
 80037c2:	b002      	add	sp, #8
 80037c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        cdc_instance->size_of_buffer_type = AUDIO_24BITS_BYTE;
 80037c8:	2204      	movs	r2, #4
 80037ca:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    resampling_config.buffer_type = pipeline->consumer->cfg.bit_depth - 1;
 80037ce:	3b01      	subs	r3, #1
 80037d0:	f88d 3001 	strb.w	r3, [sp, #1]
    resampling_config_t resampling_config = {
 80037d4:	8a6b      	ldrh	r3, [r5, #18]
 80037d6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80037da:	7d8b      	ldrb	r3, [r1, #22]
 80037dc:	f88d 3004 	strb.w	r3, [sp, #4]
    if (resampling_init(&cdc_instance->resampling_instance, &resampling_config) != RESAMPLING_NO_ERROR) {
 80037e0:	4620      	mov	r0, r4
        .nb_sample = (pipeline->consumer->cfg.audio_payload_size / cdc_instance->size_of_buffer_type),
 80037e2:	8b0b      	ldrh	r3, [r1, #24]
 80037e4:	fbb3 f2f2 	udiv	r2, r3, r2
    if (resampling_init(&cdc_instance->resampling_instance, &resampling_config) != RESAMPLING_NO_ERROR) {
 80037e8:	4669      	mov	r1, sp
    resampling_config_t resampling_config = {
 80037ea:	2300      	movs	r3, #0
 80037ec:	f88d 2000 	strb.w	r2, [sp]
 80037f0:	f88d 3005 	strb.w	r3, [sp, #5]
    if (resampling_init(&cdc_instance->resampling_instance, &resampling_config) != RESAMPLING_NO_ERROR) {
 80037f4:	f007 fe74 	bl	800b4e0 <resampling_init>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d1db      	bne.n	80037b4 <audio_cdc_module_init+0x54>
    cdc_instance->normal_queue_size = pipeline->consumer->cfg.queue_size * DECIMAL_FACTOR;
 80037fc:	68e9      	ldr	r1, [r5, #12]
                            (pipeline->consumer->cfg.channel_count * cdc_instance->size_of_buffer_type);
 80037fe:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    cdc_instance->normal_queue_size = pipeline->consumer->cfg.queue_size * DECIMAL_FACTOR;
 8003802:	7e8b      	ldrb	r3, [r1, #26]
    uint8_t sample_amount = pipeline->consumer->cfg.audio_payload_size /
 8003804:	8b0a      	ldrh	r2, [r1, #24]
    cdc_instance->normal_queue_size = pipeline->consumer->cfg.queue_size * DECIMAL_FACTOR;
 8003806:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800380a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	65a3      	str	r3, [r4, #88]	; 0x58
                            (pipeline->consumer->cfg.channel_count * cdc_instance->size_of_buffer_type);
 8003812:	7d8b      	ldrb	r3, [r1, #22]
    cdc_instance->max_queue_offset = DECIMAL_FACTOR / sample_amount;
 8003814:	2164      	movs	r1, #100	; 0x64
                            (pipeline->consumer->cfg.channel_count * cdc_instance->size_of_buffer_type);
 8003816:	fb13 f300 	smulbb	r3, r3, r0
    uint8_t sample_amount = pipeline->consumer->cfg.audio_payload_size /
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
    cdc_instance->max_queue_offset = DECIMAL_FACTOR / sample_amount;
 800381e:	b2db      	uxtb	r3, r3
 8003820:	fbb1 f3f3 	udiv	r3, r1, r3
 8003824:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
}
 8003828:	b002      	add	sp, #8
 800382a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        cdc_instance->size_of_buffer_type = AUDIO_16BITS_BYTE;
 800382e:	2202      	movs	r2, #2
 8003830:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        break;
 8003834:	e7cb      	b.n	80037ce <audio_cdc_module_init+0x6e>
 8003836:	bf00      	nop

08003838 <audio_cdc_module_process>:

queue_node_t *audio_cdc_module_process(sac_pipeline_t *pipeline, queue_node_t *in_node, sac_error_t *err)
{
    queue_node_t *out_node;

    *err = SAC_ERR_NONE;
 8003838:	2300      	movs	r3, #0
{
 800383a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *err = SAC_ERR_NONE;
 800383e:	7013      	strb	r3, [r2, #0]
}

/* PRIVATE FUNCTIONS **********************************************************/
static void cdc_update_queue_status(sac_cdc_instance_t *instance, queue_node_t *in_node)
{
    if ((sac_node_get_header(in_node)->tx_queue_level_high == 1) &&
 8003840:	680b      	ldr	r3, [r1, #0]
    cdc_update_queue_status(pipeline->_cdc_instance, in_node);
 8003842:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    if ((sac_node_get_header(in_node)->tx_queue_level_high == 1) &&
 8003844:	789b      	ldrb	r3, [r3, #2]
 8003846:	07db      	lsls	r3, r3, #31
{
 8003848:	4617      	mov	r7, r2
 800384a:	460e      	mov	r6, r1
 800384c:	4605      	mov	r5, r0
    if ((sac_node_get_header(in_node)->tx_queue_level_high == 1) &&
 800384e:	d44f      	bmi.n	80038f0 <audio_cdc_module_process+0xb8>
        (resample_get_state(&instance->resampling_instance) == RESAMPLING_IDLE)) {
        instance->wait_for_queue_full = true;
    }

    if (resample_get_state(&instance->resampling_instance) == RESAMPLING_WAIT_QUEUE_FULL) {
 8003850:	4620      	mov	r0, r4
 8003852:	f008 f897 	bl	800b984 <resample_get_state>
 8003856:	2800      	cmp	r0, #0
 8003858:	d13d      	bne.n	80038d6 <audio_cdc_module_process+0x9e>
        if (instance->avg_val >= (instance->normal_queue_size - DECIMAL_FACTOR)) {
 800385a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800385c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800385e:	3b64      	subs	r3, #100	; 0x64
 8003860:	429a      	cmp	r2, r3
 8003862:	d227      	bcs.n	80038b4 <audio_cdc_module_process+0x7c>
    out_node = queue_get_free_node(pipeline->producer->_free_queue);
 8003864:	686b      	ldr	r3, [r5, #4]
 8003866:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003868:	f007 fc58 	bl	800b11c <queue_get_free_node>
    if (out_node == NULL) {
 800386c:	4604      	mov	r4, r0
 800386e:	b360      	cbz	r0, 80038ca <audio_cdc_module_process+0x92>
    if (cdc_compensate(pipeline->_cdc_instance, in_node, out_node) > 0) {
 8003870:	6bed      	ldr	r5, [r5, #60]	; 0x3c

static uint16_t cdc_compensate(sac_cdc_instance_t *instance, queue_node_t *in_node, queue_node_t *out_node)
{
    uint16_t sample_count = 0;

    sample_count = sac_node_get_payload_size(in_node) / instance->size_of_buffer_type;
 8003872:	6831      	ldr	r1, [r6, #0]

    /* Resample and save buffer_size in output node header */
    sample_count = resample(&instance->resampling_instance,
                            (void *)sac_node_get_data(in_node),
                            (void *)sac_node_get_data(out_node),
 8003874:	6822      	ldr	r2, [r4, #0]
    sample_count = sac_node_get_payload_size(in_node) / instance->size_of_buffer_type;
 8003876:	f831 0b04 	ldrh.w	r0, [r1], #4
 800387a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    sample_count = resample(&instance->resampling_instance,
 800387e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003882:	3204      	adds	r2, #4
 8003884:	4628      	mov	r0, r5
 8003886:	f007 fec9 	bl	800b61c <resample>
                            sample_count);
    sac_node_set_payload_size(out_node, sample_count * instance->size_of_buffer_type);
 800388a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800388e:	6822      	ldr	r2, [r4, #0]
 8003890:	fb13 f000 	smulbb	r0, r3, r0
 8003894:	b280      	uxth	r0, r0
 8003896:	8010      	strh	r0, [r2, #0]
    if (cdc_compensate(pipeline->_cdc_instance, in_node, out_node) > 0) {
 8003898:	b930      	cbnz	r0, 80038a8 <audio_cdc_module_process+0x70>
        queue_free_node(out_node);
 800389a:	4620      	mov	r0, r4
        return in_node;
 800389c:	4634      	mov	r4, r6
        queue_free_node(out_node);
 800389e:	f007 fca9 	bl	800b1f4 <queue_free_node>
}
 80038a2:	4620      	mov	r0, r4
 80038a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        queue_free_node(in_node);
 80038a8:	4630      	mov	r0, r6
 80038aa:	f007 fca3 	bl	800b1f4 <queue_free_node>
}
 80038ae:	4620      	mov	r0, r4
 80038b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            instance->resampling_instance.status = RESAMPLING_IDLE;
 80038b4:	2301      	movs	r3, #1
 80038b6:	7023      	strb	r3, [r4, #0]
    out_node = queue_get_free_node(pipeline->producer->_free_queue);
 80038b8:	686b      	ldr	r3, [r5, #4]
            instance->wait_for_queue_full = false;
 80038ba:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    out_node = queue_get_free_node(pipeline->producer->_free_queue);
 80038be:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038c0:	f007 fc2c 	bl	800b11c <queue_get_free_node>
    if (out_node == NULL) {
 80038c4:	4604      	mov	r4, r0
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d1d2      	bne.n	8003870 <audio_cdc_module_process+0x38>
        *err = SAC_ERR_PRODUCER_Q_FULL;
 80038ca:	2303      	movs	r3, #3
        return in_node;
 80038cc:	4634      	mov	r4, r6
        *err = SAC_ERR_PRODUCER_Q_FULL;
 80038ce:	703b      	strb	r3, [r7, #0]
}
 80038d0:	4620      	mov	r0, r4
 80038d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (resample_get_state(&instance->resampling_instance) == RESAMPLING_IDLE) {
 80038d6:	4620      	mov	r0, r4
 80038d8:	f008 f854 	bl	800b984 <resample_get_state>
 80038dc:	2801      	cmp	r0, #1
 80038de:	d1c1      	bne.n	8003864 <audio_cdc_module_process+0x2c>
        if (instance->wait_for_queue_full) {
 80038e0:	f894 805e 	ldrb.w	r8, [r4, #94]	; 0x5e
 80038e4:	f1b8 0f00 	cmp.w	r8, #0
 80038e8:	d00a      	beq.n	8003900 <audio_cdc_module_process+0xc8>
            instance->resampling_instance.status = RESAMPLING_WAIT_QUEUE_FULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	7023      	strb	r3, [r4, #0]
 80038ee:	e7b9      	b.n	8003864 <audio_cdc_module_process+0x2c>
        (resample_get_state(&instance->resampling_instance) == RESAMPLING_IDLE)) {
 80038f0:	4620      	mov	r0, r4
 80038f2:	f008 f847 	bl	800b984 <resample_get_state>
    if ((sac_node_get_header(in_node)->tx_queue_level_high == 1) &&
 80038f6:	2801      	cmp	r0, #1
        instance->wait_for_queue_full = true;
 80038f8:	bf08      	it	eq
 80038fa:	f884 005e 	strbeq.w	r0, [r4, #94]	; 0x5e
 80038fe:	e7a7      	b.n	8003850 <audio_cdc_module_process+0x18>
            if (instance->count > instance->queue_avg_size) {
 8003900:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003902:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8003906:	4293      	cmp	r3, r2
 8003908:	d911      	bls.n	800392e <audio_cdc_module_process+0xf6>
                if (instance->avg_val > (instance->normal_queue_size + instance->max_queue_offset)) {
 800390a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800390c:	f894 1056 	ldrb.w	r1, [r4, #86]	; 0x56
 8003910:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003912:	eb03 0c01 	add.w	ip, r3, r1
 8003916:	4562      	cmp	r2, ip
 8003918:	d80c      	bhi.n	8003934 <audio_cdc_module_process+0xfc>
                } else if (instance->avg_val < (instance->normal_queue_size - instance->max_queue_offset)) {
 800391a:	1a5b      	subs	r3, r3, r1
 800391c:	429a      	cmp	r2, r3
 800391e:	d2a1      	bcs.n	8003864 <audio_cdc_module_process+0x2c>
                    resampling_start(&instance->resampling_instance, RESAMPLING_ADD_SAMPLE);
 8003920:	4601      	mov	r1, r0
 8003922:	4620      	mov	r0, r4
 8003924:	f007 fe76 	bl	800b614 <resampling_start>
                    instance->count = 0;
 8003928:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
 800392c:	e79a      	b.n	8003864 <audio_cdc_module_process+0x2c>
                instance->count++;
 800392e:	3301      	adds	r3, #1
 8003930:	6523      	str	r3, [r4, #80]	; 0x50
 8003932:	e797      	b.n	8003864 <audio_cdc_module_process+0x2c>
                    resampling_start(&instance->resampling_instance, RESAMPLING_REMOVE_SAMPLE);
 8003934:	2102      	movs	r1, #2
 8003936:	4620      	mov	r0, r4
 8003938:	f007 fe6c 	bl	800b614 <resampling_start>
                    instance->count = 0;
 800393c:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
 8003940:	e790      	b.n	8003864 <audio_cdc_module_process+0x2c>
 8003942:	bf00      	nop

08003944 <audio_cdc_module_update_queue_avg>:
    uint16_t current_queue_length = queue_get_length(pipeline->consumer->_queue);
 8003944:	68c3      	ldr	r3, [r0, #12]
{
 8003946:	b510      	push	{r4, lr}
 8003948:	4604      	mov	r4, r0
    uint16_t current_queue_length = queue_get_length(pipeline->consumer->_queue);
 800394a:	6a18      	ldr	r0, [r3, #32]
 800394c:	f007 fc78 	bl	800b240 <queue_get_length>
    sac_cdc_instance_t *cdc_instance = pipeline->_cdc_instance;
 8003950:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    uint16_t avg_idx = cdc_instance->avg_idx;
 8003952:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
    cdc_instance->avg_sum -= cdc_instance->avg_arr[avg_idx]; /* Remove oldest value */
 8003956:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8003958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800395a:	f814 c001 	ldrb.w	ip, [r4, r1]
 800395e:	eba2 020c 	sub.w	r2, r2, ip
 8003962:	649a      	str	r2, [r3, #72]	; 0x48
    cdc_instance->avg_arr[avg_idx] = current_queue_length;
 8003964:	5460      	strb	r0, [r4, r1]
    cdc_instance->avg_sum += cdc_instance->avg_arr[avg_idx]; /* Add new value */
 8003966:	e9d3 0411 	ldrd	r0, r4, [r3, #68]	; 0x44
 800396a:	5c40      	ldrb	r0, [r0, r1]
    if (++avg_idx >= cdc_instance->queue_avg_size) {
 800396c:	1c4a      	adds	r2, r1, #1
    cdc_instance->avg_sum += cdc_instance->avg_arr[avg_idx]; /* Add new value */
 800396e:	4420      	add	r0, r4
    if (++avg_idx >= cdc_instance->queue_avg_size) {
 8003970:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
    cdc_instance->avg_sum += cdc_instance->avg_arr[avg_idx]; /* Add new value */
 8003974:	6498      	str	r0, [r3, #72]	; 0x48
    if (++avg_idx >= cdc_instance->queue_avg_size) {
 8003976:	b292      	uxth	r2, r2
    cdc_instance->avg_val = (cdc_instance->avg_sum * DECIMAL_FACTOR) / cdc_instance->queue_avg_size; /* decimals are part of int value */
 8003978:	2164      	movs	r1, #100	; 0x64
        avg_idx = 0;
 800397a:	4294      	cmp	r4, r2
 800397c:	bf98      	it	ls
 800397e:	2200      	movls	r2, #0
    cdc_instance->avg_val = (cdc_instance->avg_sum * DECIMAL_FACTOR) / cdc_instance->queue_avg_size; /* decimals are part of int value */
 8003980:	fb00 f101 	mul.w	r1, r0, r1
    cdc_instance->avg_idx = avg_idx;
 8003984:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    cdc_instance->avg_val = (cdc_instance->avg_sum * DECIMAL_FACTOR) / cdc_instance->queue_avg_size; /* decimals are part of int value */
 8003988:	fbb1 f1f4 	udiv	r1, r1, r4
 800398c:	64d9      	str	r1, [r3, #76]	; 0x4c
}
 800398e:	bd10      	pop	{r4, pc}

08003990 <audio_mixer_module_mix_packets>:

    return audio_mixer_module;
}

void audio_mixer_module_mix_packets(audio_mixer_module_t *audio_mixer_module)
{
 8003990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (audio_mixer_module->cfg.bit_depth == 16) {
 8003994:	f890 335b 	ldrb.w	r3, [r0, #859]	; 0x35b
 8003998:	2b10      	cmp	r3, #16
{
 800399a:	4605      	mov	r5, r0
    if (audio_mixer_module->cfg.bit_depth == 16) {
 800399c:	d025      	beq.n	80039ea <audio_mixer_module_mix_packets+0x5a>
{
    uint8_t nb_of_inputs = 0;
    uint8_t packet_size = 0;
    int32_t sample_summation = 0;

    nb_of_inputs = audio_mixer_module->cfg.nb_of_inputs;
 800399e:	f890 7359 	ldrb.w	r7, [r0, #857]	; 0x359

    if (audio_mixer_module->cfg.bit_depth == 16) {
        size_type = sizeof(int16_t);
    }

    return audio_mixer_module->cfg.payload_size / size_type;
 80039a2:	f890 635a 	ldrb.w	r6, [r0, #858]	; 0x35a
    for (uint8_t input = 0; input < audio_mixer_module->cfg.nb_of_inputs; input++) {
 80039a6:	b1f7      	cbz	r7, 80039e6 <audio_mixer_module_mix_packets+0x56>
 80039a8:	f04f 0800 	mov.w	r8, #0
 80039ac:	4647      	mov	r7, r8
        current_size = audio_mixer_module->input_samples_queue[input].current_size;
 80039ae:	f04f 09f5 	mov.w	r9, #245	; 0xf5
 80039b2:	e009      	b.n	80039c8 <audio_mixer_module_mix_packets+0x38>
        audio_mixer_module->input_samples_queue[input].current_size = sample_remainder;
 80039b4:	fb09 5307 	mla	r3, r9, r7, r5
    for (uint8_t input = 0; input < audio_mixer_module->cfg.nb_of_inputs; input++) {
 80039b8:	fa5f f788 	uxtb.w	r7, r8
        audio_mixer_module->input_samples_queue[input].current_size = sample_remainder;
 80039bc:	f883 40f4 	strb.w	r4, [r3, #244]	; 0xf4
    for (uint8_t input = 0; input < audio_mixer_module->cfg.nb_of_inputs; input++) {
 80039c0:	f895 3359 	ldrb.w	r3, [r5, #857]	; 0x359
 80039c4:	42bb      	cmp	r3, r7
 80039c6:	d90e      	bls.n	80039e6 <audio_mixer_module_mix_packets+0x56>
        current_size = audio_mixer_module->input_samples_queue[input].current_size;
 80039c8:	fb09 5007 	mla	r0, r9, r7, r5
    for (uint8_t input = 0; input < audio_mixer_module->cfg.nb_of_inputs; input++) {
 80039cc:	f108 0801 	add.w	r8, r8, #1
        sample_remainder = current_size - sample_size;
 80039d0:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
 80039d4:	1b92      	subs	r2, r2, r6
        if (sample_remainder > 0) {
 80039d6:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
 80039da:	d0eb      	beq.n	80039b4 <audio_mixer_module_mix_packets+0x24>
            memcpy(audio_mixer_module->input_samples_queue[input].samples,
 80039dc:	4622      	mov	r2, r4
 80039de:	1981      	adds	r1, r0, r6
 80039e0:	f00e f9c4 	bl	8011d6c <memcpy>
 80039e4:	e7e6      	b.n	80039b4 <audio_mixer_module_mix_packets+0x24>
}
 80039e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return audio_mixer_module->cfg.payload_size / size_type;
 80039ea:	f890 635a 	ldrb.w	r6, [r0, #858]	; 0x35a
    nb_of_inputs = audio_mixer_module->cfg.nb_of_inputs;
 80039ee:	f890 7359 	ldrb.w	r7, [r0, #857]	; 0x359
    for (uint8_t sample = 0; sample < packet_size; sample++) {
 80039f2:	0873      	lsrs	r3, r6, #1
 80039f4:	d0d7      	beq.n	80039a6 <audio_mixer_module_mix_packets+0x16>
 80039f6:	3b01      	subs	r3, #1
 80039f8:	1e7a      	subs	r2, r7, #1
 80039fa:	f100 01f5 	add.w	r1, r0, #245	; 0xf5
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f200 24dd 	addw	r4, r0, #733	; 0x2dd
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	20f5      	movs	r0, #245	; 0xf5
 8003a08:	f205 2cdf 	addw	ip, r5, #735	; 0x2df
 8003a0c:	fb10 1002 	smlabb	r0, r0, r2, r1
 8003a10:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
        for (uint8_t input = 0; input < nb_of_inputs; input++) {
 8003a14:	463a      	mov	r2, r7
 8003a16:	b15f      	cbz	r7, 8003a30 <audio_mixer_module_mix_packets+0xa0>
 8003a18:	f46f 7337 	mvn.w	r3, #732	; 0x2dc
 8003a1c:	18e3      	adds	r3, r4, r3
 8003a1e:	2200      	movs	r2, #0
            sample_summation += ((int16_t *)audio_mixer_module->input_samples_queue[input].samples)[sample];
 8003a20:	f933 1bf5 	ldrsh.w	r1, [r3], #245
        for (uint8_t input = 0; input < nb_of_inputs; input++) {
 8003a24:	4283      	cmp	r3, r0
            sample_summation += ((int16_t *)audio_mixer_module->input_samples_queue[input].samples)[sample];
 8003a26:	440a      	add	r2, r1
        for (uint8_t input = 0; input < nb_of_inputs; input++) {
 8003a28:	d1fa      	bne.n	8003a20 <audio_mixer_module_mix_packets+0x90>
        ((int16_t *)audio_mixer_module->output_packet_buffer)[sample] = (sample_summation / nb_of_inputs);
 8003a2a:	fb92 f2f7 	sdiv	r2, r2, r7
 8003a2e:	b212      	sxth	r2, r2
 8003a30:	f824 2f02 	strh.w	r2, [r4, #2]!
    for (uint8_t sample = 0; sample < packet_size; sample++) {
 8003a34:	4564      	cmp	r4, ip
 8003a36:	f100 0002 	add.w	r0, r0, #2
 8003a3a:	d1eb      	bne.n	8003a14 <audio_mixer_module_mix_packets+0x84>
 8003a3c:	e7b3      	b.n	80039a6 <audio_mixer_module_mix_packets+0x16>
 8003a3e:	bf00      	nop

08003a40 <audio_mixer_module_append_samples>:
{
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	4604      	mov	r4, r0
    memcpy(input_samples_queue->samples + mem_offset, samples, size);
 8003a44:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
 8003a48:	4420      	add	r0, r4
{
 8003a4a:	4615      	mov	r5, r2
    memcpy(input_samples_queue->samples + mem_offset, samples, size);
 8003a4c:	f00e f98e 	bl	8011d6c <memcpy>
    input_samples_queue->current_size += size;
 8003a50:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
 8003a54:	4415      	add	r5, r2
 8003a56:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
}
 8003a5a:	bd38      	pop	{r3, r4, r5, pc}

08003a5c <audio_mixer_module_append_silence>:
{
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	4604      	mov	r4, r0
    memset(input_samples_queue->samples + mem_offset, 0, size);
 8003a60:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
 8003a64:	460a      	mov	r2, r1
{
 8003a66:	460d      	mov	r5, r1
    memset(input_samples_queue->samples + mem_offset, 0, size);
 8003a68:	4420      	add	r0, r4
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	f00e f9a6 	bl	8011dbc <memset>
    input_samples_queue->current_size += size;
 8003a70:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
 8003a74:	4415      	add	r5, r2
 8003a76:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
}
 8003a7a:	bd38      	pop	{r3, r4, r5, pc}

08003a7c <audio_src_cmsis_init>:
    21594, 20178, 17580, 14208, 10560, 7110, 4242, 2148, 834, 168, -102, -216
};

/* PUBLIC FUNCTIONS ***********************************************************/
void audio_src_cmsis_init(void *instance, mem_pool_t *mem_pool)
{
 8003a7c:	b570      	push	{r4, r5, r6, lr}
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4608      	mov	r0, r1
    int16_t *fir_state;
    const int16_t *fir_coeff;
    const int16_t *fir_coeff_interpolation;
    src_cmsis_instance_t *src_instance = (src_cmsis_instance_t *)instance;
    uint32_t block_size = src_instance->cfg.payload_size / (src_instance->cfg.bit_depth / 8);
 8003a82:	7923      	ldrb	r3, [r4, #4]
 8003a84:	8865      	ldrh	r5, [r4, #2]
 8003a86:	08db      	lsrs	r3, r3, #3
 8003a88:	fbb5 f5f3 	udiv	r5, r5, r3

    fir_state = mem_pool_malloc(mem_pool, sizeof(int16_t) * (FIR_NUMTAPS + block_size));
 8003a8c:	f105 0118 	add.w	r1, r5, #24
 8003a90:	0049      	lsls	r1, r1, #1
{
 8003a92:	b082      	sub	sp, #8
    fir_state = mem_pool_malloc(mem_pool, sizeof(int16_t) * (FIR_NUMTAPS + block_size));
 8003a94:	f007 fa20 	bl	800aed8 <mem_pool_malloc>

    switch (src_instance->cfg.ratio) {
 8003a98:	7821      	ldrb	r1, [r4, #0]
 8003a9a:	2903      	cmp	r1, #3
 8003a9c:	d017      	beq.n	8003ace <audio_src_cmsis_init+0x52>
 8003a9e:	2906      	cmp	r1, #6
 8003aa0:	d10c      	bne.n	8003abc <audio_src_cmsis_init+0x40>
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <audio_src_cmsis_init+0x58>)
 8003aa4:	4e0c      	ldr	r6, [pc, #48]	; (8003ad8 <audio_src_cmsis_init+0x5c>)
    default:
        /* Invalid ratio */
        return;
    }

    if (src_instance->cfg.is_divider) {
 8003aa6:	7862      	ldrb	r2, [r4, #1]
        arm_fir_decimate_init_q15((arm_fir_decimate_instance_q15 *)(&src_instance->fir_instance),
 8003aa8:	e9cd 0500 	strd	r0, r5, [sp]
    if (src_instance->cfg.is_divider) {
 8003aac:	b142      	cbz	r2, 8003ac0 <audio_src_cmsis_init+0x44>
        arm_fir_decimate_init_q15((arm_fir_decimate_instance_q15 *)(&src_instance->fir_instance),
 8003aae:	460a      	mov	r2, r1
 8003ab0:	4633      	mov	r3, r6
 8003ab2:	2118      	movs	r1, #24
 8003ab4:	f104 0008 	add.w	r0, r4, #8
 8003ab8:	f007 ff66 	bl	800b988 <arm_fir_decimate_init_q15>
                                  FIR_NUMTAPS, src_instance->cfg.ratio, fir_coeff, fir_state, block_size);
    } else {
        arm_fir_interpolate_init_q15((arm_fir_interpolate_instance_q15 *)(&src_instance->fir_instance),
                                     src_instance->cfg.ratio, FIR_NUMTAPS, fir_coeff_interpolation, fir_state, block_size);
    }
}
 8003abc:	b002      	add	sp, #8
 8003abe:	bd70      	pop	{r4, r5, r6, pc}
        arm_fir_interpolate_init_q15((arm_fir_interpolate_instance_q15 *)(&src_instance->fir_instance),
 8003ac0:	2218      	movs	r2, #24
 8003ac2:	f104 0008 	add.w	r0, r4, #8
 8003ac6:	f008 f82f 	bl	800bb28 <arm_fir_interpolate_init_q15>
}
 8003aca:	b002      	add	sp, #8
 8003acc:	bd70      	pop	{r4, r5, r6, pc}
        fir_coeff_interpolation = fir_n24_c0_20_w_hamming_x3_gain;
 8003ace:	4b03      	ldr	r3, [pc, #12]	; (8003adc <audio_src_cmsis_init+0x60>)
        fir_coeff = fir_n24_c0_20_w_hamming;
 8003ad0:	4e03      	ldr	r6, [pc, #12]	; (8003ae0 <audio_src_cmsis_init+0x64>)
 8003ad2:	e7e8      	b.n	8003aa6 <audio_src_cmsis_init+0x2a>
 8003ad4:	08014508 	.word	0x08014508
 8003ad8:	080144d8 	.word	0x080144d8
 8003adc:	08014568 	.word	0x08014568
 8003ae0:	08014538 	.word	0x08014538

08003ae4 <audio_src_cmsis_deinit>:

void audio_src_cmsis_deinit(void *instance)
{
    (void)instance;
}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop

08003ae8 <audio_src_cmsis_ctrl>:
    (void)instance;
    (void)cmd;
    (void)arg;

    return 0;
}
 8003ae8:	2000      	movs	r0, #0
 8003aea:	4770      	bx	lr

08003aec <audio_src_cmsis_process>:

uint16_t audio_src_cmsis_process(void *instance, sac_header_t *header,
                                 uint8_t *data_in, uint16_t bytes_count, uint8_t *data_out)
{
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4604      	mov	r4, r0
    (void)header;
    uint16_t sample_count_out          = 0;
    uint16_t sample_count_in           = bytes_count / sizeof(q15_t);
    src_cmsis_instance_t *src_instance = (src_cmsis_instance_t *)instance;

    if (src_instance->cfg.is_divider) {
 8003af0:	7840      	ldrb	r0, [r0, #1]
    uint16_t sample_count_in           = bytes_count / sizeof(q15_t);
 8003af2:	085d      	lsrs	r5, r3, #1
{
 8003af4:	4611      	mov	r1, r2
        arm_fir_decimate_q15((arm_fir_decimate_instance_q15 *)(&src_instance->fir_instance),
 8003af6:	462b      	mov	r3, r5
 8003af8:	9a04      	ldr	r2, [sp, #16]
    if (src_instance->cfg.is_divider) {
 8003afa:	b148      	cbz	r0, 8003b10 <audio_src_cmsis_process+0x24>
        arm_fir_decimate_q15((arm_fir_decimate_instance_q15 *)(&src_instance->fir_instance),
 8003afc:	f104 0008 	add.w	r0, r4, #8
 8003b00:	f007 ff5c 	bl	800b9bc <arm_fir_decimate_q15>
                             (q15_t *)data_in, (q15_t *)data_out, bytes_count / sizeof(q15_t));
        sample_count_out = sample_count_in / src_instance->cfg.ratio;
 8003b04:	7820      	ldrb	r0, [r4, #0]
 8003b06:	fbb5 f0f0 	udiv	r0, r5, r0
        arm_fir_interpolate_q15((arm_fir_interpolate_instance_q15 *)(&src_instance->fir_instance),
                                (q15_t *)data_in, (q15_t *)data_out, bytes_count / sizeof(q15_t));
        sample_count_out = sample_count_in * src_instance->cfg.ratio;
    }

    return (sample_count_out * sizeof(q15_t));
 8003b0a:	0040      	lsls	r0, r0, #1
 8003b0c:	b280      	uxth	r0, r0
}
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
        arm_fir_interpolate_q15((arm_fir_interpolate_instance_q15 *)(&src_instance->fir_instance),
 8003b10:	f104 0008 	add.w	r0, r4, #8
 8003b14:	f008 f822 	bl	800bb5c <arm_fir_interpolate_q15>
        sample_count_out = sample_count_in * src_instance->cfg.ratio;
 8003b18:	7820      	ldrb	r0, [r4, #0]
 8003b1a:	fb10 f005 	smulbb	r0, r0, r5
 8003b1e:	b280      	uxth	r0, r0
    return (sample_count_out * sizeof(q15_t));
 8003b20:	0040      	lsls	r0, r0, #1
 8003b22:	b280      	uxth	r0, r0
}
 8003b24:	bd38      	pop	{r3, r4, r5, pc}
 8003b26:	bf00      	nop

08003b28 <audio_volume_init>:
static void apply_volume_factor_32bits(int32_t *audio_samples_in, uint16_t samples_count,
                                       int32_t *audio_samples_out, float volume_factor);

/* PUBLIC FUNCTIONS ***********************************************************/
void audio_volume_init(void *instance, mem_pool_t *mem_pool)
{
 8003b28:	b510      	push	{r4, lr}
 8003b2a:	4604      	mov	r4, r0
    (void)mem_pool;
    audio_volume_instance_t *vol_inst = (audio_volume_instance_t *) instance;

    vol_inst->_volume_factor = (vol_inst->initial_volume_level / 100.0);
 8003b2c:	7840      	ldrb	r0, [r0, #1]
 8003b2e:	f7fc fd19 	bl	8000564 <__aeabi_i2d>
 8003b32:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <audio_volume_init+0x1c>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	f7fc fea9 	bl	800088c <__aeabi_ddiv>
 8003b3a:	f7fd f85f 	bl	8000bfc <__aeabi_d2f>
 8003b3e:	6060      	str	r0, [r4, #4]
    vol_inst->_volume_threshold = (vol_inst->initial_volume_level / 100.0);
 8003b40:	60a0      	str	r0, [r4, #8]
}
 8003b42:	bd10      	pop	{r4, pc}
 8003b44:	40590000 	.word	0x40590000

08003b48 <audio_volume_deinit>:
 *
 *  @param[in] instance  Volume instance.
 */
static void audio_volume_mute(audio_volume_instance_t *instance)
{
    instance->_volume_factor = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	6043      	str	r3, [r0, #4]
    instance->_volume_threshold = 0;
 8003b4c:	6083      	str	r3, [r0, #8]
}
 8003b4e:	4770      	bx	lr

08003b50 <audio_volume_ctrl>:
{
 8003b50:	b510      	push	{r4, lr}
 8003b52:	4604      	mov	r4, r0
    switch ((audio_volume_cmd_t)cmd) {
 8003b54:	2903      	cmp	r1, #3
 8003b56:	d83f      	bhi.n	8003bd8 <audio_volume_ctrl+0x88>
 8003b58:	e8df f001 	tbb	[pc, r1]
 8003b5c:	020d2912 	.word	0x020d2912
        ret = (uint32_t)(audio_volume_get_level(vol_inst) * 10000.0);
 8003b60:	6840      	ldr	r0, [r0, #4]
 8003b62:	f7fc fd11 	bl	8000588 <__aeabi_f2d>
 8003b66:	a320      	add	r3, pc, #128	; (adr r3, 8003be8 <audio_volume_ctrl+0x98>)
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f7fc fd64 	bl	8000638 <__aeabi_dmul>
 8003b70:	f7fd f824 	bl	8000bbc <__aeabi_d2uiz>
}
 8003b74:	bd10      	pop	{r4, pc}
    instance->_volume_factor = 0;
 8003b76:	2300      	movs	r3, #0
    uint32_t ret = 0;
 8003b78:	2000      	movs	r0, #0
    instance->_volume_factor = 0;
 8003b7a:	6063      	str	r3, [r4, #4]
    instance->_volume_threshold = 0;
 8003b7c:	60a3      	str	r3, [r4, #8]
}
 8003b7e:	bd10      	pop	{r4, pc}
    instance->_volume_threshold += AUDIO_VOLUME_TICK;
 8003b80:	6880      	ldr	r0, [r0, #8]
 8003b82:	f7fc fd01 	bl	8000588 <__aeabi_f2d>
 8003b86:	a31a      	add	r3, pc, #104	; (adr r3, 8003bf0 <audio_volume_ctrl+0xa0>)
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f7fc fb9e 	bl	80002cc <__adddf3>
 8003b90:	f7fd f834 	bl	8000bfc <__aeabi_d2f>
 8003b94:	ee07 0a90 	vmov	s15, r0
    if (instance->_volume_threshold >= AUDIO_VOLUME_MAX) {
 8003b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba4:	db16      	blt.n	8003bd4 <audio_volume_ctrl+0x84>
        instance->_volume_threshold = AUDIO_VOLUME_MAX;
 8003ba6:	ed84 7a02 	vstr	s14, [r4, #8]
    uint32_t ret = 0;
 8003baa:	2000      	movs	r0, #0
}
 8003bac:	bd10      	pop	{r4, pc}
    instance->_volume_threshold -= AUDIO_VOLUME_TICK;
 8003bae:	6880      	ldr	r0, [r0, #8]
 8003bb0:	f7fc fcea 	bl	8000588 <__aeabi_f2d>
 8003bb4:	a30e      	add	r3, pc, #56	; (adr r3, 8003bf0 <audio_volume_ctrl+0xa0>)
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f7fc fb85 	bl	80002c8 <__aeabi_dsub>
 8003bbe:	f7fd f81d 	bl	8000bfc <__aeabi_d2f>
 8003bc2:	ee07 0a90 	vmov	s15, r0
    if (instance->_volume_threshold <= AUDIO_VOLUME_MIN) {
 8003bc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	d903      	bls.n	8003bdc <audio_volume_ctrl+0x8c>
    instance->_volume_threshold += AUDIO_VOLUME_TICK;
 8003bd4:	edc4 7a02 	vstr	s15, [r4, #8]
    switch ((audio_volume_cmd_t)cmd) {
 8003bd8:	2000      	movs	r0, #0
}
 8003bda:	bd10      	pop	{r4, pc}
        instance->_volume_threshold = AUDIO_VOLUME_MIN;
 8003bdc:	60a3      	str	r3, [r4, #8]
    uint32_t ret = 0;
 8003bde:	2000      	movs	r0, #0
}
 8003be0:	bd10      	pop	{r4, pc}
 8003be2:	bf00      	nop
 8003be4:	f3af 8000 	nop.w
 8003be8:	00000000 	.word	0x00000000
 8003bec:	40c38800 	.word	0x40c38800
 8003bf0:	9999999a 	.word	0x9999999a
 8003bf4:	3fb99999 	.word	0x3fb99999

08003bf8 <audio_volume_process>:
{
 8003bf8:	b570      	push	{r4, r5, r6, lr}
 8003bfa:	ed2d 8b02 	vpush	{d8}
    if ((vol_inst->_volume_threshold != AUDIO_VOLUME_MAX) || (vol_inst->_volume_factor != AUDIO_VOLUME_MAX)) {
 8003bfe:	ed90 8a02 	vldr	s16, [r0, #8]
 8003c02:	edd0 7a01 	vldr	s15, [r0, #4]
 8003c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c0a:	eeb4 8a47 	vcmp.f32	s16, s14
 8003c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8003c12:	4604      	mov	r4, r0
 8003c14:	4616      	mov	r6, r2
 8003c16:	461d      	mov	r5, r3
    if ((vol_inst->_volume_threshold != AUDIO_VOLUME_MAX) || (vol_inst->_volume_factor != AUDIO_VOLUME_MAX)) {
 8003c18:	d104      	bne.n	8003c24 <audio_volume_process+0x2c>
 8003c1a:	eef4 7a47 	vcmp.f32	s15, s14
 8003c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c22:	d040      	beq.n	8003ca6 <audio_volume_process+0xae>
 */
static void adjust_volume_factor(audio_volume_instance_t *instance)
{
    /* Test if factor increases or decreases and reaches the desired value */
    /* The value is correct if overflow */
    if (instance->_volume_factor < instance->_volume_threshold) {
 8003c24:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2c:	dd3f      	ble.n	8003cae <audio_volume_process+0xb6>
        instance->_volume_factor += AUDIO_VOLUME_GRAD;
 8003c2e:	ee17 0a90 	vmov	r0, s15
 8003c32:	f7fc fca9 	bl	8000588 <__aeabi_f2d>
 8003c36:	a33a      	add	r3, pc, #232	; (adr r3, 8003d20 <audio_volume_process+0x128>)
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	f7fc fb46 	bl	80002cc <__adddf3>
 8003c40:	f7fc ffdc 	bl	8000bfc <__aeabi_d2f>
 8003c44:	ee07 0a90 	vmov	s15, r0
 8003c48:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	bf88      	it	hi
 8003c52:	eeb0 8a67 	vmovhi.f32	s16, s15
 8003c56:	ed84 8a01 	vstr	s16, [r4, #4]
        switch (vol_inst->bit_depth) {
 8003c5a:	7823      	ldrb	r3, [r4, #0]
 8003c5c:	2b14      	cmp	r3, #20
 8003c5e:	d040      	beq.n	8003ce2 <audio_volume_process+0xea>
 8003c60:	2b18      	cmp	r3, #24
 8003c62:	d03e      	beq.n	8003ce2 <audio_volume_process+0xea>
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d11e      	bne.n	8003ca6 <audio_volume_process+0xae>
static void apply_volume_factor_16bits(int16_t *audio_samples_in, uint16_t samples_count,
                                       int16_t *audio_samples_out, float volume_factor)
{
    uint16_t count;

    for (count = 0; count < samples_count; count++) {
 8003c68:	086a      	lsrs	r2, r5, #1
            apply_volume_factor_16bits((int16_t *)data_in, (size / AUDIO_16BITS_BYTE), (int16_t *)data_out, vol_inst->_volume_factor);
 8003c6a:	ed94 7a01 	vldr	s14, [r4, #4]
    for (count = 0; count < samples_count; count++) {
 8003c6e:	d016      	beq.n	8003c9e <audio_volume_process+0xa6>
 8003c70:	9906      	ldr	r1, [sp, #24]
 8003c72:	3a01      	subs	r2, #1
 8003c74:	b292      	uxth	r2, r2
 8003c76:	1eb3      	subs	r3, r6, #2
 8003c78:	3902      	subs	r1, #2
 8003c7a:	eb06 0242 	add.w	r2, r6, r2, lsl #1
        audio_samples_out[count] = audio_samples_in[count] * volume_factor;
 8003c7e:	f933 0f02 	ldrsh.w	r0, [r3, #2]!
 8003c82:	ee07 0a90 	vmov	s15, r0
 8003c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (count = 0; count < samples_count; count++) {
 8003c8a:	429a      	cmp	r2, r3
        audio_samples_out[count] = audio_samples_in[count] * volume_factor;
 8003c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c94:	ee17 0a90 	vmov	r0, s15
 8003c98:	f821 0f02 	strh.w	r0, [r1, #2]!
    for (count = 0; count < samples_count; count++) {
 8003c9c:	d1ef      	bne.n	8003c7e <audio_volume_process+0x86>
{
 8003c9e:	4628      	mov	r0, r5
}
 8003ca0:	ecbd 8b02 	vpop	{d8}
 8003ca4:	bd70      	pop	{r4, r5, r6, pc}
 8003ca6:	ecbd 8b02 	vpop	{d8}
        switch (vol_inst->bit_depth) {
 8003caa:	2000      	movs	r0, #0
}
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
    } else if (instance->_volume_factor > instance->_volume_threshold) {
 8003cae:	d5d4      	bpl.n	8003c5a <audio_volume_process+0x62>
        instance->_volume_factor -= AUDIO_VOLUME_GRAD;
 8003cb0:	ee17 0a90 	vmov	r0, s15
 8003cb4:	f7fc fc68 	bl	8000588 <__aeabi_f2d>
 8003cb8:	a319      	add	r3, pc, #100	; (adr r3, 8003d20 <audio_volume_process+0x128>)
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	f7fc fb03 	bl	80002c8 <__aeabi_dsub>
 8003cc2:	f7fc ff9b 	bl	8000bfc <__aeabi_d2f>
 8003cc6:	ee07 0a90 	vmov	s15, r0
        switch (vol_inst->bit_depth) {
 8003cca:	7823      	ldrb	r3, [r4, #0]
        instance->_volume_factor -= AUDIO_VOLUME_GRAD;
 8003ccc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd4:	bfb8      	it	lt
 8003cd6:	eeb0 8a67 	vmovlt.f32	s16, s15
        switch (vol_inst->bit_depth) {
 8003cda:	2b14      	cmp	r3, #20
        instance->_volume_factor -= AUDIO_VOLUME_GRAD;
 8003cdc:	ed84 8a01 	vstr	s16, [r4, #4]
        switch (vol_inst->bit_depth) {
 8003ce0:	d1be      	bne.n	8003c60 <audio_volume_process+0x68>
static void apply_volume_factor_32bits(int32_t *audio_samples_in, uint16_t samples_count,
                                       int32_t *audio_samples_out, float volume_factor)
{
    uint16_t count;

    for (count = 0; count < samples_count; count++) {
 8003ce2:	08aa      	lsrs	r2, r5, #2
            apply_volume_factor_32bits((int32_t *)data_in, (size / AUDIO_32BITS_BYTE), (int32_t *)data_out, vol_inst->_volume_factor);
 8003ce4:	ed94 7a01 	vldr	s14, [r4, #4]
    for (count = 0; count < samples_count; count++) {
 8003ce8:	d0d9      	beq.n	8003c9e <audio_volume_process+0xa6>
 8003cea:	9906      	ldr	r1, [sp, #24]
 8003cec:	3a01      	subs	r2, #1
 8003cee:	b292      	uxth	r2, r2
 8003cf0:	1f33      	subs	r3, r6, #4
 8003cf2:	3904      	subs	r1, #4
 8003cf4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
        audio_samples_out[count] = audio_samples_in[count] * volume_factor;
 8003cf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d00:	3304      	adds	r3, #4
 8003d02:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (count = 0; count < samples_count; count++) {
 8003d06:	4293      	cmp	r3, r2
        audio_samples_out[count] = audio_samples_in[count] * volume_factor;
 8003d08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d0c:	ee17 0a90 	vmov	r0, s15
 8003d10:	f841 0f04 	str.w	r0, [r1, #4]!
    for (count = 0; count < samples_count; count++) {
 8003d14:	d1f0      	bne.n	8003cf8 <audio_volume_process+0x100>
{
 8003d16:	4628      	mov	r0, r5
 8003d18:	e7c2      	b.n	8003ca0 <audio_volume_process+0xa8>
 8003d1a:	bf00      	nop
 8003d1c:	f3af 8000 	nop.w
 8003d20:	30553261 	.word	0x30553261
 8003d24:	3f33a92a 	.word	0x3f33a92a

08003d28 <init_audio_free_queue>:
 *  @param[in]  queue_size       Number of nodes in the queue.
 *  @param[out] err              Error code.
 */
static void init_audio_free_queue(sac_endpoint_t *endpoint, const char *queue_name,
                                  uint16_t queue_data_size, uint8_t queue_size, sac_error_t *err)
{
 8003d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d2c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003d30:	461d      	mov	r5, r3
 8003d32:	460f      	mov	r7, r1
    uint8_t *pool_ptr;

    *err = SAC_ERR_NONE;
 8003d34:	2300      	movs	r3, #0

    pool_ptr = mem_pool_malloc(&mem_pool, QUEUE_NB_BYTES_NEEDED(queue_size, queue_data_size));
 8003d36:	f102 0110 	add.w	r1, r2, #16
{
 8003d3a:	4680      	mov	r8, r0
    *err = SAC_ERR_NONE;
 8003d3c:	f88a 3000 	strb.w	r3, [sl]
    pool_ptr = mem_pool_malloc(&mem_pool, QUEUE_NB_BYTES_NEEDED(queue_size, queue_data_size));
 8003d40:	480e      	ldr	r0, [pc, #56]	; (8003d7c <init_audio_free_queue+0x54>)
 8003d42:	fb05 f101 	mul.w	r1, r5, r1
{
 8003d46:	4616      	mov	r6, r2
    pool_ptr = mem_pool_malloc(&mem_pool, QUEUE_NB_BYTES_NEEDED(queue_size, queue_data_size));
 8003d48:	f007 f8c6 	bl	800aed8 <mem_pool_malloc>
    if (pool_ptr == NULL) {
 8003d4c:	b180      	cbz	r0, 8003d70 <init_audio_free_queue+0x48>
        *err = SAC_ERR_NOT_ENOUGH_MEMORY;
        return;
    }
    endpoint->_free_queue = mem_pool_malloc(&mem_pool, sizeof(queue_t));
 8003d4e:	2118      	movs	r1, #24
 8003d50:	4604      	mov	r4, r0
 8003d52:	480a      	ldr	r0, [pc, #40]	; (8003d7c <init_audio_free_queue+0x54>)
 8003d54:	f007 f8c0 	bl	800aed8 <mem_pool_malloc>
 8003d58:	4601      	mov	r1, r0
 8003d5a:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    if (endpoint->_free_queue == NULL) {
 8003d5e:	b138      	cbz	r0, 8003d70 <init_audio_free_queue+0x48>
        *err = SAC_ERR_NOT_ENOUGH_MEMORY;
        return;
    }

    queue_init_pool(pool_ptr,
 8003d60:	9708      	str	r7, [sp, #32]
 8003d62:	4633      	mov	r3, r6
 8003d64:	462a      	mov	r2, r5
 8003d66:	4620      	mov	r0, r4
                    endpoint->_free_queue,
                    queue_size,
                    queue_data_size,
                    queue_name);
}
 8003d68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    queue_init_pool(pool_ptr,
 8003d6c:	f007 b986 	b.w	800b07c <queue_init_pool>
        *err = SAC_ERR_NOT_ENOUGH_MEMORY;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f88a 3000 	strb.w	r3, [sl]
}
 8003d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20005a70 	.word	0x20005a70

08003d80 <produce>:
 *  @param[in]  pipeline  Pipeline instance.
 *  @param[out] err       Error code.
 *  @return The amount of bytes produces.
 */
static uint16_t produce(sac_pipeline_t *pipeline, sac_error_t *err)
{
 8003d80:	b570      	push	{r4, r5, r6, lr}
    sac_endpoint_t *producer = pipeline->producer;
    uint8_t *payload;
    uint16_t payload_size;

    *err = SAC_ERR_NONE;
 8003d82:	2300      	movs	r3, #0
    sac_endpoint_t *producer = pipeline->producer;
 8003d84:	6844      	ldr	r4, [r0, #4]
    *err = SAC_ERR_NONE;
 8003d86:	700b      	strb	r3, [r1, #0]
{
 8003d88:	4605      	mov	r5, r0

    producer->_current_node = queue_get_free_node(producer->_free_queue);
 8003d8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
{
 8003d8c:	460e      	mov	r6, r1
    producer->_current_node = queue_get_free_node(producer->_free_queue);
 8003d8e:	f007 f9c5 	bl	800b11c <queue_get_free_node>
 8003d92:	62a0      	str	r0, [r4, #40]	; 0x28
    if (producer->_current_node == NULL) {
 8003d94:	b1b8      	cbz	r0, 8003dc6 <produce+0x46>
        *err = SAC_ERR_PRODUCER_Q_FULL;
        return 0;
    }

    payload_size = producer->cfg.audio_payload_size;
    if (producer->cfg.use_encapsulation) {
 8003d96:	7d21      	ldrb	r1, [r4, #20]
    payload_size = producer->cfg.audio_payload_size;
 8003d98:	8b22      	ldrh	r2, [r4, #24]
    if (producer->cfg.use_encapsulation) {
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	b939      	cbnz	r1, 8003dae <produce+0x2e>
        payload = (uint8_t *)sac_node_get_header(producer->_current_node);
        payload_size += (sizeof(sac_header_t) + pipeline->_user_data_size);
    } else {
        payload = (uint8_t *)sac_node_get_data(producer->_current_node);
 8003d9e:	6801      	ldr	r1, [r0, #0]
        sac_node_set_payload_size(producer->_current_node, payload_size);
    }

    return producer->iface.action(producer->instance, payload, payload_size);
 8003da0:	68a3      	ldr	r3, [r4, #8]
 8003da2:	6820      	ldr	r0, [r4, #0]
        sac_node_set_payload_size(producer->_current_node, payload_size);
 8003da4:	f821 2b04 	strh.w	r2, [r1], #4
}
 8003da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return producer->iface.action(producer->instance, payload, payload_size);
 8003dac:	4718      	bx	r3
        payload_size += (sizeof(sac_header_t) + pipeline->_user_data_size);
 8003dae:	f895 0039 	ldrb.w	r0, [r5, #57]	; 0x39
        payload = (uint8_t *)sac_node_get_header(producer->_current_node);
 8003db2:	6819      	ldr	r1, [r3, #0]
    return producer->iface.action(producer->instance, payload, payload_size);
 8003db4:	68a3      	ldr	r3, [r4, #8]
        payload_size += (sizeof(sac_header_t) + pipeline->_user_data_size);
 8003db6:	4402      	add	r2, r0
 8003db8:	3202      	adds	r2, #2
    return producer->iface.action(producer->instance, payload, payload_size);
 8003dba:	6820      	ldr	r0, [r4, #0]
        payload = (uint8_t *)sac_node_get_header(producer->_current_node);
 8003dbc:	3102      	adds	r1, #2
}
 8003dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        payload_size += (sizeof(sac_header_t) + pipeline->_user_data_size);
 8003dc2:	b292      	uxth	r2, r2
    return producer->iface.action(producer->instance, payload, payload_size);
 8003dc4:	4718      	bx	r3
        *err = SAC_ERR_PRODUCER_Q_FULL;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	7033      	strb	r3, [r6, #0]
}
 8003dca:	bd70      	pop	{r4, r5, r6, pc}

08003dcc <enqueue_producer_node>:
{
 8003dcc:	b538      	push	{r3, r4, r5, lr}
    *err = SAC_ERR_NONE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	700b      	strb	r3, [r1, #0]
    if (producer->cfg.use_encapsulation) {
 8003dd2:	7d03      	ldrb	r3, [r0, #20]
{
 8003dd4:	460d      	mov	r5, r1
 8003dd6:	4604      	mov	r4, r0
    if (producer->cfg.use_encapsulation) {
 8003dd8:	b11b      	cbz	r3, 8003de2 <enqueue_producer_node+0x16>
        sac_node_set_payload_size(producer->_current_node, sac_node_get_header(producer->_current_node)->payload_size);
 8003dda:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	78da      	ldrb	r2, [r3, #3]
 8003de0:	801a      	strh	r2, [r3, #0]
    if (queue_get_length(producer->_queue) > PROD_QUEUE_SIZE_MIN_WHEN_ENQUEUING) {
 8003de2:	6a20      	ldr	r0, [r4, #32]
 8003de4:	f007 fa2c 	bl	800b240 <queue_get_length>
 8003de8:	b938      	cbnz	r0, 8003dfa <enqueue_producer_node+0x2e>
    if (!queue_enqueue_node(producer->_queue, producer->_current_node)) {
 8003dea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003dec:	6a20      	ldr	r0, [r4, #32]
 8003dee:	f007 f9db 	bl	800b1a8 <queue_enqueue_node>
 8003df2:	b168      	cbz	r0, 8003e10 <enqueue_producer_node+0x44>
    producer->_current_node = NULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003df8:	bd38      	pop	{r3, r4, r5, pc}
        queue_free_node(queue_dequeue_node(producer->_queue));
 8003dfa:	6a20      	ldr	r0, [r4, #32]
 8003dfc:	f007 f9ae 	bl	800b15c <queue_dequeue_node>
 8003e00:	f007 f9f8 	bl	800b1f4 <queue_free_node>
    if (!queue_enqueue_node(producer->_queue, producer->_current_node)) {
 8003e04:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003e06:	6a20      	ldr	r0, [r4, #32]
 8003e08:	f007 f9ce 	bl	800b1a8 <queue_enqueue_node>
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	d1f1      	bne.n	8003df4 <enqueue_producer_node+0x28>
        queue_free_node(producer->_current_node);
 8003e10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003e12:	f007 f9ef 	bl	800b1f4 <queue_free_node>
        *err = SAC_ERR_PRODUCER_Q_FULL;
 8003e16:	2303      	movs	r3, #3
 8003e18:	702b      	strb	r3, [r5, #0]
    producer->_current_node = NULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}

08003e20 <consume>:
 *  @param[in]  consumer  Pointer to the consumer endpoint.
 *  @param[out] err       Error code.
 *  @return The amount of bytes consumed.
 */
static uint16_t consume(sac_pipeline_t *pipeline, sac_endpoint_t *consumer, sac_error_t *err)
{
 8003e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t *payload;
    uint16_t payload_size, crc;

    *err = SAC_ERR_NONE;
 8003e22:	2700      	movs	r7, #0
 8003e24:	7017      	strb	r7, [r2, #0]

    if (consumer->_current_node == NULL) {
 8003e26:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
 8003e28:	b083      	sub	sp, #12
 8003e2a:	460c      	mov	r4, r1
    if (consumer->_current_node == NULL) {
 8003e2c:	b34b      	cbz	r3, 8003e82 <consume+0x62>
        pipeline->_statistics.consumer_buffer_underflow_count++;
        consumer->_buffering_complete = false;
        *err = SAC_ERR_CONSUMER_Q_EMPTY;
        return 0;
    } else {
        payload_size = sac_node_get_payload_size(consumer->_current_node);
 8003e2e:	681d      	ldr	r5, [r3, #0]
        if (consumer->cfg.use_encapsulation) {
 8003e30:	7d0b      	ldrb	r3, [r1, #20]
        payload_size = sac_node_get_payload_size(consumer->_current_node);
 8003e32:	882e      	ldrh	r6, [r5, #0]
        if (consumer->cfg.use_encapsulation) {
 8003e34:	b93b      	cbnz	r3, 8003e46 <consume+0x26>
            ((sac_header_t *)payload)->crc4 = 0;
            ((sac_header_t *)payload)->reserved = 0;
            crc = crc4itu(0, payload, sizeof(sac_header_t));
            ((sac_header_t *)payload)->crc4 = crc;
        } else {
            payload = sac_node_get_data(consumer->_current_node);
 8003e36:	1d29      	adds	r1, r5, #4
        }
    }

    return consumer->iface.action(consumer->instance, payload, payload_size);
 8003e38:	68a3      	ldr	r3, [r4, #8]
 8003e3a:	6820      	ldr	r0, [r4, #0]
 8003e3c:	4632      	mov	r2, r6
}
 8003e3e:	b003      	add	sp, #12
 8003e40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return consumer->iface.action(consumer->instance, payload, payload_size);
 8003e44:	4718      	bx	r3
            sac_node_get_header(consumer->_current_node)->payload_size = (uint8_t)payload_size;
 8003e46:	70ee      	strb	r6, [r5, #3]
            payload_size += (sizeof(sac_header_t) + pipeline->_user_data_size);
 8003e48:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
            ((sac_header_t *)payload)->tx_queue_level_high = (queue_get_length(consumer->_queue) < TX_QUEUE_HIGH_LEVEL) ? 0 : 1;
 8003e4c:	6a08      	ldr	r0, [r1, #32]
            payload_size += (sizeof(sac_header_t) + pipeline->_user_data_size);
 8003e4e:	3302      	adds	r3, #2
 8003e50:	441e      	add	r6, r3
            ((sac_header_t *)payload)->tx_queue_level_high = (queue_get_length(consumer->_queue) < TX_QUEUE_HIGH_LEVEL) ? 0 : 1;
 8003e52:	f007 f9f5 	bl	800b240 <queue_get_length>
 8003e56:	78ab      	ldrb	r3, [r5, #2]
 8003e58:	4602      	mov	r2, r0
 8003e5a:	f003 0306 	and.w	r3, r3, #6
 8003e5e:	2a01      	cmp	r2, #1
 8003e60:	bf88      	it	hi
 8003e62:	f043 0301 	orrhi.w	r3, r3, #1
            crc = crc4itu(0, payload, sizeof(sac_header_t));
 8003e66:	2202      	movs	r2, #2
            payload = (uint8_t *)sac_node_get_header(consumer->_current_node);
 8003e68:	18a9      	adds	r1, r5, r2
            ((sac_header_t *)payload)->tx_queue_level_high = (queue_get_length(consumer->_queue) < TX_QUEUE_HIGH_LEVEL) ? 0 : 1;
 8003e6a:	70ab      	strb	r3, [r5, #2]
            crc = crc4itu(0, payload, sizeof(sac_header_t));
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	9101      	str	r1, [sp, #4]
 8003e70:	f007 f814 	bl	800ae9c <crc4itu>
            ((sac_header_t *)payload)->crc4 = crc;
 8003e74:	78ab      	ldrb	r3, [r5, #2]
 8003e76:	9901      	ldr	r1, [sp, #4]
 8003e78:	f360 1307 	bfi	r3, r0, #4, #4
            payload_size += (sizeof(sac_header_t) + pipeline->_user_data_size);
 8003e7c:	b2b6      	uxth	r6, r6
            ((sac_header_t *)payload)->crc4 = crc;
 8003e7e:	70ab      	strb	r3, [r5, #2]
 8003e80:	e7da      	b.n	8003e38 <consume+0x18>
        pipeline->_statistics.consumer_buffer_underflow_count++;
 8003e82:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003e84:	3101      	adds	r1, #1
 8003e86:	6301      	str	r1, [r0, #48]	; 0x30
        *err = SAC_ERR_CONSUMER_Q_EMPTY;
 8003e88:	2104      	movs	r1, #4
}
 8003e8a:	4618      	mov	r0, r3
        consumer->_buffering_complete = false;
 8003e8c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        *err = SAC_ERR_CONSUMER_Q_EMPTY;
 8003e90:	7011      	strb	r1, [r2, #0]
}
 8003e92:	b003      	add	sp, #12
 8003e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e96:	bf00      	nop

08003e98 <sac_init>:
{
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	f10d 0c08 	add.w	ip, sp, #8
 8003ea0:	e88c 0003 	stmia.w	ip, {r0, r1}
    queue_init(queue_critical);
 8003ea4:	e89c 0003 	ldmia.w	ip, {r0, r1}
{
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	9301      	str	r3, [sp, #4]
    queue_init(queue_critical);
 8003eac:	f007 f8ce 	bl	800b04c <queue_init>
    mem_pool_init(&mem_pool, queue_memory, (size_t)queue_memory_size);
 8003eb0:	9a01      	ldr	r2, [sp, #4]
 8003eb2:	4803      	ldr	r0, [pc, #12]	; (8003ec0 <sac_init+0x28>)
 8003eb4:	4621      	mov	r1, r4
}
 8003eb6:	b004      	add	sp, #16
 8003eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mem_pool_init(&mem_pool, queue_memory, (size_t)queue_memory_size);
 8003ebc:	f007 b804 	b.w	800aec8 <mem_pool_init>
 8003ec0:	20005a70 	.word	0x20005a70

08003ec4 <sac_pipeline_init>:
{
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	b570      	push	{r4, r5, r6, lr}
 8003ec8:	468c      	mov	ip, r1
 8003eca:	9c08      	ldr	r4, [sp, #32]
 8003ecc:	a904      	add	r1, sp, #16
 8003ece:	e881 000c 	stmia.w	r1, {r2, r3}
    *err = SAC_ERR_NONE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	7023      	strb	r3, [r4, #0]
{
 8003ed6:	4606      	mov	r6, r0
    sac_pipeline_t *pipeline = (sac_pipeline_t *)mem_pool_malloc(&mem_pool, sizeof(sac_pipeline_t));
 8003ed8:	2140      	movs	r1, #64	; 0x40
 8003eda:	480d      	ldr	r0, [pc, #52]	; (8003f10 <sac_pipeline_init+0x4c>)
{
 8003edc:	4665      	mov	r5, ip
    sac_pipeline_t *pipeline = (sac_pipeline_t *)mem_pool_malloc(&mem_pool, sizeof(sac_pipeline_t));
 8003ede:	f006 fffb 	bl	800aed8 <mem_pool_malloc>
    if (pipeline == NULL) {
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	b180      	cbz	r0, 8003f08 <sac_pipeline_init+0x44>
    pipeline->cfg = cfg;
 8003ee6:	aa04      	add	r2, sp, #16
    pipeline->producer = producer;
 8003ee8:	e9c0 6500 	strd	r6, r5, [r0]
    pipeline->cfg = cfg;
 8003eec:	f100 0c10 	add.w	ip, r0, #16
 8003ef0:	ca07      	ldmia	r2, {r0, r1, r2}
    pipeline->consumer = consumer;
 8003ef2:	9c07      	ldr	r4, [sp, #28]
 8003ef4:	60dc      	str	r4, [r3, #12]
    pipeline->cfg = cfg;
 8003ef6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003efa:	f8ac 2000 	strh.w	r2, [ip]
}
 8003efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f02:	4618      	mov	r0, r3
 8003f04:	b002      	add	sp, #8
 8003f06:	4770      	bx	lr
        *err = SAC_ERR_NOT_ENOUGH_MEMORY;
 8003f08:	2201      	movs	r2, #1
 8003f0a:	7022      	strb	r2, [r4, #0]
        return NULL;
 8003f0c:	e7f7      	b.n	8003efe <sac_pipeline_init+0x3a>
 8003f0e:	bf00      	nop
 8003f10:	20005a70 	.word	0x20005a70

08003f14 <sac_endpoint_init>:
{
 8003f14:	b082      	sub	sp, #8
 8003f16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f1a:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8003f1e:	460f      	mov	r7, r1
    *err = SAC_ERR_NONE;
 8003f20:	2500      	movs	r5, #0
{
 8003f22:	a908      	add	r1, sp, #32
 8003f24:	e881 000c 	stmia.w	r1, {r2, r3}
 8003f28:	4680      	mov	r8, r0
    *err = SAC_ERR_NONE;
 8003f2a:	f889 5000 	strb.w	r5, [r9]
    sac_endpoint_t *endpoint = (sac_endpoint_t *)mem_pool_malloc(&mem_pool, sizeof(sac_endpoint_t));
 8003f2e:	4818      	ldr	r0, [pc, #96]	; (8003f90 <sac_endpoint_init+0x7c>)
 8003f30:	2130      	movs	r1, #48	; 0x30
 8003f32:	f006 ffd1 	bl	800aed8 <mem_pool_malloc>
    if (endpoint == NULL) {
 8003f36:	b308      	cbz	r0, 8003f7c <sac_endpoint_init+0x68>
    queue_t *queue = (queue_t *)mem_pool_malloc(&mem_pool, sizeof(queue_t));
 8003f38:	4604      	mov	r4, r0
 8003f3a:	2118      	movs	r1, #24
 8003f3c:	4814      	ldr	r0, [pc, #80]	; (8003f90 <sac_endpoint_init+0x7c>)
 8003f3e:	f006 ffcb 	bl	800aed8 <mem_pool_malloc>
    if (queue == NULL) {
 8003f42:	4606      	mov	r6, r0
 8003f44:	b1d0      	cbz	r0, 8003f7c <sac_endpoint_init+0x68>
    endpoint->iface = iface;
 8003f46:	aa08      	add	r2, sp, #32
 8003f48:	ca07      	ldmia	r2, {r0, r1, r2}
    endpoint->name = name;
 8003f4a:	6067      	str	r7, [r4, #4]
    endpoint->iface = iface;
 8003f4c:	f104 0308 	add.w	r3, r4, #8
    endpoint->cfg = cfg;
 8003f50:	af0b      	add	r7, sp, #44	; 0x2c
    endpoint->instance = instance;
 8003f52:	f8c4 8000 	str.w	r8, [r4]
    endpoint->iface = iface;
 8003f56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    endpoint->cfg = cfg;
 8003f5a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003f5e:	f104 0c14 	add.w	ip, r4, #20
 8003f62:	e9cc 0100 	strd	r0, r1, [ip]
}
 8003f66:	4620      	mov	r0, r4
    endpoint->_queue = queue;
 8003f68:	e9c4 5607 	strd	r5, r6, [r4, #28]
    endpoint->_current_node = NULL;
 8003f6c:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
    endpoint->_buffering_complete = false;
 8003f70:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8003f74:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f78:	b002      	add	sp, #8
 8003f7a:	4770      	bx	lr
        *err = SAC_ERR_NOT_ENOUGH_MEMORY;
 8003f7c:	2301      	movs	r3, #1
        return NULL;
 8003f7e:	2400      	movs	r4, #0
        *err = SAC_ERR_NOT_ENOUGH_MEMORY;
 8003f80:	f889 3000 	strb.w	r3, [r9]
}
 8003f84:	4620      	mov	r0, r4
 8003f86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f8a:	b002      	add	sp, #8
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20005a70 	.word	0x20005a70

08003f94 <sac_processing_stage_init>:
{
 8003f94:	b082      	sub	sp, #8
 8003f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f98:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	a906      	add	r1, sp, #24
 8003f9e:	e881 000c 	stmia.w	r1, {r2, r3}
    *err = SAC_ERR_NONE;
 8003fa2:	2300      	movs	r3, #0
{
 8003fa4:	4607      	mov	r7, r0
    *err = SAC_ERR_NONE;
 8003fa6:	702b      	strb	r3, [r5, #0]
    sac_processing_t *process = (sac_processing_t *)mem_pool_malloc(&mem_pool, sizeof(sac_processing_t));
 8003fa8:	480c      	ldr	r0, [pc, #48]	; (8003fdc <sac_processing_stage_init+0x48>)
 8003faa:	2120      	movs	r1, #32
 8003fac:	f006 ff94 	bl	800aed8 <mem_pool_malloc>
    if (process == NULL) {
 8003fb0:	4684      	mov	ip, r0
 8003fb2:	b180      	cbz	r0, 8003fd6 <sac_processing_stage_init+0x42>
 8003fb4:	4626      	mov	r6, r4
    process->iface = iface;
 8003fb6:	ac06      	add	r4, sp, #24
    process->name = name;
 8003fb8:	e9c0 7600 	strd	r7, r6, [r0]
    process->iface = iface;
 8003fbc:	f100 0e08 	add.w	lr, r0, #8
 8003fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fc2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	f8ce 3000 	str.w	r3, [lr]
}
 8003fcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003fd0:	4660      	mov	r0, ip
 8003fd2:	b002      	add	sp, #8
 8003fd4:	4770      	bx	lr
        *err = SAC_ERR_NOT_ENOUGH_MEMORY;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	702b      	strb	r3, [r5, #0]
        return NULL;
 8003fda:	e7f7      	b.n	8003fcc <sac_processing_stage_init+0x38>
 8003fdc:	20005a70 	.word	0x20005a70

08003fe0 <sac_pipeline_add_processing>:
    sac_processing_t *current_process = pipeline->process;
 8003fe0:	6883      	ldr	r3, [r0, #8]
    if (current_process == NULL) {
 8003fe2:	b12b      	cbz	r3, 8003ff0 <sac_pipeline_add_processing+0x10>
    while (current_process->next_process != NULL) {
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1fb      	bne.n	8003fe4 <sac_pipeline_add_processing+0x4>
    current_process->next_process = process;
 8003fec:	61d1      	str	r1, [r2, #28]
}
 8003fee:	4770      	bx	lr
        pipeline->process = process;
 8003ff0:	6081      	str	r1, [r0, #8]
        return;
 8003ff2:	4770      	bx	lr

08003ff4 <sac_pipeline_setup>:
{
 8003ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff8:	460e      	mov	r6, r1
 *  @param[in]  pipeline  Pipeline instance.
 *  @param[out] err       Error code.
 */
static void validate_pipeline_config(sac_pipeline_t *pipeline, sac_error_t *err)
{
    if (pipeline->cfg.cdc_enable && pipeline->consumer->cfg.use_encapsulation) {
 8003ffa:	7c01      	ldrb	r1, [r0, #16]
    pipeline->_user_data_size = (pipeline->cfg.user_data_enable) ? 1 : 0;
 8003ffc:	7dc2      	ldrb	r2, [r0, #23]
    sac_endpoint_t *producer = pipeline->producer;
 8003ffe:	f8d0 8004 	ldr.w	r8, [r0, #4]
    pipeline->_user_data_size = (pipeline->cfg.user_data_enable) ? 1 : 0;
 8004002:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    sac_endpoint_t *consumer = pipeline->consumer;
 8004006:	e9d0 4702 	ldrd	r4, r7, [r0, #8]
{
 800400a:	b083      	sub	sp, #12
 800400c:	4605      	mov	r5, r0
    if (pipeline->cfg.cdc_enable && pipeline->consumer->cfg.use_encapsulation) {
 800400e:	b119      	cbz	r1, 8004018 <sac_pipeline_setup+0x24>
 8004010:	7d3b      	ldrb	r3, [r7, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 808c 	bne.w	8004130 <sac_pipeline_setup+0x13c>
    if (*err != SAC_ERR_NONE) {
 8004018:	7833      	ldrb	r3, [r6, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d158      	bne.n	80040d0 <sac_pipeline_setup+0xdc>
    while (process != NULL) {
 800401e:	2c00      	cmp	r4, #0
 8004020:	f000 8093 	beq.w	800414a <sac_pipeline_setup+0x156>
            process->iface.init(process->instance, &mem_pool);
 8004024:	f8df 9134 	ldr.w	r9, [pc, #308]	; 800415c <sac_pipeline_setup+0x168>
        if (process->iface.init != NULL) {
 8004028:	68a3      	ldr	r3, [r4, #8]
            process->iface.init(process->instance, &mem_pool);
 800402a:	4649      	mov	r1, r9
        if (process->iface.init != NULL) {
 800402c:	b10b      	cbz	r3, 8004032 <sac_pipeline_setup+0x3e>
            process->iface.init(process->instance, &mem_pool);
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	4798      	blx	r3
        process = process->next_process;
 8004032:	69e4      	ldr	r4, [r4, #28]
    while (process != NULL) {
 8004034:	2c00      	cmp	r4, #0
 8004036:	d1f7      	bne.n	8004028 <sac_pipeline_setup+0x34>
    sac_endpoint_t *consumer = pipeline->consumer;
 8004038:	68ec      	ldr	r4, [r5, #12]
    sac_endpoint_t *producer = pipeline->producer;
 800403a:	f8d5 a004 	ldr.w	sl, [r5, #4]
    queue_data_inflation_size += pipeline->_user_data_size;
 800403e:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    if (pipeline->cfg.cdc_enable) {
 8004042:	7c29      	ldrb	r1, [r5, #16]
    queue_data_inflation_size += pipeline->_user_data_size;
 8004044:	b292      	uxth	r2, r2
    if (pipeline->cfg.cdc_enable) {
 8004046:	2900      	cmp	r1, #0
 8004048:	d145      	bne.n	80040d6 <sac_pipeline_setup+0xe2>
    queue_data_inflation_size += pipeline->_user_data_size;
 800404a:	f102 0904 	add.w	r9, r2, #4
    if (!pipeline->cfg.mixer_option.output_mixer_pipeline) {
 800404e:	7e6a      	ldrb	r2, [r5, #25]
    if (consumer->cfg.audio_payload_size > producer->cfg.audio_payload_size) {
 8004050:	8b23      	ldrh	r3, [r4, #24]
    if (!pipeline->cfg.mixer_option.output_mixer_pipeline) {
 8004052:	2a00      	cmp	r2, #0
 8004054:	d045      	beq.n	80040e2 <sac_pipeline_setup+0xee>
    queue_data_size += queue_data_inflation_size;
 8004056:	eb09 0203 	add.w	r2, r9, r3
    queue_data_size += sac_align_data_size(queue_data_size, uint32_t); /* Align nodes on 32bits */
 800405a:	f022 0203 	bic.w	r2, r2, #3
 800405e:	3204      	adds	r2, #4
    queue_size = consumer->cfg.queue_size;
 8004060:	7ea3      	ldrb	r3, [r4, #26]
    queue_data_size += sac_align_data_size(queue_data_size, uint32_t); /* Align nodes on 32bits */
 8004062:	b292      	uxth	r2, r2
    if (pipeline->cfg.cdc_enable) {
 8004064:	b109      	cbz	r1, 800406a <sac_pipeline_setup+0x76>
        queue_size += CDC_QUEUE_SIZE_INFLATION;
 8004066:	3303      	adds	r3, #3
 8004068:	b2db      	uxtb	r3, r3
    if (pipeline->cfg.mixer_option.input_mixer_pipeline) {
 800406a:	7e29      	ldrb	r1, [r5, #24]
 800406c:	b109      	cbz	r1, 8004072 <sac_pipeline_setup+0x7e>
        queue_size += 3;
 800406e:	3303      	adds	r3, #3
 8004070:	b2db      	uxtb	r3, r3
    init_audio_free_queue(consumer, "Audio Buffer Free Queue",
 8004072:	4937      	ldr	r1, [pc, #220]	; (8004150 <sac_pipeline_setup+0x15c>)
 8004074:	9600      	str	r6, [sp, #0]
 8004076:	4620      	mov	r0, r4
 8004078:	f7ff fe56 	bl	8003d28 <init_audio_free_queue>
    if (*err != SAC_ERR_NONE) {
 800407c:	7833      	ldrb	r3, [r6, #0]
 800407e:	bb3b      	cbnz	r3, 80040d0 <sac_pipeline_setup+0xdc>
        queue_init_queue(consumer->_queue, queue_size, "Audio Buffer");
 8004080:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8004160 <sac_pipeline_setup+0x16c>
        consumer->_free_queue = pipeline->consumer->_free_queue; /* All consumers use the same memory space */
 8004084:	68eb      	ldr	r3, [r5, #12]
        if (consumer->cfg.delayed_action) {
 8004086:	7d60      	ldrb	r0, [r4, #21]
        consumer->_free_queue = pipeline->consumer->_free_queue; /* All consumers use the same memory space */
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        queue_init_queue(consumer->_queue, queue_size, "Audio Buffer");
 800408a:	464a      	mov	r2, r9
        queue_size = consumer->_free_queue->limit;
 800408c:	7a99      	ldrb	r1, [r3, #10]
        consumer->_free_queue = pipeline->consumer->_free_queue; /* All consumers use the same memory space */
 800408e:	6263      	str	r3, [r4, #36]	; 0x24
        if (consumer->cfg.delayed_action) {
 8004090:	b108      	cbz	r0, 8004096 <sac_pipeline_setup+0xa2>
            queue_size--;
 8004092:	3901      	subs	r1, #1
 8004094:	b2c9      	uxtb	r1, r1
        queue_init_queue(consumer->_queue, queue_size, "Audio Buffer");
 8004096:	6a20      	ldr	r0, [r4, #32]
 8004098:	f007 f822 	bl	800b0e0 <queue_init_queue>
        consumer = consumer->next_endpoint;
 800409c:	69e4      	ldr	r4, [r4, #28]
    } while (consumer != NULL);
 800409e:	2c00      	cmp	r4, #0
 80040a0:	d1f0      	bne.n	8004084 <sac_pipeline_setup+0x90>
    if (*err != SAC_ERR_NONE) {
 80040a2:	7833      	ldrb	r3, [r6, #0]
 80040a4:	b9a3      	cbnz	r3, 80040d0 <sac_pipeline_setup+0xdc>
    pipeline->_statistics.producer_buffer_size = queue_get_limit(producer->_queue);
 80040a6:	f8d8 0020 	ldr.w	r0, [r8, #32]
 80040aa:	f007 f8cd 	bl	800b248 <queue_get_limit>
 80040ae:	8428      	strh	r0, [r5, #32]
    pipeline->_statistics.consumer_buffer_size = queue_get_limit(consumer->_queue);
 80040b0:	6a38      	ldr	r0, [r7, #32]
 80040b2:	f007 f8c9 	bl	800b248 <queue_get_limit>
    if (pipeline->cfg.cdc_enable) {
 80040b6:	7c2b      	ldrb	r3, [r5, #16]
    produce_size = pipeline->_statistics.producer_buffer_size;
 80040b8:	8c2a      	ldrh	r2, [r5, #32]
    memset(&pipeline->_statistics, 0, sizeof(sac_statistics_t));
 80040ba:	62ac      	str	r4, [r5, #40]	; 0x28
 80040bc:	622c      	str	r4, [r5, #32]
 80040be:	61ec      	str	r4, [r5, #28]
 80040c0:	626c      	str	r4, [r5, #36]	; 0x24
 80040c2:	62ec      	str	r4, [r5, #44]	; 0x2c
 80040c4:	632c      	str	r4, [r5, #48]	; 0x30
 80040c6:	636c      	str	r4, [r5, #52]	; 0x34
    pipeline->_statistics.producer_buffer_size = produce_size;
 80040c8:	842a      	strh	r2, [r5, #32]
    pipeline->_statistics.consumer_buffer_size = consume_size;
 80040ca:	8528      	strh	r0, [r5, #40]	; 0x28
    if (pipeline->cfg.cdc_enable) {
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d134      	bne.n	800413a <sac_pipeline_setup+0x146>
}
 80040d0:	b003      	add	sp, #12
 80040d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        queue_data_inflation_size += CDC_QUEUE_DATA_SIZE_INFLATION;
 80040d6:	f102 090c 	add.w	r9, r2, #12
    if (!pipeline->cfg.mixer_option.output_mixer_pipeline) {
 80040da:	7e6a      	ldrb	r2, [r5, #25]
    if (consumer->cfg.audio_payload_size > producer->cfg.audio_payload_size) {
 80040dc:	8b23      	ldrh	r3, [r4, #24]
    if (!pipeline->cfg.mixer_option.output_mixer_pipeline) {
 80040de:	2a00      	cmp	r2, #0
 80040e0:	d1b9      	bne.n	8004056 <sac_pipeline_setup+0x62>
        queue_size = producer->cfg.queue_size;
 80040e2:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 80040e6:	f89a b01a 	ldrb.w	fp, [sl, #26]
        init_audio_free_queue(producer, "Processing Free Queue",
 80040ea:	9600      	str	r6, [sp, #0]
    queue_data_size += queue_data_inflation_size;
 80040ec:	4299      	cmp	r1, r3
 80040ee:	bf2c      	ite	cs
 80040f0:	eb09 0201 	addcs.w	r2, r9, r1
 80040f4:	eb09 0203 	addcc.w	r2, r9, r3
    queue_data_size += sac_align_data_size(queue_data_size, uint32_t); /* Align nodes on 32bits */
 80040f8:	f022 0203 	bic.w	r2, r2, #3
 80040fc:	3204      	adds	r2, #4
        init_audio_free_queue(producer, "Processing Free Queue",
 80040fe:	465b      	mov	r3, fp
 8004100:	4914      	ldr	r1, [pc, #80]	; (8004154 <sac_pipeline_setup+0x160>)
 8004102:	b292      	uxth	r2, r2
 8004104:	4650      	mov	r0, sl
 8004106:	f7ff fe0f 	bl	8003d28 <init_audio_free_queue>
        if (*err != SAC_ERR_NONE) {
 800410a:	7833      	ldrb	r3, [r6, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1df      	bne.n	80040d0 <sac_pipeline_setup+0xdc>
        if (producer->cfg.delayed_action) {
 8004110:	f89a 3015 	ldrb.w	r3, [sl, #21]
 8004114:	b11b      	cbz	r3, 800411e <sac_pipeline_setup+0x12a>
            queue_size--;
 8004116:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800411a:	fa5f fb8b 	uxtb.w	fp, fp
        queue_init_queue(producer->_queue, queue_size, "Processing Queue");
 800411e:	4659      	mov	r1, fp
 8004120:	f8da 0020 	ldr.w	r0, [sl, #32]
 8004124:	4a0c      	ldr	r2, [pc, #48]	; (8004158 <sac_pipeline_setup+0x164>)
 8004126:	f006 ffdb 	bl	800b0e0 <queue_init_queue>
    queue_data_size = consumer->cfg.audio_payload_size;
 800412a:	8b23      	ldrh	r3, [r4, #24]
    if (pipeline->cfg.cdc_enable) {
 800412c:	7c29      	ldrb	r1, [r5, #16]
 800412e:	e792      	b.n	8004056 <sac_pipeline_setup+0x62>
        *err = SAC_ERR_PIPELINE_CFG_INVALID;
 8004130:	2308      	movs	r3, #8
 8004132:	7033      	strb	r3, [r6, #0]
}
 8004134:	b003      	add	sp, #12
 8004136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        audio_cdc_module_init(pipeline, &mem_pool, err);
 800413a:	4908      	ldr	r1, [pc, #32]	; (800415c <sac_pipeline_setup+0x168>)
 800413c:	4632      	mov	r2, r6
 800413e:	4628      	mov	r0, r5
}
 8004140:	b003      	add	sp, #12
 8004142:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        audio_cdc_module_init(pipeline, &mem_pool, err);
 8004146:	f7ff bb0b 	b.w	8003760 <audio_cdc_module_init>
    while (process != NULL) {
 800414a:	46c2      	mov	sl, r8
    sac_endpoint_t *consumer = pipeline->consumer;
 800414c:	463c      	mov	r4, r7
 800414e:	e779      	b.n	8004044 <sac_pipeline_setup+0x50>
 8004150:	080145c4 	.word	0x080145c4
 8004154:	08014598 	.word	0x08014598
 8004158:	080145b0 	.word	0x080145b0
 800415c:	20005a70 	.word	0x20005a70
 8004160:	080145dc 	.word	0x080145dc

08004164 <sac_pipeline_produce>:
{
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *err = SAC_ERR_NONE;
 8004166:	2300      	movs	r3, #0
    sac_endpoint_t *producer = pipeline->producer;
 8004168:	6846      	ldr	r6, [r0, #4]
    *err = SAC_ERR_NONE;
 800416a:	700b      	strb	r3, [r1, #0]
    if (pipeline->producer->cfg.delayed_action) {
 800416c:	6843      	ldr	r3, [r0, #4]
 800416e:	7d5b      	ldrb	r3, [r3, #21]
{
 8004170:	4604      	mov	r4, r0
 8004172:	460d      	mov	r5, r1
    if (pipeline->producer->cfg.delayed_action) {
 8004174:	b163      	cbz	r3, 8004190 <sac_pipeline_produce+0x2c>
        if (producer->_current_node != NULL) {
 8004176:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004178:	b123      	cbz	r3, 8004184 <sac_pipeline_produce+0x20>
            enqueue_producer_node(producer, err);
 800417a:	4630      	mov	r0, r6
 800417c:	f7ff fe26 	bl	8003dcc <enqueue_producer_node>
            if (*err != SAC_ERR_NONE) {
 8004180:	782b      	ldrb	r3, [r5, #0]
 8004182:	b993      	cbnz	r3, 80041aa <sac_pipeline_produce+0x46>
        produce(pipeline, err);
 8004184:	4629      	mov	r1, r5
 8004186:	4620      	mov	r0, r4
}
 8004188:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        produce(pipeline, err);
 800418c:	f7ff bdf8 	b.w	8003d80 <produce>
        size = produce(pipeline, err);
 8004190:	f7ff fdf6 	bl	8003d80 <produce>
        if (*err != SAC_ERR_NONE) {
 8004194:	782b      	ldrb	r3, [r5, #0]
        size = produce(pipeline, err);
 8004196:	4607      	mov	r7, r0
        if (*err != SAC_ERR_NONE) {
 8004198:	b93b      	cbnz	r3, 80041aa <sac_pipeline_produce+0x46>
        if (size > 0) {
 800419a:	b938      	cbnz	r0, 80041ac <sac_pipeline_produce+0x48>
            queue_free_node(producer->_current_node);
 800419c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800419e:	f007 f829 	bl	800b1f4 <queue_free_node>
            pipeline->_statistics.producer_packets_corrupted_count++;
 80041a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
            producer->_current_node = NULL;
 80041a4:	62b7      	str	r7, [r6, #40]	; 0x28
            pipeline->_statistics.producer_packets_corrupted_count++;
 80041a6:	3301      	adds	r3, #1
 80041a8:	6363      	str	r3, [r4, #52]	; 0x34
}
 80041aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            enqueue_producer_node(producer, err);
 80041ac:	4629      	mov	r1, r5
 80041ae:	4630      	mov	r0, r6
}
 80041b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            enqueue_producer_node(producer, err);
 80041b4:	f7ff be0a 	b.w	8003dcc <enqueue_producer_node>

080041b8 <sac_pipeline_consume>:
{
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    sac_endpoint_t *consumer = pipeline->consumer;
 80041ba:	68c4      	ldr	r4, [r0, #12]
    if (consumer->cfg.delayed_action) {
 80041bc:	7d66      	ldrb	r6, [r4, #21]
{
 80041be:	4607      	mov	r7, r0
 80041c0:	460d      	mov	r5, r1
    if (consumer->cfg.delayed_action) {
 80041c2:	b116      	cbz	r6, 80041ca <sac_pipeline_consume+0x12>
 80041c4:	e021      	b.n	800420a <sac_pipeline_consume+0x52>
            consumer = consumer->next_endpoint;
 80041c6:	69e4      	ldr	r4, [r4, #28]
        } while (consumer != NULL);
 80041c8:	b1bc      	cbz	r4, 80041fa <sac_pipeline_consume+0x42>
            if (queue_get_length(consumer->_queue) > 0) {
 80041ca:	6a20      	ldr	r0, [r4, #32]
 80041cc:	f007 f838 	bl	800b240 <queue_get_length>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d0f8      	beq.n	80041c6 <sac_pipeline_consume+0xe>
    *err = SAC_ERR_NONE;
 80041d4:	702e      	strb	r6, [r5, #0]
    if (consumer->_buffering_complete) {
 80041d6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f3      	beq.n	80041c6 <sac_pipeline_consume+0xe>
        consumer->_current_node = queue_get_node(consumer->_queue);
 80041de:	6a20      	ldr	r0, [r4, #32]
 80041e0:	f007 f826 	bl	800b230 <queue_get_node>
        size = consume(pipeline, consumer, err);
 80041e4:	4621      	mov	r1, r4
        consumer->_current_node = queue_get_node(consumer->_queue);
 80041e6:	62a0      	str	r0, [r4, #40]	; 0x28
        size = consume(pipeline, consumer, err);
 80041e8:	462a      	mov	r2, r5
 80041ea:	4638      	mov	r0, r7
 80041ec:	f7ff fe18 	bl	8003e20 <consume>
        if (size > 0) {
 80041f0:	b920      	cbnz	r0, 80041fc <sac_pipeline_consume+0x44>
        consumer->_current_node = NULL;
 80041f2:	62a6      	str	r6, [r4, #40]	; 0x28
            consumer = consumer->next_endpoint;
 80041f4:	69e4      	ldr	r4, [r4, #28]
        } while (consumer != NULL);
 80041f6:	2c00      	cmp	r4, #0
 80041f8:	d1e7      	bne.n	80041ca <sac_pipeline_consume+0x12>
}
 80041fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            queue_free_node(queue_dequeue_node(consumer->_queue));
 80041fc:	6a20      	ldr	r0, [r4, #32]
 80041fe:	f006 ffad 	bl	800b15c <queue_dequeue_node>
 8004202:	f006 fff7 	bl	800b1f4 <queue_free_node>
        consumer->_current_node = NULL;
 8004206:	62a6      	str	r6, [r4, #40]	; 0x28
 8004208:	e7f4      	b.n	80041f4 <sac_pipeline_consume+0x3c>
    *err = SAC_ERR_NONE;
 800420a:	2300      	movs	r3, #0
 800420c:	700b      	strb	r3, [r1, #0]
    if (consumer->_buffering_complete) {
 800420e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f1      	beq.n	80041fa <sac_pipeline_consume+0x42>
        queue_free_node(consumer->_current_node);
 8004216:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004218:	f006 ffec 	bl	800b1f4 <queue_free_node>
        consumer->_current_node = queue_dequeue_node(consumer->_queue);
 800421c:	6a20      	ldr	r0, [r4, #32]
 800421e:	f006 ff9d 	bl	800b15c <queue_dequeue_node>
        consume(pipeline, consumer, err);
 8004222:	462a      	mov	r2, r5
        consumer->_current_node = queue_dequeue_node(consumer->_queue);
 8004224:	62a0      	str	r0, [r4, #40]	; 0x28
        consume(pipeline, consumer, err);
 8004226:	4621      	mov	r1, r4
 8004228:	4638      	mov	r0, r7
}
 800422a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        consume(pipeline, consumer, err);
 800422e:	f7ff bdf7 	b.w	8003e20 <consume>
 8004232:	bf00      	nop

08004234 <sac_pipeline_start>:
    pipeline->_buffering_threshold = (pipeline->cfg.do_initial_buffering) ?
 8004234:	7d83      	ldrb	r3, [r0, #22]
 8004236:	b13b      	cbz	r3, 8004248 <sac_pipeline_start+0x14>
 8004238:	68c3      	ldr	r3, [r0, #12]
 800423a:	7e9a      	ldrb	r2, [r3, #26]
    pipeline->producer->iface.start(pipeline->producer->instance);
 800423c:	6843      	ldr	r3, [r0, #4]
    pipeline->_buffering_threshold = (pipeline->cfg.do_initial_buffering) ?
 800423e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    pipeline->producer->iface.start(pipeline->producer->instance);
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	4710      	bx	r2
    pipeline->_buffering_threshold = (pipeline->cfg.do_initial_buffering) ?
 8004248:	2201      	movs	r2, #1
 800424a:	e7f7      	b.n	800423c <sac_pipeline_start+0x8>

0800424c <sac_processing_ctrl>:
    return audio_processing->iface.ctrl(audio_processing->instance, cmd, arg);
 800424c:	6903      	ldr	r3, [r0, #16]
 800424e:	6800      	ldr	r0, [r0, #0]
 8004250:	4718      	bx	r3
 8004252:	bf00      	nop

08004254 <sac_pipeline_process>:
{
 8004254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *err = SAC_ERR_NONE;
 8004258:	2300      	movs	r3, #0
    sac_endpoint_t *producer = pipeline->producer;
 800425a:	6842      	ldr	r2, [r0, #4]
    sac_endpoint_t *consumer = pipeline->consumer;
 800425c:	f8d0 900c 	ldr.w	r9, [r0, #12]
    *err = SAC_ERR_NONE;
 8004260:	700b      	strb	r3, [r1, #0]
{
 8004262:	b085      	sub	sp, #20
    if ((!pipeline->cfg.mixer_option.input_mixer_pipeline) &&
 8004264:	7e03      	ldrb	r3, [r0, #24]
{
 8004266:	9103      	str	r1, [sp, #12]
 8004268:	4607      	mov	r7, r0
    sac_endpoint_t *producer = pipeline->producer;
 800426a:	9202      	str	r2, [sp, #8]
    if ((!pipeline->cfg.mixer_option.input_mixer_pipeline) &&
 800426c:	2b00      	cmp	r3, #0
 800426e:	f040 80f2 	bne.w	8004456 <sac_pipeline_process+0x202>
 8004272:	7e43      	ldrb	r3, [r0, #25]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8100 	beq.w	800447a <sac_pipeline_process+0x226>
        temp_node = queue_get_free_node(consumer->_free_queue);
 800427a:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 800427e:	f8df 825c 	ldr.w	r8, [pc, #604]	; 80044dc <sac_pipeline_process+0x288>
 8004282:	f006 ff4b 	bl	800b11c <queue_get_free_node>
 8004286:	687d      	ldr	r5, [r7, #4]
 8004288:	4606      	mov	r6, r0
 */
static queue_node_t *start_mixing_process(sac_pipeline_t *pipeline, queue_node_t *node)
{
    queue_node_t *temp_node;
    sac_endpoint_t *producer = pipeline->producer;
    uint8_t producer_index = 0;
 800428a:	2400      	movs	r4, #0
            } else {
                /* If no packet is present, append silence samples to the Input Samples Queue */
                audio_mixer_module_append_silence(&audio_mixer_module->input_samples_queue[producer_index],
                                                  audio_mixer_module->cfg.payload_size);
            }
        } while (audio_mixer_module->input_samples_queue[producer_index].current_size < audio_mixer_module->cfg.payload_size);
 800428c:	f04f 0bf5 	mov.w	fp, #245	; 0xf5
            if (queue_get_length(producer->_queue) > 0) {
 8004290:	6a28      	ldr	r0, [r5, #32]
 8004292:	f006 ffd5 	bl	800b240 <queue_get_length>
 8004296:	2800      	cmp	r0, #0
 8004298:	f000 80ac 	beq.w	80043f4 <sac_pipeline_process+0x1a0>
                if (audio_mixer_module->input_samples_queue[producer_index].current_size < audio_mixer_module->cfg.payload_size) {
 800429c:	f8d8 0000 	ldr.w	r0, [r8]
 80042a0:	fb0b 0204 	mla	r2, fp, r4, r0
 80042a4:	f890 335a 	ldrb.w	r3, [r0, #858]	; 0x35a
 80042a8:	f892 20f4 	ldrb.w	r2, [r2, #244]	; 0xf4
 80042ac:	429a      	cmp	r2, r3
 80042ae:	f0c0 80ba 	bcc.w	8004426 <sac_pipeline_process+0x1d2>

        producer_index++;
        producer = producer->next_endpoint;
 80042b2:	69ed      	ldr	r5, [r5, #28]
        producer_index++;
 80042b4:	3401      	adds	r4, #1
 80042b6:	b2e4      	uxtb	r4, r4
    } while (producer != NULL);
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	d1e9      	bne.n	8004290 <sac_pipeline_process+0x3c>

    /* Once the Input Samples Queues are filled, mix them into the Output Packet Queue */
    audio_mixer_module_mix_packets(audio_mixer_module);
 80042bc:	f7ff fb68 	bl	8003990 <audio_mixer_module_mix_packets>

    /* Apply the Output Packet to the node and return it to the processing stage */
    memcpy(sac_node_get_data(node), audio_mixer_module->output_packet_buffer, audio_mixer_module->cfg.payload_size);
 80042c0:	f8d8 4000 	ldr.w	r4, [r8]
 80042c4:	6830      	ldr	r0, [r6, #0]
 80042c6:	f894 235a 	ldrb.w	r2, [r4, #858]	; 0x35a
 80042ca:	3004      	adds	r0, #4
 80042cc:	f204 21df 	addw	r1, r4, #735	; 0x2df
 80042d0:	f00d fd4c 	bl	8011d6c <memcpy>
    sac_node_set_payload_size(node, audio_mixer_module->cfg.payload_size);
 80042d4:	6833      	ldr	r3, [r6, #0]
 80042d6:	f894 235a 	ldrb.w	r2, [r4, #858]	; 0x35a
 80042da:	801a      	strh	r2, [r3, #0]
    if (producer->cfg.use_encapsulation) {
 80042dc:	9b02      	ldr	r3, [sp, #8]
 80042de:	7d1b      	ldrb	r3, [r3, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f040 80e1 	bne.w	80044a8 <sac_pipeline_process+0x254>
    if (pipeline->process != NULL) {
 80042e6:	68bd      	ldr	r5, [r7, #8]
 80042e8:	b35d      	cbz	r5, 8004342 <sac_pipeline_process+0xee>
    node2 = queue_get_free_node(pipeline->producer->_free_queue);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80042ee:	f006 ff15 	bl	800b11c <queue_get_free_node>
 80042f2:	4680      	mov	r8, r0
        if ((process->iface.gate == NULL) || process->iface.gate(process->instance, sac_node_get_header(node1),
 80042f4:	69ac      	ldr	r4, [r5, #24]
 80042f6:	b134      	cbz	r4, 8004306 <sac_pipeline_process+0xb2>
 80042f8:	6832      	ldr	r2, [r6, #0]
 80042fa:	6828      	ldr	r0, [r5, #0]
 80042fc:	1c91      	adds	r1, r2, #2
 80042fe:	f832 3b04 	ldrh.w	r3, [r2], #4
 8004302:	47a0      	blx	r4
 8004304:	b1b8      	cbz	r0, 8004336 <sac_pipeline_process+0xe2>
                                        sac_node_get_header(node1),
 8004306:	6831      	ldr	r1, [r6, #0]
            rv = process->iface.process(process->instance,
 8004308:	f8d8 4000 	ldr.w	r4, [r8]
 800430c:	6828      	ldr	r0, [r5, #0]
 800430e:	460a      	mov	r2, r1
 8004310:	3404      	adds	r4, #4
 8004312:	f832 3b04 	ldrh.w	r3, [r2], #4
 8004316:	9400      	str	r4, [sp, #0]
 8004318:	696c      	ldr	r4, [r5, #20]
 800431a:	3102      	adds	r1, #2
 800431c:	47a0      	blx	r4
            if (rv != 0) { /* != 0 means processing happened */
 800431e:	b150      	cbz	r0, 8004336 <sac_pipeline_process+0xe2>
 8004320:	6832      	ldr	r2, [r6, #0]
                memcpy(sac_node_get_header(node2), sac_node_get_header(node1), sizeof(sac_header_t));
 8004322:	f8d8 3000 	ldr.w	r3, [r8]
 8004326:	8852      	ldrh	r2, [r2, #2]
 8004328:	805a      	strh	r2, [r3, #2]
                sac_node_set_payload_size(node2, rv);
 800432a:	f8d8 2000 	ldr.w	r2, [r8]
 800432e:	4633      	mov	r3, r6
 8004330:	8010      	strh	r0, [r2, #0]
 8004332:	4646      	mov	r6, r8
 8004334:	4698      	mov	r8, r3
        process = process->next_process;
 8004336:	69ed      	ldr	r5, [r5, #28]
    } while (process != NULL);
 8004338:	2d00      	cmp	r5, #0
 800433a:	d1db      	bne.n	80042f4 <sac_pipeline_process+0xa0>
    queue_free_node(node2);
 800433c:	4640      	mov	r0, r8
 800433e:	f006 ff59 	bl	800b1f4 <queue_free_node>
    if (pipeline->consumer->cfg.use_encapsulation) {
 8004342:	68fc      	ldr	r4, [r7, #12]
 8004344:	7d23      	ldrb	r3, [r4, #20]
 8004346:	b99b      	cbnz	r3, 8004370 <sac_pipeline_process+0x11c>
        if (pipeline->cfg.cdc_enable) {
 8004348:	7c3b      	ldrb	r3, [r7, #16]
 800434a:	b18b      	cbz	r3, 8004370 <sac_pipeline_process+0x11c>
            audio_cdc_module_update_queue_avg(pipeline);
 800434c:	4638      	mov	r0, r7
 800434e:	f7ff faf9 	bl	8003944 <audio_cdc_module_update_queue_avg>
            node1 = audio_cdc_module_process(pipeline, node2, err);
 8004352:	4631      	mov	r1, r6
 8004354:	9a03      	ldr	r2, [sp, #12]
 8004356:	4638      	mov	r0, r7
 8004358:	f7ff fa6e 	bl	8003838 <audio_cdc_module_process>
    sac_endpoint_t *consumer = pipeline->consumer;
 800435c:	68fc      	ldr	r4, [r7, #12]
            node1 = audio_cdc_module_process(pipeline, node2, err);
 800435e:	4606      	mov	r6, r0
    sac_endpoint_t *consumer = pipeline->consumer;
 8004360:	e006      	b.n	8004370 <sac_pipeline_process+0x11c>
            (queue_get_length(consumer->_free_queue) == 0)) {
 8004362:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004364:	f006 ff6c 	bl	800b240 <queue_get_length>
        if ((queue_get_length(consumer->_queue) == queue_get_limit(consumer->_queue)) &&
 8004368:	2800      	cmp	r0, #0
 800436a:	d03a      	beq.n	80043e2 <sac_pipeline_process+0x18e>
        consumer = consumer->next_endpoint;
 800436c:	69e4      	ldr	r4, [r4, #28]
    } while (consumer != NULL);
 800436e:	b15c      	cbz	r4, 8004388 <sac_pipeline_process+0x134>
        if ((queue_get_length(consumer->_queue) == queue_get_limit(consumer->_queue)) &&
 8004370:	6a20      	ldr	r0, [r4, #32]
 8004372:	f006 ff65 	bl	800b240 <queue_get_length>
 8004376:	4605      	mov	r5, r0
 8004378:	6a20      	ldr	r0, [r4, #32]
 800437a:	f006 ff65 	bl	800b248 <queue_get_limit>
 800437e:	4285      	cmp	r5, r0
 8004380:	d0ef      	beq.n	8004362 <sac_pipeline_process+0x10e>
        consumer = consumer->next_endpoint;
 8004382:	69e4      	ldr	r4, [r4, #28]
    } while (consumer != NULL);
 8004384:	2c00      	cmp	r4, #0
 8004386:	d1f3      	bne.n	8004370 <sac_pipeline_process+0x11c>
    node2 = queue_get_free_node(pipeline->consumer->_free_queue);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800438c:	f006 fec6 	bl	800b11c <queue_get_free_node>
    memcpy(node2->data, node1->data, SAC_PACKET_HEADER_OFFSET + sizeof(sac_header_t) +
 8004390:	6831      	ldr	r1, [r6, #0]
           sac_node_get_payload_size(node1) + pipeline->_user_data_size);
 8004392:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004396:	880a      	ldrh	r2, [r1, #0]
    memcpy(node2->data, node1->data, SAC_PACKET_HEADER_OFFSET + sizeof(sac_header_t) +
 8004398:	3304      	adds	r3, #4
    node2 = queue_get_free_node(pipeline->consumer->_free_queue);
 800439a:	4605      	mov	r5, r0
    memcpy(node2->data, node1->data, SAC_PACKET_HEADER_OFFSET + sizeof(sac_header_t) +
 800439c:	441a      	add	r2, r3
 800439e:	6800      	ldr	r0, [r0, #0]
 80043a0:	f00d fce4 	bl	8011d6c <memcpy>
    consumer = pipeline->consumer;
 80043a4:	68fc      	ldr	r4, [r7, #12]
 80043a6:	e001      	b.n	80043ac <sac_pipeline_process+0x158>
            queue_inc_copy_count(node2);
 80043a8:	f006 ff52 	bl	800b250 <queue_inc_copy_count>
        queue_enqueue_node(consumer->_queue, node2);
 80043ac:	6a20      	ldr	r0, [r4, #32]
 80043ae:	4629      	mov	r1, r5
 80043b0:	f006 fefa 	bl	800b1a8 <queue_enqueue_node>
        consumer = consumer->next_endpoint;
 80043b4:	69e4      	ldr	r4, [r4, #28]
            queue_inc_copy_count(node2);
 80043b6:	4628      	mov	r0, r5
        if (consumer != NULL) {
 80043b8:	2c00      	cmp	r4, #0
 80043ba:	d1f5      	bne.n	80043a8 <sac_pipeline_process+0x154>
    if (pipeline->cfg.mixer_option.output_mixer_pipeline) {
 80043bc:	7e7b      	ldrb	r3, [r7, #25]
 80043be:	b153      	cbz	r3, 80043d6 <sac_pipeline_process+0x182>
        if (consumer->_buffering_complete == false) {
 80043c0:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 80043c4:	b93b      	cbnz	r3, 80043d6 <sac_pipeline_process+0x182>
            consumer->_buffering_complete = true;
 80043c6:	2201      	movs	r2, #1
            consumer->iface.start(consumer->instance);
 80043c8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80043cc:	f8d9 0000 	ldr.w	r0, [r9]
            consumer->_buffering_complete = true;
 80043d0:	f889 202c 	strb.w	r2, [r9, #44]	; 0x2c
            consumer->iface.start(consumer->instance);
 80043d4:	4798      	blx	r3
    queue_free_node(node1);
 80043d6:	4630      	mov	r0, r6
}
 80043d8:	b005      	add	sp, #20
 80043da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    queue_free_node(node1);
 80043de:	f006 bf09 	b.w	800b1f4 <queue_free_node>
            pipeline->_statistics.consumer_buffer_overflow_count++;
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            queue_free_node(queue_dequeue_node(consumer->_queue));
 80043e4:	6a20      	ldr	r0, [r4, #32]
            pipeline->_statistics.consumer_buffer_overflow_count++;
 80043e6:	3301      	adds	r3, #1
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            queue_free_node(queue_dequeue_node(consumer->_queue));
 80043ea:	f006 feb7 	bl	800b15c <queue_dequeue_node>
 80043ee:	f006 ff01 	bl	800b1f4 <queue_free_node>
 80043f2:	e7bb      	b.n	800436c <sac_pipeline_process+0x118>
                audio_mixer_module_append_silence(&audio_mixer_module->input_samples_queue[producer_index],
 80043f4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80043f8:	f8d8 0000 	ldr.w	r0, [r8]
 80043fc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004400:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004404:	f890 135a 	ldrb.w	r1, [r0, #858]	; 0x35a
 8004408:	4418      	add	r0, r3
 800440a:	f7ff fb27 	bl	8003a5c <audio_mixer_module_append_silence>
        } while (audio_mixer_module->input_samples_queue[producer_index].current_size < audio_mixer_module->cfg.payload_size);
 800440e:	f8d8 0000 	ldr.w	r0, [r8]
 8004412:	fb0b 0204 	mla	r2, fp, r4, r0
 8004416:	f890 335a 	ldrb.w	r3, [r0, #858]	; 0x35a
 800441a:	f892 20f4 	ldrb.w	r2, [r2, #244]	; 0xf4
 800441e:	429a      	cmp	r2, r3
 8004420:	f4ff af36 	bcc.w	8004290 <sac_pipeline_process+0x3c>
 8004424:	e745      	b.n	80042b2 <sac_pipeline_process+0x5e>
                    temp_node = queue_dequeue_node(producer->_queue);
 8004426:	6a28      	ldr	r0, [r5, #32]
 8004428:	f006 fe98 	bl	800b15c <queue_dequeue_node>
 800442c:	4682      	mov	sl, r0
                    audio_mixer_module_append_samples(&audio_mixer_module->input_samples_queue[producer_index],
 800442e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8004432:	f8da 1000 	ldr.w	r1, [sl]
 8004436:	f8d8 3000 	ldr.w	r3, [r8]
 800443a:	f811 2b04 	ldrb.w	r2, [r1], #4
 800443e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004442:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8004446:	4418      	add	r0, r3
 8004448:	f7ff fafa 	bl	8003a40 <audio_mixer_module_append_samples>
                    queue_free_node(temp_node);
 800444c:	4650      	mov	r0, sl
 800444e:	f006 fed1 	bl	800b1f4 <queue_free_node>
 8004452:	e7dc      	b.n	800440e <sac_pipeline_process+0x1ba>
 8004454:	46a9      	mov	r9, r5
    if (pipeline->cfg.mixer_option.output_mixer_pipeline) {
 8004456:	7e7b      	ldrb	r3, [r7, #25]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f47f af0e 	bne.w	800427a <sac_pipeline_process+0x26>
        node1 = queue_dequeue_node(pipeline->producer->_queue);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a18      	ldr	r0, [r3, #32]
 8004462:	f006 fe7b 	bl	800b15c <queue_dequeue_node>
        if (node1 == NULL) {
 8004466:	4606      	mov	r6, r0
 8004468:	2800      	cmp	r0, #0
 800446a:	f47f af37 	bne.w	80042dc <sac_pipeline_process+0x88>
            *err = SAC_ERR_NO_SAMPLES_TO_PROCESS;
 800446e:	9a03      	ldr	r2, [sp, #12]
 8004470:	2306      	movs	r3, #6
 8004472:	7013      	strb	r3, [r2, #0]
}
 8004474:	b005      	add	sp, #20
 8004476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    consumer->_buffering_complete = true;
 800447a:	2401      	movs	r4, #1
 800447c:	464d      	mov	r5, r9
 800447e:	e002      	b.n	8004486 <sac_pipeline_process+0x232>
            consumer = consumer->next_endpoint;
 8004480:	69ed      	ldr	r5, [r5, #28]
        } while (consumer != NULL);
 8004482:	2d00      	cmp	r5, #0
 8004484:	d0e6      	beq.n	8004454 <sac_pipeline_process+0x200>
            if (!consumer->_buffering_complete) {
 8004486:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f8      	bne.n	8004480 <sac_pipeline_process+0x22c>
                if (queue_get_length(consumer->_queue) >= (pipeline->_buffering_threshold)) {
 800448e:	6a28      	ldr	r0, [r5, #32]
 8004490:	f006 fed6 	bl	800b240 <queue_get_length>
 8004494:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004498:	4283      	cmp	r3, r0
 800449a:	d8f1      	bhi.n	8004480 <sac_pipeline_process+0x22c>
                    consumer->iface.start(consumer->instance);
 800449c:	68eb      	ldr	r3, [r5, #12]
 800449e:	6828      	ldr	r0, [r5, #0]
                    consumer->_buffering_complete = true;
 80044a0:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
                    consumer->iface.start(consumer->instance);
 80044a4:	4798      	blx	r3
 80044a6:	e7eb      	b.n	8004480 <sac_pipeline_process+0x22c>
        crc = sac_node_get_header(node1)->crc4;
 80044a8:	6831      	ldr	r1, [r6, #0]
 80044aa:	788b      	ldrb	r3, [r1, #2]
        sac_node_get_header(node1)->reserved = 0;
 80044ac:	f003 0007 	and.w	r0, r3, #7
 80044b0:	f801 0f02 	strb.w	r0, [r1, #2]!
        if (crc4itu(0, (uint8_t *)sac_node_get_header(node1), sizeof(sac_header_t)) != crc) {
 80044b4:	2202      	movs	r2, #2
 80044b6:	2000      	movs	r0, #0
        crc = sac_node_get_header(node1)->crc4;
 80044b8:	091c      	lsrs	r4, r3, #4
        if (crc4itu(0, (uint8_t *)sac_node_get_header(node1), sizeof(sac_header_t)) != crc) {
 80044ba:	f006 fcef 	bl	800ae9c <crc4itu>
 80044be:	42a0      	cmp	r0, r4
 80044c0:	f43f af11 	beq.w	80042e6 <sac_pipeline_process+0x92>
            sac_node_set_payload_size(node1, producer->cfg.audio_payload_size);
 80044c4:	9b02      	ldr	r3, [sp, #8]
 80044c6:	8b1a      	ldrh	r2, [r3, #24]
 80044c8:	6833      	ldr	r3, [r6, #0]
 80044ca:	801a      	strh	r2, [r3, #0]
            sac_node_get_header(node1)->tx_queue_level_high = 0;
 80044cc:	789a      	ldrb	r2, [r3, #2]
 80044ce:	f022 0207 	bic.w	r2, r2, #7
 80044d2:	709a      	strb	r2, [r3, #2]
            pipeline->_statistics.producer_packets_corrupted_count++;
 80044d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d6:	3301      	adds	r3, #1
 80044d8:	637b      	str	r3, [r7, #52]	; 0x34
 80044da:	e704      	b.n	80042e6 <sac_pipeline_process+0x92>
 80044dc:	20005a6c 	.word	0x20005a6c

080044e0 <swc_init>:
/* PRIVATE FUNCTION PROTOTYPES ************************************************/
static bool has_main_timeslot(int32_t *timeslot_id, uint32_t timeslot_count);

/* PUBLIC FUNCTIONS ***********************************************************/
void swc_init(swc_cfg_t cfg, swc_hal_t *hal, swc_error_t *err)
{
 80044e0:	b084      	sub	sp, #16
 80044e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80044ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    wps_error_t wps_err;

    *err = SWC_ERR_NONE;
 80044f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f4:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    uint32_t timeslot_sequence_pll_cycle[cfg.timeslot_sequence_length];
    timeslot_t *timeslots;
    wps_callback_inst_t *callback_queue;
    wps_request_info_t *request;

    mem_pool_init(&mem_pool, cfg.memory_pool, (size_t)cfg.memory_pool_size);
 80044f6:	483e      	ldr	r0, [pc, #248]	; (80045f0 <swc_init+0x110>)
    *err = SWC_ERR_NONE;
 80044f8:	2400      	movs	r4, #0
 80044fa:	701c      	strb	r4, [r3, #0]
    uint32_t timeslot_sequence_pll_cycle[cfg.timeslot_sequence_length];
 80044fc:	00ab      	lsls	r3, r5, #2
 80044fe:	3307      	adds	r3, #7
 8004500:	f023 0307 	bic.w	r3, r3, #7
    mem_pool_init(&mem_pool, cfg.memory_pool, (size_t)cfg.memory_pool_size);
 8004504:	e9d7 1211 	ldrd	r1, r2, [r7, #68]	; 0x44
{
 8004508:	46e9      	mov	r9, sp
    uint32_t timeslot_sequence_pll_cycle[cfg.timeslot_sequence_length];
 800450a:	ebad 0d03 	sub.w	sp, sp, r3
    mem_pool_init(&mem_pool, cfg.memory_pool, (size_t)cfg.memory_pool_size);
 800450e:	f006 fcdb 	bl	800aec8 <mem_pool_init>

    MEM_ALLOC_CHECK_RETURN_VOID(timeslots, sizeof(timeslot_t) * cfg.timeslot_sequence_length, err);
 8004512:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8004516:	4836      	ldr	r0, [pc, #216]	; (80045f0 <swc_init+0x110>)
 8004518:	0089      	lsls	r1, r1, #2
 800451a:	f006 fcdd 	bl	800aed8 <mem_pool_malloc>
 800451e:	2800      	cmp	r0, #0
 8004520:	d04e      	beq.n	80045c0 <swc_init+0xe0>
    MEM_ALLOC_CHECK_RETURN_VOID(callback_queue, sizeof(wps_callback_inst_t) * WPS_DEFAULT_CALLBACK_QUEUE_SIZE, err);
 8004522:	4680      	mov	r8, r0
 8004524:	21a0      	movs	r1, #160	; 0xa0
 8004526:	4832      	ldr	r0, [pc, #200]	; (80045f0 <swc_init+0x110>)
 8004528:	f006 fcd6 	bl	800aed8 <mem_pool_malloc>
 800452c:	4606      	mov	r6, r0
 800452e:	2800      	cmp	r0, #0
 8004530:	d046      	beq.n	80045c0 <swc_init+0xe0>
    MEM_ALLOC_CHECK_RETURN_VOID(request, sizeof(wps_request_info_t) * WPS_REQUEST_MEMORY_SIZE, err);
 8004532:	482f      	ldr	r0, [pc, #188]	; (80045f0 <swc_init+0x110>)
 8004534:	2110      	movs	r1, #16
 8004536:	f006 fccf 	bl	800aed8 <mem_pool_malloc>
 800453a:	4683      	mov	fp, r0
 800453c:	2800      	cmp	r0, #0
 800453e:	d03f      	beq.n	80045c0 <swc_init+0xe0>

    /* Initialize the callback queue which will be used to accumulate and run the WPS callbacks asynchronously */
    wps_init_callback_queue(&wps, callback_queue, WPS_DEFAULT_CALLBACK_QUEUE_SIZE, hal->context_switch);
 8004540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004542:	482c      	ldr	r0, [pc, #176]	; (80045f4 <swc_init+0x114>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	4631      	mov	r1, r6
 8004548:	2214      	movs	r2, #20
 800454a:	f004 f867 	bl	800861c <wps_init_callback_queue>

    /* Initialize the request queue which will be used to accumulate request from the application to the WPS */
    wps_init_request_queue(&wps, request, WPS_REQUEST_MEMORY_SIZE);
 800454e:	4829      	ldr	r0, [pc, #164]	; (80045f4 <swc_init+0x114>)
 8004550:	4659      	mov	r1, fp
 8004552:	2202      	movs	r2, #2
 8004554:	f10d 0a08 	add.w	sl, sp, #8
 8004558:	f004 f866 	bl	8008628 <wps_init_request_queue>
#if WPS_RADIO_COUNT == 2
    /* Initialize MCU timer functions used for timing when in dual radio configuration */
    wps_multi_init(hal->multi_cfg, &wps_err);
#endif

    for (uint32_t i = 0; i < cfg.timeslot_sequence_length; i++) {
 800455c:	b16d      	cbz	r5, 800457a <swc_init+0x9a>
 800455e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8004560:	f1aa 0b04 	sub.w	fp, sl, #4
 8004564:	3e04      	subs	r6, #4
        timeslot_sequence_pll_cycle[i] = wps_us_to_pll_cycle(cfg.timeslot_sequence[i], CHIP_RATE_20_48_MHZ);
 8004566:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800456a:	2100      	movs	r1, #0
 800456c:	f003 ffc4 	bl	80084f8 <wps_us_to_pll_cycle>
    for (uint32_t i = 0; i < cfg.timeslot_sequence_length; i++) {
 8004570:	3401      	adds	r4, #1
 8004572:	42a5      	cmp	r5, r4
        timeslot_sequence_pll_cycle[i] = wps_us_to_pll_cycle(cfg.timeslot_sequence[i], CHIP_RATE_20_48_MHZ);
 8004574:	f84b 0f04 	str.w	r0, [fp, #4]!
    for (uint32_t i = 0; i < cfg.timeslot_sequence_length; i++) {
 8004578:	d1f5      	bne.n	8004566 <swc_init+0x86>
    }

    wps_config_network_schedule(&wps, timeslot_sequence_pll_cycle, timeslots, cfg.timeslot_sequence_length, &wps_err);
 800457a:	1dfc      	adds	r4, r7, #7
 800457c:	481d      	ldr	r0, [pc, #116]	; (80045f4 <swc_init+0x114>)
 800457e:	9400      	str	r4, [sp, #0]
 8004580:	4642      	mov	r2, r8
 8004582:	4651      	mov	r1, sl
 8004584:	462b      	mov	r3, r5
 8004586:	f004 f8ef 	bl	8008768 <wps_config_network_schedule>
    wps_config_network_channel_sequence(&wps, cfg.channel_sequence, cfg.channel_sequence_length, &wps_err);
 800458a:	4623      	mov	r3, r4
 800458c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004590:	4818      	ldr	r0, [pc, #96]	; (80045f4 <swc_init+0x114>)
 8004592:	f004 f8ff 	bl	8008794 <wps_config_network_channel_sequence>

    /* Enable/disable global miscellaneous WPS features */
#if (WPS_RADIO_COUNT == 1)
    if (cfg.fast_sync_enabled) {
 8004596:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800459a:	b9db      	cbnz	r3, 80045d4 <swc_init+0xf4>
        wps_enable_fast_sync(&wps, &wps_err);
    } else {
        wps_disable_fast_sync(&wps, &wps_err);
 800459c:	4815      	ldr	r0, [pc, #84]	; (80045f4 <swc_init+0x114>)
 800459e:	4621      	mov	r1, r4
 80045a0:	f004 fbe0 	bl	8008d64 <wps_disable_fast_sync>
    }
#endif
    if (cfg.random_channel_sequence_enabled) {
 80045a4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
        wps_enable_random_channel_sequence(&wps, &wps_err);
 80045a8:	4812      	ldr	r0, [pc, #72]	; (80045f4 <swc_init+0x114>)
 80045aa:	4621      	mov	r1, r4
    if (cfg.random_channel_sequence_enabled) {
 80045ac:	b1e3      	cbz	r3, 80045e8 <swc_init+0x108>
        wps_enable_random_channel_sequence(&wps, &wps_err);
 80045ae:	f004 f8f9 	bl	80087a4 <wps_enable_random_channel_sequence>
    }

    /* RDO at the WPS level can always be enabled but it will only
     * do something if RDO is also enabled on a connection.
     */
    wps_enable_rdo(&wps, WPS_DEFAULT_RDO_ROLLOVER_VAL, &wps_err);
 80045b2:	4810      	ldr	r0, [pc, #64]	; (80045f4 <swc_init+0x114>)
 80045b4:	4622      	mov	r2, r4
 80045b6:	210f      	movs	r1, #15
 80045b8:	f004 faf4 	bl	8008ba4 <wps_enable_rdo>
 80045bc:	46cd      	mov	sp, r9
 80045be:	e003      	b.n	80045c8 <swc_init+0xe8>
    MEM_ALLOC_CHECK_RETURN_VOID(timeslots, sizeof(timeslot_t) * cfg.timeslot_sequence_length, err);
 80045c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045c2:	2301      	movs	r3, #1
 80045c4:	7013      	strb	r3, [r2, #0]
 80045c6:	46cd      	mov	sp, r9
}
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d0:	b004      	add	sp, #16
 80045d2:	4770      	bx	lr
        wps_enable_fast_sync(&wps, &wps_err);
 80045d4:	4807      	ldr	r0, [pc, #28]	; (80045f4 <swc_init+0x114>)
 80045d6:	4621      	mov	r1, r4
 80045d8:	f004 fbbe 	bl	8008d58 <wps_enable_fast_sync>
    if (cfg.random_channel_sequence_enabled) {
 80045dc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
        wps_enable_random_channel_sequence(&wps, &wps_err);
 80045e0:	4804      	ldr	r0, [pc, #16]	; (80045f4 <swc_init+0x114>)
 80045e2:	4621      	mov	r1, r4
    if (cfg.random_channel_sequence_enabled) {
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e2      	bne.n	80045ae <swc_init+0xce>
        wps_disable_random_channel_sequence(&wps, &wps_err);
 80045e8:	f004 f8e2 	bl	80087b0 <wps_disable_random_channel_sequence>
 80045ec:	e7e1      	b.n	80045b2 <swc_init+0xd2>
 80045ee:	bf00      	nop
 80045f0:	20005a84 	.word	0x20005a84
 80045f4:	20005a98 	.word	0x20005a98

080045f8 <swc_node_init>:

swc_node_t *swc_node_init(swc_node_cfg_t cfg, swc_error_t *err)
{
 80045f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045fc:	b08c      	sub	sp, #48	; 0x30
 80045fe:	466d      	mov	r5, sp
 8004600:	e885 0003 	stmia.w	r5, {r0, r1}
    wps_error_t wps_err;
    wps_node_cfg_t wps_node_cfg;
    swc_node_t *node;

    *err = SWC_ERR_NONE;
 8004604:	f04f 0800 	mov.w	r8, #0

    MEM_ALLOC_CHECK_RETURN_NULL(node, sizeof(swc_node_t), err);
 8004608:	482f      	ldr	r0, [pc, #188]	; (80046c8 <swc_node_init+0xd0>)
    *err = SWC_ERR_NONE;
 800460a:	f882 8000 	strb.w	r8, [r2]
    MEM_ALLOC_CHECK_RETURN_NULL(node, sizeof(swc_node_t), err);
 800460e:	2114      	movs	r1, #20
 8004610:	f8bd 7002 	ldrh.w	r7, [sp, #2]
{
 8004614:	4616      	mov	r6, r2
    MEM_ALLOC_CHECK_RETURN_NULL(node, sizeof(swc_node_t), err);
 8004616:	f006 fc5f 	bl	800aed8 <mem_pool_malloc>
 800461a:	2800      	cmp	r0, #0
 800461c:	d04d      	beq.n	80046ba <swc_node_init+0xc2>
    MEM_ALLOC_CHECK_RETURN_NULL(node->wps_node_handle, sizeof(wps_node_t), err);
 800461e:	4604      	mov	r4, r0
 8004620:	2120      	movs	r1, #32
 8004622:	4829      	ldr	r0, [pc, #164]	; (80046c8 <swc_node_init+0xd0>)
 8004624:	f006 fc58 	bl	800aed8 <mem_pool_malloc>
 8004628:	60e0      	str	r0, [r4, #12]
 800462a:	2800      	cmp	r0, #0
 800462c:	d045      	beq.n	80046ba <swc_node_init+0xc2>
    MEM_ALLOC_CHECK_RETURN_NULL(node->wps_radio_handle, sizeof(wps_radio_t) * WPS_RADIO_COUNT, err);
 800462e:	4826      	ldr	r0, [pc, #152]	; (80046c8 <swc_node_init+0xd0>)
 8004630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004634:	f006 fc50 	bl	800aed8 <mem_pool_malloc>
 8004638:	6120      	str	r0, [r4, #16]
 800463a:	2800      	cmp	r0, #0
 800463c:	d03d      	beq.n	80046ba <swc_node_init+0xc2>

    node->radio_count = 0;
 800463e:	4622      	mov	r2, r4
    node->cfg = cfg;
 8004640:	cd03      	ldmia	r5!, {r0, r1}
    node->radio_count = 0;
 8004642:	f802 8b02 	strb.w	r8, [r2], #2
    node->cfg = cfg;
 8004646:	f8c4 0002 	str.w	r0, [r4, #2]
 800464a:	6051      	str	r1, [r2, #4]

    wps_node_cfg.role           = cfg.role;
 800464c:	f89d 2000 	ldrb.w	r2, [sp]
    wps_node_cfg.preamble_len   = WPS_DEFAULT_PREAMBLE_LEN;
    wps_node_cfg.sleep_lvl      = cfg.sleep_level;
    wps_node_cfg.crc_polynomial = WPS_DEFAULT_CRC;
    wps_node_cfg.local_address  = HW_ADDR(NET_ID_FROM_PAN_ID(cfg.pan_id), cfg.local_address);
 8004650:	f89d 3005 	ldrb.w	r3, [sp, #5]
    wps_node_cfg.role           = cfg.role;
 8004654:	f88d 2010 	strb.w	r2, [sp, #16]
    wps_node_cfg.local_address  = HW_ADDR(NET_ID_FROM_PAN_ID(cfg.pan_id), cfg.local_address);
 8004658:	023d      	lsls	r5, r7, #8
    wps_node_cfg.preamble_len   = WPS_DEFAULT_PREAMBLE_LEN;
 800465a:	225e      	movs	r2, #94	; 0x5e
    wps_node_cfg.local_address  = HW_ADDR(NET_ID_FROM_PAN_ID(cfg.pan_id), cfg.local_address);
 800465c:	b22d      	sxth	r5, r5
    wps_node_cfg.preamble_len   = WPS_DEFAULT_PREAMBLE_LEN;
 800465e:	9205      	str	r2, [sp, #20]
    wps_node_cfg.sleep_lvl      = cfg.sleep_level;
 8004660:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004664:	f8ad 2018 	strh.w	r2, [sp, #24]
    wps_node_cfg.local_address  = HW_ADDR(NET_ID_FROM_PAN_ID(cfg.pan_id), cfg.local_address);
 8004668:	432b      	orrs	r3, r5
    wps_node_cfg.crc_polynomial = WPS_DEFAULT_CRC;
 800466a:	f64b 22ad 	movw	r2, #47789	; 0xbaad
 800466e:	9207      	str	r2, [sp, #28]
    wps_node_cfg.local_address  = HW_ADDR(NET_ID_FROM_PAN_ID(cfg.pan_id), cfg.local_address);
 8004670:	f8ad 3020 	strh.w	r3, [sp, #32]
    wps_node_cfg.syncword       = sync_word_table[SYNCWORD_ID_FROM_PAN_ID(cfg.pan_id)];
 8004674:	f3c7 2203 	ubfx	r2, r7, #8, #4
 8004678:	4b14      	ldr	r3, [pc, #80]	; (80046cc <swc_node_init+0xd4>)
    wps_node_cfg.syncword_len   = WPS_DEFAULT_SYNC_WORD_LEN;

    wps_set_network_id(&wps, NET_ID_FROM_PAN_ID(cfg.pan_id), &wps_err);
 800467a:	4815      	ldr	r0, [pc, #84]	; (80046d0 <swc_node_init+0xd8>)
    wps_node_cfg.syncword       = sync_word_table[SYNCWORD_ID_FROM_PAN_ID(cfg.pan_id)];
 800467c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004680:	9309      	str	r3, [sp, #36]	; 0x24
    wps_node_cfg.syncword_len   = WPS_DEFAULT_SYNC_WORD_LEN;
 8004682:	2280      	movs	r2, #128	; 0x80
    wps_set_network_id(&wps, NET_ID_FROM_PAN_ID(cfg.pan_id), &wps_err);
 8004684:	b2f9      	uxtb	r1, r7
    wps_node_cfg.syncword_len   = WPS_DEFAULT_SYNC_WORD_LEN;
 8004686:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    wps_set_network_id(&wps, NET_ID_FROM_PAN_ID(cfg.pan_id), &wps_err);
 800468a:	f10d 020f 	add.w	r2, sp, #15
 800468e:	f004 f84b 	bl	8008728 <wps_set_network_id>
    wps_set_syncing_address(&wps, HW_ADDR(NET_ID_FROM_PAN_ID(cfg.pan_id), cfg.coordinator_address), &wps_err);
 8004692:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004696:	480e      	ldr	r0, [pc, #56]	; (80046d0 <swc_node_init+0xd8>)
 8004698:	4329      	orrs	r1, r5
 800469a:	f10d 020f 	add.w	r2, sp, #15
 800469e:	b289      	uxth	r1, r1
 80046a0:	f004 f83c 	bl	800871c <wps_set_syncing_address>
    wps_config_node(node->wps_node_handle, node->wps_radio_handle, &wps_node_cfg, &wps_err);
 80046a4:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80046a8:	f10d 030f 	add.w	r3, sp, #15
 80046ac:	aa04      	add	r2, sp, #16
 80046ae:	f004 f83f 	bl	8008730 <wps_config_node>

    return node;
}
 80046b2:	4620      	mov	r0, r4
 80046b4:	b00c      	add	sp, #48	; 0x30
 80046b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEM_ALLOC_CHECK_RETURN_NULL(node, sizeof(swc_node_t), err);
 80046ba:	2400      	movs	r4, #0
 80046bc:	2301      	movs	r3, #1
}
 80046be:	4620      	mov	r0, r4
    MEM_ALLOC_CHECK_RETURN_NULL(node, sizeof(swc_node_t), err);
 80046c0:	7033      	strb	r3, [r6, #0]
}
 80046c2:	b00c      	add	sp, #48	; 0x30
 80046c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c8:	20005a84 	.word	0x20005a84
 80046cc:	080145ec 	.word	0x080145ec
 80046d0:	20005a98 	.word	0x20005a98

080046d4 <swc_node_add_radio>:

void swc_node_add_radio(swc_node_t *node, swc_radio_cfg_t cfg, swc_hal_t *hal, swc_error_t *err)
{
 80046d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d8:	4604      	mov	r4, r0
 80046da:	b084      	sub	sp, #16
 80046dc:	4668      	mov	r0, sp
 80046de:	e880 0006 	stmia.w	r0, {r1, r2}
    wps_error_t wps_err;
    uint8_t radio_id = node->radio_count;
 80046e2:	7822      	ldrb	r2, [r4, #0]
{
 80046e4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28

    *err = SWC_ERR_NONE;

    node->wps_radio_handle[radio_id].radio_hal          = hal->radio_hal[radio_id];
 80046e8:	eb03 1682 	add.w	r6, r3, r2, lsl #6
    *err = SWC_ERR_NONE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f888 3000 	strb.w	r3, [r8]
    node->wps_radio_handle[radio_id].radio_hal          = hal->radio_hal[radio_id];
 80046f2:	6925      	ldr	r5, [r4, #16]
 80046f4:	46b6      	mov	lr, r6
 80046f6:	eb05 2542 	add.w	r5, r5, r2, lsl #9
 80046fa:	0257      	lsls	r7, r2, #9
 80046fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004700:	f105 0c28 	add.w	ip, r5, #40	; 0x28
 8004704:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004708:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800470c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004710:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004714:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004718:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 800471c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    node->wps_radio_handle[radio_id].radio.irq_polarity = cfg.irq_polarity;
 8004720:	9b00      	ldr	r3, [sp, #0]
 8004722:	606b      	str	r3, [r5, #4]
    node->wps_radio_handle[radio_id].radio.std_spi      = cfg.std_spi;
 8004724:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004728:	84ab      	strh	r3, [r5, #36]	; 0x24

    MEM_ALLOC_CHECK_RETURN_VOID(node->wps_radio_handle[radio_id].nvm, sizeof(nvm_t), err);
 800472a:	4813      	ldr	r0, [pc, #76]	; (8004778 <swc_node_add_radio+0xa4>)
 800472c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004730:	f006 fbd2 	bl	800aed8 <mem_pool_malloc>
 8004734:	66e8      	str	r0, [r5, #108]	; 0x6c
 8004736:	6925      	ldr	r5, [r4, #16]
 8004738:	443d      	add	r5, r7
 800473a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800473c:	b1b3      	cbz	r3, 800476c <swc_node_add_radio+0x98>
    MEM_ALLOC_CHECK_RETURN_VOID(node->wps_radio_handle[radio_id].spectral_calib_vars, sizeof(calib_vars_t), err);
 800473e:	480e      	ldr	r0, [pc, #56]	; (8004778 <swc_node_add_radio+0xa4>)
 8004740:	21e0      	movs	r1, #224	; 0xe0
 8004742:	f006 fbc9 	bl	800aed8 <mem_pool_malloc>
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	66a8      	str	r0, [r5, #104]	; 0x68
 800474a:	443b      	add	r3, r7
 800474c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800474e:	b16b      	cbz	r3, 800476c <swc_node_add_radio+0x98>

    /* Disable MCU external interrupt servicing the radio IRQ before initializing the WPS.
     * It will be later re-activated with a call to the swc_connect() function.
     */
    hal->radio_hal[radio_id].disable_radio_irq();
 8004750:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004752:	4798      	blx	r3

    wps_radio_init(&node->wps_radio_handle[radio_id], &wps_err);
 8004754:	6920      	ldr	r0, [r4, #16]
 8004756:	f10d 010f 	add.w	r1, sp, #15
 800475a:	4438      	add	r0, r7
 800475c:	f003 fed8 	bl	8008510 <wps_radio_init>

    node->radio_count++;
 8004760:	7823      	ldrb	r3, [r4, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	7023      	strb	r3, [r4, #0]
}
 8004766:	b004      	add	sp, #16
 8004768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEM_ALLOC_CHECK_RETURN_VOID(node->wps_radio_handle[radio_id].nvm, sizeof(nvm_t), err);
 800476c:	2301      	movs	r3, #1
 800476e:	f888 3000 	strb.w	r3, [r8]
}
 8004772:	b004      	add	sp, #16
 8004774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004778:	20005a84 	.word	0x20005a84

0800477c <swc_connection_init>:

swc_connection_t *swc_connection_init(swc_node_t *node, swc_connection_cfg_t cfg, swc_hal_t *hal, swc_error_t *err)
{
 800477c:	b084      	sub	sp, #16
 800477e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004782:	b095      	sub	sp, #84	; 0x54
 8004784:	f10d 0b7c 	add.w	fp, sp, #124	; 0x7c
 8004788:	e88b 000e 	stmia.w	fp, {r1, r2, r3}
    uint8_t *fallback_threshold = NULL;
    swc_connection_t *conn;
    xlayer_t *xlayer_queue;
    rf_channel_t (*channel_buffer)[WPS_NB_RF_CHANNEL][WPS_RADIO_COUNT];

    *err = SWC_ERR_NONE;
 800478c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800478e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8004790:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 8004794:	4699      	mov	r9, r3
 8004796:	2300      	movs	r3, #0
 8004798:	7013      	strb	r3, [r2, #0]
 800479a:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 800479e:	9202      	str	r2, [sp, #8]
{
 80047a0:	4680      	mov	r8, r0
 */
static bool has_main_timeslot(int32_t *timeslot_id, uint32_t timeslot_count)
{
    bool main_timeslot = false;

    for (uint32_t i = 0; i < timeslot_count; i++) {
 80047a2:	b165      	cbz	r5, 80047be <swc_connection_init+0x42>
 80047a4:	f1aa 0204 	sub.w	r2, sl, #4
 80047a8:	e001      	b.n	80047ae <swc_connection_init+0x32>
 80047aa:	42ab      	cmp	r3, r5
 80047ac:	d007      	beq.n	80047be <swc_connection_init+0x42>
        main_timeslot = !(timeslot_id[i] & BIT_AUTO_REPLY_TIMESLOT);
 80047ae:	f852 1f04 	ldr.w	r1, [r2, #4]!
        if (main_timeslot) {
 80047b2:	0609      	lsls	r1, r1, #24
    for (uint32_t i = 0; i < timeslot_count; i++) {
 80047b4:	f103 0301 	add.w	r3, r3, #1
        if (main_timeslot) {
 80047b8:	d4f7      	bmi.n	80047aa <swc_connection_init+0x2e>
        main_timeslot = !(timeslot_id[i] & BIT_AUTO_REPLY_TIMESLOT);
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <swc_connection_init+0x44>
    bool main_timeslot = false;
 80047be:	2300      	movs	r3, #0
    wps_header_cfg.main_connection = has_main_timeslot(cfg.timeslot_id, cfg.timeslot_count);
 80047c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    wps_header_cfg.rdo_enabled = cfg.rdo_enabled;
 80047c4:	f89d 30a9 	ldrb.w	r3, [sp, #169]	; 0xa9
 80047c8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    wps_header_cfg.ranging_phase_accumulator = false;
 80047cc:	2300      	movs	r3, #0
 80047ce:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    wps_header_cfg.ranging_phase_provider = false;
 80047d2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    header_size = wps_get_connection_header_size(&wps, wps_header_cfg);
 80047d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047d8:	488a      	ldr	r0, [pc, #552]	; (8004a04 <swc_connection_init+0x288>)
 80047da:	f003 ffed 	bl	80087b8 <wps_get_connection_header_size>
    conn_frame_length = cfg.allocate_payload_memory ? cfg.max_payload_size + header_size + WPS_PAYLOAD_SIZE_BYTE_SIZE :
 80047de:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
    header_size = wps_get_connection_header_size(&wps, wps_header_cfg);
 80047e2:	4607      	mov	r7, r0
    conn_frame_length = cfg.allocate_payload_memory ? cfg.max_payload_size + header_size + WPS_PAYLOAD_SIZE_BYTE_SIZE :
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 80e2 	beq.w	80049ae <swc_connection_init+0x232>
 80047ea:	f89d 6082 	ldrb.w	r6, [sp, #130]	; 0x82
 80047ee:	3601      	adds	r6, #1
 80047f0:	4406      	add	r6, r0
 80047f2:	b2f6      	uxtb	r6, r6
    MEM_ALLOC_CHECK_RETURN_NULL(conn, sizeof(swc_connection_t), err);
 80047f4:	4884      	ldr	r0, [pc, #528]	; (8004a08 <swc_connection_init+0x28c>)
 80047f6:	2168      	movs	r1, #104	; 0x68
 80047f8:	f006 fb6e 	bl	800aed8 <mem_pool_malloc>
 80047fc:	4604      	mov	r4, r0
 80047fe:	2800      	cmp	r0, #0
 8004800:	f000 80cb 	beq.w	800499a <swc_connection_init+0x21e>
    MEM_ALLOC_CHECK_RETURN_NULL(conn->wps_conn_handle, sizeof(wps_connection_t), err);
 8004804:	4880      	ldr	r0, [pc, #512]	; (8004a08 <swc_connection_init+0x28c>)
 8004806:	f44f 7158 	mov.w	r1, #864	; 0x360
 800480a:	f006 fb65 	bl	800aed8 <mem_pool_malloc>
 800480e:	6660      	str	r0, [r4, #100]	; 0x64
 8004810:	2800      	cmp	r0, #0
 8004812:	f000 80c2 	beq.w	800499a <swc_connection_init+0x21e>
    MEM_ALLOC_CHECK_RETURN_NULL(xlayer_queue, sizeof(xlayer_t) * cfg.queue_size, err);
 8004816:	ebc9 1109 	rsb	r1, r9, r9, lsl #4
 800481a:	487b      	ldr	r0, [pc, #492]	; (8004a08 <swc_connection_init+0x28c>)
 800481c:	00c9      	lsls	r1, r1, #3
 800481e:	f006 fb5b 	bl	800aed8 <mem_pool_malloc>
 8004822:	9004      	str	r0, [sp, #16]
 8004824:	2800      	cmp	r0, #0
 8004826:	f000 80b8 	beq.w	800499a <swc_connection_init+0x21e>
    MEM_ALLOC_CHECK_RETURN_NULL(frame_queue, sizeof(uint8_t) * cfg.queue_size * conn_frame_length, err);
 800482a:	4877      	ldr	r0, [pc, #476]	; (8004a08 <swc_connection_init+0x28c>)
 800482c:	fb09 f106 	mul.w	r1, r9, r6
 8004830:	f006 fb52 	bl	800aed8 <mem_pool_malloc>
 8004834:	9005      	str	r0, [sp, #20]
 8004836:	2800      	cmp	r0, #0
 8004838:	f000 80af 	beq.w	800499a <swc_connection_init+0x21e>
    if (cfg.fallback_enabled) {
 800483c:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
 8004840:	2800      	cmp	r0, #0
 8004842:	f040 80d1 	bne.w	80049e8 <swc_connection_init+0x26c>
    uint8_t *fallback_threshold = NULL;
 8004846:	9006      	str	r0, [sp, #24]
    uint8_t threshold_count = 0;
 8004848:	9003      	str	r0, [sp, #12]
    if (cfg.throttling_enabled) {
 800484a:	9b02      	ldr	r3, [sp, #8]
 800484c:	b173      	cbz	r3, 800486c <swc_connection_init+0xf0>
        MEM_ALLOC_CHECK_RETURN_NULL(conn->wps_conn_handle->pattern, sizeof(bool) * WPS_CONNECTION_THROTTLE_GRANULARITY, err);
 800484e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004850:	486d      	ldr	r0, [pc, #436]	; (8004a08 <swc_connection_init+0x28c>)
 8004852:	9307      	str	r3, [sp, #28]
 8004854:	2114      	movs	r1, #20
 8004856:	f006 fb3f 	bl	800aed8 <mem_pool_malloc>
 800485a:	9b07      	ldr	r3, [sp, #28]
 800485c:	f8c3 02f0 	str.w	r0, [r3, #752]	; 0x2f0
 8004860:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004862:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8097 	beq.w	800499a <swc_connection_init+0x21e>
    MEM_ALLOC_CHECK_RETURN_NULL(channel_buffer, sizeof(rf_channel_t[WPS_NB_RF_CHANNEL][WPS_RADIO_COUNT]) * (threshold_count + 1), err);
 800486c:	9b03      	ldr	r3, [sp, #12]
 800486e:	4866      	ldr	r0, [pc, #408]	; (8004a08 <swc_connection_init+0x28c>)
 8004870:	1c59      	adds	r1, r3, #1
 8004872:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004876:	0109      	lsls	r1, r1, #4
 8004878:	f006 fb2e 	bl	800aed8 <mem_pool_malloc>
 800487c:	4686      	mov	lr, r0
 800487e:	2800      	cmp	r0, #0
 8004880:	f000 808b 	beq.w	800499a <swc_connection_init+0x21e>
    conn->cfg = cfg;
 8004884:	46dc      	mov	ip, fp
    conn->channel_count = 0;
 8004886:	46a3      	mov	fp, r4
 8004888:	2300      	movs	r3, #0
 800488a:	f80b 3b04 	strb.w	r3, [fp], #4
    wps_conn_cfg.source_address       = HW_ADDR(NET_ID_FROM_PAN_ID(node->cfg.pan_id), cfg.source_address);
 800488e:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8004892:	f998 1004 	ldrsb.w	r1, [r8, #4]
    wps_conn_cfg.destination_address  = HW_ADDR(NET_ID_FROM_PAN_ID(node->cfg.pan_id), cfg.destination_address);
 8004896:	f89d 3081 	ldrb.w	r3, [sp, #129]	; 0x81
    wps_conn_cfg.source_address       = HW_ADDR(NET_ID_FROM_PAN_ID(node->cfg.pan_id), cfg.source_address);
 800489a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    wps_conn_cfg.destination_address  = HW_ADDR(NET_ID_FROM_PAN_ID(node->cfg.pan_id), cfg.destination_address);
 800489e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    wps_conn_cfg.source_address       = HW_ADDR(NET_ID_FROM_PAN_ID(node->cfg.pan_id), cfg.source_address);
 80048a2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
    wps_conn_cfg.destination_address  = HW_ADDR(NET_ID_FROM_PAN_ID(node->cfg.pan_id), cfg.destination_address);
 80048a6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    conn->cfg = cfg;
 80048aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80048ae:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 80048b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80048b6:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 80048ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80048be:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 80048c2:	f8dc 3000 	ldr.w	r3, [ip]
 80048c6:	f8cb 3000 	str.w	r3, [fp]
    wps_conn_cfg.header_length        = header_size;
 80048ca:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
    wps_conn_cfg.fallback_count       = threshold_count;
 80048ce:	9b03      	ldr	r3, [sp, #12]
 80048d0:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    wps_conn_cfg.fallback_threshold   = fallback_threshold;
 80048d4:	9b06      	ldr	r3, [sp, #24]
    wps_conn_cfg.fifo_buffer          = xlayer_queue;
 80048d6:	9a04      	ldr	r2, [sp, #16]
    wps_conn_cfg.fallback_threshold   = fallback_threshold;
 80048d8:	9312      	str	r3, [sp, #72]	; 0x48
    wps_conn_cfg.get_tick_quarter_ms  = hal->get_tick_quarter_ms;
 80048da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    wps_create_connection(conn->wps_conn_handle, node->wps_node_handle, &wps_conn_cfg, &wps_err);
 80048dc:	f8d8 100c 	ldr.w	r1, [r8, #12]
    wps_conn_cfg.get_tick_quarter_ms  = hal->get_tick_quarter_ms;
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    wps_create_connection(conn->wps_conn_handle, node->wps_node_handle, &wps_conn_cfg, &wps_err);
 80048e2:	6e60      	ldr	r0, [r4, #100]	; 0x64
    wps_conn_cfg.get_tick_quarter_ms  = hal->get_tick_quarter_ms;
 80048e4:	9313      	str	r3, [sp, #76]	; 0x4c
    wps_conn_cfg.fifo_buffer_size     = cfg.queue_size;
 80048e6:	e9cd 290b 	strd	r2, r9, [sp, #44]	; 0x2c
    wps_conn_cfg.frame_buffer         = frame_queue;
 80048ea:	9a05      	ldr	r2, [sp, #20]
 80048ec:	920d      	str	r2, [sp, #52]	; 0x34
    wps_create_connection(conn->wps_conn_handle, node->wps_node_handle, &wps_conn_cfg, &wps_err);
 80048ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048f2:	aa0a      	add	r2, sp, #40	; 0x28
    wps_conn_cfg.channel_buffer       = channel_buffer;
 80048f4:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
    wps_conn_cfg.frame_length         = conn_frame_length;
 80048f8:	960f      	str	r6, [sp, #60]	; 0x3c
    wps_create_connection(conn->wps_conn_handle, node->wps_node_handle, &wps_conn_cfg, &wps_err);
 80048fa:	f004 f829 	bl	8008950 <wps_create_connection>
    wps_connection_config_frame(conn->wps_conn_handle, cfg.modulation, cfg.fec, &wps_err);
 80048fe:	f8bd 208a 	ldrh.w	r2, [sp, #138]	; 0x8a
 8004902:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 8004906:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004908:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800490c:	f004 f8de 	bl	8008acc <wps_connection_config_frame>
    wps_connection_set_timeslot(conn->wps_conn_handle, &wps, cfg.timeslot_id, cfg.timeslot_count, &wps_err);
 8004910:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 8004914:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004916:	9100      	str	r1, [sp, #0]
 8004918:	462b      	mov	r3, r5
 800491a:	493a      	ldr	r1, [pc, #232]	; (8004a04 <swc_connection_init+0x288>)
 800491c:	4652      	mov	r2, sl
 800491e:	f004 f89f 	bl	8008a60 <wps_connection_set_timeslot>
    if (cfg.ack_enabled) {
 8004922:	f89d 3095 	ldrb.w	r3, [sp, #149]	; 0x95
        wps_connection_enable_ack(conn->wps_conn_handle, &wps_err);
 8004926:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004928:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    if (cfg.ack_enabled) {
 800492c:	2b00      	cmp	r3, #0
 800492e:	d058      	beq.n	80049e2 <swc_connection_init+0x266>
        wps_connection_enable_ack(conn->wps_conn_handle, &wps_err);
 8004930:	f004 f8d6 	bl	8008ae0 <wps_connection_enable_ack>
    if (cfg.arq_enabled) {
 8004934:	f89d 3096 	ldrb.w	r3, [sp, #150]	; 0x96
 8004938:	2b00      	cmp	r3, #0
 800493a:	d04c      	beq.n	80049d6 <swc_connection_init+0x25a>
        wps_connection_enable_stop_and_wait_arq(conn->wps_conn_handle, node->wps_node_handle->local_address,
 800493c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004940:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004942:	88d9      	ldrh	r1, [r3, #6]
 8004944:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800494e:	f004 f8d1 	bl	8008af4 <wps_connection_enable_stop_and_wait_arq>
    if (cfg.auto_sync_enabled) {
 8004952:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
        wps_connection_enable_auto_sync(conn->wps_conn_handle, &wps_err);
 8004956:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004958:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    if (cfg.auto_sync_enabled) {
 800495c:	2b00      	cmp	r3, #0
 800495e:	d037      	beq.n	80049d0 <swc_connection_init+0x254>
        wps_connection_enable_auto_sync(conn->wps_conn_handle, &wps_err);
 8004960:	f004 f8f2 	bl	8008b48 <wps_connection_enable_auto_sync>
    if (cfg.cca_enabled) {
 8004964:	f89d 30a1 	ldrb.w	r3, [sp, #161]	; 0xa1
 8004968:	b323      	cbz	r3, 80049b4 <swc_connection_init+0x238>
        wps_connection_enable_cca(conn->wps_conn_handle, conn->cfg.cca_settings.threshold, conn->cfg.cca_settings.retry_time,
 800496a:	f10d 0523 	add.w	r5, sp, #35	; 0x23
 800496e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8004972:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8004974:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8004978:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800497a:	9501      	str	r5, [sp, #4]
 800497c:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
 8004980:	9500      	str	r5, [sp, #0]
 8004982:	f004 f8eb 	bl	8008b5c <wps_connection_enable_cca>
    if (cfg.throttling_enabled) {
 8004986:	9b02      	ldr	r3, [sp, #8]
 8004988:	b9e3      	cbnz	r3, 80049c4 <swc_connection_init+0x248>
    wps_configure_header_connection(&wps, conn->wps_conn_handle, wps_header_cfg, &wps_err);
 800498a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800498c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800498e:	481d      	ldr	r0, [pc, #116]	; (8004a04 <swc_connection_init+0x288>)
 8004990:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004994:	f003 ff40 	bl	8008818 <wps_configure_header_connection>
    return conn;
 8004998:	e003      	b.n	80049a2 <swc_connection_init+0x226>
    MEM_ALLOC_CHECK_RETURN_NULL(conn, sizeof(swc_connection_t), err);
 800499a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800499c:	2301      	movs	r3, #1
 800499e:	7013      	strb	r3, [r2, #0]
 80049a0:	2400      	movs	r4, #0
}
 80049a2:	4620      	mov	r0, r4
 80049a4:	b015      	add	sp, #84	; 0x54
 80049a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049aa:	b004      	add	sp, #16
 80049ac:	4770      	bx	lr
    conn_frame_length = cfg.allocate_payload_memory ? cfg.max_payload_size + header_size + WPS_PAYLOAD_SIZE_BYTE_SIZE :
 80049ae:	1c46      	adds	r6, r0, #1
 80049b0:	b2f6      	uxtb	r6, r6
 80049b2:	e71f      	b.n	80047f4 <swc_connection_init+0x78>
        wps_connection_disable_cca(conn->wps_conn_handle, &wps_err);
 80049b4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80049b6:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 80049ba:	f004 f8e3 	bl	8008b84 <wps_connection_disable_cca>
    if (cfg.throttling_enabled) {
 80049be:	9b02      	ldr	r3, [sp, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0e2      	beq.n	800498a <swc_connection_init+0x20e>
        wps_init_connection_throttle(conn->wps_conn_handle, &wps_err);
 80049c4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80049c6:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 80049ca:	f004 f949 	bl	8008c60 <wps_init_connection_throttle>
 80049ce:	e7dc      	b.n	800498a <swc_connection_init+0x20e>
        wps_connection_disable_auto_sync(conn->wps_conn_handle, &wps_err);
 80049d0:	f004 f8c0 	bl	8008b54 <wps_connection_disable_auto_sync>
 80049d4:	e7c6      	b.n	8004964 <swc_connection_init+0x1e8>
        wps_connection_disable_stop_and_wait_arq(conn->wps_conn_handle, &wps_err);
 80049d6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80049d8:	f10d 0123 	add.w	r1, sp, #35	; 0x23
 80049dc:	f004 f8a6 	bl	8008b2c <wps_connection_disable_stop_and_wait_arq>
 80049e0:	e7b7      	b.n	8004952 <swc_connection_init+0x1d6>
        wps_connection_disable_ack(conn->wps_conn_handle, &wps_err);
 80049e2:	f004 f883 	bl	8008aec <wps_connection_disable_ack>
 80049e6:	e7a5      	b.n	8004934 <swc_connection_init+0x1b8>
        MEM_ALLOC_CHECK_RETURN_NULL(fallback_threshold, sizeof(uint8_t) * threshold_count, err);
 80049e8:	4807      	ldr	r0, [pc, #28]	; (8004a08 <swc_connection_init+0x28c>)
 80049ea:	2101      	movs	r1, #1
 80049ec:	f006 fa74 	bl	800aed8 <mem_pool_malloc>
 80049f0:	9006      	str	r0, [sp, #24]
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d0d1      	beq.n	800499a <swc_connection_init+0x21e>
        memcpy(fallback_threshold, &cfg.fallback_settings.threshold, threshold_count);
 80049f6:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
 80049fa:	7003      	strb	r3, [r0, #0]
        threshold_count = 1;
 80049fc:	2301      	movs	r3, #1
 80049fe:	9303      	str	r3, [sp, #12]
 8004a00:	e723      	b.n	800484a <swc_connection_init+0xce>
 8004a02:	bf00      	nop
 8004a04:	20005a98 	.word	0x20005a98
 8004a08:	20005a84 	.word	0x20005a84

08004a0c <swc_connection_add_channel>:
{
 8004a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a0e:	b089      	sub	sp, #36	; 0x24
 8004a10:	f10d 0c08 	add.w	ip, sp, #8
 8004a14:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    *err = SWC_ERR_NONE;
 8004a16:	2500      	movs	r5, #0
{
 8004a18:	e88c 000c 	stmia.w	ip, {r2, r3}
 8004a1c:	460f      	mov	r7, r1
    *err = SWC_ERR_NONE;
 8004a1e:	7035      	strb	r5, [r6, #0]
    MEM_ALLOC_CHECK_RETURN_VOID(wps_chann_cfg.power, sizeof(tx_power_settings_t), err);
 8004a20:	2103      	movs	r1, #3
{
 8004a22:	4604      	mov	r4, r0
    MEM_ALLOC_CHECK_RETURN_VOID(wps_chann_cfg.power, sizeof(tx_power_settings_t), err);
 8004a24:	482b      	ldr	r0, [pc, #172]	; (8004ad4 <swc_connection_add_channel+0xc8>)
 8004a26:	f006 fa57 	bl	800aed8 <mem_pool_malloc>
 8004a2a:	9005      	str	r0, [sp, #20]
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d04d      	beq.n	8004acc <swc_connection_add_channel+0xc0>
    wps_chann_cfg.frequency          = cfg.frequency;
 8004a30:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004a34:	f8ad 3018 	strh.w	r3, [sp, #24]
    wps_chann_cfg.power->pulse_count = cfg.tx_pulse_count;
 8004a38:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004a3c:	7003      	strb	r3, [r0, #0]
    wps_chann_cfg.power->pulse_width = cfg.tx_pulse_width;
 8004a3e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004a42:	7043      	strb	r3, [r0, #1]
    wps_chann_cfg.pulse_spacing      = WPS_DEFAULT_PULSE_SPACING;
 8004a44:	f240 2201 	movw	r2, #513	; 0x201
    wps_chann_cfg.power->tx_gain     = cfg.tx_pulse_gain;
 8004a48:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004a4c:	7083      	strb	r3, [r0, #2]
    wps_chann_cfg.pulse_spacing      = WPS_DEFAULT_PULSE_SPACING;
 8004a4e:	f8ad 201a 	strh.w	r2, [sp, #26]
    wps_chann_cfg.rdn_phase_enable   = WPS_DEFAULT_RND_PHASE;
 8004a52:	2240      	movs	r2, #64	; 0x40
 8004a54:	f8ad 201c 	strh.w	r2, [sp, #28]
    wps_chann_cfg.integgain          = (cfg.rx_pulse_count == 1) ? WPS_INTEGGAIN_ONE_PULSE_VAL : WPS_INTEGGAIN_MANY_PULSES_VAL;
 8004a58:	f89d 200c 	ldrb.w	r2, [sp, #12]
    wps_chann_cfg.freq_shift_enable  = WPS_DEFAULT_FREQ_SHIFT;
 8004a5c:	2601      	movs	r6, #1
    wps_chann_cfg.integgain          = (cfg.rx_pulse_count == 1) ? WPS_INTEGGAIN_ONE_PULSE_VAL : WPS_INTEGGAIN_MANY_PULSES_VAL;
 8004a5e:	1b92      	subs	r2, r2, r6
 8004a60:	fab2 f282 	clz	r2, r2
 8004a64:	0952      	lsrs	r2, r2, #5
 8004a66:	f88d 201e 	strb.w	r2, [sp, #30]
    wps_connection_config_channel(conn->wps_conn_handle, node->wps_node_handle, conn->channel_count, 0, &wps_chann_cfg, &wps_err);
 8004a6a:	f10d 0213 	add.w	r2, sp, #19
 8004a6e:	9201      	str	r2, [sp, #4]
 8004a70:	aa05      	add	r2, sp, #20
 8004a72:	9200      	str	r2, [sp, #0]
 8004a74:	462b      	mov	r3, r5
 8004a76:	7822      	ldrb	r2, [r4, #0]
 8004a78:	68f9      	ldr	r1, [r7, #12]
 8004a7a:	6e60      	ldr	r0, [r4, #100]	; 0x64
    wps_chann_cfg.freq_shift_enable  = WPS_DEFAULT_FREQ_SHIFT;
 8004a7c:	f88d 601f 	strb.w	r6, [sp, #31]
    wps_connection_config_channel(conn->wps_conn_handle, node->wps_node_handle, conn->channel_count, 0, &wps_chann_cfg, &wps_err);
 8004a80:	f004 f810 	bl	8008aa4 <wps_connection_config_channel>
    if (conn->cfg.fallback_enabled) {
 8004a84:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8004a88:	b923      	cbnz	r3, 8004a94 <swc_connection_add_channel+0x88>
    conn->channel_count++;
 8004a8a:	7823      	ldrb	r3, [r4, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	7023      	strb	r3, [r4, #0]
}
 8004a90:	b009      	add	sp, #36	; 0x24
 8004a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        wps_chann_cfg.power->pulse_count += conn->cfg.fallback_settings.tx_pulse_count_offset;
 8004a94:	9a05      	ldr	r2, [sp, #20]
 8004a96:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8004a9a:	7811      	ldrb	r1, [r2, #0]
 8004a9c:	4401      	add	r1, r0
 8004a9e:	7011      	strb	r1, [r2, #0]
        wps_chann_cfg.power->pulse_width += conn->cfg.fallback_settings.tx_pulse_width_offset;
 8004aa0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8004aa4:	7851      	ldrb	r1, [r2, #1]
 8004aa6:	4401      	add	r1, r0
 8004aa8:	7051      	strb	r1, [r2, #1]
        wps_chann_cfg.power->tx_gain     += conn->cfg.fallback_settings.tx_pulse_gain_offset;
 8004aaa:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 8004aae:	7891      	ldrb	r1, [r2, #2]
 8004ab0:	4401      	add	r1, r0
 8004ab2:	7091      	strb	r1, [r2, #2]
        wps_connection_config_channel(conn->wps_conn_handle, node->wps_node_handle, conn->channel_count, 1, &wps_chann_cfg, &wps_err);
 8004ab4:	f10d 0213 	add.w	r2, sp, #19
 8004ab8:	68f9      	ldr	r1, [r7, #12]
 8004aba:	9201      	str	r2, [sp, #4]
 8004abc:	a805      	add	r0, sp, #20
 8004abe:	7822      	ldrb	r2, [r4, #0]
 8004ac0:	9000      	str	r0, [sp, #0]
 8004ac2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004ac4:	4633      	mov	r3, r6
 8004ac6:	f003 ffed 	bl	8008aa4 <wps_connection_config_channel>
 8004aca:	e7de      	b.n	8004a8a <swc_connection_add_channel+0x7e>
    MEM_ALLOC_CHECK_RETURN_VOID(wps_chann_cfg.power, sizeof(tx_power_settings_t), err);
 8004acc:	2301      	movs	r3, #1
 8004ace:	7033      	strb	r3, [r6, #0]
}
 8004ad0:	b009      	add	sp, #36	; 0x24
 8004ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad4:	20005a84 	.word	0x20005a84

08004ad8 <swc_connection_set_tx_success_callback>:
    conn->wps_conn_handle->tx_success_callback_t = cb;
 8004ad8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004ada:	f8c3 1330 	str.w	r1, [r3, #816]	; 0x330
    conn->wps_conn_handle->tx_success_parg_callback_t = conn;
 8004ade:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
}
 8004ae2:	4770      	bx	lr

08004ae4 <swc_connection_set_rx_success_callback>:
    conn->wps_conn_handle->rx_success_callback_t = cb;
 8004ae4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004ae6:	f8c3 133c 	str.w	r1, [r3, #828]	; 0x33c
    conn->wps_conn_handle->rx_success_parg_callback_t = conn;
 8004aea:	f8c3 0350 	str.w	r0, [r3, #848]	; 0x350
}
 8004aee:	4770      	bx	lr

08004af0 <swc_connection_get_payload_buffer>:
{
 8004af0:	b530      	push	{r4, r5, lr}
   *err = SWC_ERR_NONE;
 8004af2:	2500      	movs	r5, #0
{
 8004af4:	b083      	sub	sp, #12
   *err = SWC_ERR_NONE;
 8004af6:	7015      	strb	r5, [r2, #0]
    wps_get_free_slot(conn->wps_conn_handle, payload_buffer, &wps_err);
 8004af8:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8004afa:	f10d 0207 	add.w	r2, sp, #7
{
 8004afe:	460c      	mov	r4, r1
    wps_get_free_slot(conn->wps_conn_handle, payload_buffer, &wps_err);
 8004b00:	f004 f8c2 	bl	8008c88 <wps_get_free_slot>
    if (wps_err != WPS_NO_ERROR) {
 8004b04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004b08:	b103      	cbz	r3, 8004b0c <swc_connection_get_payload_buffer+0x1c>
        *payload_buffer = NULL;
 8004b0a:	6025      	str	r5, [r4, #0]
}
 8004b0c:	b003      	add	sp, #12
 8004b0e:	bd30      	pop	{r4, r5, pc}

08004b10 <swc_connection_send>:
{
 8004b10:	b500      	push	{lr}
    *err = SWC_ERR_NONE;
 8004b12:	f04f 0c00 	mov.w	ip, #0
{
 8004b16:	b083      	sub	sp, #12
    *err = SWC_ERR_NONE;
 8004b18:	f883 c000 	strb.w	ip, [r3]
    wps_send(conn->wps_conn_handle, payload_buffer, size, &wps_err);
 8004b1c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8004b1e:	f10d 0307 	add.w	r3, sp, #7
 8004b22:	f004 f8c1 	bl	8008ca8 <wps_send>
}
 8004b26:	b003      	add	sp, #12
 8004b28:	f85d fb04 	ldr.w	pc, [sp], #4

08004b2c <swc_connection_receive>:
{
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	4603      	mov	r3, r0
    *err = SWC_ERR_NONE;
 8004b30:	2000      	movs	r0, #0
{
 8004b32:	b084      	sub	sp, #16
    *err = SWC_ERR_NONE;
 8004b34:	7010      	strb	r0, [r2, #0]
{
 8004b36:	460c      	mov	r4, r1
    frame = wps_read(conn->wps_conn_handle, &wps_err);
 8004b38:	a802      	add	r0, sp, #8
 8004b3a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004b3c:	f10d 0207 	add.w	r2, sp, #7
 8004b40:	f004 f8e2 	bl	8008d08 <wps_read>
    *payload = frame.payload;
 8004b44:	9b02      	ldr	r3, [sp, #8]
}
 8004b46:	f89d 000c 	ldrb.w	r0, [sp, #12]
    *payload = frame.payload;
 8004b4a:	6023      	str	r3, [r4, #0]
}
 8004b4c:	b004      	add	sp, #16
 8004b4e:	bd10      	pop	{r4, pc}

08004b50 <swc_connection_receive_complete>:
{
 8004b50:	b500      	push	{lr}
    *err = SWC_ERR_NONE;
 8004b52:	2300      	movs	r3, #0
{
 8004b54:	b083      	sub	sp, #12
    *err = SWC_ERR_NONE;
 8004b56:	700b      	strb	r3, [r1, #0]
    wps_read_done(conn->wps_conn_handle, &wps_err);
 8004b58:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8004b5a:	f10d 0107 	add.w	r1, sp, #7
 8004b5e:	f004 f8ef 	bl	8008d40 <wps_read_done>
}
 8004b62:	b003      	add	sp, #12
 8004b64:	f85d fb04 	ldr.w	pc, [sp], #4

08004b68 <swc_setup>:
{
 8004b68:	b500      	push	{lr}
 8004b6a:	b083      	sub	sp, #12
    wps_init(&wps, node->wps_node_handle, &wps_err);
 8004b6c:	68c1      	ldr	r1, [r0, #12]
 8004b6e:	4804      	ldr	r0, [pc, #16]	; (8004b80 <swc_setup+0x18>)
 8004b70:	f10d 0207 	add.w	r2, sp, #7
 8004b74:	f003 fd5c 	bl	8008630 <wps_init>
}
 8004b78:	b003      	add	sp, #12
 8004b7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b7e:	bf00      	nop
 8004b80:	20005a98 	.word	0x20005a98

08004b84 <swc_connect>:
{
 8004b84:	b500      	push	{lr}
 8004b86:	b083      	sub	sp, #12
    wps_connect(&wps, &wps_err);
 8004b88:	4803      	ldr	r0, [pc, #12]	; (8004b98 <swc_connect+0x14>)
 8004b8a:	f10d 0107 	add.w	r1, sp, #7
 8004b8e:	f004 f80f 	bl	8008bb0 <wps_connect>
}
 8004b92:	b003      	add	sp, #12
 8004b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b98:	20005a98 	.word	0x20005a98

08004b9c <swc_connection_callbacks_processing_handler>:
    wps_process_callback(&wps);
 8004b9c:	4801      	ldr	r0, [pc, #4]	; (8004ba4 <swc_connection_callbacks_processing_handler+0x8>)
 8004b9e:	f005 bb59 	b.w	800a254 <wps_process_callback>
 8004ba2:	bf00      	nop
 8004ba4:	20005a98 	.word	0x20005a98

08004ba8 <swc_radio_irq_handler>:
{
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 *
 *  @param[in] wps  Wireless Protocol Stack instance.
 */
static inline void wps_radio_irq(wps_t *wps)
{
    if (wps->signal != WPS_CONNECT) {
 8004baa:	4c1c      	ldr	r4, [pc, #112]	; (8004c1c <swc_radio_irq_handler+0x74>)
 8004bac:	f894 337c 	ldrb.w	r3, [r4, #892]	; 0x37c
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d10f      	bne.n	8004bd4 <swc_radio_irq_handler+0x2c>
    wps->status = WPS_PROCESSING;
 8004bb4:	2301      	movs	r3, #1
        wps->current_state(wps);
 8004bb6:	4d19      	ldr	r5, [pc, #100]	; (8004c1c <swc_radio_irq_handler+0x74>)
    wps->status = WPS_PROCESSING;
 8004bb8:	f884 337d 	strb.w	r3, [r4, #893]	; 0x37d
        wps->current_state(wps);
 8004bbc:	f8d4 3318 	ldr.w	r3, [r4, #792]	; 0x318
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	4798      	blx	r3
    } while (wps->process_signal == PROCESS_SIGNAL_EXECUTE);
 8004bc4:	f894 3314 	ldrb.w	r3, [r4, #788]	; 0x314
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f7      	beq.n	8004bbc <swc_radio_irq_handler+0x14>
    wps->status = WPS_IDLE;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f884 337d 	strb.w	r3, [r4, #893]	; 0x37d
}
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
        wps->signal = WPS_RADIO_IRQ;
 8004bd4:	2201      	movs	r2, #1
 *  @param[in] wps_phy  WPS PHY instance.
 *  @param[in] signal   Input signal.
 */
static inline void phy_set_input_signal(wps_phy_t *wps_phy, phy_input_signal_t signal)
{
    wps_phy->input_signal = signal;
 8004bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bda:	f884 237c 	strb.w	r2, [r4, #892]	; 0x37c
 8004bde:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
static inline void phy_process(wps_phy_t *wps_phy)
{
    wps_phy->signal_main = PHY_SIGNAL_PROCESSING;

    do {
        wps_phy->current_state[wps_phy->state_step++](wps_phy);
 8004be2:	f504 7504 	add.w	r5, r4, #528	; 0x210
 8004be6:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8004bea:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8004bee:	1c59      	adds	r1, r3, #1
 8004bf0:	f884 1270 	strb.w	r1, [r4, #624]	; 0x270
 8004bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	4798      	blx	r3
    } while (wps_phy->signal_main == PHY_SIGNAL_PROCESSING);
 8004bfc:	f894 3211 	ldrb.w	r3, [r4, #529]	; 0x211
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d0f0      	beq.n	8004be6 <swc_radio_irq_handler+0x3e>

    if (wps_phy->current_state[wps_phy->state_step] == wps_phy->end_state) {
 8004c04:	e9d4 3289 	ldrd	r3, r2, [r4, #548]	; 0x224
 8004c08:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
 8004c0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d1cf      	bne.n	8004bb4 <swc_radio_irq_handler+0xc>
        wps_phy->current_state[wps_phy->state_step](wps_phy);
 8004c14:	4802      	ldr	r0, [pc, #8]	; (8004c20 <swc_radio_irq_handler+0x78>)
 8004c16:	4798      	blx	r3
 8004c18:	e7cc      	b.n	8004bb4 <swc_radio_irq_handler+0xc>
 8004c1a:	bf00      	nop
 8004c1c:	20005a98 	.word	0x20005a98
 8004c20:	20005ca8 	.word	0x20005ca8

08004c24 <swc_radio_spi_receive_complete_handler>:
{
 8004c24:	b538      	push	{r3, r4, r5, lr}
 *
 *  @param[in] wps  Wireless Protocol Stack instance.
 */
static inline void wps_transfer_complete(wps_t *wps)
{
    wps->signal = WPS_TRANSFER_COMPLETE;
 8004c26:	4c1a      	ldr	r4, [pc, #104]	; (8004c90 <swc_radio_spi_receive_complete_handler+0x6c>)
 8004c28:	2202      	movs	r2, #2
    wps_phy->input_signal = signal;
 8004c2a:	f240 1301 	movw	r3, #257	; 0x101
 8004c2e:	f884 237c 	strb.w	r2, [r4, #892]	; 0x37c
 8004c32:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
        wps_phy->current_state[wps_phy->state_step++](wps_phy);
 8004c36:	f504 7504 	add.w	r5, r4, #528	; 0x210
 8004c3a:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8004c3e:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8004c42:	1c59      	adds	r1, r3, #1
 8004c44:	f884 1270 	strb.w	r1, [r4, #624]	; 0x270
 8004c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	4798      	blx	r3
    } while (wps_phy->signal_main == PHY_SIGNAL_PROCESSING);
 8004c50:	f894 3211 	ldrb.w	r3, [r4, #529]	; 0x211
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d0f0      	beq.n	8004c3a <swc_radio_spi_receive_complete_handler+0x16>
    if (wps_phy->current_state[wps_phy->state_step] == wps_phy->end_state) {
 8004c58:	e9d4 3289 	ldrd	r3, r2, [r4, #548]	; 0x224
 8004c5c:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
 8004c60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00f      	beq.n	8004c88 <swc_radio_spi_receive_complete_handler+0x64>
    wps->status = WPS_PROCESSING;
 8004c68:	2301      	movs	r3, #1
        wps->current_state(wps);
 8004c6a:	4d09      	ldr	r5, [pc, #36]	; (8004c90 <swc_radio_spi_receive_complete_handler+0x6c>)
    wps->status = WPS_PROCESSING;
 8004c6c:	f884 337d 	strb.w	r3, [r4, #893]	; 0x37d
        wps->current_state(wps);
 8004c70:	f8d4 3318 	ldr.w	r3, [r4, #792]	; 0x318
 8004c74:	4628      	mov	r0, r5
 8004c76:	4798      	blx	r3
    } while (wps->process_signal == PROCESS_SIGNAL_EXECUTE);
 8004c78:	f894 3314 	ldrb.w	r3, [r4, #788]	; 0x314
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f7      	beq.n	8004c70 <swc_radio_spi_receive_complete_handler+0x4c>
    wps->status = WPS_IDLE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	f884 337d 	strb.w	r3, [r4, #893]	; 0x37d
}
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
        wps_phy->current_state[wps_phy->state_step](wps_phy);
 8004c88:	4802      	ldr	r0, [pc, #8]	; (8004c94 <swc_radio_spi_receive_complete_handler+0x70>)
 8004c8a:	4798      	blx	r3
 8004c8c:	e7ec      	b.n	8004c68 <swc_radio_spi_receive_complete_handler+0x44>
 8004c8e:	bf00      	nop
 8004c90:	20005a98 	.word	0x20005a98
 8004c94:	20005ca8 	.word	0x20005ca8

08004c98 <generate_freq_table>:
 *  @param[in] channels       The channel table.
 *  @param[in] channel_count  The number of channels counted inside the sequence.
 *  @param[in] size           The size of the channel sequence.
 */
static void generate_freq_table(uint8_t *table, uint32_t *channels, uint8_t *channel_count, uint8_t size)
{
 8004c98:	b570      	push	{r4, r5, r6, lr}
    *channel_count = 0;
 8004c9a:	2400      	movs	r4, #0
 8004c9c:	7014      	strb	r4, [r2, #0]
    for (uint8_t i = 0; i < size; i++) {
 8004c9e:	b1d3      	cbz	r3, 8004cd6 <generate_freq_table+0x3e>
 8004ca0:	1e5d      	subs	r5, r3, #1
 8004ca2:	b2ed      	uxtb	r5, r5
 8004ca4:	1f0c      	subs	r4, r1, #4
 8004ca6:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8004caa:	1e46      	subs	r6, r0, #1
 8004cac:	f100 0e04 	add.w	lr, r0, #4
        if (!is_in_table(table, MAX_CHANNEL_COUNT, channels[i])) {
 8004cb0:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8004cb4:	4633      	mov	r3, r6
 8004cb6:	fa5f fc81 	uxtb.w	ip, r1
        if (table[i] == channel) {
 8004cba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004cbe:	4561      	cmp	r1, ip
 8004cc0:	d007      	beq.n	8004cd2 <generate_freq_table+0x3a>
    for (uint8_t i = 0; i < size; i++) {
 8004cc2:	4573      	cmp	r3, lr
 8004cc4:	d1f9      	bne.n	8004cba <generate_freq_table+0x22>
            table[*channel_count] = channels[i];
 8004cc6:	7813      	ldrb	r3, [r2, #0]
 8004cc8:	f800 c003 	strb.w	ip, [r0, r3]
            (*channel_count)++;
 8004ccc:	7813      	ldrb	r3, [r2, #0]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	7013      	strb	r3, [r2, #0]
    for (uint8_t i = 0; i < size; i++) {
 8004cd2:	42ac      	cmp	r4, r5
 8004cd4:	d1ec      	bne.n	8004cb0 <generate_freq_table+0x18>
        }
    }
}
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}

08004cd8 <link_channel_hopping_init>:
{
 8004cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cdc:	b086      	sub	sp, #24
 8004cde:	4604      	mov	r4, r0
    uint8_t freq_table1[MAX_CHANNEL_COUNT] = {0xff};
 8004ce0:	20ff      	movs	r0, #255	; 0xff
 8004ce2:	9002      	str	r0, [sp, #8]
    uint8_t freq_table2[MAX_CHANNEL_COUNT] = {0xff};
 8004ce4:	9004      	str	r0, [sp, #16]
    uint8_t freq_table1[MAX_CHANNEL_COUNT] = {0xff};
 8004ce6:	2000      	movs	r0, #0
    memset(channel_hopping, 0, sizeof(channel_hopping_t));
 8004ce8:	6020      	str	r0, [r4, #0]
 8004cea:	60a0      	str	r0, [r4, #8]
 8004cec:	60e0      	str	r0, [r4, #12]
{
 8004cee:	4615      	mov	r5, r2
    channel_hopping->channel_sequence = channel_sequence;
 8004cf0:	6061      	str	r1, [r4, #4]
{
 8004cf2:	461f      	mov	r7, r3
    uint8_t freq_table1[MAX_CHANNEL_COUNT] = {0xff};
 8004cf4:	f88d 000c 	strb.w	r0, [sp, #12]
    generate_freq_table(freq_table1, channel_hopping->channel_sequence->channel, &channel_count, channel_hopping->channel_sequence->sequence_size);
 8004cf8:	790b      	ldrb	r3, [r1, #4]
    uint8_t freq_table2[MAX_CHANNEL_COUNT] = {0xff};
 8004cfa:	f88d 0014 	strb.w	r0, [sp, #20]
    generate_freq_table(freq_table1, channel_hopping->channel_sequence->channel, &channel_count, channel_hopping->channel_sequence->sequence_size);
 8004cfe:	6809      	ldr	r1, [r1, #0]
 8004d00:	f10d 0207 	add.w	r2, sp, #7
 8004d04:	a802      	add	r0, sp, #8
 8004d06:	f7ff ffc7 	bl	8004c98 <generate_freq_table>
    if (random_sequence_enabled) {
 8004d0a:	bb35      	cbnz	r5, 8004d5a <link_channel_hopping_init+0x82>
        for (uint8_t i = 0; i < channel_count; i++) {
 8004d0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004d10:	2a00      	cmp	r2, #0
 8004d12:	d051      	beq.n	8004db8 <link_channel_hopping_init+0xe0>
            freq_table2[i] = freq_table1[i];
 8004d14:	a902      	add	r1, sp, #8
 8004d16:	a804      	add	r0, sp, #16
 8004d18:	f00d f828 	bl	8011d6c <memcpy>
        channel_hopping->channel_lookup_table[freq_table1[i]] = freq_table2[i];
 8004d1c:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8004d20:	f10d 0511 	add.w	r5, sp, #17
    generate_freq_table(freq_table1, channel_hopping->channel_sequence->channel, &channel_count, channel_hopping->channel_sequence->sequence_size);
 8004d24:	6861      	ldr	r1, [r4, #4]
 8004d26:	a802      	add	r0, sp, #8
 8004d28:	790b      	ldrb	r3, [r1, #4]
 8004d2a:	6809      	ldr	r1, [r1, #0]
 8004d2c:	f10d 0207 	add.w	r2, sp, #7
 8004d30:	f7ff ffb2 	bl	8004c98 <generate_freq_table>
        channel_hopping->channel_lookup_table[freq_table1[i]] = freq_table2[i];
 8004d34:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004d38:	f10d 020d 	add.w	r2, sp, #13
 8004d3c:	4423      	add	r3, r4
    for (uint8_t i = 0; i < MAX_CHANNEL_COUNT; i++) {
 8004d3e:	4290      	cmp	r0, r2
        channel_hopping->channel_lookup_table[freq_table1[i]] = freq_table2[i];
 8004d40:	721e      	strb	r6, [r3, #8]
    for (uint8_t i = 0; i < MAX_CHANNEL_COUNT; i++) {
 8004d42:	d007      	beq.n	8004d54 <link_channel_hopping_init+0x7c>
        channel_hopping->channel_lookup_table[freq_table1[i]] = freq_table2[i];
 8004d44:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004d48:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004d4c:	4423      	add	r3, r4
    for (uint8_t i = 0; i < MAX_CHANNEL_COUNT; i++) {
 8004d4e:	4290      	cmp	r0, r2
        channel_hopping->channel_lookup_table[freq_table1[i]] = freq_table2[i];
 8004d50:	721e      	strb	r6, [r3, #8]
    for (uint8_t i = 0; i < MAX_CHANNEL_COUNT; i++) {
 8004d52:	d1f7      	bne.n	8004d44 <link_channel_hopping_init+0x6c>
}
 8004d54:	b006      	add	sp, #24
 8004d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        generate_random_hop_sequence(freq_table2, freq_table1, channel_count, random_sequence_seed);
 8004d5a:	f89d 6007 	ldrb.w	r6, [sp, #7]
 */
static void generate_random_hop_sequence(uint8_t *table_out, uint8_t *table_in, uint8_t channel_count, uint8_t seed)
{
    uint8_t rand_num;

    srand(seed + 2); /* Avoid seed value 1 which reset the seed by adding 2*/
 8004d5e:	1cb8      	adds	r0, r7, #2
 8004d60:	f00d f914 	bl	8011f8c <srand>
    for (uint8_t i = 0; i < channel_count; i++) {
 8004d64:	b346      	cbz	r6, 8004db8 <link_channel_hopping_init+0xe0>
 8004d66:	1e77      	subs	r7, r6, #1
 8004d68:	b2ff      	uxtb	r7, r7
 8004d6a:	f10d 0511 	add.w	r5, sp, #17
 8004d6e:	f10d 0a10 	add.w	sl, sp, #16
 8004d72:	eb05 0907 	add.w	r9, r5, r7
 8004d76:	eb0a 0806 	add.w	r8, sl, r6
        rand_num = rand() % (channel_count - i);
 8004d7a:	f00d f935 	bl	8011fe8 <rand>
 8004d7e:	eba8 030a 	sub.w	r3, r8, sl
 8004d82:	fb90 f2f3 	sdiv	r2, r0, r3
 8004d86:	fb02 0013 	mls	r0, r2, r3, r0
 8004d8a:	b2c3      	uxtb	r3, r0
        table_out[i] = table_in[rand_num];
 8004d8c:	a902      	add	r1, sp, #8
        for (uint8_t j = rand_num; j <  channel_count; j++) {
            table_in[j] = table_in[j + 1];
 8004d8e:	1afa      	subs	r2, r7, r3
        table_out[i] = table_in[rand_num];
 8004d90:	5cc8      	ldrb	r0, [r1, r3]
 8004d92:	f80a 0b01 	strb.w	r0, [sl], #1
 8004d96:	a802      	add	r0, sp, #8
            table_in[j] = table_in[j + 1];
 8004d98:	1c59      	adds	r1, r3, #1
 8004d9a:	b2d2      	uxtb	r2, r2
        table_out[i] = table_in[rand_num];
 8004d9c:	4418      	add	r0, r3
        for (uint8_t j = rand_num; j <  channel_count; j++) {
 8004d9e:	429e      	cmp	r6, r3
            table_in[j] = table_in[j + 1];
 8004da0:	ab02      	add	r3, sp, #8
 8004da2:	f102 0201 	add.w	r2, r2, #1
 8004da6:	4419      	add	r1, r3
        for (uint8_t j = rand_num; j <  channel_count; j++) {
 8004da8:	d901      	bls.n	8004dae <link_channel_hopping_init+0xd6>
            table_in[j] = table_in[j + 1];
 8004daa:	f00c ffed 	bl	8011d88 <memmove>
    for (uint8_t i = 0; i < channel_count; i++) {
 8004dae:	45ca      	cmp	sl, r9
 8004db0:	d1e3      	bne.n	8004d7a <link_channel_hopping_init+0xa2>
        channel_hopping->channel_lookup_table[freq_table1[i]] = freq_table2[i];
 8004db2:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8004db6:	e7b5      	b.n	8004d24 <link_channel_hopping_init+0x4c>
    for (uint8_t i = 0; i < channel_count; i++) {
 8004db8:	26ff      	movs	r6, #255	; 0xff
 8004dba:	f10d 0511 	add.w	r5, sp, #17
 8004dbe:	e7b1      	b.n	8004d24 <link_channel_hopping_init+0x4c>

08004dc0 <link_channel_hopping_increment_sequence>:
    for (uint8_t i = 0; i < increment; i++) {
 8004dc0:	b189      	cbz	r1, 8004de6 <link_channel_hopping_increment_sequence+0x26>
        channel_hopping->hop_seq_index = (channel_hopping->hop_seq_index + 1) % channel_hopping->channel_sequence->sequence_size;
 8004dc2:	6842      	ldr	r2, [r0, #4]
 8004dc4:	7803      	ldrb	r3, [r0, #0]
{
 8004dc6:	b510      	push	{r4, lr}
        channel_hopping->hop_seq_index = (channel_hopping->hop_seq_index + 1) % channel_hopping->channel_sequence->sequence_size;
 8004dc8:	6854      	ldr	r4, [r2, #4]
 8004dca:	2200      	movs	r2, #0
    for (uint8_t i = 0; i < increment; i++) {
 8004dcc:	3201      	adds	r2, #1
        channel_hopping->hop_seq_index = (channel_hopping->hop_seq_index + 1) % channel_hopping->channel_sequence->sequence_size;
 8004dce:	3301      	adds	r3, #1
    for (uint8_t i = 0; i < increment; i++) {
 8004dd0:	fa5f fc82 	uxtb.w	ip, r2
        channel_hopping->hop_seq_index = (channel_hopping->hop_seq_index + 1) % channel_hopping->channel_sequence->sequence_size;
 8004dd4:	fbb3 fef4 	udiv	lr, r3, r4
    for (uint8_t i = 0; i < increment; i++) {
 8004dd8:	4561      	cmp	r1, ip
        channel_hopping->hop_seq_index = (channel_hopping->hop_seq_index + 1) % channel_hopping->channel_sequence->sequence_size;
 8004dda:	fb04 331e 	mls	r3, r4, lr, r3
 8004dde:	b2db      	uxtb	r3, r3
    for (uint8_t i = 0; i < increment; i++) {
 8004de0:	d8f4      	bhi.n	8004dcc <link_channel_hopping_increment_sequence+0xc>
 8004de2:	7003      	strb	r3, [r0, #0]
}
 8004de4:	bd10      	pop	{r4, pc}
 8004de6:	4770      	bx	lr

08004de8 <link_channel_hopping_set_seq_index>:
    channel_hopping->hop_seq_index = seq_index;
 8004de8:	7001      	strb	r1, [r0, #0]
}
 8004dea:	4770      	bx	lr

08004dec <link_channel_hopping_get_seq_index>:
}
 8004dec:	7800      	ldrb	r0, [r0, #0]
 8004dee:	4770      	bx	lr

08004df0 <link_channel_hopping_get_channel>:
    return channel_hopping->channel_lookup_table[channel_hopping->channel_sequence->channel[channel_hopping->hop_seq_index]];
 8004df0:	6843      	ldr	r3, [r0, #4]
 8004df2:	7802      	ldrb	r2, [r0, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfa:	4418      	add	r0, r3
}
 8004dfc:	7a00      	ldrb	r0, [r0, #8]
 8004dfe:	4770      	bx	lr

08004e00 <link_fallback_init>:
#include "link_fallback.h"

/* PUBLIC FUNCTION PROTOTYPES *************************************************/
void link_fallback_init(link_fallback_t *link_fallback, uint8_t *threshold, uint8_t threshold_count)
{
    link_fallback->threshold = threshold;
 8004e00:	6001      	str	r1, [r0, #0]
    link_fallback->threshold_count = threshold_count;
 8004e02:	7102      	strb	r2, [r0, #4]
}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop

08004e08 <link_fallback_get_channel_index>:

uint8_t link_fallback_get_channel_index(link_fallback_t *link_fallback, uint8_t payload_size)
{
 8004e08:	4603      	mov	r3, r0
    for (uint8_t i = 0; i < link_fallback->threshold_count; i++) {
 8004e0a:	7900      	ldrb	r0, [r0, #4]
 8004e0c:	b1c0      	cbz	r0, 8004e40 <link_fallback_get_channel_index+0x38>
 8004e0e:	681a      	ldr	r2, [r3, #0]
        if (payload_size <= link_fallback->threshold[i]) {
 8004e10:	2300      	movs	r3, #0
{
 8004e12:	b500      	push	{lr}
 8004e14:	3a01      	subs	r2, #1
 8004e16:	469c      	mov	ip, r3
 8004e18:	e003      	b.n	8004e22 <link_fallback_get_channel_index+0x1a>
    for (uint8_t i = 0; i < link_fallback->threshold_count; i++) {
 8004e1a:	fa5f fc83 	uxtb.w	ip, r3
 8004e1e:	4560      	cmp	r0, ip
 8004e20:	d90b      	bls.n	8004e3a <link_fallback_get_channel_index+0x32>
        if (payload_size <= link_fallback->threshold[i]) {
 8004e22:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 8004e26:	458e      	cmp	lr, r1
    for (uint8_t i = 0; i < link_fallback->threshold_count; i++) {
 8004e28:	f103 0301 	add.w	r3, r3, #1
        if (payload_size <= link_fallback->threshold[i]) {
 8004e2c:	d3f5      	bcc.n	8004e1a <link_fallback_get_channel_index+0x12>
            return i + 1;
 8004e2e:	f10c 0c01 	add.w	ip, ip, #1
 8004e32:	fa5f f08c 	uxtb.w	r0, ip
        }
    }
    return 0;
}
 8004e36:	f85d fb04 	ldr.w	pc, [sp], #4
    return 0;
 8004e3a:	2000      	movs	r0, #0
}
 8004e3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop

08004e44 <link_protocol_init>:
#include "link_protocol.h"

/* PUBLIC FUNCTIONS ***********************************************************/
void link_protocol_init(link_protocol_t *link_protocol, link_protocol_init_cfg_t *link_protocol_cfg, link_error_t *err)
{
    *err = LINK_PROTO_NO_ERROR;
 8004e44:	2300      	movs	r3, #0
 8004e46:	7013      	strb	r3, [r2, #0]
    link_protocol->max_buffer_size = link_protocol_cfg->buffer_size;
 8004e48:	880a      	ldrh	r2, [r1, #0]
 8004e4a:	8082      	strh	r2, [r0, #4]
    link_protocol->current_number_of_protocol = 0;
    link_protocol->current_buffer_offset = 0;
    link_protocol->index = 0;
 8004e4c:	8003      	strh	r3, [r0, #0]
    link_protocol->current_number_of_protocol = 0;
 8004e4e:	7083      	strb	r3, [r0, #2]
}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop

08004e54 <link_protocol_add>:

void link_protocol_add(link_protocol_t *link_protocol, link_protocol_cfg_t *protocol_cfg, link_error_t *err)
{
    *err = LINK_PROTO_NO_ERROR;
 8004e54:	2300      	movs	r3, #0
 8004e56:	7013      	strb	r3, [r2, #0]
    if (link_protocol->current_number_of_protocol < MAX_NUMBER_OF_PROTOCOL) {
 8004e58:	7883      	ldrb	r3, [r0, #2]
 8004e5a:	2b09      	cmp	r3, #9
 8004e5c:	d81c      	bhi.n	8004e98 <link_protocol_add+0x44>
{
 8004e5e:	b510      	push	{r4, lr}
        if (link_protocol->current_buffer_offset < (link_protocol->max_buffer_size)) {
 8004e60:	f890 c001 	ldrb.w	ip, [r0, #1]
 8004e64:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 8004e68:	45e6      	cmp	lr, ip
 8004e6a:	d918      	bls.n	8004e9e <link_protocol_add+0x4a>
            link_protocol->current_number_of_protocol++;
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	b2db      	uxtb	r3, r3
            link_protocol->protocol_info[link_protocol->current_number_of_protocol - 1].index   = link_protocol->current_buffer_offset;
 8004e70:	1e5a      	subs	r2, r3, #1
 8004e72:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004e76:	eb00 0282 	add.w	r2, r0, r2, lsl #2
            link_protocol->current_number_of_protocol++;
 8004e7a:	7083      	strb	r3, [r0, #2]
            link_protocol->protocol_info[link_protocol->current_number_of_protocol - 1].index   = link_protocol->current_buffer_offset;
 8004e7c:	f882 c00c 	strb.w	ip, [r2, #12]
            link_protocol->protocol_info[link_protocol->current_number_of_protocol - 1].instance = protocol_cfg->instance;
 8004e80:	680b      	ldr	r3, [r1, #0]
 8004e82:	6093      	str	r3, [r2, #8]
            link_protocol->protocol_info[link_protocol->current_number_of_protocol - 1].size     = protocol_cfg->size;
 8004e84:	790b      	ldrb	r3, [r1, #4]
 8004e86:	6113      	str	r3, [r2, #16]
            link_protocol->protocol_info[link_protocol->current_number_of_protocol - 1].send     = protocol_cfg->send;
            link_protocol->protocol_info[link_protocol->current_number_of_protocol - 1].receive  = protocol_cfg->receive;
            link_protocol->current_buffer_offset += protocol_cfg->size;
 8004e88:	449c      	add	ip, r3
            link_protocol->protocol_info[link_protocol->current_number_of_protocol - 1].receive  = protocol_cfg->receive;
 8004e8a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8004e8e:	e9c2 4305 	strd	r4, r3, [r2, #20]
            link_protocol->current_buffer_offset += protocol_cfg->size;
 8004e92:	f880 c001 	strb.w	ip, [r0, #1]
            *err = LINK_PROTO_NO_MORE_SPACE;
        }
    } else {
        *err = LINK_PROTO_TOO_MANY_PROTO;
    }
}
 8004e96:	bd10      	pop	{r4, pc}
        *err = LINK_PROTO_TOO_MANY_PROTO;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	7013      	strb	r3, [r2, #0]
 8004e9c:	4770      	bx	lr
            *err = LINK_PROTO_NO_MORE_SPACE;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	7013      	strb	r3, [r2, #0]
}
 8004ea2:	bd10      	pop	{r4, pc}

08004ea4 <link_protocol_send_buffer>:

void link_protocol_send_buffer(void *link_protocol, uint8_t *buffer_to_send, uint32_t *size)
{
 8004ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    link_protocol_t *link_proto = (link_protocol_t *)link_protocol;
    uint32_t size_to_send       = 0;

    for (uint8_t i = 0; i < link_proto->current_number_of_protocol; i++) {
 8004ea8:	7885      	ldrb	r5, [r0, #2]
{
 8004eaa:	4690      	mov	r8, r2
    for (uint8_t i = 0; i < link_proto->current_number_of_protocol; i++) {
 8004eac:	b1a5      	cbz	r5, 8004ed8 <link_protocol_send_buffer+0x34>
 8004eae:	2600      	movs	r6, #0
 8004eb0:	4681      	mov	r9, r0
 8004eb2:	460f      	mov	r7, r1
    uint32_t size_to_send       = 0;
 8004eb4:	4635      	mov	r5, r6
 8004eb6:	4633      	mov	r3, r6
        link_proto->protocol_info[i].send(link_proto->protocol_info[i].instance,
 8004eb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ebc:	eb09 0483 	add.w	r4, r9, r3, lsl #2
 8004ec0:	1979      	adds	r1, r7, r5
 8004ec2:	6963      	ldr	r3, [r4, #20]
 8004ec4:	68a0      	ldr	r0, [r4, #8]
 8004ec6:	4798      	blx	r3
    for (uint8_t i = 0; i < link_proto->current_number_of_protocol; i++) {
 8004ec8:	3601      	adds	r6, #1
 8004eca:	f899 2002 	ldrb.w	r2, [r9, #2]
                                          buffer_to_send + size_to_send);
        size_to_send += link_proto->protocol_info[i].size;
 8004ece:	6921      	ldr	r1, [r4, #16]
    for (uint8_t i = 0; i < link_proto->current_number_of_protocol; i++) {
 8004ed0:	b2f3      	uxtb	r3, r6
 8004ed2:	429a      	cmp	r2, r3
        size_to_send += link_proto->protocol_info[i].size;
 8004ed4:	440d      	add	r5, r1
    for (uint8_t i = 0; i < link_proto->current_number_of_protocol; i++) {
 8004ed6:	d8ef      	bhi.n	8004eb8 <link_protocol_send_buffer+0x14>
    }

    *size           = size_to_send;
 8004ed8:	f8c8 5000 	str.w	r5, [r8]
}
 8004edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004ee0 <link_protocol_receive_buffer>:
{
    link_protocol_t *link_proto = (link_protocol_t *)link_protocol;
    uint32_t current_proto_size = 0;

    if (current_proto_size <= size) {
        for (uint8_t i = 0; i < link_proto->current_number_of_protocol; i++) {
 8004ee0:	7883      	ldrb	r3, [r0, #2]
 8004ee2:	b1c3      	cbz	r3, 8004f16 <link_protocol_receive_buffer+0x36>
{
 8004ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        for (uint8_t i = 0; i < link_proto->current_number_of_protocol; i++) {
 8004ee8:	2500      	movs	r5, #0
 8004eea:	4607      	mov	r7, r0
 8004eec:	4688      	mov	r8, r1
    uint32_t current_proto_size = 0;
 8004eee:	462e      	mov	r6, r5
 8004ef0:	462b      	mov	r3, r5
            link_proto->protocol_info[i].receive(link_proto->protocol_info[i].instance,
 8004ef2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ef6:	eb07 0483 	add.w	r4, r7, r3, lsl #2
 8004efa:	eb08 0106 	add.w	r1, r8, r6
 8004efe:	69a3      	ldr	r3, [r4, #24]
 8004f00:	68a0      	ldr	r0, [r4, #8]
 8004f02:	4798      	blx	r3
        for (uint8_t i = 0; i < link_proto->current_number_of_protocol; i++) {
 8004f04:	3501      	adds	r5, #1
 8004f06:	78ba      	ldrb	r2, [r7, #2]
                                                received_buffer + current_proto_size);
            current_proto_size += link_proto->protocol_info[i].size;
 8004f08:	6921      	ldr	r1, [r4, #16]
        for (uint8_t i = 0; i < link_proto->current_number_of_protocol; i++) {
 8004f0a:	b2eb      	uxtb	r3, r5
 8004f0c:	429a      	cmp	r2, r3
            current_proto_size += link_proto->protocol_info[i].size;
 8004f0e:	440e      	add	r6, r1
        for (uint8_t i = 0; i < link_proto->current_number_of_protocol; i++) {
 8004f10:	d8ef      	bhi.n	8004ef2 <link_protocol_receive_buffer+0x12>
        }
    }

}
 8004f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f16:	4770      	bx	lr

08004f18 <link_rdo_init>:
{
    link_rdo->offset = 0;
    link_rdo->enabled = true;

    if (target_rollover_value == 0) {
        link_rdo->rollover_n = DEFAULT_ROLLOVER;
 8004f18:	2900      	cmp	r1, #0
    link_rdo->offset = 0;
 8004f1a:	f04f 0200 	mov.w	r2, #0
    link_rdo->enabled = true;
 8004f1e:	f04f 0301 	mov.w	r3, #1
        link_rdo->rollover_n = DEFAULT_ROLLOVER;
 8004f22:	bf08      	it	eq
 8004f24:	210f      	moveq	r1, #15
    link_rdo->offset = 0;
 8004f26:	8002      	strh	r2, [r0, #0]
    link_rdo->enabled = true;
 8004f28:	7183      	strb	r3, [r0, #6]
    if (target_rollover_value == 0) {
 8004f2a:	8041      	strh	r1, [r0, #2]
    } else {
        link_rdo->rollover_n = target_rollover_value;
    }
}
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop

08004f30 <link_rdo_send_offset>:
 *
 *  @param[in] link_rdo  RDO module instance.
 */
static void update_offset(link_rdo_t *link_rdo)
{
    link_rdo->offset = (link_rdo->offset + 1) % link_rdo->rollover_n;
 8004f30:	8803      	ldrh	r3, [r0, #0]
 8004f32:	8842      	ldrh	r2, [r0, #2]
 8004f34:	3301      	adds	r3, #1
 8004f36:	fbb3 fcf2 	udiv	ip, r3, r2
 8004f3a:	fb02 331c 	mls	r3, r2, ip, r3
 8004f3e:	8003      	strh	r3, [r0, #0]
    if (buffer_to_send != NULL) {
 8004f40:	b119      	cbz	r1, 8004f4a <link_rdo_send_offset+0x1a>
        rdo_inst->offset_u8[0] = (rdo_inst->offset >> 8) & 0x00FF;
 8004f42:	ba5b      	rev16	r3, r3
 8004f44:	8083      	strh	r3, [r0, #4]
        memcpy(buffer_to_send, rdo_inst->offset_u8, sizeof(uint16_t));
 8004f46:	8883      	ldrh	r3, [r0, #4]
 8004f48:	800b      	strh	r3, [r1, #0]
}
 8004f4a:	4770      	bx	lr

08004f4c <link_rdo_set_offset>:
    link_rdo->offset = (link_rdo->offset + 1) % link_rdo->rollover_n;
 8004f4c:	8803      	ldrh	r3, [r0, #0]
 8004f4e:	8842      	ldrh	r2, [r0, #2]
 8004f50:	3301      	adds	r3, #1
 8004f52:	fbb3 fcf2 	udiv	ip, r3, r2
 8004f56:	fb02 331c 	mls	r3, r2, ip, r3
 8004f5a:	8003      	strh	r3, [r0, #0]
    if (buffer_to_received != NULL) {
 8004f5c:	b131      	cbz	r1, 8004f6c <link_rdo_set_offset+0x20>
        memcpy(&rdo_inst->offset_u8, buffer_to_received, sizeof(uint16_t));
 8004f5e:	880b      	ldrh	r3, [r1, #0]
 8004f60:	8083      	strh	r3, [r0, #4]
        rdo_inst->offset = (rdo_inst->offset_u8[0] << 8) | (rdo_inst->offset_u8[1]);
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	0a1b      	lsrs	r3, r3, #8
 8004f66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f6a:	8003      	strh	r3, [r0, #0]
}
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop

08004f70 <link_rdo_get_offset>:
    return link_rdo->enabled ? link_rdo->offset : 0;
 8004f70:	7983      	ldrb	r3, [r0, #6]
 8004f72:	b10b      	cbz	r3, 8004f78 <link_rdo_get_offset+0x8>
 8004f74:	8800      	ldrh	r0, [r0, #0]
 8004f76:	4770      	bx	lr
 8004f78:	4618      	mov	r0, r3
}
 8004f7a:	4770      	bx	lr

08004f7c <link_saw_arq_init>:
/* INCLUDES *******************************************************************/
#include "link_saw_arq.h"

/* PUBLIC FUNCTIONS ***********************************************************/
void link_saw_arq_init(saw_arq_t *saw_arq, uint16_t ttl_ms, uint16_t ttl_retries, bool init_board_seq, bool enable)
{
 8004f7c:	f89d c000 	ldrb.w	ip, [sp]
    saw_arq->ttl_ms          = ttl_ms;
    saw_arq->ttl_retries      = ttl_retries;
    saw_arq->seq_num         = init_board_seq;
 8004f80:	7283      	strb	r3, [r0, #10]
    saw_arq->ttl_ms          = ttl_ms;
 8004f82:	2300      	movs	r3, #0
    saw_arq->duplicate       = false;
    saw_arq->duplicate_count = 0;
    saw_arq->retry_count     = 0;
 8004f84:	e9c0 3303 	strd	r3, r3, [r0, #12]
    saw_arq->enable          = enable;
 8004f88:	f880 c014 	strb.w	ip, [r0, #20]
    saw_arq->ttl_ms          = ttl_ms;
 8004f8c:	6001      	str	r1, [r0, #0]
    saw_arq->ttl_retries      = ttl_retries;
 8004f8e:	8102      	strh	r2, [r0, #8]
    saw_arq->ttl_ms          = ttl_ms;
 8004f90:	6043      	str	r3, [r0, #4]
    saw_arq->duplicate       = false;
 8004f92:	72c3      	strb	r3, [r0, #11]
}
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop

08004f98 <link_saw_arq_is_frame_timeout>:

bool link_saw_arq_is_frame_timeout(saw_arq_t *saw_arq, uint64_t time_stamp, uint16_t retry_count, uint64_t current_time)
{
 8004f98:	b470      	push	{r4, r5, r6}
    bool time_timeout;
    bool retries_timeout;
    bool timeout;
    uint16_t delta_t = current_time - time_stamp;

    if (!saw_arq->enable) {
 8004f9a:	7d03      	ldrb	r3, [r0, #20]
{
 8004f9c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8004fa0:	9905      	ldr	r1, [sp, #20]
    if (!saw_arq->enable) {
 8004fa2:	b1e3      	cbz	r3, 8004fde <link_saw_arq_is_frame_timeout+0x46>
        return true;
    }

    if (saw_arq->ttl_ms == 0) {
 8004fa4:	e9d0 6500 	ldrd	r6, r5, [r0]
 8004fa8:	ea56 0c05 	orrs.w	ip, r6, r5
 8004fac:	d10a      	bne.n	8004fc4 <link_saw_arq_is_frame_timeout+0x2c>
        time_timeout = false;
    } else {
        time_timeout = (delta_t >= saw_arq->ttl_ms);
    }

    if (saw_arq->ttl_retries == 0) {
 8004fae:	8902      	ldrh	r2, [r0, #8]
 8004fb0:	b9ca      	cbnz	r2, 8004fe6 <link_saw_arq_is_frame_timeout+0x4e>
        retries_timeout = false;
    } else {
        retries_timeout = (retry_count >= saw_arq->ttl_retries);
    }

    timeout = (time_timeout || retries_timeout);
 8004fb2:	4623      	mov	r3, r4

    if ((retry_count > 0) && (timeout == false)) {
 8004fb4:	b1a4      	cbz	r4, 8004fe0 <link_saw_arq_is_frame_timeout+0x48>
        saw_arq->retry_count++;
 8004fb6:	6902      	ldr	r2, [r0, #16]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	3201      	adds	r2, #1
 8004fbc:	6102      	str	r2, [r0, #16]
    }

    return timeout;
}
 8004fbe:	bc70      	pop	{r4, r5, r6}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	4770      	bx	lr
    uint16_t delta_t = current_time - time_stamp;
 8004fc4:	1a8a      	subs	r2, r1, r2
    if (saw_arq->ttl_retries == 0) {
 8004fc6:	8901      	ldrh	r1, [r0, #8]
        time_timeout = (delta_t >= saw_arq->ttl_ms);
 8004fc8:	b292      	uxth	r2, r2
 8004fca:	f04f 0c00 	mov.w	ip, #0
    if (saw_arq->ttl_retries == 0) {
 8004fce:	b979      	cbnz	r1, 8004ff0 <link_saw_arq_is_frame_timeout+0x58>
    timeout = (time_timeout || retries_timeout);
 8004fd0:	42b2      	cmp	r2, r6
 8004fd2:	eb71 0205 	sbcs.w	r2, r1, r5
 8004fd6:	d3ec      	bcc.n	8004fb2 <link_saw_arq_is_frame_timeout+0x1a>
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	bc70      	pop	{r4, r5, r6}
 8004fdc:	4770      	bx	lr
        return true;
 8004fde:	2301      	movs	r3, #1
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	bc70      	pop	{r4, r5, r6}
 8004fe4:	4770      	bx	lr
    timeout = (time_timeout || retries_timeout);
 8004fe6:	4294      	cmp	r4, r2
 8004fe8:	d3e3      	bcc.n	8004fb2 <link_saw_arq_is_frame_timeout+0x1a>
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	bc70      	pop	{r4, r5, r6}
 8004fee:	4770      	bx	lr
    timeout = (time_timeout || retries_timeout);
 8004ff0:	42b2      	cmp	r2, r6
 8004ff2:	eb7c 0205 	sbcs.w	r2, ip, r5
 8004ff6:	d2f3      	bcs.n	8004fe0 <link_saw_arq_is_frame_timeout+0x48>
 8004ff8:	42a1      	cmp	r1, r4
 8004ffa:	d8da      	bhi.n	8004fb2 <link_saw_arq_is_frame_timeout+0x1a>
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bc70      	pop	{r4, r5, r6}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop

08005004 <link_saw_arq_get_seq_num>:

bool link_saw_arq_get_seq_num(saw_arq_t *saw_arq)
{
    return saw_arq->seq_num;
}
 8005004:	7a80      	ldrb	r0, [r0, #10]
 8005006:	4770      	bx	lr

08005008 <link_saw_arq_inc_seq_num>:

void link_saw_arq_inc_seq_num(saw_arq_t *saw_arq)
{
    saw_arq->seq_num = !saw_arq->seq_num;
 8005008:	7a83      	ldrb	r3, [r0, #10]
 800500a:	f083 0301 	eor.w	r3, r3, #1
 800500e:	7283      	strb	r3, [r0, #10]
}
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop

08005014 <link_saw_arq_update_rx_seq_num>:

void link_saw_arq_update_rx_seq_num(saw_arq_t *saw_arq, bool seq_num)
{
    saw_arq->duplicate = (seq_num == saw_arq->seq_num);
 8005014:	7a83      	ldrb	r3, [r0, #10]
    saw_arq->seq_num = seq_num;
 8005016:	7281      	strb	r1, [r0, #10]
    saw_arq->duplicate = (seq_num == saw_arq->seq_num);
 8005018:	1a5b      	subs	r3, r3, r1
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	72c3      	strb	r3, [r0, #11]
}
 8005022:	4770      	bx	lr

08005024 <link_saw_arq_is_rx_frame_duplicate>:

bool link_saw_arq_is_rx_frame_duplicate(saw_arq_t *saw_arq)
{
    if (!saw_arq->enable) {
 8005024:	7d03      	ldrb	r3, [r0, #20]
 8005026:	b123      	cbz	r3, 8005032 <link_saw_arq_is_rx_frame_duplicate+0xe>
        return false;
    }

    if (saw_arq->duplicate) {
 8005028:	7ac3      	ldrb	r3, [r0, #11]
 800502a:	b113      	cbz	r3, 8005032 <link_saw_arq_is_rx_frame_duplicate+0xe>
        saw_arq->duplicate_count++;
 800502c:	68c2      	ldr	r2, [r0, #12]
 800502e:	3201      	adds	r2, #1
 8005030:	60c2      	str	r2, [r0, #12]
    }

    return saw_arq->duplicate;
}
 8005032:	4618      	mov	r0, r3
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop

08005038 <link_scheduler_init>:
/* PUBLIC FUNCTIONS ***********************************************************/
void link_scheduler_init(scheduler_t *scheduler,
                         schedule_t  *schedule,
                         uint16_t     local_addr)
{
    memset(scheduler, 0, sizeof(scheduler_t));
 8005038:	2300      	movs	r3, #0
 800503a:	6003      	str	r3, [r0, #0]
 800503c:	6043      	str	r3, [r0, #4]
 800503e:	60c3      	str	r3, [r0, #12]
 8005040:	6083      	str	r3, [r0, #8]
    scheduler->total_time_slot_count = schedule->size;
 8005042:	684b      	ldr	r3, [r1, #4]
 8005044:	7143      	strb	r3, [r0, #5]
    scheduler->schedule = schedule;
 8005046:	6001      	str	r1, [r0, #0]
    scheduler->local_addr = local_addr;
 8005048:	8182      	strh	r2, [r0, #12]
}
 800504a:	4770      	bx	lr

0800504c <link_scheduler_increment_time_slot>:
        memset(&scheduler->schedule->timeslot[i], 0, sizeof(timeslot_t));
    }
}

uint8_t link_scheduler_increment_time_slot(scheduler_t *scheduler)
{
 800504c:	b570      	push	{r4, r5, r6, lr}
    uint8_t i = scheduler->current_time_slot_num;
    uint8_t inc_count = 0;

    scheduler->timeslot_mismatch = false;

    if (scheduler->total_time_slot_count != 0) {
 800504e:	7942      	ldrb	r2, [r0, #5]
    uint8_t i = scheduler->current_time_slot_num;
 8005050:	f890 e004 	ldrb.w	lr, [r0, #4]
    scheduler->timeslot_mismatch = false;
 8005054:	2300      	movs	r3, #0
 8005056:	73c3      	strb	r3, [r0, #15]
    if (scheduler->total_time_slot_count != 0) {
 8005058:	b1f2      	cbz	r2, 8005098 <link_scheduler_increment_time_slot+0x4c>
        timeslot_t *next_time_slot = &scheduler->schedule->timeslot[(i + 1) % scheduler->total_time_slot_count];
 800505a:	6801      	ldr	r1, [r0, #0]
 */
static inline bool time_slot_is_empty(scheduler_t *scheduler, timeslot_t *time_slot)
{
    if (time_slot->connection_main == NULL) {
        return true;
    } else if ((scheduler->tx_disabled) &&
 800505c:	7b85      	ldrb	r5, [r0, #14]
        timeslot_t *next_time_slot = &scheduler->schedule->timeslot[(i + 1) % scheduler->total_time_slot_count];
 800505e:	680c      	ldr	r4, [r1, #0]
 8005060:	f10e 0301 	add.w	r3, lr, #1
 8005064:	fbb3 f1f2 	udiv	r1, r3, r2
 8005068:	fb02 3311 	mls	r3, r2, r1, r3
    if (time_slot->connection_main == NULL) {
 800506c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
        timeslot_t *next_time_slot = &scheduler->schedule->timeslot[(i + 1) % scheduler->total_time_slot_count];
 8005070:	4694      	mov	ip, r2
    if (time_slot->connection_main == NULL) {
 8005072:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8005076:	b189      	cbz	r1, 800509c <link_scheduler_increment_time_slot+0x50>
    } else if ((scheduler->tx_disabled) &&
 8005078:	b11d      	cbz	r5, 8005082 <link_scheduler_increment_time_slot+0x36>
 800507a:	880e      	ldrh	r6, [r1, #0]
 800507c:	8982      	ldrh	r2, [r0, #12]
 800507e:	4296      	cmp	r6, r2
 8005080:	d00c      	beq.n	800509c <link_scheduler_increment_time_slot+0x50>
            scheduler->sleep_cycles += scheduler->schedule->timeslot[i].duration_pll_cycles;
 8005082:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
 8005086:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800508a:	6881      	ldr	r1, [r0, #8]
 800508c:	6892      	ldr	r2, [r2, #8]
 800508e:	4411      	add	r1, r2
            i = (i + 1) % scheduler->total_time_slot_count;
 8005090:	b2db      	uxtb	r3, r3
            scheduler->sleep_cycles += scheduler->schedule->timeslot[i].duration_pll_cycles;
 8005092:	6081      	str	r1, [r0, #8]
            inc_count++;
 8005094:	2201      	movs	r2, #1
        scheduler->current_time_slot_num = i;
 8005096:	7103      	strb	r3, [r0, #4]
}
 8005098:	4610      	mov	r0, r2
 800509a:	bd70      	pop	{r4, r5, r6, pc}
            scheduler->sleep_cycles += scheduler->schedule->timeslot[i].duration_pll_cycles;
 800509c:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
 80050a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80050a4:	6886      	ldr	r6, [r0, #8]
 80050a6:	6892      	ldr	r2, [r2, #8]
 80050a8:	4416      	add	r6, r2
            i = (i + 1) % scheduler->total_time_slot_count;
 80050aa:	b2db      	uxtb	r3, r3
            scheduler->sleep_cycles += scheduler->schedule->timeslot[i].duration_pll_cycles;
 80050ac:	6086      	str	r6, [r0, #8]
            inc_count++;
 80050ae:	2201      	movs	r2, #1
    if (time_slot->connection_main == NULL) {
 80050b0:	b131      	cbz	r1, 80050c0 <link_scheduler_increment_time_slot+0x74>
    } else if ((scheduler->tx_disabled) &&
 80050b2:	2d00      	cmp	r5, #0
 80050b4:	d0ef      	beq.n	8005096 <link_scheduler_increment_time_slot+0x4a>
 80050b6:	f8b1 e000 	ldrh.w	lr, [r1]
 80050ba:	8981      	ldrh	r1, [r0, #12]
 80050bc:	458e      	cmp	lr, r1
 80050be:	d1ea      	bne.n	8005096 <link_scheduler_increment_time_slot+0x4a>
            while (time_slot_is_empty(scheduler, &scheduler->schedule->timeslot[i])) {
 80050c0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
                scheduler->sleep_cycles += scheduler->schedule->timeslot[i].duration_pll_cycles;
 80050c4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
                i = (i + 1) % scheduler->total_time_slot_count;
 80050c8:	3301      	adds	r3, #1
                scheduler->sleep_cycles += scheduler->schedule->timeslot[i].duration_pll_cycles;
 80050ca:	6889      	ldr	r1, [r1, #8]
                i = (i + 1) % scheduler->total_time_slot_count;
 80050cc:	b2db      	uxtb	r3, r3
                scheduler->sleep_cycles += scheduler->schedule->timeslot[i].duration_pll_cycles;
 80050ce:	440e      	add	r6, r1
                i = (i + 1) % scheduler->total_time_slot_count;
 80050d0:	fbb3 f1fc 	udiv	r1, r3, ip
 80050d4:	fb0c 3311 	mls	r3, ip, r1, r3
    if (time_slot->connection_main == NULL) {
 80050d8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
                inc_count++;
 80050dc:	3201      	adds	r2, #1
    if (time_slot->connection_main == NULL) {
 80050de:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
                scheduler->sleep_cycles += scheduler->schedule->timeslot[i].duration_pll_cycles;
 80050e2:	6086      	str	r6, [r0, #8]
                inc_count++;
 80050e4:	b2d2      	uxtb	r2, r2
                i = (i + 1) % scheduler->total_time_slot_count;
 80050e6:	b2db      	uxtb	r3, r3
                inc_count++;
 80050e8:	e7e2      	b.n	80050b0 <link_scheduler_increment_time_slot+0x64>
 80050ea:	bf00      	nop

080050ec <link_scheduler_set_time_slot_i>:
    scheduler->current_time_slot_num = time_slot_i;
 80050ec:	7101      	strb	r1, [r0, #4]
}
 80050ee:	4770      	bx	lr

080050f0 <link_scheduler_enable_tx>:
    scheduler->tx_disabled = false;
 80050f0:	2300      	movs	r3, #0
 80050f2:	7383      	strb	r3, [r0, #14]
}
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop

080050f8 <link_scheduler_get_current_timeslot>:
    return &scheduler->schedule->timeslot[scheduler->current_time_slot_num];
 80050f8:	6802      	ldr	r2, [r0, #0]
 80050fa:	7903      	ldrb	r3, [r0, #4]
 80050fc:	6810      	ldr	r0, [r2, #0]
 80050fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
}
 8005102:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005106:	4770      	bx	lr

08005108 <link_scheduler_get_next_timeslot_index>:
}
 8005108:	7900      	ldrb	r0, [r0, #4]
 800510a:	4770      	bx	lr

0800510c <link_scheduler_get_sleep_time>:
}
 800510c:	6880      	ldr	r0, [r0, #8]
 800510e:	4770      	bx	lr

08005110 <link_scheduler_set_first_time_slot>:
    if (scheduler->schedule->size > 1) {
 8005110:	6803      	ldr	r3, [r0, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b01      	cmp	r3, #1
        link_scheduler_set_time_slot_i(scheduler, scheduler->schedule->size - 1);
 8005116:	bf84      	itt	hi
 8005118:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    scheduler->current_time_slot_num = time_slot_i;
 800511c:	7103      	strbhi	r3, [r0, #4]
}
 800511e:	4770      	bx	lr

08005120 <link_scheduler_reset_sleep_time>:
    scheduler->sleep_cycles = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	6083      	str	r3, [r0, #8]
}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop

08005128 <link_scheduler_set_mismatch>:
    scheduler->timeslot_mismatch = true;
 8005128:	2301      	movs	r3, #1
 800512a:	73c3      	strb	r3, [r0, #15]
}
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop

08005130 <link_scheduler_get_mismatch>:
}
 8005130:	7bc0      	ldrb	r0, [r0, #15]
 8005132:	4770      	bx	lr

08005134 <link_cca_init>:
                   uint16_t          retry_time_pll_cycles,
                   uint16_t          on_time_pll_cycles,
                   uint8_t           max_try_count,
                   cca_fail_action_t fail_action,
                   bool              enable)
{
 8005134:	f89d 3000 	ldrb.w	r3, [sp]
 8005138:	f89d c008 	ldrb.w	ip, [sp, #8]
    (void)on_time_pll_cycles;

    cca->enable                 = enable;
    cca->threshold              = threshold;
    cca->retry_time_pll_cycles  = retry_time_pll_cycles;
    cca->max_try_count          = max_try_count;
 800513c:	7043      	strb	r3, [r0, #1]
{
 800513e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cca->enable                 = enable;
 8005142:	f880 c006 	strb.w	ip, [r0, #6]
    cca->threshold              = threshold;
 8005146:	7001      	strb	r1, [r0, #0]
    cca->retry_time_pll_cycles  = retry_time_pll_cycles;
 8005148:	8082      	strh	r2, [r0, #4]
    cca->fail_action            = fail_action;
 800514a:	7083      	strb	r3, [r0, #2]
}
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop

08005150 <link_gain_loop_update>:

void link_gain_loop_update(frame_outcome_t frame_outcome, uint8_t rssi, gain_loop_t *gain_loop)
{
    uint16_t normalized_gain;

    switch (frame_outcome) {
 8005150:	b140      	cbz	r0, 8005164 <link_gain_loop_update+0x14>
 8005152:	2801      	cmp	r0, #1
 8005154:	d105      	bne.n	8005162 <link_gain_loop_update+0x12>
        }
        break;
    case FRAME_REJECTED:
        break;
    case FRAME_LOST:
        if (gain_loop->gain_index != 0) {
 8005156:	7813      	ldrb	r3, [r2, #0]
 8005158:	b113      	cbz	r3, 8005160 <link_gain_loop_update+0x10>
            gain_loop->gain_index--;
 800515a:	3b01      	subs	r3, #1
 800515c:	7013      	strb	r3, [r2, #0]
        }
        break;
    default:
        break;
    }
}
 800515e:	4770      	bx	lr
 8005160:	4770      	bx	lr
 8005162:	4770      	bx	lr
{
 8005164:	b410      	push	{r4}
        normalized_gain = calculate_normalized_gain(gain_lookup_table[gain_loop->gain_index].min_tenth_db, rssi);
 8005166:	4810      	ldr	r0, [pc, #64]	; (80051a8 <link_gain_loop_update+0x58>)
 8005168:	7814      	ldrb	r4, [r2, #0]
 800516a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 *  @param[in] rssi        Receiver signal strength indicator.
 *  @return Normalized gain in tenths of dB.
 */
static inline uint16_t calculate_normalized_gain(uint16_t min_db, uint8_t rssi)
{
    return (min_db + (GAIN_ENTRY_RANGE_TENTH_DB * (WEAKEST_SIGNAL_CODE - rssi) / WEAKEST_SIGNAL_CODE));
 800516e:	f1c1 012f 	rsb	r1, r1, #47	; 0x2f
 8005172:	8843      	ldrh	r3, [r0, #2]
 8005174:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005178:	4419      	add	r1, r3
        if (normalized_gain < (gain_lookup_table[gain_loop->gain_index].min_tenth_db + LOWER_BOUND_MARGIN_TENTH_DB) &&
 800517a:	b289      	uxth	r1, r1
 800517c:	3377      	adds	r3, #119	; 0x77
 800517e:	428b      	cmp	r3, r1
 8005180:	db05      	blt.n	800518e <link_gain_loop_update+0x3e>
 8005182:	b16c      	cbz	r4, 80051a0 <link_gain_loop_update+0x50>
            gain_loop->gain_index--;
 8005184:	3c01      	subs	r4, #1
 8005186:	7014      	strb	r4, [r2, #0]
}
 8005188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800518c:	4770      	bx	lr
        } else if (normalized_gain > (gain_lookup_table[gain_loop->gain_index].max_tenth_db - HIGHER_BOUND_MARGIN_TENTH_DB) &&
 800518e:	8883      	ldrh	r3, [r0, #4]
 8005190:	3b27      	subs	r3, #39	; 0x27
 8005192:	4299      	cmp	r1, r3
 8005194:	dbf8      	blt.n	8005188 <link_gain_loop_update+0x38>
 8005196:	2c10      	cmp	r4, #16
 8005198:	d0f6      	beq.n	8005188 <link_gain_loop_update+0x38>
            gain_loop->gain_index++;
 800519a:	3401      	adds	r4, #1
 800519c:	7014      	strb	r4, [r2, #0]
 800519e:	e7f3      	b.n	8005188 <link_gain_loop_update+0x38>
        } else if (normalized_gain > (gain_lookup_table[gain_loop->gain_index].max_tenth_db - HIGHER_BOUND_MARGIN_TENTH_DB) &&
 80051a0:	29c3      	cmp	r1, #195	; 0xc3
 80051a2:	dcfa      	bgt.n	800519a <link_gain_loop_update+0x4a>
 80051a4:	e7f0      	b.n	8005188 <link_gain_loop_update+0x38>
 80051a6:	bf00      	nop
 80051a8:	0801462c 	.word	0x0801462c

080051ac <link_gain_loop_get_gain_index>:

uint8_t link_gain_loop_get_gain_index(gain_loop_t *gain_loop)
{
    return gain_loop->gain_index;
}
 80051ac:	7800      	ldrb	r0, [r0, #0]
 80051ae:	4770      	bx	lr

080051b0 <link_gain_loop_reset_gain_index>:

void link_gain_loop_reset_gain_index(gain_loop_t *gain_loop)
{
    gain_loop->gain_index = 0;
 80051b0:	2300      	movs	r3, #0
 80051b2:	7003      	strb	r3, [r0, #0]
}
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop

080051b8 <link_gain_loop_get_gain_value>:

uint8_t link_gain_loop_get_gain_value(gain_loop_t *gain_loop)
{
    if (gain_loop->fixed_gain_enable) {
 80051b8:	7843      	ldrb	r3, [r0, #1]
 80051ba:	b10b      	cbz	r3, 80051c0 <link_gain_loop_get_gain_value+0x8>
        return gain_loop->rx_gain;
 80051bc:	7880      	ldrb	r0, [r0, #2]
 80051be:	4770      	bx	lr
    } else {
        return gain_lookup_table[gain_loop->gain_index].gain_value;
 80051c0:	4b02      	ldr	r3, [pc, #8]	; (80051cc <link_gain_loop_get_gain_value+0x14>)
 80051c2:	7802      	ldrb	r2, [r0, #0]
 80051c4:	f813 0032 	ldrb.w	r0, [r3, r2, lsl #3]
    }
}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	0801462c 	.word	0x0801462c

080051d0 <link_gain_loop_get_min_tenth_db>:

uint16_t link_gain_loop_get_min_tenth_db(uint8_t gain_index)
{
    return gain_lookup_table[gain_index].min_tenth_db;
 80051d0:	4b02      	ldr	r3, [pc, #8]	; (80051dc <link_gain_loop_get_min_tenth_db+0xc>)
 80051d2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
 80051d6:	8840      	ldrh	r0, [r0, #2]
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	0801462c 	.word	0x0801462c

080051e0 <link_gain_loop_get_rnsi_tenth_db>:

uint16_t link_gain_loop_get_rnsi_tenth_db(uint8_t gain_index)
{
    return gain_lookup_table[gain_index].rnsi_tenth_db;
 80051e0:	4b02      	ldr	r3, [pc, #8]	; (80051ec <link_gain_loop_get_rnsi_tenth_db+0xc>)
 80051e2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
 80051e6:	88c0      	ldrh	r0, [r0, #6]
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	0801462c 	.word	0x0801462c

080051f0 <link_tdma_sync_init>:
                         uint16_t preamble_size_bits,
                         uint8_t pll_startup_xtal_cycles,
                         isi_mitig_t isi_mitig,
                         uint8_t isi_mitig_pauses,
                         bool fast_sync_enable)
{
 80051f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	f89d a020 	ldrb.w	sl, [sp, #32]
 80051f8:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 80051fc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8005200:	4604      	mov	r4, r0
 8005202:	4615      	mov	r5, r2
 8005204:	460e      	mov	r6, r1
    (void)isi_mitig;
    (void)isi_mitig_pauses;
    (void)fast_sync_enable;

    memset(tdma_sync, 0, sizeof(tdma_sync_t));
 8005206:	2230      	movs	r2, #48	; 0x30
 8005208:	2100      	movs	r1, #0
{
 800520a:	4699      	mov	r9, r3
    memset(tdma_sync, 0, sizeof(tdma_sync_t));
 800520c:	f00c fdd6 	bl	8011dbc <memset>
    tdma_sync->sleep_mode                       = sleep_mode;
    tdma_sync->timeout_pll_cycles               = 2 * setup_time_pll_cycles + preamble_size_bits + sync_word_size_bits;
 8005210:	eb07 0345 	add.w	r3, r7, r5, lsl #1
    tdma_sync->setup_time_pll_cycles            = setup_time_pll_cycles;
    tdma_sync->base_target_rx_waited_pll_cycles = setup_time_pll_cycles +
                                                  preamble_size_bits +
 8005214:	4457      	add	r7, sl
    tdma_sync->setup_time_pll_cycles            = setup_time_pll_cycles;
 8005216:	8125      	strh	r5, [r4, #8]
    tdma_sync->timeout_pll_cycles               = 2 * setup_time_pll_cycles + preamble_size_bits + sync_word_size_bits;
 8005218:	4453      	add	r3, sl
                                                  preamble_size_bits +
 800521a:	443d      	add	r5, r7
                                                  sync_word_size_bits;
    tdma_sync->frame_lost_max_count             = frame_lost_max_count;
    tdma_sync->slave_sync_state                 = STATE_SYNCING;
    tdma_sync->cca_unsync_watchdog_count        = 0;

    switch (tdma_sync->sleep_mode) {
 800521c:	f5b6 4f40 	cmp.w	r6, #49152	; 0xc000
    tdma_sync->frame_lost_max_count             = frame_lost_max_count;
 8005220:	f8a4 900e 	strh.w	r9, [r4, #14]
    tdma_sync->sleep_mode                       = sleep_mode;
 8005224:	8026      	strh	r6, [r4, #0]
    tdma_sync->timeout_pll_cycles               = 2 * setup_time_pll_cycles + preamble_size_bits + sync_word_size_bits;
 8005226:	6063      	str	r3, [r4, #4]
    tdma_sync->base_target_rx_waited_pll_cycles = setup_time_pll_cycles +
 8005228:	8165      	strh	r5, [r4, #10]
    switch (tdma_sync->sleep_mode) {
 800522a:	d007      	beq.n	800523c <link_tdma_sync_init+0x4c>
 800522c:	f24c 0340 	movw	r3, #49216	; 0xc040
 8005230:	429e      	cmp	r6, r3
 8005232:	d010      	beq.n	8005256 <link_tdma_sync_init+0x66>
 8005234:	2ec0      	cmp	r6, #192	; 0xc0
 8005236:	d005      	beq.n	8005244 <link_tdma_sync_init+0x54>
        tdma_sync->sleep_offset_pll_cycles = (PLL_RATIO + ((pll_startup_xtal_cycles + 2) * PLL_RATIO));
        break;
    default:
        break;
    }
}
 8005238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tdma_sync->sleep_offset_pll_cycles = 1;
 800523c:	2301      	movs	r3, #1
 800523e:	6123      	str	r3, [r4, #16]
}
 8005240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tdma_sync->sleep_offset_pll_cycles = (PLL_RATIO + ((pll_startup_xtal_cycles + 2) * PLL_RATIO));
 8005244:	f108 0803 	add.w	r8, r8, #3
 8005248:	f240 2371 	movw	r3, #625	; 0x271
 800524c:	fb03 f308 	mul.w	r3, r3, r8
 8005250:	6123      	str	r3, [r4, #16]
}
 8005252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tdma_sync->sleep_offset_pll_cycles = PLL_RATIO;
 8005256:	f240 2371 	movw	r3, #625	; 0x271
 800525a:	6123      	str	r3, [r4, #16]
}
 800525c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005260 <link_tdma_sync_update_tx>:

void link_tdma_sync_update_tx(tdma_sync_t *tdma_sync,
                              uint32_t     duration_pll_cycles,
                              link_cca_t  *cca)
{
 8005260:	b430      	push	{r4, r5}
    duration_pll_cycles += tdma_sync->sync_slave_offset;
 8005262:	6945      	ldr	r5, [r0, #20]

    if (tdma_sync->previous_frame_type == FRAME_RX) {
 8005264:	7e04      	ldrb	r4, [r0, #24]
    duration_pll_cycles += tdma_sync->sync_slave_offset;
 8005266:	4429      	add	r1, r5
    if (tdma_sync->previous_frame_type == FRAME_RX) {
 8005268:	b90c      	cbnz	r4, 800526e <link_tdma_sync_update_tx+0xe>
        duration_pll_cycles += tdma_sync->setup_time_pll_cycles;
 800526a:	8903      	ldrh	r3, [r0, #8]
 800526c:	4419      	add	r1, r3
    }
    tdma_sync->previous_frame_type = FRAME_TX;
 800526e:	2301      	movs	r3, #1
 8005270:	7603      	strb	r3, [r0, #24]
                               uint32_t     duration_pll_cycles,
                               link_cca_t  *cca)
{
    uint32_t timeout_pll_cycles;

    if (cca->enable) {
 8005272:	7993      	ldrb	r3, [r2, #6]
 8005274:	b1ab      	cbz	r3, 80052a2 <link_tdma_sync_update_tx+0x42>
        timeout_pll_cycles = tdma_sync->timeout_pll_cycles + cca->max_try_count * cca->retry_time_pll_cycles;
 8005276:	7854      	ldrb	r4, [r2, #1]
 8005278:	6843      	ldr	r3, [r0, #4]
 800527a:	8892      	ldrh	r2, [r2, #4]
 800527c:	fb02 3404 	mla	r4, r2, r4, r3
    } else {
        timeout_pll_cycles = tdma_sync->timeout_pll_cycles;
    }

    switch (tdma_sync->sleep_mode) {
 8005280:	8803      	ldrh	r3, [r0, #0]
 8005282:	2bc0      	cmp	r3, #192	; 0xc0
 8005284:	d011      	beq.n	80052aa <link_tdma_sync_update_tx+0x4a>
 8005286:	f24c 0240 	movw	r2, #49216	; 0xc040
 800528a:	4293      	cmp	r3, r2
 800528c:	d00d      	beq.n	80052aa <link_tdma_sync_update_tx+0x4a>
        }
        tdma_sync->timeout_value = timeout_pll_cycles + tdma_sync->pwr_up_value;
        break;
    case SLEEP_IDLE:
    default:
        tdma_sync->sleep_cycles_value = duration_pll_cycles - tdma_sync->sleep_offset_pll_cycles;
 800528e:	6902      	ldr	r2, [r0, #16]
        tdma_sync->pwr_up_value       = 0;
        tdma_sync->timeout_value      = timeout_pll_cycles;
 8005290:	6204      	str	r4, [r0, #32]
        tdma_sync->pwr_up_value       = 0;
 8005292:	2300      	movs	r3, #0
        tdma_sync->sleep_cycles_value = duration_pll_cycles - tdma_sync->sleep_offset_pll_cycles;
 8005294:	1a89      	subs	r1, r1, r2
        tdma_sync->pwr_up_value       = 0;
 8005296:	8483      	strh	r3, [r0, #36]	; 0x24
    tdma_sync->sync_slave_offset = 0;
 8005298:	2300      	movs	r3, #0
}
 800529a:	bc30      	pop	{r4, r5}
        tdma_sync->sleep_cycles_value = duration_pll_cycles - tdma_sync->sleep_offset_pll_cycles;
 800529c:	61c1      	str	r1, [r0, #28]
    tdma_sync->sync_slave_offset = 0;
 800529e:	6143      	str	r3, [r0, #20]
}
 80052a0:	4770      	bx	lr
    switch (tdma_sync->sleep_mode) {
 80052a2:	8803      	ldrh	r3, [r0, #0]
        timeout_pll_cycles = tdma_sync->timeout_pll_cycles;
 80052a4:	6844      	ldr	r4, [r0, #4]
    switch (tdma_sync->sleep_mode) {
 80052a6:	2bc0      	cmp	r3, #192	; 0xc0
 80052a8:	d1ed      	bne.n	8005286 <link_tdma_sync_update_tx+0x26>
        duration_pll_cycles -= tdma_sync->sleep_offset_pll_cycles;
 80052aa:	6903      	ldr	r3, [r0, #16]
        tdma_sync->sleep_cycles_value = duration_pll_cycles / PLL_RATIO;
 80052ac:	4d0f      	ldr	r5, [pc, #60]	; (80052ec <link_tdma_sync_update_tx+0x8c>)
        duration_pll_cycles -= tdma_sync->sleep_offset_pll_cycles;
 80052ae:	1ac9      	subs	r1, r1, r3
        tdma_sync->sleep_cycles_value = duration_pll_cycles / PLL_RATIO;
 80052b0:	fba5 3201 	umull	r3, r2, r5, r1
 80052b4:	0a52      	lsrs	r2, r2, #9
        tdma_sync->pwr_up_value += duration_pll_cycles % PLL_RATIO;
 80052b6:	8c83      	ldrh	r3, [r0, #36]	; 0x24
        tdma_sync->sleep_cycles_value = duration_pll_cycles / PLL_RATIO;
 80052b8:	61c2      	str	r2, [r0, #28]
        tdma_sync->pwr_up_value += duration_pll_cycles % PLL_RATIO;
 80052ba:	f240 2c71 	movw	ip, #625	; 0x271
 80052be:	fb0c 1112 	mls	r1, ip, r2, r1
 80052c2:	440b      	add	r3, r1
 80052c4:	b29b      	uxth	r3, r3
        if (tdma_sync->pwr_up_value > PLL_RATIO) {
 80052c6:	4563      	cmp	r3, ip
        tdma_sync->pwr_up_value += duration_pll_cycles % PLL_RATIO;
 80052c8:	8483      	strh	r3, [r0, #36]	; 0x24
        if (tdma_sync->pwr_up_value > PLL_RATIO) {
 80052ca:	d908      	bls.n	80052de <link_tdma_sync_update_tx+0x7e>
            tdma_sync->pwr_up_value = tdma_sync->pwr_up_value % PLL_RATIO;
 80052cc:	fba5 1503 	umull	r1, r5, r5, r3
 80052d0:	0a6d      	lsrs	r5, r5, #9
 80052d2:	fb0c 3315 	mls	r3, ip, r5, r3
            tdma_sync->sleep_cycles_value++;
 80052d6:	3201      	adds	r2, #1
            tdma_sync->pwr_up_value = tdma_sync->pwr_up_value % PLL_RATIO;
 80052d8:	b29b      	uxth	r3, r3
            tdma_sync->sleep_cycles_value++;
 80052da:	61c2      	str	r2, [r0, #28]
            tdma_sync->pwr_up_value = tdma_sync->pwr_up_value % PLL_RATIO;
 80052dc:	8483      	strh	r3, [r0, #36]	; 0x24
        tdma_sync->timeout_value = timeout_pll_cycles + tdma_sync->pwr_up_value;
 80052de:	4423      	add	r3, r4
 80052e0:	6203      	str	r3, [r0, #32]
    tdma_sync->sync_slave_offset = 0;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	bc30      	pop	{r4, r5}
    tdma_sync->sync_slave_offset = 0;
 80052e6:	6143      	str	r3, [r0, #20]
}
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	d1b71759 	.word	0xd1b71759

080052f0 <link_tdma_sync_update_rx>:
{
 80052f0:	b430      	push	{r4, r5}
    if (tdma_sync->previous_frame_type == FRAME_TX) {
 80052f2:	7e04      	ldrb	r4, [r0, #24]
    duration_pll_cycles += tdma_sync->sync_slave_offset;
 80052f4:	6945      	ldr	r5, [r0, #20]
    if (tdma_sync->previous_frame_type == FRAME_TX) {
 80052f6:	2c01      	cmp	r4, #1
        duration_pll_cycles -= tdma_sync->setup_time_pll_cycles;
 80052f8:	bf08      	it	eq
 80052fa:	8903      	ldrheq	r3, [r0, #8]
    duration_pll_cycles += tdma_sync->sync_slave_offset;
 80052fc:	4429      	add	r1, r5
        duration_pll_cycles -= tdma_sync->setup_time_pll_cycles;
 80052fe:	bf08      	it	eq
 8005300:	1ac9      	subeq	r1, r1, r3
    tdma_sync->previous_frame_type = FRAME_RX;
 8005302:	2300      	movs	r3, #0
 8005304:	7603      	strb	r3, [r0, #24]
    if (cca->enable) {
 8005306:	7993      	ldrb	r3, [r2, #6]
 8005308:	b1ab      	cbz	r3, 8005336 <link_tdma_sync_update_rx+0x46>
        timeout_pll_cycles = tdma_sync->timeout_pll_cycles + cca->max_try_count * cca->retry_time_pll_cycles;
 800530a:	7854      	ldrb	r4, [r2, #1]
 800530c:	6843      	ldr	r3, [r0, #4]
 800530e:	8892      	ldrh	r2, [r2, #4]
 8005310:	fb02 3404 	mla	r4, r2, r4, r3
    switch (tdma_sync->sleep_mode) {
 8005314:	8803      	ldrh	r3, [r0, #0]
 8005316:	2bc0      	cmp	r3, #192	; 0xc0
 8005318:	d011      	beq.n	800533e <link_tdma_sync_update_rx+0x4e>
 800531a:	f24c 0240 	movw	r2, #49216	; 0xc040
 800531e:	4293      	cmp	r3, r2
 8005320:	d00d      	beq.n	800533e <link_tdma_sync_update_rx+0x4e>
        tdma_sync->sleep_cycles_value = duration_pll_cycles - tdma_sync->sleep_offset_pll_cycles;
 8005322:	6902      	ldr	r2, [r0, #16]
        tdma_sync->timeout_value      = timeout_pll_cycles;
 8005324:	6204      	str	r4, [r0, #32]
        tdma_sync->pwr_up_value       = 0;
 8005326:	2300      	movs	r3, #0
        tdma_sync->sleep_cycles_value = duration_pll_cycles - tdma_sync->sleep_offset_pll_cycles;
 8005328:	1a89      	subs	r1, r1, r2
        tdma_sync->pwr_up_value       = 0;
 800532a:	8483      	strh	r3, [r0, #36]	; 0x24
    tdma_sync->sync_slave_offset = 0;
 800532c:	2300      	movs	r3, #0
}
 800532e:	bc30      	pop	{r4, r5}
        tdma_sync->sleep_cycles_value = duration_pll_cycles - tdma_sync->sleep_offset_pll_cycles;
 8005330:	61c1      	str	r1, [r0, #28]
    tdma_sync->sync_slave_offset = 0;
 8005332:	6143      	str	r3, [r0, #20]
}
 8005334:	4770      	bx	lr
    switch (tdma_sync->sleep_mode) {
 8005336:	8803      	ldrh	r3, [r0, #0]
        timeout_pll_cycles = tdma_sync->timeout_pll_cycles;
 8005338:	6844      	ldr	r4, [r0, #4]
    switch (tdma_sync->sleep_mode) {
 800533a:	2bc0      	cmp	r3, #192	; 0xc0
 800533c:	d1ed      	bne.n	800531a <link_tdma_sync_update_rx+0x2a>
        duration_pll_cycles -= tdma_sync->sleep_offset_pll_cycles;
 800533e:	6903      	ldr	r3, [r0, #16]
        tdma_sync->sleep_cycles_value = duration_pll_cycles / PLL_RATIO;
 8005340:	4d0f      	ldr	r5, [pc, #60]	; (8005380 <link_tdma_sync_update_rx+0x90>)
        duration_pll_cycles -= tdma_sync->sleep_offset_pll_cycles;
 8005342:	1ac9      	subs	r1, r1, r3
        tdma_sync->sleep_cycles_value = duration_pll_cycles / PLL_RATIO;
 8005344:	fba5 3201 	umull	r3, r2, r5, r1
 8005348:	0a52      	lsrs	r2, r2, #9
        tdma_sync->pwr_up_value += duration_pll_cycles % PLL_RATIO;
 800534a:	8c83      	ldrh	r3, [r0, #36]	; 0x24
        tdma_sync->sleep_cycles_value = duration_pll_cycles / PLL_RATIO;
 800534c:	61c2      	str	r2, [r0, #28]
        tdma_sync->pwr_up_value += duration_pll_cycles % PLL_RATIO;
 800534e:	f240 2c71 	movw	ip, #625	; 0x271
 8005352:	fb0c 1112 	mls	r1, ip, r2, r1
 8005356:	440b      	add	r3, r1
 8005358:	b29b      	uxth	r3, r3
        if (tdma_sync->pwr_up_value > PLL_RATIO) {
 800535a:	4563      	cmp	r3, ip
        tdma_sync->pwr_up_value += duration_pll_cycles % PLL_RATIO;
 800535c:	8483      	strh	r3, [r0, #36]	; 0x24
        if (tdma_sync->pwr_up_value > PLL_RATIO) {
 800535e:	d908      	bls.n	8005372 <link_tdma_sync_update_rx+0x82>
            tdma_sync->pwr_up_value = tdma_sync->pwr_up_value % PLL_RATIO;
 8005360:	fba5 1503 	umull	r1, r5, r5, r3
 8005364:	0a6d      	lsrs	r5, r5, #9
 8005366:	fb0c 3315 	mls	r3, ip, r5, r3
            tdma_sync->sleep_cycles_value++;
 800536a:	3201      	adds	r2, #1
            tdma_sync->pwr_up_value = tdma_sync->pwr_up_value % PLL_RATIO;
 800536c:	b29b      	uxth	r3, r3
            tdma_sync->sleep_cycles_value++;
 800536e:	61c2      	str	r2, [r0, #28]
            tdma_sync->pwr_up_value = tdma_sync->pwr_up_value % PLL_RATIO;
 8005370:	8483      	strh	r3, [r0, #36]	; 0x24
        tdma_sync->timeout_value = timeout_pll_cycles + tdma_sync->pwr_up_value;
 8005372:	4423      	add	r3, r4
 8005374:	6203      	str	r3, [r0, #32]
    tdma_sync->sync_slave_offset = 0;
 8005376:	2300      	movs	r3, #0
}
 8005378:	bc30      	pop	{r4, r5}
    tdma_sync->sync_slave_offset = 0;
 800537a:	6143      	str	r3, [r0, #20]
}
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	d1b71759 	.word	0xd1b71759

08005384 <link_tdma_sync_slave_adjust>:
    if (frame_outcome == FRAME_RECEIVED) {
 8005384:	b161      	cbz	r1, 80053a0 <link_tdma_sync_slave_adjust+0x1c>
 *  @param[in] tdma_sync  TDMA sync object.
 *  @return None.
 */
static inline void slave_adjust_frame_lost(tdma_sync_t *tdma_sync)
{
    tdma_sync->frame_lost_count++;
 8005386:	8b43      	ldrh	r3, [r0, #26]
    tdma_sync->sync_slave_offset = 0;
    if (tdma_sync->frame_lost_count >= tdma_sync->frame_lost_max_count) {
 8005388:	89c2      	ldrh	r2, [r0, #14]
    tdma_sync->frame_lost_count++;
 800538a:	3301      	adds	r3, #1
 800538c:	b29b      	uxth	r3, r3
    tdma_sync->sync_slave_offset = 0;
 800538e:	2100      	movs	r1, #0
    if (tdma_sync->frame_lost_count >= tdma_sync->frame_lost_max_count) {
 8005390:	4293      	cmp	r3, r2
    tdma_sync->frame_lost_count++;
 8005392:	8343      	strh	r3, [r0, #26]
    tdma_sync->sync_slave_offset = 0;
 8005394:	6141      	str	r1, [r0, #20]
    if (tdma_sync->frame_lost_count >= tdma_sync->frame_lost_max_count) {
 8005396:	d302      	bcc.n	800539e <link_tdma_sync_slave_adjust+0x1a>
        tdma_sync->slave_sync_state = STATE_SYNCING;
 8005398:	7301      	strb	r1, [r0, #12]
        tdma_sync->frame_lost_count = tdma_sync->frame_lost_max_count;
 800539a:	8342      	strh	r2, [r0, #26]
}
 800539c:	4770      	bx	lr
 800539e:	4770      	bx	lr
    if (tdma_sync->sleep_mode != SLEEP_IDLE) {
 80053a0:	8801      	ldrh	r1, [r0, #0]
 80053a2:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
{
 80053a6:	b570      	push	{r4, r5, r6, lr}
    uint16_t target_rx_waited_pll_cycles = tdma_sync->base_target_rx_waited_pll_cycles;
 80053a8:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
    if (tdma_sync->sleep_mode != SLEEP_IDLE) {
 80053ac:	d002      	beq.n	80053b4 <link_tdma_sync_slave_adjust+0x30>
        rx_waited_pll_cycles -= tdma_sync->pwr_up_value;
 80053ae:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 80053b0:	1a52      	subs	r2, r2, r1
 80053b2:	b292      	uxth	r2, r2
    tdma_sync->frame_lost_count = 0;
 80053b4:	2100      	movs	r1, #0
 80053b6:	8341      	strh	r1, [r0, #26]
                                cca->retry_time_pll_cycles -
 80053b8:	8899      	ldrh	r1, [r3, #4]
    if (rx_waited_pll_cycles > (tdma_sync->base_target_rx_waited_pll_cycles +
 80053ba:	eb0e 0401 	add.w	r4, lr, r1
                                cca->retry_time_pll_cycles -
 80053be:	eba4 0451 	sub.w	r4, r4, r1, lsr #1
    if (rx_waited_pll_cycles > (tdma_sync->base_target_rx_waited_pll_cycles +
 80053c2:	42a2      	cmp	r2, r4
                               (cca->retry_time_pll_cycles / 2)) && cca->enable) {
 80053c4:	ea4f 0651 	mov.w	r6, r1, lsr #1
    if (rx_waited_pll_cycles > (tdma_sync->base_target_rx_waited_pll_cycles +
 80053c8:	dc13      	bgt.n	80053f2 <link_tdma_sync_slave_adjust+0x6e>
        tdma_sync->slave_sync_state = STATE_SYNCED;
 80053ca:	2301      	movs	r3, #1
        tdma_sync->cca_unsync_watchdog_count = 0;
 80053cc:	2400      	movs	r4, #0
        tdma_sync->slave_sync_state = STATE_SYNCED;
 80053ce:	7303      	strb	r3, [r0, #12]
        tdma_sync->cca_unsync_watchdog_count = 0;
 80053d0:	6284      	str	r4, [r0, #40]	; 0x28
 80053d2:	4673      	mov	r3, lr
    if (rx_waited_pll_cycles > target_rx_waited_pll_cycles) {
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d82c      	bhi.n	8005432 <link_tdma_sync_slave_adjust+0xae>
    } else if (rx_waited_pll_cycles < target_rx_waited_pll_cycles) {
 80053d8:	d32b      	bcc.n	8005432 <link_tdma_sync_slave_adjust+0xae>
        tdma_sync->sync_slave_offset = 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	6143      	str	r3, [r0, #20]
    if ((tdma_sync->cca_unsync_watchdog_count > CCA_THRESHOLD_WATCHDOG_COUNT) || (tdma_sync->slave_sync_state == STATE_SYNCING)) {
 80053de:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80053e2:	429c      	cmp	r4, r3
 80053e4:	d801      	bhi.n	80053ea <link_tdma_sync_slave_adjust+0x66>
 80053e6:	7b03      	ldrb	r3, [r0, #12]
 80053e8:	b913      	cbnz	r3, 80053f0 <link_tdma_sync_slave_adjust+0x6c>
        tdma_sync->sync_slave_offset = rx_waited_pll_cycles - tdma_sync->base_target_rx_waited_pll_cycles;
 80053ea:	eba2 020e 	sub.w	r2, r2, lr
 80053ee:	6142      	str	r2, [r0, #20]
}
 80053f0:	bd70      	pop	{r4, r5, r6, pc}
                               (cca->retry_time_pll_cycles / 2)) && cca->enable) {
 80053f2:	799c      	ldrb	r4, [r3, #6]
 80053f4:	2c00      	cmp	r4, #0
 80053f6:	d0e8      	beq.n	80053ca <link_tdma_sync_slave_adjust+0x46>
        tdma_sync->cca_unsync_watchdog_count++;
 80053f8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80053fa:	3401      	adds	r4, #1
 80053fc:	6284      	str	r4, [r0, #40]	; 0x28
        for (int8_t i = cca->max_try_count; i >= 0; i--) {
 80053fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005402:	2b00      	cmp	r3, #0
 8005404:	dbe1      	blt.n	80053ca <link_tdma_sync_slave_adjust+0x46>
 8005406:	fb03 1c01 	mla	ip, r3, r1, r1
 800540a:	44f4      	add	ip, lr
 800540c:	fb01 e503 	mla	r5, r1, r3, lr
 8005410:	ebac 0c06 	sub.w	ip, ip, r6
 8005414:	1bad      	subs	r5, r5, r6
            if ((rx_waited_pll_cycles < (tdma_sync->base_target_rx_waited_pll_cycles +
 8005416:	4562      	cmp	r2, ip
 8005418:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
 800541c:	ebac 0c01 	sub.w	ip, ip, r1
 8005420:	da01      	bge.n	8005426 <link_tdma_sync_slave_adjust+0xa2>
                                         cca->retry_time_pll_cycles / 2) &&
 8005422:	42aa      	cmp	r2, r5
 8005424:	dc08      	bgt.n	8005438 <link_tdma_sync_slave_adjust+0xb4>
 8005426:	b273      	sxtb	r3, r6
        for (int8_t i = cca->max_try_count; i >= 0; i--) {
 8005428:	1c5e      	adds	r6, r3, #1
 800542a:	eba5 0501 	sub.w	r5, r5, r1
 800542e:	d1f2      	bne.n	8005416 <link_tdma_sync_slave_adjust+0x92>
 8005430:	e7cb      	b.n	80053ca <link_tdma_sync_slave_adjust+0x46>
        tdma_sync->sync_slave_offset = -(target_rx_waited_pll_cycles - rx_waited_pll_cycles);
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	6143      	str	r3, [r0, #20]
 8005436:	e7d2      	b.n	80053de <link_tdma_sync_slave_adjust+0x5a>
                target_rx_waited_pll_cycles =  tdma_sync->base_target_rx_waited_pll_cycles + (cca->retry_time_pll_cycles * i);
 8005438:	fb13 f301 	smulbb	r3, r3, r1
 800543c:	4473      	add	r3, lr
 800543e:	b29b      	uxth	r3, r3
    if (target_rx_waited_pll_cycles == tdma_sync->base_target_rx_waited_pll_cycles) {
 8005440:	459e      	cmp	lr, r3
 8005442:	d1c7      	bne.n	80053d4 <link_tdma_sync_slave_adjust+0x50>
 8005444:	e7c1      	b.n	80053ca <link_tdma_sync_slave_adjust+0x46>
 8005446:	bf00      	nop

08005448 <link_tdma_sync_slave_find>:
    if (frame_outcome == FRAME_RECEIVED) {
 8005448:	b111      	cbz	r1, 8005450 <link_tdma_sync_slave_find+0x8>
        tdma_sync->sync_slave_offset = -UNSYNC_OFFSET_PLL_CYCLES;
 800544a:	4b2b      	ldr	r3, [pc, #172]	; (80054f8 <link_tdma_sync_slave_find+0xb0>)
 800544c:	6143      	str	r3, [r0, #20]
 800544e:	4770      	bx	lr
    if (tdma_sync->sleep_mode != SLEEP_IDLE) {
 8005450:	8801      	ldrh	r1, [r0, #0]
 8005452:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
{
 8005456:	b570      	push	{r4, r5, r6, lr}
    uint16_t target_rx_waited_pll_cycles = tdma_sync->base_target_rx_waited_pll_cycles;
 8005458:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
    if (tdma_sync->sleep_mode != SLEEP_IDLE) {
 800545c:	d002      	beq.n	8005464 <link_tdma_sync_slave_find+0x1c>
        rx_waited_pll_cycles -= tdma_sync->pwr_up_value;
 800545e:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 8005460:	1a52      	subs	r2, r2, r1
 8005462:	b292      	uxth	r2, r2
    tdma_sync->frame_lost_count = 0;
 8005464:	2100      	movs	r1, #0
 8005466:	8341      	strh	r1, [r0, #26]
                                cca->retry_time_pll_cycles -
 8005468:	8899      	ldrh	r1, [r3, #4]
    if (rx_waited_pll_cycles > (tdma_sync->base_target_rx_waited_pll_cycles +
 800546a:	eb0e 0401 	add.w	r4, lr, r1
                                cca->retry_time_pll_cycles -
 800546e:	eba4 0451 	sub.w	r4, r4, r1, lsr #1
    if (rx_waited_pll_cycles > (tdma_sync->base_target_rx_waited_pll_cycles +
 8005472:	42a2      	cmp	r2, r4
                               (cca->retry_time_pll_cycles / 2)) && cca->enable) {
 8005474:	ea4f 0651 	mov.w	r6, r1, lsr #1
    if (rx_waited_pll_cycles > (tdma_sync->base_target_rx_waited_pll_cycles +
 8005478:	dc13      	bgt.n	80054a2 <link_tdma_sync_slave_find+0x5a>
        tdma_sync->slave_sync_state = STATE_SYNCED;
 800547a:	2301      	movs	r3, #1
        tdma_sync->cca_unsync_watchdog_count = 0;
 800547c:	2400      	movs	r4, #0
        tdma_sync->slave_sync_state = STATE_SYNCED;
 800547e:	7303      	strb	r3, [r0, #12]
        tdma_sync->cca_unsync_watchdog_count = 0;
 8005480:	6284      	str	r4, [r0, #40]	; 0x28
 8005482:	4673      	mov	r3, lr
    if (rx_waited_pll_cycles > target_rx_waited_pll_cycles) {
 8005484:	429a      	cmp	r2, r3
 8005486:	d82c      	bhi.n	80054e2 <link_tdma_sync_slave_find+0x9a>
    } else if (rx_waited_pll_cycles < target_rx_waited_pll_cycles) {
 8005488:	d32b      	bcc.n	80054e2 <link_tdma_sync_slave_find+0x9a>
        tdma_sync->sync_slave_offset = 0;
 800548a:	2300      	movs	r3, #0
 800548c:	6143      	str	r3, [r0, #20]
    if ((tdma_sync->cca_unsync_watchdog_count > CCA_THRESHOLD_WATCHDOG_COUNT) || (tdma_sync->slave_sync_state == STATE_SYNCING)) {
 800548e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005492:	429c      	cmp	r4, r3
 8005494:	d801      	bhi.n	800549a <link_tdma_sync_slave_find+0x52>
 8005496:	7b03      	ldrb	r3, [r0, #12]
 8005498:	b913      	cbnz	r3, 80054a0 <link_tdma_sync_slave_find+0x58>
        tdma_sync->sync_slave_offset = rx_waited_pll_cycles - tdma_sync->base_target_rx_waited_pll_cycles;
 800549a:	eba2 020e 	sub.w	r2, r2, lr
 800549e:	6142      	str	r2, [r0, #20]
}
 80054a0:	bd70      	pop	{r4, r5, r6, pc}
                               (cca->retry_time_pll_cycles / 2)) && cca->enable) {
 80054a2:	799c      	ldrb	r4, [r3, #6]
 80054a4:	2c00      	cmp	r4, #0
 80054a6:	d0e8      	beq.n	800547a <link_tdma_sync_slave_find+0x32>
        tdma_sync->cca_unsync_watchdog_count++;
 80054a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80054aa:	3401      	adds	r4, #1
 80054ac:	6284      	str	r4, [r0, #40]	; 0x28
        for (int8_t i = cca->max_try_count; i >= 0; i--) {
 80054ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	dbe1      	blt.n	800547a <link_tdma_sync_slave_find+0x32>
 80054b6:	fb03 1c01 	mla	ip, r3, r1, r1
 80054ba:	44f4      	add	ip, lr
 80054bc:	fb01 e503 	mla	r5, r1, r3, lr
 80054c0:	ebac 0c06 	sub.w	ip, ip, r6
 80054c4:	1bad      	subs	r5, r5, r6
            if ((rx_waited_pll_cycles < (tdma_sync->base_target_rx_waited_pll_cycles +
 80054c6:	4562      	cmp	r2, ip
 80054c8:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
 80054cc:	ebac 0c01 	sub.w	ip, ip, r1
 80054d0:	da01      	bge.n	80054d6 <link_tdma_sync_slave_find+0x8e>
                                         cca->retry_time_pll_cycles / 2) &&
 80054d2:	42aa      	cmp	r2, r5
 80054d4:	dc08      	bgt.n	80054e8 <link_tdma_sync_slave_find+0xa0>
 80054d6:	b273      	sxtb	r3, r6
        for (int8_t i = cca->max_try_count; i >= 0; i--) {
 80054d8:	1c5e      	adds	r6, r3, #1
 80054da:	eba5 0501 	sub.w	r5, r5, r1
 80054de:	d1f2      	bne.n	80054c6 <link_tdma_sync_slave_find+0x7e>
 80054e0:	e7cb      	b.n	800547a <link_tdma_sync_slave_find+0x32>
        tdma_sync->sync_slave_offset = -(target_rx_waited_pll_cycles - rx_waited_pll_cycles);
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	6143      	str	r3, [r0, #20]
 80054e6:	e7d2      	b.n	800548e <link_tdma_sync_slave_find+0x46>
                target_rx_waited_pll_cycles =  tdma_sync->base_target_rx_waited_pll_cycles + (cca->retry_time_pll_cycles * i);
 80054e8:	fb13 f301 	smulbb	r3, r3, r1
 80054ec:	4473      	add	r3, lr
 80054ee:	b29b      	uxth	r3, r3
    if (target_rx_waited_pll_cycles == tdma_sync->base_target_rx_waited_pll_cycles) {
 80054f0:	459e      	cmp	lr, r3
 80054f2:	d1c7      	bne.n	8005484 <link_tdma_sync_slave_find+0x3c>
 80054f4:	e7c1      	b.n	800547a <link_tdma_sync_slave_find+0x32>
 80054f6:	bf00      	nop
 80054f8:	fffffe70 	.word	0xfffffe70

080054fc <link_tdma_sync_get_sleep_cycles>:
}
 80054fc:	69c0      	ldr	r0, [r0, #28]
 80054fe:	4770      	bx	lr

08005500 <link_tdma_sync_get_timeout>:
}
 8005500:	6a00      	ldr	r0, [r0, #32]
 8005502:	4770      	bx	lr

08005504 <link_tdma_sync_get_pwr_up>:
}
 8005504:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8005506:	4770      	bx	lr

08005508 <link_tdma_sync_is_slave_synced>:
}
 8005508:	7b00      	ldrb	r0, [r0, #12]
 800550a:	4770      	bx	lr

0800550c <link_tdma_sync_get_isi_mitigation_pauses>:
}
 800550c:	2000      	movs	r0, #0
 800550e:	4770      	bx	lr

08005510 <link_tdma_get_preamble_length>:
}
 8005510:	4608      	mov	r0, r1
 8005512:	4770      	bx	lr

08005514 <link_tdma_get_syncword_length>:
        return 32;
 8005514:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
}
 8005518:	bf0c      	ite	eq
 800551a:	2010      	moveq	r0, #16
 800551c:	2020      	movne	r0, #32
 800551e:	4770      	bx	lr

08005520 <sr_calib_v1_find_new_dcro_code>:

    /*
     * Special treatment is required when crossing the boundary
     * between low and high codes.
     */
    if (((code == 0xf) || (code == 0x0e)) && (offset > 0)) {
 8005520:	f1a1 030e 	sub.w	r3, r1, #14
 8005524:	2b01      	cmp	r3, #1
{
 8005526:	b530      	push	{r4, r5, lr}
    int8_t new_code = code;
 8005528:	b24c      	sxtb	r4, r1
    if (((code == 0xf) || (code == 0x0e)) && (offset > 0)) {
 800552a:	d90b      	bls.n	8005544 <sr_calib_v1_find_new_dcro_code+0x24>
            if ((freq_table[i + 1] - freq_table[code]) < -1) {
                new_code = i + offset;
                break;
            }
        }
    } else if (((code == 0x10) || (code == 0x11)) && (offset < 0)) {
 800552c:	f1a1 0310 	sub.w	r3, r1, #16
 8005530:	2b01      	cmp	r3, #1
 8005532:	d801      	bhi.n	8005538 <sr_calib_v1_find_new_dcro_code+0x18>
 8005534:	2a00      	cmp	r2, #0
 8005536:	db27      	blt.n	8005588 <sr_calib_v1_find_new_dcro_code+0x68>
                new_code = i + offset;
                break;
            }
        }
    }  else { /* For other codes, just apply the regular offset */
        new_code = code + offset;
 8005538:	4411      	add	r1, r2
 800553a:	b24c      	sxtb	r4, r1
        new_code = 0;
    } else if (new_code > (DCRO_CODE_COUNT_MAX - 1)) {
        new_code = (DCRO_CODE_COUNT_MAX - 1);
    }

    return new_code;
 800553c:	f384 0005 	usat	r0, #5, r4
}
 8005540:	b2c0      	uxtb	r0, r0
 8005542:	bd30      	pop	{r4, r5, pc}
    if (((code == 0xf) || (code == 0x0e)) && (offset > 0)) {
 8005544:	2a00      	cmp	r2, #0
 8005546:	ddf7      	ble.n	8005538 <sr_calib_v1_find_new_dcro_code+0x18>
        if ((code == 0x0e) && (offset == 2)) {
 8005548:	290e      	cmp	r1, #14
 800554a:	d036      	beq.n	80055ba <sr_calib_v1_find_new_dcro_code+0x9a>
 800554c:	231e      	movs	r3, #30
 800554e:	210f      	movs	r1, #15
            if ((freq_table[i + 1] - freq_table[code]) < -1) {
 8005550:	5ac5      	ldrh	r5, [r0, r3]
 8005552:	f101 0e01 	add.w	lr, r1, #1
 8005556:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800555a:	fa53 f38e 	uxtab	r3, r3, lr
 800555e:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
 8005562:	e003      	b.n	800556c <sr_calib_v1_find_new_dcro_code+0x4c>
        for (uint8_t i = code; i < DCRO_CODE_COUNT_MAX; i++) {
 8005564:	291f      	cmp	r1, #31
 8005566:	d8e9      	bhi.n	800553c <sr_calib_v1_find_new_dcro_code+0x1c>
 8005568:	f101 0e01 	add.w	lr, r1, #1
            if ((freq_table[i + 1] - freq_table[code]) < -1) {
 800556c:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
 8005570:	1b5b      	subs	r3, r3, r5
 8005572:	3301      	adds	r3, #1
 8005574:	4608      	mov	r0, r1
 8005576:	fa5f f18e 	uxtb.w	r1, lr
 800557a:	daf3      	bge.n	8005564 <sr_calib_v1_find_new_dcro_code+0x44>
                new_code = i + offset;
 800557c:	1881      	adds	r1, r0, r2
 800557e:	b24c      	sxtb	r4, r1
    return new_code;
 8005580:	f384 0005 	usat	r0, #5, r4
}
 8005584:	b2c0      	uxtb	r0, r0
 8005586:	bd30      	pop	{r4, r5, pc}
        if ((code == 0x11) && (offset == -2)) {
 8005588:	2911      	cmp	r1, #17
 800558a:	d01a      	beq.n	80055c2 <sr_calib_v1_find_new_dcro_code+0xa2>
 800558c:	f04f 0e10 	mov.w	lr, #16
 8005590:	2320      	movs	r3, #32
            if ((freq_table[i - 1] - freq_table[code]) > 1) {
 8005592:	5ac5      	ldrh	r5, [r0, r3]
 8005594:	eb00 0c4e 	add.w	ip, r0, lr, lsl #1
 8005598:	e004      	b.n	80055a4 <sr_calib_v1_find_new_dcro_code+0x84>
 800559a:	fa4f fe81 	sxtb.w	lr, r1
        for (int8_t i = code; i >= 0x0; i--) {
 800559e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80055a2:	d0cb      	beq.n	800553c <sr_calib_v1_find_new_dcro_code+0x1c>
            if ((freq_table[i - 1] - freq_table[code]) > 1) {
 80055a4:	f83c 3d02 	ldrh.w	r3, [ip, #-2]!
 80055a8:	1b5b      	subs	r3, r3, r5
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80055b0:	ddf3      	ble.n	800559a <sr_calib_v1_find_new_dcro_code+0x7a>
                new_code = i + offset;
 80055b2:	eb0e 0102 	add.w	r1, lr, r2
 80055b6:	b24c      	sxtb	r4, r1
                break;
 80055b8:	e7c0      	b.n	800553c <sr_calib_v1_find_new_dcro_code+0x1c>
        if ((code == 0x0e) && (offset == 2)) {
 80055ba:	2a02      	cmp	r2, #2
 80055bc:	d006      	beq.n	80055cc <sr_calib_v1_find_new_dcro_code+0xac>
 80055be:	231c      	movs	r3, #28
 80055c0:	e7c6      	b.n	8005550 <sr_calib_v1_find_new_dcro_code+0x30>
        if ((code == 0x11) && (offset == -2)) {
 80055c2:	1c93      	adds	r3, r2, #2
 80055c4:	d006      	beq.n	80055d4 <sr_calib_v1_find_new_dcro_code+0xb4>
 80055c6:	468e      	mov	lr, r1
 80055c8:	2322      	movs	r3, #34	; 0x22
 80055ca:	e7e2      	b.n	8005592 <sr_calib_v1_find_new_dcro_code+0x72>
        if ((code == 0x0e) && (offset == 2)) {
 80055cc:	231e      	movs	r3, #30
            offset = 1;
 80055ce:	2201      	movs	r2, #1
            code++;
 80055d0:	210f      	movs	r1, #15
 80055d2:	e7bd      	b.n	8005550 <sr_calib_v1_find_new_dcro_code+0x30>
        if ((code == 0x11) && (offset == -2)) {
 80055d4:	f04f 0e10 	mov.w	lr, #16
 80055d8:	2320      	movs	r3, #32
            offset = -1;
 80055da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055de:	e7d8      	b.n	8005592 <sr_calib_v1_find_new_dcro_code+0x72>

080055e0 <sr_calib_v2_clean_up_freq_table>:
        new_dcro_codes[i] = sr_calib_v1_find_new_dcro_code(freq_table, i, offset);
    }
}

static uint8_t sr_calib_v2_clean_up_freq_table(uint16_t *freq_table, uint8_t *new_dcro_codes)
{
 80055e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e2:	b099      	sub	sp, #100	; 0x64
    uint8_t  i = 0;
    int8_t   code;

    /* Keep last code */
    temp_freq_table[i] = freq_table[DCRO_CODE_COUNT_MAX - 1];
    temp_dcro_code[i]  = DCRO_CODE_COUNT_MAX - 1;
 80055e4:	231f      	movs	r3, #31
    temp_freq_table[i] = freq_table[DCRO_CODE_COUNT_MAX - 1];
 80055e6:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    temp_dcro_code[i]  = DCRO_CODE_COUNT_MAX - 1;
 80055e8:	f88d 3000 	strb.w	r3, [sp]
    temp_freq_table[i] = freq_table[DCRO_CODE_COUNT_MAX - 1];
 80055ec:	f8ad 2020 	strh.w	r2, [sp, #32]

    /* Start iterating from second to last code to first code to remove invalid codes */
    for (code = DCRO_CODE_COUNT_MAX - 2; code >= 0; code--) {
 80055f0:	f100 053c 	add.w	r5, r0, #60	; 0x3c
    temp_dcro_code[i]  = DCRO_CODE_COUNT_MAX - 1;
 80055f4:	241d      	movs	r4, #29
 80055f6:	231e      	movs	r3, #30
    uint8_t  i = 0;
 80055f8:	f04f 0e00 	mov.w	lr, #0
 80055fc:	e008      	b.n	8005610 <sr_calib_v2_clean_up_freq_table+0x30>
        if (code > 15 && (freq_table[code] + 2 > freq_table[15])) {
            continue;
        }

        /* Keep code if its frequency is at least 80 MHz higher than the previous valid code */
        if (freq_table[code] >= (temp_freq_table[i] + 2)) {
 80055fe:	f832 2c40 	ldrh.w	r2, [r2, #-64]
 8005602:	3b01      	subs	r3, #1
 8005604:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8005608:	b2db      	uxtb	r3, r3
 800560a:	fa5f f48c 	uxtb.w	r4, ip
 800560e:	3d02      	subs	r5, #2
        if (code > 15 && (freq_table[code] + 2 > freq_table[15])) {
 8005610:	fa4f fc83 	sxtb.w	ip, r3
 8005614:	f1bc 0f0f 	cmp.w	ip, #15
 8005618:	f8b5 c000 	ldrh.w	ip, [r5]
 800561c:	dd04      	ble.n	8005628 <sr_calib_v2_clean_up_freq_table+0x48>
 800561e:	8bc6      	ldrh	r6, [r0, #30]
 8005620:	f10c 0701 	add.w	r7, ip, #1
 8005624:	42b7      	cmp	r7, r6
 8005626:	daec      	bge.n	8005602 <sr_calib_v2_clean_up_freq_table+0x22>
        if (freq_table[code] >= (temp_freq_table[i] + 2)) {
 8005628:	3201      	adds	r2, #1
 800562a:	4562      	cmp	r2, ip
            i++;
 800562c:	f10e 0601 	add.w	r6, lr, #1
        if (freq_table[code] >= (temp_freq_table[i] + 2)) {
 8005630:	da0b      	bge.n	800564a <sr_calib_v2_clean_up_freq_table+0x6a>
            i++;
 8005632:	fa5f fe86 	uxtb.w	lr, r6
            temp_freq_table[i]  = freq_table[code];
 8005636:	aa18      	add	r2, sp, #96	; 0x60
 8005638:	eb02 064e 	add.w	r6, r2, lr, lsl #1
            temp_dcro_code[i] = code;
 800563c:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 8005640:	446a      	add	r2, sp
            temp_freq_table[i]  = freq_table[code];
 8005642:	f826 cc40 	strh.w	ip, [r6, #-64]
            temp_dcro_code[i] = code;
 8005646:	f802 3c60 	strb.w	r3, [r2, #-96]
        if (freq_table[code] >= (temp_freq_table[i] + 2)) {
 800564a:	aa18      	add	r2, sp, #96	; 0x60
    for (code = DCRO_CODE_COUNT_MAX - 2; code >= 0; code--) {
 800564c:	2cff      	cmp	r4, #255	; 0xff
        if (freq_table[code] >= (temp_freq_table[i] + 2)) {
 800564e:	eb02 024e 	add.w	r2, r2, lr, lsl #1
    for (code = DCRO_CODE_COUNT_MAX - 2; code >= 0; code--) {
 8005652:	d1d4      	bne.n	80055fe <sr_calib_v2_clean_up_freq_table+0x1e>
        }
    }

    size = i + 1;
 8005654:	f10e 0601 	add.w	r6, lr, #1

    /* Reverse tables to have the lowest code first */
    for (uint8_t j = 0; j < size; j++, i--) {
 8005658:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 800565c:	d018      	beq.n	8005690 <sr_calib_v2_clean_up_freq_table+0xb0>
 800565e:	1e82      	subs	r2, r0, #2
 8005660:	1e4b      	subs	r3, r1, #1
        freq_table[j] = temp_freq_table[i];
 8005662:	ac18      	add	r4, sp, #96	; 0x60
 8005664:	eb04 054e 	add.w	r5, r4, lr, lsl #1
        new_dcro_codes[j] = temp_dcro_code[i];
 8005668:	f10e 0460 	add.w	r4, lr, #96	; 0x60
 800566c:	446c      	add	r4, sp
    for (uint8_t j = 0; j < size; j++, i--) {
 800566e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005672:	fa5f fe8e 	uxtb.w	lr, lr
        freq_table[j] = temp_freq_table[i];
 8005676:	f835 5c40 	ldrh.w	r5, [r5, #-64]
        new_dcro_codes[j] = temp_dcro_code[i];
 800567a:	f814 4c60 	ldrb.w	r4, [r4, #-96]
        freq_table[j] = temp_freq_table[i];
 800567e:	f822 5f02 	strh.w	r5, [r2, #2]!
    for (uint8_t j = 0; j < size; j++, i--) {
 8005682:	f1be 0fff 	cmp.w	lr, #255	; 0xff
        new_dcro_codes[j] = temp_dcro_code[i];
 8005686:	f803 4f01 	strb.w	r4, [r3, #1]!
    for (uint8_t j = 0; j < size; j++, i--) {
 800568a:	d1ea      	bne.n	8005662 <sr_calib_v2_clean_up_freq_table+0x82>
    }

    /* Fill the invalid DCRO codes and frequencies with invalid values */
    for (uint8_t j = size; j < DCRO_CODE_COUNT_MAX; j++) {
 800568c:	2e1f      	cmp	r6, #31
 800568e:	d80a      	bhi.n	80056a6 <sr_calib_v2_clean_up_freq_table+0xc6>
    size = i + 1;
 8005690:	4633      	mov	r3, r6
        new_dcro_codes[j] = 0xff;
 8005692:	27ff      	movs	r7, #255	; 0xff
        freq_table[j] = 0x00;
 8005694:	2500      	movs	r5, #0
    for (uint8_t j = size; j < DCRO_CODE_COUNT_MAX; j++) {
 8005696:	1c5c      	adds	r4, r3, #1
        new_dcro_codes[j] = 0xff;
 8005698:	54cf      	strb	r7, [r1, r3]
        freq_table[j] = 0x00;
 800569a:	b21a      	sxth	r2, r3
    for (uint8_t j = size; j < DCRO_CODE_COUNT_MAX; j++) {
 800569c:	b2e3      	uxtb	r3, r4
 800569e:	2b20      	cmp	r3, #32
        freq_table[j] = 0x00;
 80056a0:	f820 5012 	strh.w	r5, [r0, r2, lsl #1]
    for (uint8_t j = size; j < DCRO_CODE_COUNT_MAX; j++) {
 80056a4:	d1f7      	bne.n	8005696 <sr_calib_v2_clean_up_freq_table+0xb6>
    }

    return size;
}
 80056a6:	4630      	mov	r0, r6
 80056a8:	b019      	add	sp, #100	; 0x64
 80056aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056ac <use_calib_v1>:
    return offset;
}

static bool use_calib_v1(calib_vars_t *calib_vars)
{
    if (BINNING_WAS_DONE_WITH_ATE(calib_vars->binning_setup_code)) {
 80056ac:	8982      	ldrh	r2, [r0, #12]
 80056ae:	f644 1354 	movw	r3, #18772	; 0x4954
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d024      	beq.n	8005700 <use_calib_v1+0x54>
        return false;
    }

    return ((IS_SR1020(calib_vars->phy_model) && IS_QFN28(calib_vars->phy_package) && CHIP_ID_IS_BELOW(573, calib_vars->chip_id)) ||
 80056b6:	8903      	ldrh	r3, [r0, #8]
            (IS_SR1010(calib_vars->phy_model) && IS_QFN28(calib_vars->phy_package) && CHIP_ID_IS_BELOW(190, calib_vars->chip_id)) ||
            (IS_SR1020(calib_vars->phy_model) && IS_QFN48(calib_vars->phy_package) && CHIP_ID_IS_BELOW(28, calib_vars->chip_id))  ||
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d016      	beq.n	80056ea <use_calib_v1+0x3e>
    return ((IS_SR1020(calib_vars->phy_model) && IS_QFN28(calib_vars->phy_package) && CHIP_ID_IS_BELOW(573, calib_vars->chip_id)) ||
 80056bc:	b943      	cbnz	r3, 80056d0 <use_calib_v1+0x24>
            (IS_SR1010(calib_vars->phy_model) && IS_QFN28(calib_vars->phy_package) && CHIP_ID_IS_BELOW(190, calib_vars->chip_id)) ||
 80056be:	e9d0 2300 	ldrd	r2, r3, [r0]
 80056c2:	2abe      	cmp	r2, #190	; 0xbe
 80056c4:	f173 0300 	sbcs.w	r3, r3, #0
 80056c8:	bf34      	ite	cc
 80056ca:	2001      	movcc	r0, #1
 80056cc:	2000      	movcs	r0, #0
 80056ce:	4770      	bx	lr
 80056d0:	f240 1201 	movw	r2, #257	; 0x101
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d115      	bne.n	8005704 <use_calib_v1+0x58>
            (IS_SR1020(calib_vars->phy_model) && IS_QFN48(calib_vars->phy_package) && CHIP_ID_IS_BELOW(28, calib_vars->chip_id))  ||
 80056d8:	e9d0 2300 	ldrd	r2, r3, [r0]
 80056dc:	2a1c      	cmp	r2, #28
 80056de:	f173 0300 	sbcs.w	r3, r3, #0
 80056e2:	bf34      	ite	cc
 80056e4:	2001      	movcc	r0, #1
 80056e6:	2000      	movcs	r0, #0
 80056e8:	4770      	bx	lr
    return ((IS_SR1020(calib_vars->phy_model) && IS_QFN28(calib_vars->phy_package) && CHIP_ID_IS_BELOW(573, calib_vars->chip_id)) ||
 80056ea:	e9d0 1300 	ldrd	r1, r3, [r0]
 80056ee:	f240 223d 	movw	r2, #573	; 0x23d
 80056f2:	4291      	cmp	r1, r2
 80056f4:	f173 0300 	sbcs.w	r3, r3, #0
 80056f8:	bf34      	ite	cc
 80056fa:	2001      	movcc	r0, #1
 80056fc:	2000      	movcs	r0, #0
 80056fe:	4770      	bx	lr
        return false;
 8005700:	2000      	movs	r0, #0
            (IS_SR1010(calib_vars->phy_model) && IS_QFN48(calib_vars->phy_package) && CHIP_ID_IS_BELOW(24, calib_vars->chip_id)));
}
 8005702:	4770      	bx	lr
            (IS_SR1020(calib_vars->phy_model) && IS_QFN48(calib_vars->phy_package) && CHIP_ID_IS_BELOW(28, calib_vars->chip_id))  ||
 8005704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005708:	d1fa      	bne.n	8005700 <use_calib_v1+0x54>
            (IS_SR1010(calib_vars->phy_model) && IS_QFN48(calib_vars->phy_package) && CHIP_ID_IS_BELOW(24, calib_vars->chip_id)));
 800570a:	e9d0 2300 	ldrd	r2, r3, [r0]
 800570e:	2a18      	cmp	r2, #24
 8005710:	f173 0300 	sbcs.w	r3, r3, #0
 8005714:	bf34      	ite	cc
 8005716:	2001      	movcc	r0, #1
 8005718:	2000      	movcs	r0, #0
 800571a:	4770      	bx	lr

0800571c <sr_calib_v2_apply_vcro_offsets.isra.0>:
static void sr_calib_v2_apply_vcro_offsets(calib_vars_t *calib_vars, uint16_t *freq_table, bool rx)
 800571c:	b500      	push	{lr}
    if (rx) {
 800571e:	b31a      	cbz	r2, 8005768 <sr_calib_v2_apply_vcro_offsets.isra.0+0x4c>
        high_codes_bits = (calib_vars->nvm_vcro_shift & BITS_FREQ_SHIFT_RX_1) >> POS_FREQ_SHIFT_RX_1;
 8005720:	ea4f 3e10 	mov.w	lr, r0, lsr #12
        low_codes_bits  = (calib_vars->nvm_vcro_shift & BITS_FREQ_SHIFT_RX_0) >> POS_FREQ_SHIFT_RX_0;
 8005724:	f3c0 2c03 	ubfx	ip, r0, #8, #4
    if (0x8 & bits) { /* Check if negative */
 8005728:	f01c 0f08 	tst.w	ip, #8
        freq_table[i] = (uint8_t)(freq_table[i] - offset);
 800572c:	bf18      	it	ne
 800572e:	f04c 0cf0 	orrne.w	ip, ip, #240	; 0xf0
    for (uint8_t i = 0x0; i < DCRO_CODE_COUNT_MAX / 2; i++) {
 8005732:	1e88      	subs	r0, r1, #2
 8005734:	f101 021e 	add.w	r2, r1, #30
        freq_table[i] = (uint8_t)(freq_table[i] - offset);
 8005738:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800573c:	eba3 030c 	sub.w	r3, r3, ip
 8005740:	b2db      	uxtb	r3, r3
    for (uint8_t i = 0x0; i < DCRO_CODE_COUNT_MAX / 2; i++) {
 8005742:	4282      	cmp	r2, r0
        freq_table[i] = (uint8_t)(freq_table[i] - offset);
 8005744:	8003      	strh	r3, [r0, #0]
    for (uint8_t i = 0x0; i < DCRO_CODE_COUNT_MAX / 2; i++) {
 8005746:	d1f7      	bne.n	8005738 <sr_calib_v2_apply_vcro_offsets.isra.0+0x1c>
    if (0x8 & bits) { /* Check if negative */
 8005748:	f01e 0f08 	tst.w	lr, #8
        freq_table[i] = (uint8_t)(freq_table[i] - offset);
 800574c:	bf18      	it	ne
 800574e:	f04e 0ef0 	orrne.w	lr, lr, #240	; 0xf0
    for (uint8_t i = DCRO_CODE_COUNT_MAX / 2; i < DCRO_CODE_COUNT_MAX; i++) {
 8005752:	313e      	adds	r1, #62	; 0x3e
        freq_table[i] = (uint8_t)(freq_table[i] - offset);
 8005754:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8005758:	eba3 030e 	sub.w	r3, r3, lr
 800575c:	b2db      	uxtb	r3, r3
    for (uint8_t i = DCRO_CODE_COUNT_MAX / 2; i < DCRO_CODE_COUNT_MAX; i++) {
 800575e:	4291      	cmp	r1, r2
        freq_table[i] = (uint8_t)(freq_table[i] - offset);
 8005760:	8013      	strh	r3, [r2, #0]
    for (uint8_t i = DCRO_CODE_COUNT_MAX / 2; i < DCRO_CODE_COUNT_MAX; i++) {
 8005762:	d1f7      	bne.n	8005754 <sr_calib_v2_apply_vcro_offsets.isra.0+0x38>
}
 8005764:	f85d fb04 	ldr.w	pc, [sp], #4
        high_codes_bits = (calib_vars->nvm_vcro_shift & BITS_FREQ_SHIFT_TX_1) >> POS_FREQ_SHIFT_TX_1;
 8005768:	f3c0 1e03 	ubfx	lr, r0, #4, #4
        low_codes_bits  = (calib_vars->nvm_vcro_shift & BITS_FREQ_SHIFT_TX_0) >> POS_FREQ_SHIFT_TX_0;
 800576c:	f000 0c0f 	and.w	ip, r0, #15
 8005770:	e7da      	b.n	8005728 <sr_calib_v2_apply_vcro_offsets.isra.0+0xc>
 8005772:	bf00      	nop

08005774 <sr_calib_v1_fill_new_dcro_codes_table.isra.0>:
static void sr_calib_v1_fill_new_dcro_codes_table(calib_vars_t *calib_vars, uint16_t *freq_table, bool rx, uint8_t *new_dcro_codes)
 8005774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005778:	460e      	mov	r6, r1
 800577a:	461d      	mov	r5, r3
    if (rx) {
 800577c:	b34a      	cbz	r2, 80057d2 <sr_calib_v1_fill_new_dcro_codes_table.isra.0+0x5e>
        high_codes_bits = (calib_vars->nvm_vcro_shift & BITS_FREQ_SHIFT_RX_1) >> POS_FREQ_SHIFT_RX_1;
 800577e:	ea4f 3910 	mov.w	r9, r0, lsr #12
        low_codes_bits  = (calib_vars->nvm_vcro_shift & BITS_FREQ_SHIFT_RX_0) >> POS_FREQ_SHIFT_RX_0;
 8005782:	f3c0 2003 	ubfx	r0, r0, #8, #4
    if (0x8 & bits) { /* Check if negative */
 8005786:	0703      	lsls	r3, r0, #28
        offset = 0xfffffff0 | bits; /* Extend the sign on 32 bits */
 8005788:	bf48      	it	mi
 800578a:	f060 000f 	ornmi	r0, r0, #15
    return offset;
 800578e:	fa4f f880 	sxtb.w	r8, r0
    for (uint8_t i = 0x0; i < DCRO_CODE_COUNT_MAX / 2; i++) {
 8005792:	1e6f      	subs	r7, r5, #1
    return offset;
 8005794:	2400      	movs	r4, #0
        new_dcro_codes[i] = sr_calib_v1_find_new_dcro_code(freq_table, i, offset);
 8005796:	b2e1      	uxtb	r1, r4
 8005798:	4642      	mov	r2, r8
 800579a:	4630      	mov	r0, r6
 800579c:	f7ff fec0 	bl	8005520 <sr_calib_v1_find_new_dcro_code>
    for (uint8_t i = 0x0; i < DCRO_CODE_COUNT_MAX / 2; i++) {
 80057a0:	3401      	adds	r4, #1
 80057a2:	2c10      	cmp	r4, #16
        new_dcro_codes[i] = sr_calib_v1_find_new_dcro_code(freq_table, i, offset);
 80057a4:	f807 0f01 	strb.w	r0, [r7, #1]!
    for (uint8_t i = 0x0; i < DCRO_CODE_COUNT_MAX / 2; i++) {
 80057a8:	d1f5      	bne.n	8005796 <sr_calib_v1_fill_new_dcro_codes_table.isra.0+0x22>
    if (0x8 & bits) { /* Check if negative */
 80057aa:	f019 0f08 	tst.w	r9, #8
        offset = 0xfffffff0 | bits; /* Extend the sign on 32 bits */
 80057ae:	bf18      	it	ne
 80057b0:	f069 090f 	ornne	r9, r9, #15
    return offset;
 80057b4:	fa4f f989 	sxtb.w	r9, r9
    for (uint8_t i = DCRO_CODE_COUNT_MAX / 2; i < DCRO_CODE_COUNT_MAX; i++) {
 80057b8:	350f      	adds	r5, #15
        new_dcro_codes[i] = sr_calib_v1_find_new_dcro_code(freq_table, i, offset);
 80057ba:	b2e1      	uxtb	r1, r4
 80057bc:	464a      	mov	r2, r9
 80057be:	4630      	mov	r0, r6
 80057c0:	f7ff feae 	bl	8005520 <sr_calib_v1_find_new_dcro_code>
    for (uint8_t i = DCRO_CODE_COUNT_MAX / 2; i < DCRO_CODE_COUNT_MAX; i++) {
 80057c4:	3401      	adds	r4, #1
 80057c6:	2c20      	cmp	r4, #32
        new_dcro_codes[i] = sr_calib_v1_find_new_dcro_code(freq_table, i, offset);
 80057c8:	f805 0f01 	strb.w	r0, [r5, #1]!
    for (uint8_t i = DCRO_CODE_COUNT_MAX / 2; i < DCRO_CODE_COUNT_MAX; i++) {
 80057cc:	d1f5      	bne.n	80057ba <sr_calib_v1_fill_new_dcro_codes_table.isra.0+0x46>
}
 80057ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        high_codes_bits = (calib_vars->nvm_vcro_shift & BITS_FREQ_SHIFT_TX_1) >> POS_FREQ_SHIFT_TX_1;
 80057d2:	f3c0 1903 	ubfx	r9, r0, #4, #4
        low_codes_bits  = (calib_vars->nvm_vcro_shift & BITS_FREQ_SHIFT_TX_0) >> POS_FREQ_SHIFT_TX_0;
 80057d6:	f000 000f 	and.w	r0, r0, #15
 80057da:	e7d4      	b.n	8005786 <sr_calib_v1_fill_new_dcro_codes_table.isra.0+0x12>

080057dc <sr_calib_fill_freq_table>:
{
 80057dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e0:	b085      	sub	sp, #20
 80057e2:	e9cd 2101 	strd	r2, r1, [sp, #4]
static inline void sr_access_append_write_8(access_sequence_instance_t *access_sequence,
                                            uint8_t target_reg,
                                            uint8_t value,
                                            sr_phy_error_t *error)
{
    uint32_t index = access_sequence->index;
 80057e6:	2300      	movs	r3, #0
 80057e8:	7c07      	ldrb	r7, [r0, #16]
 80057ea:	9303      	str	r3, [sp, #12]
 80057ec:	4604      	mov	r4, r0
        invalid_dcro_code = false;
 80057ee:	f04f 0a00 	mov.w	sl, #0
{
 80057f2:	463e      	mov	r6, r7
 80057f4:	f89d 900c 	ldrb.w	r9, [sp, #12]
 80057f8:	2764      	movs	r7, #100	; 0x64
        average_dcro = 0;
 80057fa:	4655      	mov	r5, sl
    }
#else
    (void)error;
#endif

    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80057fc:	f04f 085e 	mov.w	r8, #94	; 0x5e
 8005800:	e033      	b.n	800586a <sr_calib_fill_freq_table+0x8e>
 8005802:	68a2      	ldr	r2, [r4, #8]
 8005804:	f04f 065f 	mov.w	r6, #95	; 0x5f
 8005808:	54d6      	strb	r6, [r2, r3]
    access_sequence->tx_buffer[index++] = value;
 800580a:	68a2      	ldr	r2, [r4, #8]
 800580c:	4413      	add	r3, r2
 800580e:	7058      	strb	r0, [r3, #1]

#if (ACCESS_ADV_ERR_CHECK_EN > 0U)
    *error = ACCESS_SEQUENCE_ERR_NONE;
#endif
    access_sequence->index = index;
 8005810:	7421      	strb	r1, [r4, #16]
 */
static inline void uwb_transfer_blocking(radio_t *radio)
{
    sr_phy_error_t access_sequence_error = ACCESS_SEQUENCE_ERR_BUSY;

    sr_access_transfer_blocking(radio->radio_hal, &radio->access_sequence, &access_sequence_error);
 8005812:	6826      	ldr	r6, [r4, #0]
        return;
    }
#else
    (void)(error);
#endif
    radio_hal->reset_cs();
 8005814:	69b3      	ldr	r3, [r6, #24]
 8005816:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 8005818:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800581c:	7c22      	ldrb	r2, [r4, #16]
 800581e:	6a33      	ldr	r3, [r6, #32]
 8005820:	4798      	blx	r3
                                             access_sequence->rx_buffer,
                                             access_sequence->index);
    radio_hal->set_cs();
 8005822:	6973      	ldr	r3, [r6, #20]
 8005824:	4798      	blx	r3
    access_sequence->tx_buffer[index++] = target_reg;
 8005826:	68a3      	ldr	r3, [r4, #8]
 8005828:	221e      	movs	r2, #30
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	6826      	ldr	r6, [r4, #0]
    *buffer = &access_sequence->rx_buffer[index++];
 800582e:	f8d4 b00c 	ldr.w	fp, [r4, #12]
    access_sequence->index = index;
 8005832:	2302      	movs	r3, #2
 8005834:	7423      	strb	r3, [r4, #16]
    radio_hal->reset_cs();
 8005836:	69b3      	ldr	r3, [r6, #24]
 8005838:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 800583a:	6a33      	ldr	r3, [r6, #32]
 800583c:	7c22      	ldrb	r2, [r4, #16]
 800583e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8005842:	4798      	blx	r3
    radio_hal->set_cs();
 8005844:	6973      	ldr	r3, [r6, #20]
 8005846:	4798      	blx	r3
    access_sequence->index = 0;
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	7423      	strb	r3, [r4, #16]
            if (*calib_res < LOWEST_VALID_DCRO_FREQ) {
 800584e:	f89b 3001 	ldrb.w	r3, [fp, #1]
        for (uint8_t compt_count = 0; compt_count < DCRO_CODE_AVERAGING_COUNT; compt_count++) {
 8005852:	3f01      	subs	r7, #1
               invalid_dcro_code = true;
 8005854:	2b31      	cmp	r3, #49	; 0x31
            average_dcro += *calib_res;
 8005856:	441d      	add	r5, r3
               invalid_dcro_code = true;
 8005858:	bf98      	it	ls
 800585a:	f04f 0a01 	movls.w	sl, #1
        for (uint8_t compt_count = 0; compt_count < DCRO_CODE_AVERAGING_COUNT; compt_count++) {
 800585e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
            average_dcro += *calib_res;
 8005862:	b2ad      	uxth	r5, r5
        for (uint8_t compt_count = 0; compt_count < DCRO_CODE_AVERAGING_COUNT; compt_count++) {
 8005864:	f04f 0600 	mov.w	r6, #0
 8005868:	d019      	beq.n	800589e <sr_calib_fill_freq_table+0xc2>
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800586a:	68a2      	ldr	r2, [r4, #8]
 800586c:	f802 8006 	strb.w	r8, [r2, r6]
    access_sequence->tx_buffer[index++] = value;
 8005870:	68a2      	ldr	r2, [r4, #8]
 8005872:	4432      	add	r2, r6
    access_sequence->index = index;
 8005874:	1cb3      	adds	r3, r6, #2
    access_sequence->tx_buffer[index++] = value;
 8005876:	f882 9001 	strb.w	r9, [r2, #1]
            if (rx) {
 800587a:	9a01      	ldr	r2, [sp, #4]
    access_sequence->index = index;
 800587c:	b2db      	uxtb	r3, r3
 800587e:	1d31      	adds	r1, r6, #4
    access_sequence->tx_buffer[index++] = value;
 8005880:	20a0      	movs	r0, #160	; 0xa0
    access_sequence->index = index;
 8005882:	7423      	strb	r3, [r4, #16]
 8005884:	2a00      	cmp	r2, #0
 8005886:	d1bc      	bne.n	8005802 <sr_calib_fill_freq_table+0x26>
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8005888:	68a2      	ldr	r2, [r4, #8]
 800588a:	f04f 015f 	mov.w	r1, #95	; 0x5f
 800588e:	54d1      	strb	r1, [r2, r3]
    access_sequence->tx_buffer[index++] = value;
 8005890:	68a2      	ldr	r2, [r4, #8]
 8005892:	4413      	add	r3, r2
    access_sequence->index = index;
 8005894:	3604      	adds	r6, #4
    access_sequence->tx_buffer[index++] = value;
 8005896:	2180      	movs	r1, #128	; 0x80
 8005898:	7059      	strb	r1, [r3, #1]
    access_sequence->index = index;
 800589a:	7426      	strb	r6, [r4, #16]
static inline void uwb_write_register_8(radio_t *radio, uint8_t target_reg, uint8_t value)
{
    sr_phy_error_t error;

    sr_access_append_write_8(&radio->access_sequence, target_reg, value, &error);
}
 800589c:	e7b9      	b.n	8005812 <sr_calib_fill_freq_table+0x36>
        if (invalid_dcro_code) {
 800589e:	f1ba 0f00 	cmp.w	sl, #0
 80058a2:	d00c      	beq.n	80058be <sr_calib_fill_freq_table+0xe2>
            freq_table[dcro_code] = 0;
 80058a4:	9b02      	ldr	r3, [sp, #8]
 80058a6:	801f      	strh	r7, [r3, #0]
    for (dcro_code = 0; dcro_code < DCRO_CODE_COUNT_MAX; dcro_code++) {
 80058a8:	9b03      	ldr	r3, [sp, #12]
 80058aa:	9a02      	ldr	r2, [sp, #8]
 80058ac:	3301      	adds	r3, #1
 80058ae:	3202      	adds	r2, #2
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	9303      	str	r3, [sp, #12]
 80058b4:	9202      	str	r2, [sp, #8]
 80058b6:	d19a      	bne.n	80057ee <sr_calib_fill_freq_table+0x12>
}
 80058b8:	b005      	add	sp, #20
 80058ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            average_dcro /= DCRO_CODE_AVERAGING_COUNT;
 80058be:	4b03      	ldr	r3, [pc, #12]	; (80058cc <sr_calib_fill_freq_table+0xf0>)
 80058c0:	fba3 2305 	umull	r2, r3, r3, r5
            freq_table[dcro_code] = average_dcro;
 80058c4:	9a02      	ldr	r2, [sp, #8]
            average_dcro /= DCRO_CODE_AVERAGING_COUNT;
 80058c6:	095b      	lsrs	r3, r3, #5
            freq_table[dcro_code] = average_dcro;
 80058c8:	8013      	strh	r3, [r2, #0]
 80058ca:	e7ed      	b.n	80058a8 <sr_calib_fill_freq_table+0xcc>
 80058cc:	51eb851f 	.word	0x51eb851f

080058d0 <sr_calib_tune_delay_line>:
{
 80058d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80058d4:	6882      	ldr	r2, [r0, #8]
    uint32_t index = access_sequence->index;
 80058d6:	7c03      	ldrb	r3, [r0, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80058d8:	2144      	movs	r1, #68	; 0x44
 80058da:	54d1      	strb	r1, [r2, r3]
    access_sequence->tx_buffer[index++] = value;
 80058dc:	6882      	ldr	r2, [r0, #8]
 80058de:	441a      	add	r2, r3
 80058e0:	2700      	movs	r7, #0
 80058e2:	7057      	strb	r7, [r2, #1]
    access_sequence->index = index;
 80058e4:	1c9a      	adds	r2, r3, #2
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80058e6:	6881      	ldr	r1, [r0, #8]
    uint32_t index = access_sequence->index;
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	4604      	mov	r4, r0
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80058ec:	2045      	movs	r0, #69	; 0x45
 80058ee:	5488      	strb	r0, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 80058f0:	68a1      	ldr	r1, [r4, #8]
 80058f2:	4411      	add	r1, r2
    access_sequence->index = index;
 80058f4:	1d1a      	adds	r2, r3, #4
    access_sequence->tx_buffer[index++] = value;
 80058f6:	704f      	strb	r7, [r1, #1]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80058f8:	68a1      	ldr	r1, [r4, #8]
    uint32_t index = access_sequence->index;
 80058fa:	b2d2      	uxtb	r2, r2
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80058fc:	205f      	movs	r0, #95	; 0x5f
 80058fe:	5488      	strb	r0, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 8005900:	68a1      	ldr	r1, [r4, #8]
 8005902:	440a      	add	r2, r1
    access_sequence->index = index;
 8005904:	3306      	adds	r3, #6
    access_sequence->tx_buffer[index++] = value;
 8005906:	2120      	movs	r1, #32
    access_sequence->index = index;
 8005908:	b2db      	uxtb	r3, r3
    access_sequence->tx_buffer[index++] = value;
 800590a:	7051      	strb	r1, [r2, #1]
    access_sequence->tx_buffer[index++] = target_reg;
 800590c:	f04f 081f 	mov.w	r8, #31
 8005910:	68a1      	ldr	r1, [r4, #8]
 8005912:	f801 8003 	strb.w	r8, [r1, r3]
    access_sequence->index = index;
 8005916:	1c9a      	adds	r2, r3, #2
    sr_access_transfer_blocking(radio->radio_hal, &radio->access_sequence, &access_sequence_error);
 8005918:	6826      	ldr	r6, [r4, #0]
 800591a:	7422      	strb	r2, [r4, #16]
    radio_hal->reset_cs();
 800591c:	69b2      	ldr	r2, [r6, #24]
    *buffer = &access_sequence->rx_buffer[index++];
 800591e:	f8d4 900c 	ldr.w	r9, [r4, #12]
    access_sequence->tx_buffer[index++] = target_reg;
 8005922:	1c5d      	adds	r5, r3, #1
    radio_hal->reset_cs();
 8005924:	4790      	blx	r2
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 8005926:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800592a:	7c22      	ldrb	r2, [r4, #16]
 800592c:	6a33      	ldr	r3, [r6, #32]
 800592e:	4798      	blx	r3
    radio_hal->set_cs();
 8005930:	6973      	ldr	r3, [r6, #20]
 8005932:	4798      	blx	r3
    access_sequence->index = 0;
 8005934:	7427      	strb	r7, [r4, #16]
    } while (!(*read_reg & BIT_AWAKE));
 8005936:	f819 3005 	ldrb.w	r3, [r9, r5]
 800593a:	f013 0310 	ands.w	r3, r3, #16
 800593e:	d0e7      	beq.n	8005910 <sr_calib_tune_delay_line+0x40>
 8005940:	2500      	movs	r5, #0
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8005942:	f04f 0a5d 	mov.w	sl, #93	; 0x5d
    access_sequence->tx_buffer[index++] = target_reg;
 8005946:	f04f 091d 	mov.w	r9, #29
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800594a:	68a3      	ldr	r3, [r4, #8]
 800594c:	f883 a000 	strb.w	sl, [r3]
    access_sequence->tx_buffer[index++] = value;
 8005950:	68a3      	ldr	r3, [r4, #8]
 8005952:	fa5f f885 	uxtb.w	r8, r5
 8005956:	ea4f 1708 	mov.w	r7, r8, lsl #4
 800595a:	705f      	strb	r7, [r3, #1]
    access_sequence->tx_buffer[index++] = target_reg;
 800595c:	68a3      	ldr	r3, [r4, #8]
 800595e:	f883 9002 	strb.w	r9, [r3, #2]
 8005962:	6826      	ldr	r6, [r4, #0]
    *buffer = &access_sequence->rx_buffer[index++];
 8005964:	f8d4 b00c 	ldr.w	fp, [r4, #12]
    access_sequence->index = index;
 8005968:	f04f 0304 	mov.w	r3, #4
 800596c:	7423      	strb	r3, [r4, #16]
    radio_hal->reset_cs();
 800596e:	69b3      	ldr	r3, [r6, #24]
 8005970:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 8005972:	6a33      	ldr	r3, [r6, #32]
 8005974:	7c22      	ldrb	r2, [r4, #16]
 8005976:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800597a:	4798      	blx	r3
    radio_hal->set_cs();
 800597c:	6973      	ldr	r3, [r6, #20]
 800597e:	4798      	blx	r3
    access_sequence->index = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	7423      	strb	r3, [r4, #16]
        if (*read_reg & BIT_LEADLAG) {
 8005984:	f89b 6003 	ldrb.w	r6, [fp, #3]
 8005988:	f016 0608 	ands.w	r6, r6, #8
    for (dl_tune = 0x0; dl_tune < DL_TUNE_VALUE_COUNT; dl_tune++) {
 800598c:	f105 0501 	add.w	r5, r5, #1
        if (*read_reg & BIT_LEADLAG) {
 8005990:	d122      	bne.n	80059d8 <sr_calib_tune_delay_line+0x108>
    for (dl_tune = 0x0; dl_tune < DL_TUNE_VALUE_COUNT; dl_tune++) {
 8005992:	2d10      	cmp	r5, #16
 8005994:	d1d9      	bne.n	800594a <sr_calib_tune_delay_line+0x7a>
 8005996:	2709      	movs	r7, #9
 8005998:	4633      	mov	r3, r6
    radio->shadow_reg.reg_dll_tuning &= ~reg_data.bytes[_BIT_TO_CLEAR];
 800599a:	7f22      	ldrb	r2, [r4, #28]
 800599c:	4013      	ands	r3, r2
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800599e:	68a2      	ldr	r2, [r4, #8]
    radio->shadow_reg.reg_dll_tuning |= reg_data.bytes[_BIT_TO_SET];
 80059a0:	431f      	orrs	r7, r3
 80059a2:	235d      	movs	r3, #93	; 0x5d
 80059a4:	7727      	strb	r7, [r4, #28]
 80059a6:	7013      	strb	r3, [r2, #0]
    access_sequence->tx_buffer[index++] = value;
 80059a8:	68a3      	ldr	r3, [r4, #8]
 80059aa:	705f      	strb	r7, [r3, #1]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80059ac:	68a3      	ldr	r3, [r4, #8]
 80059ae:	225f      	movs	r2, #95	; 0x5f
 80059b0:	709a      	strb	r2, [r3, #2]
    access_sequence->tx_buffer[index++] = value;
 80059b2:	68a2      	ldr	r2, [r4, #8]
 80059b4:	2304      	movs	r3, #4
 80059b6:	70d3      	strb	r3, [r2, #3]
    sr_access_transfer_blocking(radio->radio_hal, &radio->access_sequence, &access_sequence_error);
 80059b8:	6825      	ldr	r5, [r4, #0]
    access_sequence->index = index;
 80059ba:	7423      	strb	r3, [r4, #16]
    radio_hal->reset_cs();
 80059bc:	69ab      	ldr	r3, [r5, #24]
 80059be:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 80059c0:	68a0      	ldr	r0, [r4, #8]
 80059c2:	7c22      	ldrb	r2, [r4, #16]
 80059c4:	68e1      	ldr	r1, [r4, #12]
 80059c6:	6a2b      	ldr	r3, [r5, #32]
 80059c8:	4798      	blx	r3
    radio_hal->set_cs();
 80059ca:	696b      	ldr	r3, [r5, #20]
 80059cc:	4798      	blx	r3
    access_sequence->index = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	7423      	strb	r3, [r4, #16]
}
 80059d2:	4630      	mov	r0, r6
 80059d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uwb_set_dll_tuning(radio,  SET_DLLTUNING(DLL_TUNING_CLEAR,
 80059d8:	f447 477f 	orr.w	r7, r7, #65280	; 0xff00
 80059dc:	f047 0709 	orr.w	r7, r7, #9
    radio->shadow_reg.reg_dll_tuning &= ~reg_data.bytes[_BIT_TO_CLEAR];
 80059e0:	2300      	movs	r3, #0
 80059e2:	b2ff      	uxtb	r7, r7
 80059e4:	4646      	mov	r6, r8
 80059e6:	e7d8      	b.n	800599a <sr_calib_tune_delay_line+0xca>

080059e8 <sr_calib_frequency_to_code>:
{
 80059e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059ec:	2400      	movs	r4, #0
 80059ee:	b083      	sub	sp, #12
 80059f0:	460d      	mov	r5, r1
 80059f2:	46a1      	mov	r9, r4
    if (rx_table) {
 80059f4:	2a00      	cmp	r2, #0
 80059f6:	d056      	beq.n	8005aa6 <sr_calib_frequency_to_code+0xbe>
        dcro_code_count = calib_vars->new_dcro_codes_rx_size;
 80059f8:	f890 6054 	ldrb.w	r6, [r0, #84]	; 0x54
        freq_table = calib_vars->freq_table_rx;
 80059fc:	f100 0798 	add.w	r7, r0, #152	; 0x98
        new_dcro_codes = calib_vars->new_dcro_codes_rx;
 8005a00:	f100 0834 	add.w	r8, r0, #52	; 0x34
    if (use_calib_v1(calib_vars)) {
 8005a04:	f7ff fe52 	bl	80056ac <use_calib_v1>
 8005a08:	bb38      	cbnz	r0, 8005a5a <sr_calib_frequency_to_code+0x72>
        for (uint8_t i = 1; i < dcro_code_count; i++) {
 8005a0a:	2e01      	cmp	r6, #1
 8005a0c:	d920      	bls.n	8005a50 <sr_calib_frequency_to_code+0x68>
 8005a0e:	4640      	mov	r0, r8
 8005a10:	4639      	mov	r1, r7
 8005a12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8005a16:	2301      	movs	r3, #1
 8005a18:	e006      	b.n	8005a28 <sr_calib_frequency_to_code+0x40>
            } else if (i == (dcro_code_count - 1)) {
 8005a1a:	4563      	cmp	r3, ip
        for (uint8_t i = 1; i < dcro_code_count; i++) {
 8005a1c:	f103 0301 	add.w	r3, r3, #1
 8005a20:	b2da      	uxtb	r2, r3
            } else if (i == (dcro_code_count - 1)) {
 8005a22:	d047      	beq.n	8005ab4 <sr_calib_frequency_to_code+0xcc>
        for (uint8_t i = 1; i < dcro_code_count; i++) {
 8005a24:	4296      	cmp	r6, r2
 8005a26:	d913      	bls.n	8005a50 <sr_calib_frequency_to_code+0x68>
            if (freq > freq_table[i]) {
 8005a28:	f831 2f02 	ldrh.w	r2, [r1, #2]!
            dcro_calib.code = new_dcro_codes[i];
 8005a2c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
            if (freq > freq_table[i]) {
 8005a30:	42aa      	cmp	r2, r5
 8005a32:	d2f2      	bcs.n	8005a1a <sr_calib_frequency_to_code+0x32>
                if ((freq - freq_table[i]) > (freq_table[i - 1] - freq)) {
 8005a34:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005a38:	3901      	subs	r1, #1
 8005a3a:	1aaa      	subs	r2, r5, r2
 8005a3c:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8005a40:	1b4d      	subs	r5, r1, r5
 8005a42:	42aa      	cmp	r2, r5
 8005a44:	dd36      	ble.n	8005ab4 <sr_calib_frequency_to_code+0xcc>
                    dcro_calib.code = new_dcro_codes[i - 1];
 8005a46:	4443      	add	r3, r8
                    dcro_calib.lower_than_target = true;
 8005a48:	f04f 0901 	mov.w	r9, #1
                    dcro_calib.code = new_dcro_codes[i - 1];
 8005a4c:	f813 4c01 	ldrb.w	r4, [r3, #-1]
}
 8005a50:	ea49 2004 	orr.w	r0, r9, r4, lsl #8
 8005a54:	b003      	add	sp, #12
 8005a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for (dcro_calib.code = 1; dcro_calib.code < dcro_code_count; dcro_calib.code++) {
 8005a5a:	2e01      	cmp	r6, #1
 8005a5c:	d931      	bls.n	8005ac2 <sr_calib_frequency_to_code+0xda>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4638      	mov	r0, r7
 8005a62:	f106 3eff 	add.w	lr, r6, #4294967295	; 0xffffffff
 8005a66:	461a      	mov	r2, r3
 8005a68:	e008      	b.n	8005a7c <sr_calib_frequency_to_code+0x94>
            } else if (dcro_calib.code == (dcro_code_count - 1)) {
 8005a6a:	459e      	cmp	lr, r3
        for (dcro_calib.code = 1; dcro_calib.code < dcro_code_count; dcro_calib.code++) {
 8005a6c:	f103 0301 	add.w	r3, r3, #1
 8005a70:	b2da      	uxtb	r2, r3
            } else if (dcro_calib.code == (dcro_code_count - 1)) {
 8005a72:	d01f      	beq.n	8005ab4 <sr_calib_frequency_to_code+0xcc>
        for (dcro_calib.code = 1; dcro_calib.code < dcro_code_count; dcro_calib.code++) {
 8005a74:	4296      	cmp	r6, r2
 8005a76:	fa5f f48c 	uxtb.w	r4, ip
 8005a7a:	d9e9      	bls.n	8005a50 <sr_calib_frequency_to_code+0x68>
            if (freq > freq_table[dcro_calib.code]) {
 8005a7c:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 8005a80:	42a9      	cmp	r1, r5
        for (dcro_calib.code = 1; dcro_calib.code < dcro_code_count; dcro_calib.code++) {
 8005a82:	f102 0c01 	add.w	ip, r2, #1
 8005a86:	4614      	mov	r4, r2
            if (freq > freq_table[dcro_calib.code]) {
 8005a88:	d2ef      	bcs.n	8005a6a <sr_calib_frequency_to_code+0x82>
                if ((freq - freq_table[dcro_calib.code]) > (freq_table[dcro_calib.code - 1] - freq)) {
 8005a8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	1a69      	subs	r1, r5, r1
 8005a92:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8005a96:	1b5d      	subs	r5, r3, r5
 8005a98:	42a9      	cmp	r1, r5
 8005a9a:	dd0b      	ble.n	8005ab4 <sr_calib_frequency_to_code+0xcc>
                    dcro_calib.code--;
 8005a9c:	1e54      	subs	r4, r2, #1
 8005a9e:	b2e4      	uxtb	r4, r4
                    dcro_calib.lower_than_target = true;
 8005aa0:	f04f 0901 	mov.w	r9, #1
 8005aa4:	e7d4      	b.n	8005a50 <sr_calib_frequency_to_code+0x68>
        dcro_code_count = calib_vars->new_dcro_codes_tx_size;
 8005aa6:	f890 6055 	ldrb.w	r6, [r0, #85]	; 0x55
        freq_table = calib_vars->freq_table_tx;
 8005aaa:	f100 0758 	add.w	r7, r0, #88	; 0x58
        new_dcro_codes = calib_vars->new_dcro_codes_tx;
 8005aae:	f100 0814 	add.w	r8, r0, #20
        dcro_code_count = calib_vars->new_dcro_codes_tx_size;
 8005ab2:	e7a7      	b.n	8005a04 <sr_calib_frequency_to_code+0x1c>
                dcro_calib.lower_than_target = false;
 8005ab4:	f04f 0900 	mov.w	r9, #0
}
 8005ab8:	ea49 2004 	orr.w	r0, r9, r4, lsl #8
 8005abc:	b003      	add	sp, #12
 8005abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for (dcro_calib.code = 1; dcro_calib.code < dcro_code_count; dcro_calib.code++) {
 8005ac2:	2401      	movs	r4, #1
 8005ac4:	e7c4      	b.n	8005a50 <sr_calib_frequency_to_code+0x68>
 8005ac6:	bf00      	nop

08005ac8 <sr_calib_run_frequency_calibration>:
{
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	4604      	mov	r4, r0
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8005ace:	205f      	movs	r0, #95	; 0x5f
    uint32_t index = access_sequence->index;
 8005ad0:	7c23      	ldrb	r3, [r4, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8005ad2:	68a2      	ldr	r2, [r4, #8]
 8005ad4:	54d0      	strb	r0, [r2, r3]
    access_sequence->tx_buffer[index++] = value;
 8005ad6:	68a2      	ldr	r2, [r4, #8]
 8005ad8:	441a      	add	r2, r3
 8005ada:	2700      	movs	r7, #0
    access_sequence->index = index;
 8005adc:	3302      	adds	r3, #2
 8005ade:	b091      	sub	sp, #68	; 0x44
 8005ae0:	460e      	mov	r6, r1
    access_sequence->tx_buffer[index++] = value;
 8005ae2:	7057      	strb	r7, [r2, #1]
    access_sequence->index = index;
 8005ae4:	b2db      	uxtb	r3, r3
    access_sequence->tx_buffer[index++] = target_reg;
 8005ae6:	f04f 081f 	mov.w	r8, #31
 8005aea:	68a1      	ldr	r1, [r4, #8]
 8005aec:	f801 8003 	strb.w	r8, [r1, r3]
    access_sequence->index = index;
 8005af0:	1c9a      	adds	r2, r3, #2
    sr_access_transfer_blocking(radio->radio_hal, &radio->access_sequence, &access_sequence_error);
 8005af2:	f8d4 9000 	ldr.w	r9, [r4]
 8005af6:	7422      	strb	r2, [r4, #16]
    radio_hal->reset_cs();
 8005af8:	f8d9 2018 	ldr.w	r2, [r9, #24]
    *buffer = &access_sequence->rx_buffer[index++];
 8005afc:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    access_sequence->tx_buffer[index++] = target_reg;
 8005b00:	1c5d      	adds	r5, r3, #1
    radio_hal->reset_cs();
 8005b02:	4790      	blx	r2
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 8005b04:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8005b08:	7c22      	ldrb	r2, [r4, #16]
 8005b0a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8005b0e:	4798      	blx	r3
    radio_hal->set_cs();
 8005b10:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005b14:	4798      	blx	r3
    access_sequence->index = 0;
 8005b16:	7427      	strb	r7, [r4, #16]
    } while (!(*read_reg & BIT_AWAKE));
 8005b18:	f81a 3005 	ldrb.w	r3, [sl, r5]
 8005b1c:	f013 0310 	ands.w	r3, r3, #16
 8005b20:	d0e3      	beq.n	8005aea <sr_calib_run_frequency_calibration+0x22>
    sr_calib_fill_freq_table(radio, calib_vars->freq_table_tx, false);
 8005b22:	f106 0558 	add.w	r5, r6, #88	; 0x58
 8005b26:	2200      	movs	r2, #0
 8005b28:	4629      	mov	r1, r5
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f7ff fe56 	bl	80057dc <sr_calib_fill_freq_table>
    uint32_t index = access_sequence->index;
 8005b30:	7c23      	ldrb	r3, [r4, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8005b32:	68a2      	ldr	r2, [r4, #8]
 8005b34:	215f      	movs	r1, #95	; 0x5f
 8005b36:	54d1      	strb	r1, [r2, r3]
    access_sequence->tx_buffer[index++] = value;
 8005b38:	68a2      	ldr	r2, [r4, #8]
 8005b3a:	441a      	add	r2, r3
 8005b3c:	2120      	movs	r1, #32
    access_sequence->index = index;
 8005b3e:	3302      	adds	r3, #2
 8005b40:	b2db      	uxtb	r3, r3
    access_sequence->tx_buffer[index++] = value;
 8005b42:	7051      	strb	r1, [r2, #1]
    access_sequence->tx_buffer[index++] = target_reg;
 8005b44:	f04f 081f 	mov.w	r8, #31
    access_sequence->index = 0;
 8005b48:	2700      	movs	r7, #0
    access_sequence->tx_buffer[index++] = target_reg;
 8005b4a:	68a1      	ldr	r1, [r4, #8]
 8005b4c:	f801 8003 	strb.w	r8, [r1, r3]
    access_sequence->index = index;
 8005b50:	1c9a      	adds	r2, r3, #2
 8005b52:	f8d4 9000 	ldr.w	r9, [r4]
 8005b56:	7422      	strb	r2, [r4, #16]
    radio_hal->reset_cs();
 8005b58:	f8d9 2018 	ldr.w	r2, [r9, #24]
    *buffer = &access_sequence->rx_buffer[index++];
 8005b5c:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    access_sequence->tx_buffer[index++] = target_reg;
 8005b60:	f103 0b01 	add.w	fp, r3, #1
    radio_hal->reset_cs();
 8005b64:	4790      	blx	r2
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 8005b66:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8005b6a:	7c22      	ldrb	r2, [r4, #16]
 8005b6c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8005b70:	4798      	blx	r3
    radio_hal->set_cs();
 8005b72:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005b76:	4798      	blx	r3
    access_sequence->index = 0;
 8005b78:	7427      	strb	r7, [r4, #16]
    } while (!(*read_reg & BIT_AWAKE));
 8005b7a:	f81a 300b 	ldrb.w	r3, [sl, fp]
 8005b7e:	f013 0310 	ands.w	r3, r3, #16
 8005b82:	d0e2      	beq.n	8005b4a <sr_calib_run_frequency_calibration+0x82>
    sr_calib_fill_freq_table(radio, calib_vars->freq_table_rx, true);
 8005b84:	f106 0798 	add.w	r7, r6, #152	; 0x98
 8005b88:	2201      	movs	r2, #1
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	f7ff fe25 	bl	80057dc <sr_calib_fill_freq_table>
    if (use_calib_v1(calib_vars)) {
 8005b92:	4630      	mov	r0, r6
 8005b94:	f7ff fd8a 	bl	80056ac <use_calib_v1>
        if (calib_vars->phy_model == PHY_MODEL_SR1010) {
 8005b98:	7a33      	ldrb	r3, [r6, #8]
    if (use_calib_v1(calib_vars)) {
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	d06a      	beq.n	8005c74 <sr_calib_run_frequency_calibration+0x1ac>
        if (calib_vars->phy_model == PHY_MODEL_SR1010) {
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f040 8099 	bne.w	8005cd6 <sr_calib_run_frequency_calibration+0x20e>
                calib_vars->freq_table_tx[dcro_code] = calib_vars->freq_table_rx[dcro_code];
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	462a      	mov	r2, r5
 8005ba8:	f106 0ed8 	add.w	lr, r6, #216	; 0xd8
 8005bac:	681c      	ldr	r4, [r3, #0]
 8005bae:	6858      	ldr	r0, [r3, #4]
 8005bb0:	6899      	ldr	r1, [r3, #8]
 8005bb2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005bb6:	f8c2 c00c 	str.w	ip, [r2, #12]
 8005bba:	3310      	adds	r3, #16
 8005bbc:	4573      	cmp	r3, lr
 8005bbe:	6014      	str	r4, [r2, #0]
 8005bc0:	6050      	str	r0, [r2, #4]
 8005bc2:	6091      	str	r1, [r2, #8]
 8005bc4:	f102 0210 	add.w	r2, r2, #16
 8005bc8:	d1f0      	bne.n	8005bac <sr_calib_run_frequency_calibration+0xe4>
        sr_calib_v1_fill_new_dcro_codes_table(calib_vars, calib_vars->freq_table_tx, false, calib_vars->new_dcro_codes_tx);
 8005bca:	f8b6 0056 	ldrh.w	r0, [r6, #86]	; 0x56
 8005bce:	f106 0314 	add.w	r3, r6, #20
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	f7ff fdcd 	bl	8005774 <sr_calib_v1_fill_new_dcro_codes_table.isra.0>
    for (uint8_t i = 0; i < DCRO_CODE_COUNT_MAX; i++) {
 8005bda:	f106 0213 	add.w	r2, r6, #19
 8005bde:	466b      	mov	r3, sp
 8005be0:	a810      	add	r0, sp, #64	; 0x40
        temp_freq_table[i] = freq_table[new_code];
 8005be2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005be6:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
 8005bea:	f823 1b02 	strh.w	r1, [r3], #2
    for (uint8_t i = 0; i < DCRO_CODE_COUNT_MAX; i++) {
 8005bee:	4298      	cmp	r0, r3
 8005bf0:	d1f7      	bne.n	8005be2 <sr_calib_run_frequency_calibration+0x11a>
    memcpy(freq_table, temp_freq_table, 2 * DCRO_CODE_COUNT_MAX);   /* Flawfinder: ignore */
 8005bf2:	46ec      	mov	ip, sp
 8005bf4:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
 8005bf8:	4664      	mov	r4, ip
 8005bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bfc:	4574      	cmp	r4, lr
 8005bfe:	f105 0510 	add.w	r5, r5, #16
 8005c02:	f10c 0c10 	add.w	ip, ip, #16
 8005c06:	f845 0c10 	str.w	r0, [r5, #-16]
 8005c0a:	f845 1c0c 	str.w	r1, [r5, #-12]
 8005c0e:	f845 2c08 	str.w	r2, [r5, #-8]
 8005c12:	f845 3c04 	str.w	r3, [r5, #-4]
 8005c16:	d1ef      	bne.n	8005bf8 <sr_calib_run_frequency_calibration+0x130>
        sr_calib_v1_fill_new_dcro_codes_table(calib_vars, calib_vars->freq_table_rx, true, calib_vars->new_dcro_codes_rx);
 8005c18:	f8b6 0056 	ldrh.w	r0, [r6, #86]	; 0x56
 8005c1c:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8005c20:	2201      	movs	r2, #1
 8005c22:	4639      	mov	r1, r7
 8005c24:	f7ff fda6 	bl	8005774 <sr_calib_v1_fill_new_dcro_codes_table.isra.0>
    for (uint8_t i = 0; i < DCRO_CODE_COUNT_MAX; i++) {
 8005c28:	f106 0233 	add.w	r2, r6, #51	; 0x33
 8005c2c:	466b      	mov	r3, sp
 8005c2e:	a810      	add	r0, sp, #64	; 0x40
        temp_freq_table[i] = freq_table[new_code];
 8005c30:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005c34:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8005c38:	f823 1b02 	strh.w	r1, [r3], #2
    for (uint8_t i = 0; i < DCRO_CODE_COUNT_MAX; i++) {
 8005c3c:	4298      	cmp	r0, r3
 8005c3e:	d1f7      	bne.n	8005c30 <sr_calib_run_frequency_calibration+0x168>
    memcpy(freq_table, temp_freq_table, 2 * DCRO_CODE_COUNT_MAX);   /* Flawfinder: ignore */
 8005c40:	466d      	mov	r5, sp
 8005c42:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8005c46:	462c      	mov	r4, r5
 8005c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c4a:	4564      	cmp	r4, ip
 8005c4c:	f107 0710 	add.w	r7, r7, #16
 8005c50:	f105 0510 	add.w	r5, r5, #16
 8005c54:	f847 0c10 	str.w	r0, [r7, #-16]
 8005c58:	f847 1c0c 	str.w	r1, [r7, #-12]
 8005c5c:	f847 2c08 	str.w	r2, [r7, #-8]
 8005c60:	f847 3c04 	str.w	r3, [r7, #-4]
 8005c64:	d1ef      	bne.n	8005c46 <sr_calib_run_frequency_calibration+0x17e>
        calib_vars->new_dcro_codes_rx_size = DCRO_CODE_COUNT_MAX;
 8005c66:	f242 0320 	movw	r3, #8224	; 0x2020
 8005c6a:	f8a6 3054 	strh.w	r3, [r6, #84]	; 0x54
}
 8005c6e:	b011      	add	sp, #68	; 0x44
 8005c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (calib_vars->phy_model == PHY_MODEL_SR1010) {
 8005c74:	b993      	cbnz	r3, 8005c9c <sr_calib_run_frequency_calibration+0x1d4>
                calib_vars->freq_table_tx[dcro_code] = calib_vars->freq_table_rx[dcro_code];
 8005c76:	463b      	mov	r3, r7
 8005c78:	462a      	mov	r2, r5
 8005c7a:	f106 0ed8 	add.w	lr, r6, #216	; 0xd8
 8005c7e:	681c      	ldr	r4, [r3, #0]
 8005c80:	6858      	ldr	r0, [r3, #4]
 8005c82:	6899      	ldr	r1, [r3, #8]
 8005c84:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005c88:	f8c2 c00c 	str.w	ip, [r2, #12]
 8005c8c:	3310      	adds	r3, #16
 8005c8e:	4573      	cmp	r3, lr
 8005c90:	6014      	str	r4, [r2, #0]
 8005c92:	6050      	str	r0, [r2, #4]
 8005c94:	6091      	str	r1, [r2, #8]
 8005c96:	f102 0210 	add.w	r2, r2, #16
 8005c9a:	d1f0      	bne.n	8005c7e <sr_calib_run_frequency_calibration+0x1b6>
        sr_calib_v2_apply_vcro_offsets(calib_vars, calib_vars->freq_table_tx, false);
 8005c9c:	f8b6 0056 	ldrh.w	r0, [r6, #86]	; 0x56
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	f7ff fd3a 	bl	800571c <sr_calib_v2_apply_vcro_offsets.isra.0>
        calib_vars->new_dcro_codes_tx_size = sr_calib_v2_clean_up_freq_table(calib_vars->freq_table_tx, calib_vars->new_dcro_codes_tx);
 8005ca8:	f106 0114 	add.w	r1, r6, #20
 8005cac:	4628      	mov	r0, r5
 8005cae:	f7ff fc97 	bl	80055e0 <sr_calib_v2_clean_up_freq_table>
        sr_calib_v2_apply_vcro_offsets(calib_vars, calib_vars->freq_table_rx, true);
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4639      	mov	r1, r7
        calib_vars->new_dcro_codes_tx_size = sr_calib_v2_clean_up_freq_table(calib_vars->freq_table_tx, calib_vars->new_dcro_codes_tx);
 8005cb6:	f886 0055 	strb.w	r0, [r6, #85]	; 0x55
        sr_calib_v2_apply_vcro_offsets(calib_vars, calib_vars->freq_table_rx, true);
 8005cba:	f8b6 0056 	ldrh.w	r0, [r6, #86]	; 0x56
 8005cbe:	f7ff fd2d 	bl	800571c <sr_calib_v2_apply_vcro_offsets.isra.0>
        calib_vars->new_dcro_codes_rx_size = sr_calib_v2_clean_up_freq_table(calib_vars->freq_table_rx, calib_vars->new_dcro_codes_rx);
 8005cc2:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f7ff fc8a 	bl	80055e0 <sr_calib_v2_clean_up_freq_table>
 8005ccc:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
}
 8005cd0:	b011      	add	sp, #68	; 0x44
 8005cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if (calib_vars->phy_model == PHY_MODEL_SR1020) {
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d000      	beq.n	8005cdc <sr_calib_run_frequency_calibration+0x214>
            while (1);
 8005cda:	e7fe      	b.n	8005cda <sr_calib_run_frequency_calibration+0x212>
                                   < calib_vars->freq_table_tx[DCRO_CODE_COUNT_MAX / 2 - 1]) {
 8005cdc:	f8b6 c076 	ldrh.w	ip, [r6, #118]	; 0x76
                                   < calib_vars->freq_table_rx[DCRO_CODE_COUNT_MAX / 2 - 1]) {
 8005ce0:	f8b6 40b6 	ldrh.w	r4, [r6, #182]	; 0xb6
 8005ce4:	f106 0356 	add.w	r3, r6, #86	; 0x56
 8005ce8:	f106 0074 	add.w	r0, r6, #116	; 0x74
                    calib_vars->freq_table_tx[dcro_code] = 0xff;
 8005cec:	21ff      	movs	r1, #255	; 0xff
                if (calib_vars->freq_table_tx[dcro_code]
 8005cee:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8005cf2:	4562      	cmp	r2, ip
                if (calib_vars->freq_table_rx[dcro_code]
 8005cf4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
                    calib_vars->freq_table_tx[dcro_code] = 0xff;
 8005cf8:	bf38      	it	cc
 8005cfa:	8019      	strhcc	r1, [r3, #0]
                if (calib_vars->freq_table_rx[dcro_code]
 8005cfc:	42a2      	cmp	r2, r4
                    calib_vars->freq_table_rx[dcro_code] = 0xff;
 8005cfe:	bf38      	it	cc
 8005d00:	f8a3 1040 	strhcc.w	r1, [r3, #64]	; 0x40
            for (dcro_code = 0; dcro_code < DCRO_CODE_COUNT_MAX / 2 - 1; dcro_code++) {
 8005d04:	4283      	cmp	r3, r0
 8005d06:	d1f2      	bne.n	8005cee <sr_calib_run_frequency_calibration+0x226>
 8005d08:	e75f      	b.n	8005bca <sr_calib_run_frequency_calibration+0x102>
 8005d0a:	bf00      	nop

08005d0c <sr_calibrate>:
{
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	4604      	mov	r4, r0
    calib_vars->chip_id = sr_nvm_get_serial_number_chip_id(nvm);
 8005d10:	4610      	mov	r0, r2
{
 8005d12:	4616      	mov	r6, r2
 8005d14:	460d      	mov	r5, r1
    calib_vars->chip_id = sr_nvm_get_serial_number_chip_id(nvm);
 8005d16:	f000 f925 	bl	8005f64 <sr_nvm_get_serial_number_chip_id>
 8005d1a:	e9c5 0100 	strd	r0, r1, [r5]
    calib_vars->phy_model = sr_nvm_get_product_id_model(nvm);
 8005d1e:	4630      	mov	r0, r6
 8005d20:	f000 f8e2 	bl	8005ee8 <sr_nvm_get_product_id_model>
 8005d24:	7228      	strb	r0, [r5, #8]
    calib_vars->phy_package = sr_nvm_get_product_id_package(nvm);
 8005d26:	4630      	mov	r0, r6
 8005d28:	f000 f8ec 	bl	8005f04 <sr_nvm_get_product_id_package>
 8005d2c:	7268      	strb	r0, [r5, #9]
    calib_vars->phy_version = sr_nvm_get_product_id_version(nvm);
 8005d2e:	4630      	mov	r0, r6
 8005d30:	f000 f8e2 	bl	8005ef8 <sr_nvm_get_product_id_version>
 8005d34:	72a8      	strb	r0, [r5, #10]
    calib_vars->binning_setup_code = sr_nvm_get_serial_number_binning_setup_code(nvm);
 8005d36:	4630      	mov	r0, r6
 8005d38:	f000 f90e 	bl	8005f58 <sr_nvm_get_serial_number_binning_setup_code>
 8005d3c:	81a8      	strh	r0, [r5, #12]
    calib_vars->resistune = sr_nvm_get_calibration(nvm);
 8005d3e:	4630      	mov	r0, r6
 8005d40:	f000 f8e8 	bl	8005f14 <sr_nvm_get_calibration>
 8005d44:	73a8      	strb	r0, [r5, #14]
    calib_vars->nvm_vcro_shift = sr_nvm_get_vcro_shift(nvm);
 8005d46:	4630      	mov	r0, r6
 8005d48:	f000 f8e8 	bl	8005f1c <sr_nvm_get_vcro_shift>
 8005d4c:	f8a5 0056 	strh.w	r0, [r5, #86]	; 0x56
    calib_vars->pulse_width_offset = sr_nvm_get_vref_adjust_pulse_width_offset(nvm);
 8005d50:	4630      	mov	r0, r6
 8005d52:	f000 f8eb 	bl	8005f2c <sr_nvm_get_vref_adjust_pulse_width_offset>
 8005d56:	f885 00d8 	strb.w	r0, [r5, #216]	; 0xd8
    calib_vars->vref_tune_offset = sr_nvm_get_vref_adjust_vref_tune_offset(nvm);
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	f000 f8f0 	bl	8005f40 <sr_nvm_get_vref_adjust_vref_tune_offset>
    if (calib_vars->phy_model == PHY_MODEL_SR1020) {
 8005d60:	7a2b      	ldrb	r3, [r5, #8]
    int8_t vref_tune = (int8_t)(calib_vars->resistune & 0x0F);
 8005d62:	f995 100e 	ldrsb.w	r1, [r5, #14]
    calib_vars->vref_tune_offset = sr_nvm_get_vref_adjust_vref_tune_offset(nvm);
 8005d66:	f885 00d9 	strb.w	r0, [r5, #217]	; 0xd9
    if (calib_vars->phy_model == PHY_MODEL_SR1020) {
 8005d6a:	2b01      	cmp	r3, #1
        calib_vars->phy_model = PHY_MODEL_SR1010;
 8005d6c:	bf1b      	ittet	ne
 8005d6e:	2200      	movne	r2, #0
 8005d70:	722a      	strbne	r2, [r5, #8]
        calib_vars->lna_peak_table = lna_peak_table_sr1020;
 8005d72:	4b27      	ldreq	r3, [pc, #156]	; (8005e10 <sr_calibrate+0x104>)
        calib_vars->lna_peak_table = lna_peak_table_sr1010;
 8005d74:	4b27      	ldrne	r3, [pc, #156]	; (8005e14 <sr_calibrate+0x108>)
 8005d76:	612b      	str	r3, [r5, #16]
    int8_t vref_tune = (int8_t)(calib_vars->resistune & 0x0F);
 8005d78:	f001 020f 	and.w	r2, r1, #15
    vref_tune += calib_vars->vref_tune_offset;
 8005d7c:	1813      	adds	r3, r2, r0
    if (vref_tune > VREF_TUNE_MAX_VAL) {
 8005d7e:	b25b      	sxtb	r3, r3
    uint8_t reg_resistune = (calib_vars->resistune & 0xF0) | (vref_tune & 0x0F);
 8005d80:	f021 010f 	bic.w	r1, r1, #15
 8005d84:	f383 0304 	usat	r3, #4, r3
 8005d88:	430b      	orrs	r3, r1
    uint32_t index = access_sequence->index;
 8005d8a:	7c22      	ldrb	r2, [r4, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8005d8c:	68a1      	ldr	r1, [r4, #8]
    reg_resistune = sr_calib_vref_tune_offset(calib_vars) | BIT_LNAIMPED;
 8005d8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	204d      	movs	r0, #77	; 0x4d
    radio->shadow_reg.reg_resistune = resistune_reg_value;
 8005d96:	f884 3020 	strb.w	r3, [r4, #32]
 8005d9a:	5488      	strb	r0, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 8005d9c:	68a1      	ldr	r1, [r4, #8]
 8005d9e:	4411      	add	r1, r2
    access_sequence->index = index;
 8005da0:	3202      	adds	r2, #2
    access_sequence->tx_buffer[index++] = value;
 8005da2:	704b      	strb	r3, [r1, #1]
    sr_access_transfer_blocking(radio->radio_hal, &radio->access_sequence, &access_sequence_error);
 8005da4:	6826      	ldr	r6, [r4, #0]
    access_sequence->index = index;
 8005da6:	7422      	strb	r2, [r4, #16]
    radio_hal->reset_cs();
 8005da8:	69b3      	ldr	r3, [r6, #24]
 8005daa:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 8005dac:	7c22      	ldrb	r2, [r4, #16]
 8005dae:	68e1      	ldr	r1, [r4, #12]
 8005db0:	6a33      	ldr	r3, [r6, #32]
 8005db2:	68a0      	ldr	r0, [r4, #8]
 8005db4:	4798      	blx	r3
    access_sequence->index = 0;
 8005db6:	2700      	movs	r7, #0
    radio_hal->set_cs();
 8005db8:	6973      	ldr	r3, [r6, #20]
 8005dba:	4798      	blx	r3
    access_sequence->index = 0;
 8005dbc:	7427      	strb	r7, [r4, #16]
    sr_calib_tune_delay_line(radio);
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f7ff fd86 	bl	80058d0 <sr_calib_tune_delay_line>
    sr_calib_run_frequency_calibration(radio, calib_vars);
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f7ff fe7e 	bl	8005ac8 <sr_calib_run_frequency_calibration>
    uint32_t index = access_sequence->index;
 8005dcc:	7c23      	ldrb	r3, [r4, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8005dce:	68a2      	ldr	r2, [r4, #8]
 8005dd0:	2170      	movs	r1, #112	; 0x70
 8005dd2:	54d1      	strb	r1, [r2, r3]
    access_sequence->tx_buffer[index++] = value;
 8005dd4:	68a2      	ldr	r2, [r4, #8]
 8005dd6:	441a      	add	r2, r3
 8005dd8:	2188      	movs	r1, #136	; 0x88
 8005dda:	7051      	strb	r1, [r2, #1]
    access_sequence->index = index;
 8005ddc:	1c9a      	adds	r2, r3, #2
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8005dde:	68a1      	ldr	r1, [r4, #8]
    uint32_t index = access_sequence->index;
 8005de0:	b2d2      	uxtb	r2, r2
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8005de2:	206b      	movs	r0, #107	; 0x6b
 8005de4:	5488      	strb	r0, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 8005de6:	68a1      	ldr	r1, [r4, #8]
 8005de8:	440a      	add	r2, r1
 8005dea:	2060      	movs	r0, #96	; 0x60
 8005dec:	7050      	strb	r0, [r2, #1]
 8005dee:	6826      	ldr	r6, [r4, #0]
    access_sequence->index = index;
 8005df0:	3304      	adds	r3, #4
 8005df2:	7423      	strb	r3, [r4, #16]
    radio_hal->reset_cs();
 8005df4:	69b3      	ldr	r3, [r6, #24]
 8005df6:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 8005df8:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8005dfc:	6a33      	ldr	r3, [r6, #32]
 8005dfe:	7c22      	ldrb	r2, [r4, #16]
 8005e00:	4798      	blx	r3
    radio_hal->set_cs();
 8005e02:	6973      	ldr	r3, [r6, #20]
 8005e04:	4798      	blx	r3
    access_sequence->index = 0;
 8005e06:	7427      	strb	r7, [r4, #16]
    radio->phy_version = calib_vars->phy_version;
 8005e08:	7aab      	ldrb	r3, [r5, #10]
 8005e0a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
 8005e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e10:	080146c4 	.word	0x080146c4
 8005e14:	080146b4 	.word	0x080146b4

08005e18 <sr_calib_get_lna_peak>:
{
 8005e18:	b510      	push	{r4, lr}
        if ((freq == calib_vars->lna_peak_table[i]) || (freq > calib_vars->lna_peak_table[0])) {
 8005e1a:	6904      	ldr	r4, [r0, #16]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f1a4 0c02 	sub.w	ip, r4, #2
 8005e22:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
 8005e26:	428a      	cmp	r2, r1
 8005e28:	b2d8      	uxtb	r0, r3
 8005e2a:	d009      	beq.n	8005e40 <sr_calib_get_lna_peak+0x28>
 8005e2c:	f8b4 e000 	ldrh.w	lr, [r4]
 8005e30:	458e      	cmp	lr, r1
 8005e32:	d305      	bcc.n	8005e40 <sr_calib_get_lna_peak+0x28>
        } else if (freq > calib_vars->lna_peak_table[i]) {
 8005e34:	428a      	cmp	r2, r1
 8005e36:	d304      	bcc.n	8005e42 <sr_calib_get_lna_peak+0x2a>
    for (uint8_t i = 0; i < LNA_PEAK_TABLE_SIZE; i++) {
 8005e38:	3301      	adds	r3, #1
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d1f1      	bne.n	8005e22 <sr_calib_get_lna_peak+0xa>
            lna_peak = LNA_PEAK_TABLE_SIZE - 1;
 8005e3e:	2007      	movs	r0, #7
}
 8005e40:	bd10      	pop	{r4, pc}
            min_freq = calib_vars->lna_peak_table[i - 1] - freq;
 8005e42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e46:	3b01      	subs	r3, #1
            max_freq = freq - calib_vars->lna_peak_table[i];
 8005e48:	1a8a      	subs	r2, r1, r2
            min_freq = calib_vars->lna_peak_table[i - 1] - freq;
 8005e4a:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8005e4e:	1a59      	subs	r1, r3, r1
            if (min_freq < max_freq) {
 8005e50:	b292      	uxth	r2, r2
 8005e52:	b289      	uxth	r1, r1
 8005e54:	4291      	cmp	r1, r2
 8005e56:	d2f3      	bcs.n	8005e40 <sr_calib_get_lna_peak+0x28>
                lna_peak = i - 1;
 8005e58:	3801      	subs	r0, #1
 8005e5a:	b2c0      	uxtb	r0, r0
}
 8005e5c:	bd10      	pop	{r4, pc}
 8005e5e:	bf00      	nop

08005e60 <sr_calib_get_next_dcro_code>:
{
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	4604      	mov	r4, r0
 8005e64:	460d      	mov	r5, r1
 8005e66:	4616      	mov	r6, r2
    if (use_calib_v1(calib_vars)) {
 8005e68:	f7ff fc20 	bl	80056ac <use_calib_v1>
 8005e6c:	b140      	cbz	r0, 8005e80 <sr_calib_get_next_dcro_code+0x20>
        if (rx_table) {
 8005e6e:	bb66      	cbnz	r6, 8005eca <sr_calib_get_next_dcro_code+0x6a>
            freq_table = calib_vars->freq_table_tx;
 8005e70:	f104 0058 	add.w	r0, r4, #88	; 0x58
        next_code = sr_calib_v1_find_new_dcro_code(freq_table, code, 1);
 8005e74:	4629      	mov	r1, r5
 8005e76:	2201      	movs	r2, #1
}
 8005e78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        next_code = sr_calib_v1_find_new_dcro_code(freq_table, code, 1);
 8005e7c:	f7ff bb50 	b.w	8005520 <sr_calib_v1_find_new_dcro_code>
        if (rx_table) {
 8005e80:	b1f6      	cbz	r6, 8005ec0 <sr_calib_get_next_dcro_code+0x60>
            code_table_size = calib_vars->new_dcro_codes_rx_size;
 8005e82:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
            code_table = calib_vars->new_dcro_codes_rx;
 8005e86:	f104 0634 	add.w	r6, r4, #52	; 0x34
    for (i = 0; i < new_dcro_codes_count; i++) {
 8005e8a:	b359      	cbz	r1, 8005ee4 <sr_calib_get_next_dcro_code+0x84>
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	1e70      	subs	r0, r6, #1
 8005e90:	4613      	mov	r3, r2
        if (code == new_dcro_codes[i] && (i != (new_dcro_codes_count - 1))) {
 8005e92:	1e4f      	subs	r7, r1, #1
 8005e94:	e005      	b.n	8005ea2 <sr_calib_get_next_dcro_code+0x42>
    for (i = 0; i < new_dcro_codes_count; i++) {
 8005e96:	3201      	adds	r2, #1
 8005e98:	b2d3      	uxtb	r3, r2
 8005e9a:	4299      	cmp	r1, r3
 8005e9c:	fa5f fc84 	uxtb.w	ip, r4
 8005ea0:	d91b      	bls.n	8005eda <sr_calib_get_next_dcro_code+0x7a>
        if (code == new_dcro_codes[i] && (i != (new_dcro_codes_count - 1))) {
 8005ea2:	f810 ef01 	ldrb.w	lr, [r0, #1]!
 8005ea6:	45ae      	cmp	lr, r5
 8005ea8:	f103 0401 	add.w	r4, r3, #1
 8005eac:	469c      	mov	ip, r3
 8005eae:	d1f2      	bne.n	8005e96 <sr_calib_get_next_dcro_code+0x36>
 8005eb0:	4297      	cmp	r7, r2
 8005eb2:	d0f0      	beq.n	8005e96 <sr_calib_get_next_dcro_code+0x36>
            next_code = new_dcro_codes[i + 1];
 8005eb4:	18b4      	adds	r4, r6, r2
 8005eb6:	7860      	ldrb	r0, [r4, #1]
        next_code = 255; /* Invalid */
 8005eb8:	4561      	cmp	r1, ip
 8005eba:	bf08      	it	eq
 8005ebc:	20ff      	moveq	r0, #255	; 0xff
}
 8005ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            code_table_size = calib_vars->new_dcro_codes_tx_size;
 8005ec0:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
            code_table = calib_vars->new_dcro_codes_tx;
 8005ec4:	f104 0614 	add.w	r6, r4, #20
            code_table_size = calib_vars->new_dcro_codes_tx_size;
 8005ec8:	e7df      	b.n	8005e8a <sr_calib_get_next_dcro_code+0x2a>
            freq_table = calib_vars->freq_table_rx;
 8005eca:	f104 0098 	add.w	r0, r4, #152	; 0x98
        next_code = sr_calib_v1_find_new_dcro_code(freq_table, code, 1);
 8005ece:	4629      	mov	r1, r5
 8005ed0:	2201      	movs	r2, #1
}
 8005ed2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        next_code = sr_calib_v1_find_new_dcro_code(freq_table, code, 1);
 8005ed6:	f7ff bb23 	b.w	8005520 <sr_calib_v1_find_new_dcro_code>
    uint8_t next_code = 255; /* Invalid */
 8005eda:	20ff      	movs	r0, #255	; 0xff
        next_code = 255; /* Invalid */
 8005edc:	4561      	cmp	r1, ip
 8005ede:	bf08      	it	eq
 8005ee0:	20ff      	moveq	r0, #255	; 0xff
}
 8005ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        next_code = 255; /* Invalid */
 8005ee4:	20ff      	movs	r0, #255	; 0xff
}
 8005ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ee8 <sr_nvm_get_product_id_model>:
    return nvm_is_populated;
}

uint8_t *sr_nvm_get_value(nvm_entry_t *nvm_entry, uint8_t key)
{
    return ((key == 0) || (key > NVM_KEY_COUNT) ? NULL : nvm_entry[KEY_TO_INDEX(key)].value);
 8005ee8:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    uint16_t product_id;
    uint8_t  model;

    ptr = sr_nvm_get_value(nvm->entry, NVM_KEY_PRODUCT_ID);

    if (ptr == NULL) {
 8005eec:	b110      	cbz	r0, 8005ef4 <sr_nvm_get_product_id_model+0xc>
        model = 0;
    } else {
        product_id = (ptr[1] << 8) | ptr[0]; /* TODO: Create a util for that */
        model = MASK2VAL(product_id, BITS_PID_MODEL);
 8005eee:	8800      	ldrh	r0, [r0, #0]
 8005ef0:	f000 000f 	and.w	r0, r0, #15
    }

    return model;
}
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop

08005ef8 <sr_nvm_get_product_id_version>:
    return ((key == 0) || (key > NVM_KEY_COUNT) ? NULL : nvm_entry[KEY_TO_INDEX(key)].value);
 8005ef8:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    uint16_t product_id;
    uint8_t  version;

    ptr = sr_nvm_get_value(nvm->entry, NVM_KEY_PRODUCT_ID);

    if (ptr == NULL) {
 8005efc:	b108      	cbz	r0, 8005f02 <sr_nvm_get_product_id_version+0xa>
        version = 0;
    } else {
        product_id = (ptr[1] << 8) | ptr[0]; /* TODO: Create a util for that */
        version = MASK2VAL(product_id, BITS_PID_VERSION);
 8005efe:	8800      	ldrh	r0, [r0, #0]
 8005f00:	0b00      	lsrs	r0, r0, #12
    }

    return version;
}
 8005f02:	4770      	bx	lr

08005f04 <sr_nvm_get_product_id_package>:
    return ((key == 0) || (key > NVM_KEY_COUNT) ? NULL : nvm_entry[KEY_TO_INDEX(key)].value);
 8005f04:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    uint16_t product_id;
    uint8_t  package;

    ptr = sr_nvm_get_value(nvm->entry, NVM_KEY_PRODUCT_ID);

    if (ptr == NULL) {
 8005f08:	b110      	cbz	r0, 8005f10 <sr_nvm_get_product_id_package+0xc>
        package = 0;
    } else {
        product_id = (ptr[1] << 8) | ptr[0]; /* TODO: Create a util for that */
        package = MASK2VAL(product_id, BITS_PID_PACKAGE);
 8005f0a:	8800      	ldrh	r0, [r0, #0]
 8005f0c:	f3c0 2003 	ubfx	r0, r0, #8, #4
    }

    return package;
}
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop

08005f14 <sr_nvm_get_calibration>:
    return ((key == 0) || (key > NVM_KEY_COUNT) ? NULL : nvm_entry[KEY_TO_INDEX(key)].value);
 8005f14:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    uint8_t *ptr;
    uint8_t  resistune;

    ptr = sr_nvm_get_value(nvm->entry, NVM_KEY_CALIBRATION);

    if (ptr == NULL) {
 8005f16:	b100      	cbz	r0, 8005f1a <sr_nvm_get_calibration+0x6>
        resistune = 0;
    } else {
        resistune = *ptr;
 8005f18:	7800      	ldrb	r0, [r0, #0]
    }

    return resistune;
}
 8005f1a:	4770      	bx	lr

08005f1c <sr_nvm_get_vcro_shift>:
    return ((key == 0) || (key > NVM_KEY_COUNT) ? NULL : nvm_entry[KEY_TO_INDEX(key)].value);
 8005f1c:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
    uint8_t *ptr;
    uint16_t vcro_shift;

    ptr = sr_nvm_get_value(nvm->entry, NVM_KEY_VCRO_SHIFT);

    if (ptr == NULL) { /* Keep backward compatibility with old SR1020 calibration */
 8005f20:	b110      	cbz	r0, 8005f28 <sr_nvm_get_vcro_shift+0xc>
        vcro_shift = 0x0000;
    } else {
        vcro_shift = (ptr[0] << 8) | ptr[1]; /* Value is written in big-endian in NVM */
 8005f22:	8800      	ldrh	r0, [r0, #0]
 8005f24:	ba40      	rev16	r0, r0
 8005f26:	b280      	uxth	r0, r0
    }

    return vcro_shift;
}
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop

08005f2c <sr_nvm_get_vref_adjust_pulse_width_offset>:
    return ((key == 0) || (key > NVM_KEY_COUNT) ? NULL : nvm_entry[KEY_TO_INDEX(key)].value);
 8005f2c:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
    uint8_t *ptr;
    int8_t pulse_width_offset, pwo_temp;

    ptr = sr_nvm_get_value(nvm->entry, NVM_KEY_VREF_ADJUST);

    if (ptr == NULL) {
 8005f30:	b128      	cbz	r0, 8005f3e <sr_nvm_get_vref_adjust_pulse_width_offset+0x12>
        pulse_width_offset = 0x00;
    } else {
        pwo_temp = ptr[0] >> 4;
 8005f32:	7803      	ldrb	r3, [r0, #0]
 8005f34:	0918      	lsrs	r0, r3, #4
        if (BIT_CHECK(pwo_temp, PULSE_WIDTH_OFFSET_LENGTH)) {
 8005f36:	09db      	lsrs	r3, r3, #7
            pulse_width_offset = 0xF0 | pwo_temp;
 8005f38:	bf18      	it	ne
 8005f3a:	f060 000f 	ornne	r0, r0, #15
            pulse_width_offset = pwo_temp;
        }
    }

    return pulse_width_offset;
}
 8005f3e:	4770      	bx	lr

08005f40 <sr_nvm_get_vref_adjust_vref_tune_offset>:
    return ((key == 0) || (key > NVM_KEY_COUNT) ? NULL : nvm_entry[KEY_TO_INDEX(key)].value);
 8005f40:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
    uint8_t *ptr;
    int8_t  vref_tune_offset, vto_temp;

    ptr = sr_nvm_get_value(nvm->entry, NVM_KEY_VREF_ADJUST);

    if (ptr == NULL) {
 8005f44:	b130      	cbz	r0, 8005f54 <sr_nvm_get_vref_adjust_vref_tune_offset+0x14>
        vref_tune_offset = 0x00;
    } else {
        vto_temp = ptr[0] & 0x0F;
 8005f46:	7803      	ldrb	r3, [r0, #0]
 8005f48:	f003 000f 	and.w	r0, r3, #15
        if (BIT_CHECK(vto_temp, VREF_TUNE_OFFSET_LENGTH)) {
 8005f4c:	071b      	lsls	r3, r3, #28
            vref_tune_offset = 0xF0 | vto_temp;
 8005f4e:	bf48      	it	mi
 8005f50:	f060 000f 	ornmi	r0, r0, #15
            vref_tune_offset = vto_temp;
        }
    }

    return vref_tune_offset;
}
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop

08005f58 <sr_nvm_get_serial_number_binning_setup_code>:
    return ((key == 0) || (key > NVM_KEY_COUNT) ? NULL : nvm_entry[KEY_TO_INDEX(key)].value);
 8005f58:	69c0      	ldr	r0, [r0, #28]
    uint64_t serial_num_lsb;
    uint64_t serial_num_msb;
    uint64_t serial_num;

    ptr = sr_nvm_get_value(nvm->entry, NVM_KEY_SERIAL_NO);
    if (ptr == NULL) {
 8005f5a:	b110      	cbz	r0, 8005f62 <sr_nvm_get_serial_number_binning_setup_code+0xa>
        serial_num = 0;
    } else {
        serial_num_msb = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3];
        serial_num_msb &= 0x00000000FFFFFFFF;
        serial_num_lsb = (ptr[4] << 24) | (ptr[5] << 16) | (ptr[6] << 8) | ptr[7];
 8005f5c:	6800      	ldr	r0, [r0, #0]
 8005f5e:	ba00      	rev	r0, r0
{
    uint64_t serial_number;
    uint16_t binning_setup_code;

    serial_number = sr_nvm_get_serial_number(nvm);
    binning_setup_code = (serial_number & NVM_BINNING_SETUP_MASK) >> NVM_BINNING_SETUP_POS;
 8005f60:	0c00      	lsrs	r0, r0, #16

    return binning_setup_code;
}
 8005f62:	4770      	bx	lr

08005f64 <sr_nvm_get_serial_number_chip_id>:
    return ((key == 0) || (key > NVM_KEY_COUNT) ? NULL : nvm_entry[KEY_TO_INDEX(key)].value);
 8005f64:	69c0      	ldr	r0, [r0, #28]
    if (ptr == NULL) {
 8005f66:	b130      	cbz	r0, 8005f76 <sr_nvm_get_serial_number_chip_id+0x12>
        serial_num_lsb = (ptr[4] << 24) | (ptr[5] << 16) | (ptr[6] << 8) | ptr[7];
 8005f68:	6801      	ldr	r1, [r0, #0]
 8005f6a:	6840      	ldr	r0, [r0, #4]
 8005f6c:	ba09      	rev	r1, r1
 8005f6e:	ba00      	rev	r0, r0
{
    uint64_t serial_number;
    uint64_t chip_id;

    serial_number = sr_nvm_get_serial_number(nvm);
    chip_id = serial_number & NVM_CHIP_ID_MASK;
 8005f70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005f74:	4770      	bx	lr
 8005f76:	4601      	mov	r1, r0

    return chip_id;
}
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop

08005f7c <sr_nvm_power_up>:

    return corner;
}

void sr_nvm_power_up(radio_t *radio)
{
 8005f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f80:	4604      	mov	r4, r0
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8005f82:	2060      	movs	r0, #96	; 0x60
    uint32_t index = access_sequence->index;
 8005f84:	7c23      	ldrb	r3, [r4, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8005f86:	68a2      	ldr	r2, [r4, #8]
 8005f88:	54d0      	strb	r0, [r2, r3]
    access_sequence->tx_buffer[index++] = value;
 8005f8a:	68a2      	ldr	r2, [r4, #8]
 8005f8c:	441a      	add	r2, r3
 8005f8e:	2180      	movs	r1, #128	; 0x80
    access_sequence->index = index;
 8005f90:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 8005f92:	7051      	strb	r1, [r2, #1]
    access_sequence->index = index;
 8005f94:	b2db      	uxtb	r3, r3
    access_sequence->tx_buffer[index++] = target_reg;
 8005f96:	f04f 081f 	mov.w	r8, #31
    access_sequence->index = 0;
 8005f9a:	2700      	movs	r7, #0
    access_sequence->tx_buffer[index++] = target_reg;
 8005f9c:	68a1      	ldr	r1, [r4, #8]
 8005f9e:	f801 8003 	strb.w	r8, [r1, r3]
    access_sequence->index = index;
 8005fa2:	1c9a      	adds	r2, r3, #2
 8005fa4:	6826      	ldr	r6, [r4, #0]
 8005fa6:	7422      	strb	r2, [r4, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 8005fa8:	1c5d      	adds	r5, r3, #1
    radio_hal->reset_cs();
 8005faa:	69b3      	ldr	r3, [r6, #24]
    *buffer = &access_sequence->rx_buffer[index++];
 8005fac:	f8d4 900c 	ldr.w	r9, [r4, #12]
    radio_hal->reset_cs();
 8005fb0:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 8005fb2:	7c22      	ldrb	r2, [r4, #16]
 8005fb4:	6a33      	ldr	r3, [r6, #32]
 8005fb6:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8005fba:	4798      	blx	r3
    radio_hal->set_cs();
 8005fbc:	6973      	ldr	r3, [r6, #20]
 8005fbe:	4798      	blx	r3
    access_sequence->index = 0;
 8005fc0:	7427      	strb	r7, [r4, #16]
    /* Wake up the radio */
    uwb_write_register_8(radio, REG_NVMADDRESS, BIT_ROMPWRSW);
    do {
        read_reg = uwb_read_register_8(radio, REG_PWRSTATUS);
        uwb_transfer_blocking(radio);
    } while (!(*read_reg & BIT_ROMEN));
 8005fc2:	f919 2005 	ldrsb.w	r2, [r9, r5]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	dae7      	bge.n	8005f9c <sr_nvm_power_up+0x20>
    radio->radio_hal->delay_ms(NVM_DELAY_AFTER_ROMEN_SET_MS);
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	2001      	movs	r0, #1
}
 8005fd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    radio->radio_hal->delay_ms(NVM_DELAY_AFTER_ROMEN_SET_MS);
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	4718      	bx	r3

08005fd8 <sr_nvm_power_down>:

void sr_nvm_power_down(radio_t *radio)
{
 8005fd8:	b570      	push	{r4, r5, r6, lr}
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8005fda:	6882      	ldr	r2, [r0, #8]
    uint32_t index = access_sequence->index;
 8005fdc:	7c03      	ldrb	r3, [r0, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8005fde:	2160      	movs	r1, #96	; 0x60
 8005fe0:	54d1      	strb	r1, [r2, r3]
    access_sequence->tx_buffer[index++] = value;
 8005fe2:	6882      	ldr	r2, [r0, #8]
 8005fe4:	441a      	add	r2, r3
 8005fe6:	2600      	movs	r6, #0
 8005fe8:	7056      	strb	r6, [r2, #1]
 8005fea:	6805      	ldr	r5, [r0, #0]
    access_sequence->index = index;
 8005fec:	3302      	adds	r3, #2
 8005fee:	4604      	mov	r4, r0
 8005ff0:	7403      	strb	r3, [r0, #16]
    radio_hal->reset_cs();
 8005ff2:	69ab      	ldr	r3, [r5, #24]
 8005ff4:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 8005ff6:	7c22      	ldrb	r2, [r4, #16]
 8005ff8:	68e1      	ldr	r1, [r4, #12]
 8005ffa:	6a2b      	ldr	r3, [r5, #32]
 8005ffc:	68a0      	ldr	r0, [r4, #8]
 8005ffe:	4798      	blx	r3
    radio_hal->set_cs();
 8006000:	696b      	ldr	r3, [r5, #20]
 8006002:	4798      	blx	r3
    access_sequence->index = 0;
 8006004:	7426      	strb	r6, [r4, #16]
    uwb_write_register_8(radio, REG_NVMADDRESS, 0x00);
    uwb_transfer_blocking(radio);
}
 8006006:	bd70      	pop	{r4, r5, r6, pc}

08006008 <sr_nvm_read>:
{
 8006008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600c:	b083      	sub	sp, #12
    uint32_t index = access_sequence->index;
 800600e:	7c06      	ldrb	r6, [r0, #16]
 8006010:	9300      	str	r3, [sp, #0]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8006012:	6883      	ldr	r3, [r0, #8]
 8006014:	9101      	str	r1, [sp, #4]
 8006016:	4615      	mov	r5, r2
 8006018:	225f      	movs	r2, #95	; 0x5f
 800601a:	559a      	strb	r2, [r3, r6]
    access_sequence->tx_buffer[index++] = value;
 800601c:	6883      	ldr	r3, [r0, #8]
 800601e:	4433      	add	r3, r6
 8006020:	f04f 0800 	mov.w	r8, #0
    access_sequence->index = index;
 8006024:	3602      	adds	r6, #2
 8006026:	4604      	mov	r4, r0
    access_sequence->tx_buffer[index++] = value;
 8006028:	f883 8001 	strb.w	r8, [r3, #1]
    access_sequence->index = index;
 800602c:	b2f6      	uxtb	r6, r6
    access_sequence->tx_buffer[index++] = target_reg;
 800602e:	f04f 091f 	mov.w	r9, #31
 8006032:	68a2      	ldr	r2, [r4, #8]
 8006034:	f802 9006 	strb.w	r9, [r2, r6]
    access_sequence->index = index;
 8006038:	1cb3      	adds	r3, r6, #2
 800603a:	6827      	ldr	r7, [r4, #0]
 800603c:	7423      	strb	r3, [r4, #16]
    radio_hal->reset_cs();
 800603e:	69bb      	ldr	r3, [r7, #24]
    *buffer = &access_sequence->rx_buffer[index++];
 8006040:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    radio_hal->reset_cs();
 8006044:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 8006046:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800604a:	7c22      	ldrb	r2, [r4, #16]
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	4798      	blx	r3
    access_sequence->tx_buffer[index++] = target_reg;
 8006050:	3601      	adds	r6, #1
    radio_hal->set_cs();
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	4798      	blx	r3
    access_sequence->index = 0;
 8006056:	f884 8010 	strb.w	r8, [r4, #16]
    } while (!(*read_reg & BIT_AWAKE));
 800605a:	f81a 6006 	ldrb.w	r6, [sl, r6]
 800605e:	f016 0610 	ands.w	r6, r6, #16
 8006062:	d0e6      	beq.n	8006032 <sr_nvm_read+0x2a>
    sr_nvm_power_up(radio);
 8006064:	4620      	mov	r0, r4
 8006066:	f7ff ff89 	bl	8005f7c <sr_nvm_power_up>
    while (addr_current <= addr_end) {
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	429d      	cmp	r5, r3
 800606e:	d833      	bhi.n	80060d8 <sr_nvm_read+0xd0>
    uint8_t idx = 0;
 8006070:	2700      	movs	r7, #0
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8006072:	f04f 0a60 	mov.w	sl, #96	; 0x60
    access_sequence->tx_buffer[index++] = target_reg;
 8006076:	f04f 0920 	mov.w	r9, #32
    uint32_t index = access_sequence->index;
 800607a:	7c23      	ldrb	r3, [r4, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800607c:	68a2      	ldr	r2, [r4, #8]
 800607e:	f802 a003 	strb.w	sl, [r2, r3]
    access_sequence->tx_buffer[index++] = value;
 8006082:	68a2      	ldr	r2, [r4, #8]
 8006084:	441a      	add	r2, r3
        uwb_write_register_8(radio, REG_NVMADDRESS, BIT_ROMPWRSW | addr_current++);
 8006086:	f065 017f 	orn	r1, r5, #127	; 0x7f
 800608a:	7051      	strb	r1, [r2, #1]
    access_sequence->index = index;
 800608c:	1c9e      	adds	r6, r3, #2
    access_sequence->tx_buffer[index++] = target_reg;
 800608e:	68a2      	ldr	r2, [r4, #8]
    uint32_t index = access_sequence->index;
 8006090:	b2f6      	uxtb	r6, r6
    access_sequence->index = index;
 8006092:	3304      	adds	r3, #4
    access_sequence->tx_buffer[index++] = target_reg;
 8006094:	f802 9006 	strb.w	r9, [r2, r6]
 8006098:	f8d4 8000 	ldr.w	r8, [r4]
    access_sequence->index = index;
 800609c:	7423      	strb	r3, [r4, #16]
    radio_hal->reset_cs();
 800609e:	f8d8 3018 	ldr.w	r3, [r8, #24]
    *buffer = &access_sequence->rx_buffer[index++];
 80060a2:	f8d4 b00c 	ldr.w	fp, [r4, #12]
    radio_hal->reset_cs();
 80060a6:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 80060a8:	7c22      	ldrb	r2, [r4, #16]
 80060aa:	68e1      	ldr	r1, [r4, #12]
 80060ac:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80060b0:	68a0      	ldr	r0, [r4, #8]
 80060b2:	4798      	blx	r3
    radio_hal->set_cs();
 80060b4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80060b8:	4798      	blx	r3
    access_sequence->tx_buffer[index++] = target_reg;
 80060ba:	3601      	adds	r6, #1
    access_sequence->index = 0;
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	7423      	strb	r3, [r4, #16]
        buf[idx++] = *read_reg;
 80060c2:	9901      	ldr	r1, [sp, #4]
 80060c4:	f81b 2006 	ldrb.w	r2, [fp, r6]
 80060c8:	55ca      	strb	r2, [r1, r7]
 80060ca:	1c7b      	adds	r3, r7, #1
        uwb_write_register_8(radio, REG_NVMADDRESS, BIT_ROMPWRSW | addr_current++);
 80060cc:	3501      	adds	r5, #1
        buf[idx++] = *read_reg;
 80060ce:	b2df      	uxtb	r7, r3
    while (addr_current <= addr_end) {
 80060d0:	9b00      	ldr	r3, [sp, #0]
        uwb_write_register_8(radio, REG_NVMADDRESS, BIT_ROMPWRSW | addr_current++);
 80060d2:	b2ed      	uxtb	r5, r5
    while (addr_current <= addr_end) {
 80060d4:	42ab      	cmp	r3, r5
 80060d6:	d2d0      	bcs.n	800607a <sr_nvm_read+0x72>
    sr_nvm_power_down(radio);
 80060d8:	4620      	mov	r0, r4
 80060da:	f7ff ff7d 	bl	8005fd8 <sr_nvm_power_down>
}
 80060de:	2000      	movs	r0, #0
 80060e0:	b003      	add	sp, #12
 80060e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e6:	bf00      	nop

080060e8 <sr_nvm_init>:
{
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	460c      	mov	r4, r1
 80060ec:	4605      	mov	r5, r0
        nvm->entry[i] = nvm_template[i];
 80060ee:	491f      	ldr	r1, [pc, #124]	; (800616c <sr_nvm_init+0x84>)
 80060f0:	22c0      	movs	r2, #192	; 0xc0
 80060f2:	4620      	mov	r0, r4
 80060f4:	f00b fe3a 	bl	8011d6c <memcpy>
    sr_nvm_read(radio, nvm->shadow_nvm, NVM_FIRST_ADDRESS, NVM_LAST_ADDRESS);
 80060f8:	237f      	movs	r3, #127	; 0x7f
 80060fa:	2200      	movs	r2, #0
 80060fc:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 8006100:	4628      	mov	r0, r5
 8006102:	f7ff ff81 	bl	8006008 <sr_nvm_read>
    nvm_is_populated = (nvm->shadow_nvm[0] != NVM_KEY_TERMINATOR);
 8006106:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 800610a:	2b00      	cmp	r3, #0
 800610c:	bf14      	ite	ne
 800610e:	2001      	movne	r0, #1
 8006110:	2000      	moveq	r0, #0
    if (nvm_is_populated) {
 8006112:	d100      	bne.n	8006116 <sr_nvm_init+0x2e>
}
 8006114:	bd38      	pop	{r3, r4, r5, pc}
 */
static void extract_values(nvm_t *nvm)
{
    uint8_t key, size, addr;

    addr = NVM_FIRST_ADDRESS;
 8006116:	2200      	movs	r2, #0
    return ((key == 0) || (key > NVM_KEY_COUNT)) ? 0 : nvm_entry[KEY_TO_INDEX(key)].size;
 8006118:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
 800611c:	eb03 010c 	add.w	r1, r3, ip
 8006120:	eb04 1501 	add.w	r5, r4, r1, lsl #4
    do {
        key = nvm->shadow_nvm[addr++]; /* First valid value should be a key */
 8006124:	3201      	adds	r2, #1
        if (key == NVM_KEY_INVALID) {
            if (addr > NVM_LAST_ADDRESS) { /* Misburned code has been "erased", check next address */
                break;
            }
            continue;
        } else if (key == NVM_KEY_TERMINATOR) {
 8006126:	1e59      	subs	r1, r3, #1
        if (key == NVM_KEY_INVALID) {
 8006128:	2bff      	cmp	r3, #255	; 0xff
        size = sr_nvm_get_size(nvm->entry, key);
        if (size == 0) {
            /* Unknown key, abort parsing */
            break;
        }
        nvm->entry[KEY_TO_INDEX(key)].value = &(nvm->shadow_nvm[addr]); /* First byte of the value is right after the key */
 800612a:	eb04 1e01 	add.w	lr, r4, r1, lsl #4
        key = nvm->shadow_nvm[addr++]; /* First valid value should be a key */
 800612e:	b2d2      	uxtb	r2, r2
        } else if (key == NVM_KEY_TERMINATOR) {
 8006130:	b2c9      	uxtb	r1, r1
        if (key == NVM_KEY_INVALID) {
 8006132:	d013      	beq.n	800615c <sr_nvm_init+0x74>
        } else if (key == NVM_KEY_TERMINATOR) {
 8006134:	290b      	cmp	r1, #11
 8006136:	d8ed      	bhi.n	8006114 <sr_nvm_init+0x2c>
    return ((key == 0) || (key > NVM_KEY_COUNT)) ? 0 : nvm_entry[KEY_TO_INDEX(key)].size;
 8006138:	7a2b      	ldrb	r3, [r5, #8]
        if (size == 0) {
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0ea      	beq.n	8006114 <sr_nvm_init+0x2c>
        addr += size; /* Skip to next key */
 800613e:	4413      	add	r3, r2
        nvm->entry[KEY_TO_INDEX(key)].value = &(nvm->shadow_nvm[addr]); /* First byte of the value is right after the key */
 8006140:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
        addr += size; /* Skip to next key */
 8006144:	b2da      	uxtb	r2, r3
        nvm->entry[KEY_TO_INDEX(key)].value = &(nvm->shadow_nvm[addr]); /* First byte of the value is right after the key */
 8006146:	4421      	add	r1, r4
        /* Stop when the terminator or end of NVM is reached */
    } while ((nvm->shadow_nvm[addr] != NVM_KEY_TERMINATOR) && (addr <= NVM_LAST_ADDRESS));
 8006148:	18a3      	adds	r3, r4, r2
        nvm->entry[KEY_TO_INDEX(key)].value = &(nvm->shadow_nvm[addr]); /* First byte of the value is right after the key */
 800614a:	f8ce 100c 	str.w	r1, [lr, #12]
    } while ((nvm->shadow_nvm[addr] != NVM_KEY_TERMINATOR) && (addr <= NVM_LAST_ADDRESS));
 800614e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0de      	beq.n	8006114 <sr_nvm_init+0x2c>
 8006156:	0611      	lsls	r1, r2, #24
 8006158:	d5e0      	bpl.n	800611c <sr_nvm_init+0x34>
 800615a:	e7db      	b.n	8006114 <sr_nvm_init+0x2c>
            if (addr > NVM_LAST_ADDRESS) { /* Misburned code has been "erased", check next address */
 800615c:	0615      	lsls	r5, r2, #24
 800615e:	d4d9      	bmi.n	8006114 <sr_nvm_init+0x2c>
    } while ((nvm->shadow_nvm[addr] != NVM_KEY_TERMINATOR) && (addr <= NVM_LAST_ADDRESS));
 8006160:	18a3      	adds	r3, r4, r2
 8006162:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1d8      	bne.n	800611c <sr_nvm_init+0x34>
}
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	08014794 	.word	0x08014794

08006170 <set_pulses>:
 *  @param[in]  frequency         Channel's center frequency.
 *  @param[in]  freq_shift_enable Enable frequency shifting.
 */
static void set_pulses(calib_vars_t *calib_vars, uint8_t *pattern, uint8_t *used_pulse_size, uint8_t start_pos, uint8_t pulse_count,
                       uint8_t pulse_spacing, uint8_t pulse_width, uint8_t frequency, bool freq_shift_enable)
{
 8006170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	ed2d 8b02 	vpush	{d8}
 8006178:	b085      	sub	sp, #20
    /* Clear spectrum */
    memset(pattern, 0, NB_PULSES);
 800617a:	2500      	movs	r5, #0
{
 800617c:	9201      	str	r2, [sp, #4]
 800617e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    memset(pattern, 0, NB_PULSES);
 8006182:	600d      	str	r5, [r1, #0]
 8006184:	2a0c      	cmp	r2, #12
 8006186:	bf28      	it	cs
 8006188:	220c      	movcs	r2, #12
    if (pulse_count > NB_PULSES) {
        pulse_count = NB_PULSES;
    }

    /* Check if we need to increment of decrement through the pulse index */
    if (start_pos <= (NB_PULSES / 2)) {
 800618a:	2b06      	cmp	r3, #6
{
 800618c:	460f      	mov	r7, r1
    memset(pattern, 0, NB_PULSES);
 800618e:	604d      	str	r5, [r1, #4]
 8006190:	608d      	str	r5, [r1, #8]
{
 8006192:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8006196:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
 800619a:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 800619e:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
 80061a2:	461c      	mov	r4, r3
 80061a4:	4680      	mov	r8, r0
    if (start_pos <= (NB_PULSES / 2)) {
 80061a6:	d83f      	bhi.n	8006228 <set_pulses+0xb8>
    int8_t       i_end;
    int8_t       i_decrement;
    bool         do_freq_shift = false;

    /* i(11) correspond to pulse 1, need to decrement index to increment pulse position */
    i_begin = TX_PATTERN_BYTE_COUNT - start_pos;
 80061a8:	f1c3 040c 	rsb	r4, r3, #12
    i_end = (i_begin) - ((pulse_count - 1) * (pulse_spacing + 1));
 80061ac:	f106 0b01 	add.w	fp, r6, #1
    i_begin = TX_PATTERN_BYTE_COUNT - start_pos;
 80061b0:	b2e4      	uxtb	r4, r4
    i_end = (i_begin) - ((pulse_count - 1) * (pulse_spacing + 1));
 80061b2:	fa5f fb8b 	uxtb.w	fp, fp
 80061b6:	1e56      	subs	r6, r2, #1
 80061b8:	fb06 461b 	mls	r6, r6, fp, r4
    }

    i_decrement = (1 + pulse_spacing);

    /* TX pulse pattern */
    dcro_calib_tx = sr_calib_frequency_to_code(calib_vars, frequency, false);
 80061bc:	462a      	mov	r2, r5
 80061be:	f7ff fc13 	bl	80059e8 <sr_calib_frequency_to_code>
    i_end = (i_begin) - ((pulse_count - 1) * (pulse_spacing + 1));
 80061c2:	b276      	sxtb	r6, r6
    if (i_end < 0) {
 80061c4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    for (int i = i_begin; i >= i_end; i -= i_decrement) {
 80061c8:	42a6      	cmp	r6, r4
    i_decrement = (1 + pulse_spacing);
 80061ca:	fa4f fb8b 	sxtb.w	fp, fp
    dcro_calib_tx = sr_calib_frequency_to_code(calib_vars, frequency, false);
 80061ce:	f8ad 000c 	strh.w	r0, [sp, #12]
 80061d2:	f3c0 2307 	ubfx	r3, r0, #8, #8
    for (int i = i_begin; i >= i_end; i -= i_decrement) {
 80061d6:	dc20      	bgt.n	800621a <set_pulses+0xaa>
 80061d8:	464a      	mov	r2, r9
        } else {
            pulse_freq_code_tx = dcro_calib_tx.code;
        }
        do_freq_shift = !do_freq_shift;

        pattern[i] = MOV2MASK(pulse_width, BITS_PULSEWID) | MOV2MASK(pulse_freq_code_tx, BITS_PULSEFREQ);
 80061da:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
            pulse_freq_code_tx = dcro_calib_tx.code;
 80061de:	4618      	mov	r0, r3
 80061e0:	46b9      	mov	r9, r7
        pattern[i] = MOV2MASK(pulse_width, BITS_PULSEWID) | MOV2MASK(pulse_freq_code_tx, BITS_PULSEFREQ);
 80061e2:	fa5f fa8a 	uxtb.w	sl, sl
 80061e6:	461f      	mov	r7, r3
 80061e8:	4613      	mov	r3, r2
 80061ea:	f000 001f 	and.w	r0, r0, #31
 80061ee:	ea4a 0000 	orr.w	r0, sl, r0
 80061f2:	f809 0004 	strb.w	r0, [r9, r4]
    for (int i = i_begin; i >= i_end; i -= i_decrement) {
 80061f6:	eba4 040b 	sub.w	r4, r4, fp
 80061fa:	42a6      	cmp	r6, r4
        do_freq_shift = !do_freq_shift;
 80061fc:	f085 0501 	eor.w	r5, r5, #1
    for (int i = i_begin; i >= i_end; i -= i_decrement) {
 8006200:	dc0b      	bgt.n	800621a <set_pulses+0xaa>
        if (do_freq_shift & freq_shift_enable) {
 8006202:	2b00      	cmp	r3, #0
 8006204:	d052      	beq.n	80062ac <set_pulses+0x13c>
            pulse_freq_code_tx = sr_calib_get_next_dcro_code(calib_vars, dcro_calib_tx.code, false);
 8006206:	2200      	movs	r2, #0
 8006208:	4639      	mov	r1, r7
        if (do_freq_shift & freq_shift_enable) {
 800620a:	2d00      	cmp	r5, #0
 800620c:	d04e      	beq.n	80062ac <set_pulses+0x13c>
            pulse_freq_code_tx = sr_calib_get_next_dcro_code(calib_vars, dcro_calib_tx.code, false);
 800620e:	4640      	mov	r0, r8
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	f7ff fe25 	bl	8005e60 <sr_calib_get_next_dcro_code>
 8006216:	9b00      	ldr	r3, [sp, #0]
 8006218:	e7e7      	b.n	80061ea <set_pulses+0x7a>
        *used_pulse_size = set_pulses_increment(calib_vars, pattern, start_pos, pulse_count, pulse_spacing, pulse_width, frequency, freq_shift_enable);
 800621a:	9b01      	ldr	r3, [sp, #4]
 800621c:	701e      	strb	r6, [r3, #0]
}
 800621e:	b005      	add	sp, #20
 8006220:	ecbd 8b02 	vpop	{d8}
 8006224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int8_t       i_increment;
    bool         do_freq_shift = false;

    /* i(0) correspond to pulse 12, need to increment index to decrement pulse position */
    i_begin = TX_PATTERN_BYTE_COUNT - start_pos;
    i_end = i_begin + ((pulse_count - 1) * (1 + pulse_spacing)) + 1;
 8006228:	3601      	adds	r6, #1
 800622a:	b2f6      	uxtb	r6, r6
 800622c:	3a01      	subs	r2, #1
 800622e:	f1c3 030d 	rsb	r3, r3, #13
 8006232:	fb02 3306 	mla	r3, r2, r6, r3
 8006236:	b25b      	sxtb	r3, r3

    i_increment = (1 + pulse_spacing);

    /* TX pulse pattern */
    dcro_calib_tx = sr_calib_frequency_to_code(calib_vars, frequency, false);
    for (int i = i_begin; i < i_end; i += i_increment) {
 8006238:	2b0c      	cmp	r3, #12
 800623a:	bfa8      	it	ge
 800623c:	230c      	movge	r3, #12
    dcro_calib_tx = sr_calib_frequency_to_code(calib_vars, frequency, false);
 800623e:	462a      	mov	r2, r5
    for (int i = i_begin; i < i_end; i += i_increment) {
 8006240:	9300      	str	r3, [sp, #0]
    i_begin = TX_PATTERN_BYTE_COUNT - start_pos;
 8006242:	f1c4 040c 	rsb	r4, r4, #12
    dcro_calib_tx = sr_calib_frequency_to_code(calib_vars, frequency, false);
 8006246:	f7ff fbcf 	bl	80059e8 <sr_calib_frequency_to_code>
    for (int i = i_begin; i < i_end; i += i_increment) {
 800624a:	9b00      	ldr	r3, [sp, #0]
    dcro_calib_tx = sr_calib_frequency_to_code(calib_vars, frequency, false);
 800624c:	f8ad 000c 	strh.w	r0, [sp, #12]
    for (int i = i_begin; i < i_end; i += i_increment) {
 8006250:	b264      	sxtb	r4, r4
 8006252:	429c      	cmp	r4, r3
    i_increment = (1 + pulse_spacing);
 8006254:	b276      	sxtb	r6, r6
    dcro_calib_tx = sr_calib_frequency_to_code(calib_vars, frequency, false);
 8006256:	f3c0 2b07 	ubfx	fp, r0, #8, #8
    for (int i = i_begin; i < i_end; i += i_increment) {
 800625a:	da1d      	bge.n	8006298 <set_pulses+0x128>
        } else {
            pulse_freq_code_tx = dcro_calib_tx.code;
        }
        do_freq_shift = !do_freq_shift;

        pattern[i] = MOV2MASK(pulse_width, BITS_PULSEWID) | MOV2MASK(pulse_freq_code_tx, BITS_PULSEFREQ);
 800625c:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    bool         do_freq_shift = false;
 8006260:	ee08 8a10 	vmov	s16, r8
        pattern[i] = MOV2MASK(pulse_width, BITS_PULSEWID) | MOV2MASK(pulse_freq_code_tx, BITS_PULSEFREQ);
 8006264:	fa5f fa8a 	uxtb.w	sl, sl
    bool         do_freq_shift = false;
 8006268:	46c8      	mov	r8, r9
 800626a:	46b9      	mov	r9, r7
 800626c:	461f      	mov	r7, r3
        if (do_freq_shift & freq_shift_enable) {
 800626e:	f1b8 0f00 	cmp.w	r8, #0
 8006272:	d019      	beq.n	80062a8 <set_pulses+0x138>
            pulse_freq_code_tx = sr_calib_get_next_dcro_code(calib_vars, dcro_calib_tx.code, false);
 8006274:	2200      	movs	r2, #0
 8006276:	4659      	mov	r1, fp
        if (do_freq_shift & freq_shift_enable) {
 8006278:	b1b5      	cbz	r5, 80062a8 <set_pulses+0x138>
            pulse_freq_code_tx = sr_calib_get_next_dcro_code(calib_vars, dcro_calib_tx.code, false);
 800627a:	ee18 0a10 	vmov	r0, s16
 800627e:	f7ff fdef 	bl	8005e60 <sr_calib_get_next_dcro_code>
        pattern[i] = MOV2MASK(pulse_width, BITS_PULSEWID) | MOV2MASK(pulse_freq_code_tx, BITS_PULSEFREQ);
 8006282:	f000 001f 	and.w	r0, r0, #31
 8006286:	ea4a 0000 	orr.w	r0, sl, r0
 800628a:	f809 0004 	strb.w	r0, [r9, r4]
    for (int i = i_begin; i < i_end; i += i_increment) {
 800628e:	4434      	add	r4, r6
 8006290:	42bc      	cmp	r4, r7
        do_freq_shift = !do_freq_shift;
 8006292:	f085 0501 	eor.w	r5, r5, #1
    for (int i = i_begin; i < i_end; i += i_increment) {
 8006296:	dbea      	blt.n	800626e <set_pulses+0xfe>
        *used_pulse_size = 0;
 8006298:	9a01      	ldr	r2, [sp, #4]
 800629a:	2300      	movs	r3, #0
 800629c:	7013      	strb	r3, [r2, #0]
}
 800629e:	b005      	add	sp, #20
 80062a0:	ecbd 8b02 	vpop	{d8}
 80062a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a8:	4658      	mov	r0, fp
 80062aa:	e7ea      	b.n	8006282 <set_pulses+0x112>
            pulse_freq_code_tx = dcro_calib_tx.code;
 80062ac:	4638      	mov	r0, r7
 80062ae:	e79c      	b.n	80061ea <set_pulses+0x7a>

080062b0 <config_spectrum_advance>:
{
 80062b0:	b570      	push	{r4, r5, r6, lr}
    rf_channel->integgain = channel_cfg->integgain;
 80062b2:	7a8b      	ldrb	r3, [r1, #10]
 80062b4:	7393      	strb	r3, [r2, #14]
{
 80062b6:	4615      	mov	r5, r2
    if (channel_cfg->power->pulse_width <= PULSE_WIDTH_MIN_VAL) {
 80062b8:	680a      	ldr	r2, [r1, #0]
 80062ba:	7853      	ldrb	r3, [r2, #1]
 80062bc:	2b02      	cmp	r3, #2
{
 80062be:	b088      	sub	sp, #32
 80062c0:	460c      	mov	r4, r1
 80062c2:	4606      	mov	r6, r0
    if (channel_cfg->power->pulse_width <= PULSE_WIDTH_MIN_VAL) {
 80062c4:	d907      	bls.n	80062d6 <config_spectrum_advance+0x26>
        pulse_width = (int8_t)channel_cfg->power->pulse_width + calib_vars->pulse_width_offset;
 80062c6:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
 80062ca:	440b      	add	r3, r1
    set_pulses(calib_vars,
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	2b07      	cmp	r3, #7
 80062d0:	bfa8      	it	ge
 80062d2:	2307      	movge	r3, #7
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	9302      	str	r3, [sp, #8]
 80062d8:	79a3      	ldrb	r3, [r4, #6]
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	7ae1      	ldrb	r1, [r4, #11]
 80062de:	79e3      	ldrb	r3, [r4, #7]
 80062e0:	9104      	str	r1, [sp, #16]
 80062e2:	7921      	ldrb	r1, [r4, #4]
 80062e4:	9103      	str	r1, [sp, #12]
 80062e6:	7812      	ldrb	r2, [r2, #0]
 80062e8:	9200      	str	r2, [sp, #0]
 80062ea:	1c69      	adds	r1, r5, #1
 80062ec:	f105 020f 	add.w	r2, r5, #15
 80062f0:	4630      	mov	r0, r6
 80062f2:	f7ff ff3d 	bl	8006170 <set_pulses>
    dcro_calib_rx = sr_calib_frequency_to_code(calib_vars, channel_cfg->frequency, true);
 80062f6:	88a1      	ldrh	r1, [r4, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	4630      	mov	r0, r6
 80062fc:	f7ff fb74 	bl	80059e8 <sr_calib_frequency_to_code>
    lna_peak_value = sr_calib_get_lna_peak(calib_vars, channel_cfg->frequency);
 8006300:	88a1      	ldrh	r1, [r4, #4]
    dcro_calib_rx = sr_calib_frequency_to_code(calib_vars, channel_cfg->frequency, true);
 8006302:	4603      	mov	r3, r0
    lna_peak_value = sr_calib_get_lna_peak(calib_vars, channel_cfg->frequency);
 8006304:	4630      	mov	r0, r6
    dcro_calib_rx = sr_calib_frequency_to_code(calib_vars, channel_cfg->frequency, true);
 8006306:	f8ad 301c 	strh.w	r3, [sp, #28]
    lna_peak_value = sr_calib_get_lna_peak(calib_vars, channel_cfg->frequency);
 800630a:	f7ff fd85 	bl	8005e18 <sr_calib_get_lna_peak>
    rf_channel->channel.rx_filter = MOV2MASK(lna_peak_value, BITS_LNAPEAK) | MOV2MASK(dcro_calib_rx.code, BITS_RFFILFREQ);
 800630e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
 800631a:	7028      	strb	r0, [r5, #0]
    rf_channel->channel.param = channel_cfg->rdn_phase_enable | MOV2MASK(channel_cfg->power->tx_gain, BITS_TXPOWER);
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	8922      	ldrh	r2, [r4, #8]
 8006320:	789b      	ldrb	r3, [r3, #2]
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006328:	4313      	orrs	r3, r2
 800632a:	736b      	strb	r3, [r5, #13]
}
 800632c:	b008      	add	sp, #32
 800632e:	bd70      	pop	{r4, r5, r6, pc}

08006330 <wps_phy_init>:
#include "wps_phy.h"

/* PUBLIC FUNCTION PROTOTYPES *************************************************/
void wps_phy_init(wps_phy_t *wps_phy, wps_phy_cfg_t *cfg)
{
    phy_init(wps_phy, cfg);
 8006330:	f001 be48 	b.w	8007fc4 <phy_init>

08006334 <wps_phy_connect>:
}

void wps_phy_connect(wps_phy_t *wps_phy)
{
 8006334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uwb_set_radio_actions(wps_phy->radio, SET_RADIO_ACTIONS(RADIO_ACTIONS_CLEAR));
 8006338:	6843      	ldr	r3, [r0, #4]
    uint32_t index = access_sequence->index;
 800633a:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800633c:	6899      	ldr	r1, [r3, #8]
    radio->shadow_reg.radio_actions |= reg_data.bytes[_BIT_TO_SET];
 800633e:	2600      	movs	r6, #0
{
 8006340:	4605      	mov	r5, r0
 8006342:	205f      	movs	r0, #95	; 0x5f
 8006344:	75de      	strb	r6, [r3, #23]
 8006346:	5488      	strb	r0, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 8006348:	6899      	ldr	r1, [r3, #8]
 800634a:	4411      	add	r1, r2
    access_sequence->index = index;
 800634c:	3202      	adds	r2, #2
    access_sequence->tx_buffer[index++] = value;
 800634e:	704e      	strb	r6, [r1, #1]
    access_sequence->index = index;
 8006350:	741a      	strb	r2, [r3, #16]
    uwb_transfer_blocking(wps_phy->radio);
 8006352:	686c      	ldr	r4, [r5, #4]
    sr_access_transfer_blocking(radio->radio_hal, &radio->access_sequence, &access_sequence_error);
 8006354:	6827      	ldr	r7, [r4, #0]
    radio_hal->reset_cs();
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 800635a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	7c22      	ldrb	r2, [r4, #16]
 8006362:	4798      	blx	r3
    radio_hal->set_cs();
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	4798      	blx	r3
    access_sequence->index = 0;
 8006368:	7426      	strb	r6, [r4, #16]

    while (!(*wps_phy->pwr_status_cmd & BIT_AWAKE)) {
 800636a:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
 800636e:	781e      	ldrb	r6, [r3, #0]
 8006370:	f016 0610 	ands.w	r6, r6, #16
 8006374:	d120      	bne.n	80063b8 <wps_phy_connect+0x84>
    access_sequence->tx_buffer[index++] = target_reg;
 8006376:	271f      	movs	r7, #31
        wps_phy->pwr_status_cmd = uwb_read_register_8(wps_phy->radio, REG_PWRSTATUS);
 8006378:	686a      	ldr	r2, [r5, #4]
    uint32_t index = access_sequence->index;
 800637a:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 800637c:	6890      	ldr	r0, [r2, #8]
    access_sequence->index = index;
 800637e:	1c99      	adds	r1, r3, #2
    access_sequence->tx_buffer[index++] = target_reg;
 8006380:	54c7      	strb	r7, [r0, r3]
    access_sequence->index = index;
 8006382:	7411      	strb	r1, [r2, #16]
        uwb_transfer_blocking(wps_phy->radio);
 8006384:	686c      	ldr	r4, [r5, #4]
    *buffer = &access_sequence->rx_buffer[index++];
 8006386:	68d2      	ldr	r2, [r2, #12]
 8006388:	f8d4 8000 	ldr.w	r8, [r4]
    access_sequence->tx_buffer[index++] = target_reg;
 800638c:	3301      	adds	r3, #1
    *buffer = &access_sequence->rx_buffer[index++];
 800638e:	4413      	add	r3, r2
    radio_hal->reset_cs();
 8006390:	f8d8 2018 	ldr.w	r2, [r8, #24]
        wps_phy->pwr_status_cmd = uwb_read_register_8(wps_phy->radio, REG_PWRSTATUS);
 8006394:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
 8006398:	4790      	blx	r2
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 800639a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800639e:	7c22      	ldrb	r2, [r4, #16]
 80063a0:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80063a4:	4798      	blx	r3
    radio_hal->set_cs();
 80063a6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80063aa:	4798      	blx	r3
    access_sequence->index = 0;
 80063ac:	7426      	strb	r6, [r4, #16]
    while (!(*wps_phy->pwr_status_cmd & BIT_AWAKE)) {
 80063ae:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	06db      	lsls	r3, r3, #27
 80063b6:	d5df      	bpl.n	8006378 <wps_phy_connect+0x44>
    }

    uwb_set_timer_config(wps_phy->radio, SET_TIMER_CFG(TIMER_CFG_CLEAR,
 80063b8:	686b      	ldr	r3, [r5, #4]
    uint32_t index = access_sequence->index;
 80063ba:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80063bc:	6899      	ldr	r1, [r3, #8]
    radio->shadow_reg.reg_timer_cfg |= reg_data.bytes[_BIT_TO_SET];
 80063be:	20c0      	movs	r0, #192	; 0xc0
 80063c0:	2445      	movs	r4, #69	; 0x45
 80063c2:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 80063c6:	548c      	strb	r4, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 80063c8:	6899      	ldr	r1, [r3, #8]
 80063ca:	4411      	add	r1, r2
    access_sequence->index = index;
 80063cc:	3202      	adds	r2, #2
    access_sequence->tx_buffer[index++] = value;
 80063ce:	7048      	strb	r0, [r1, #1]
                                                       AUTOWAKE_UP_ENABLE,
                                                       WAKE_UP_ONCE_ENABLE));
    phy_connect(wps_phy);
 80063d0:	4628      	mov	r0, r5
    access_sequence->index = index;
 80063d2:	741a      	strb	r2, [r3, #16]
 80063d4:	f001 ff86 	bl	80082e4 <phy_connect>
    wps_phy->radio->radio_hal->context_switch();
 80063d8:	686b      	ldr	r3, [r5, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
}
 80063dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    wps_phy->radio->radio_hal->context_switch();
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	4718      	bx	r3

080063e4 <wps_phy_disconnect>:

void wps_phy_disconnect(wps_phy_t *wps_phy)
{
    phy_disconnect(wps_phy);
 80063e4:	f001 bfdc 	b.w	80083a0 <phy_disconnect>

080063e8 <wps_phy_get_main_signal>:
}

phy_output_signal_t wps_phy_get_main_signal(wps_phy_t *wps_phy)
{
    return phy_get_main_signal(wps_phy);
 80063e8:	f002 b84e 	b.w	8008488 <phy_get_main_signal>

080063ec <wps_phy_get_auto_signal>:
}

phy_output_signal_t wps_phy_get_auto_signal(wps_phy_t *wps_phy)
{
    return phy_get_auto_signal(wps_phy);
 80063ec:	f002 b84e 	b.w	800848c <phy_get_auto_signal>

080063f0 <wps_phy_set_main_xlayer>:
}

void wps_phy_set_main_xlayer(wps_phy_t *wps_phy, xlayer_t *xlayer)
{
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	4605      	mov	r5, r0
    xlayer->config.rx_constgain = link_gain_loop_get_gain_value(xlayer->config.gain_loop);
 80063f4:	6908      	ldr	r0, [r1, #16]
{
 80063f6:	460c      	mov	r4, r1
    xlayer->config.rx_constgain = link_gain_loop_get_gain_value(xlayer->config.gain_loop);
 80063f8:	f7fe fede 	bl	80051b8 <link_gain_loop_get_gain_value>
 80063fc:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    phy_set_main_xlayer(wps_phy, xlayer);
 8006400:	4621      	mov	r1, r4
 8006402:	4628      	mov	r0, r5
}
 8006404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    phy_set_main_xlayer(wps_phy, xlayer);
 8006408:	f002 b842 	b.w	8008490 <phy_set_main_xlayer>

0800640c <wps_phy_set_auto_xlayer>:

void wps_phy_set_auto_xlayer(wps_phy_t *wps_phy, xlayer_t *xlayer)
{
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4605      	mov	r5, r0
    if (xlayer != NULL) {
 8006410:	460c      	mov	r4, r1
 8006412:	b121      	cbz	r1, 800641e <wps_phy_set_auto_xlayer+0x12>
        xlayer->config.rx_constgain = link_gain_loop_get_gain_value(xlayer->config.gain_loop);
 8006414:	6908      	ldr	r0, [r1, #16]
 8006416:	f7fe fecf 	bl	80051b8 <link_gain_loop_get_gain_value>
 800641a:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    }
    phy_set_auto_xlayer(wps_phy, xlayer);
 800641e:	4621      	mov	r1, r4
 8006420:	4628      	mov	r0, r5
}
 8006422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    phy_set_auto_xlayer(wps_phy, xlayer);
 8006426:	f002 b835 	b.w	8008494 <phy_set_auto_xlayer>
 800642a:	bf00      	nop

0800642c <wps_phy_end_process>:

void wps_phy_end_process(wps_phy_t *wps_phy)
{
    link_gain_loop_update(wps_phy->xlayer_main->frame.frame_outcome,
 800642c:	68c3      	ldr	r3, [r0, #12]
 800642e:	691a      	ldr	r2, [r3, #16]
 8006430:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8006434:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
 8006438:	f7fe be8a 	b.w	8005150 <link_gain_loop_update>

0800643c <wps_phy_write_register>:
                            wps_phy->xlayer_main->config.gain_loop);
}

void wps_phy_write_register(wps_phy_t *wps_phy, uint8_t starting_reg, uint8_t data)
{
    phy_write_register(wps_phy, starting_reg, data);
 800643c:	f002 b82c 	b.w	8008498 <phy_write_register>

08006440 <wps_phy_read_register>:
}

void wps_phy_read_register(wps_phy_t *wps_phy, uint8_t target_register, uint8_t *rx_buffer, bool *xfer_cmplt)
{
    phy_read_register(wps_phy, target_register, rx_buffer, xfer_cmplt);
 8006440:	f002 b840 	b.w	80084c4 <phy_read_register>

08006444 <transfer_register>:
/** @brief Write to target register.
 *
 *  @param[in] signal_data  Data required to process the state. The type shall be wps_phy_t.
 */
static void transfer_register(wps_phy_t *phy)
{
 8006444:	b530      	push	{r4, r5, lr}
    uint8_t tx_buffer[2] = {0};
    uint8_t rx_buffer[2] = {0};

    if (phy->write_request_info.pending_request) {
 8006446:	f890 30f3 	ldrb.w	r3, [r0, #243]	; 0xf3
{
 800644a:	b083      	sub	sp, #12
    uint8_t tx_buffer[2] = {0};
 800644c:	2500      	movs	r5, #0
{
 800644e:	4604      	mov	r4, r0
    uint8_t tx_buffer[2] = {0};
 8006450:	f8ad 5000 	strh.w	r5, [sp]
    uint8_t rx_buffer[2] = {0};
 8006454:	f8ad 5004 	strh.w	r5, [sp, #4]
    if (phy->write_request_info.pending_request) {
 8006458:	b1e3      	cbz	r3, 8006494 <transfer_register+0x50>
        /* Write register request */
        tx_buffer[0] = phy->write_request_info.target_register | REG_WRITE;
 800645a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
        tx_buffer[1] = phy->write_request_info.data;
 800645e:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
        sr_access_open(phy->radio->radio_hal);
 8006462:	6842      	ldr	r2, [r0, #4]
        tx_buffer[1] = phy->write_request_info.data;
 8006464:	f88d 1001 	strb.w	r1, [sp, #1]
        tx_buffer[0] = phy->write_request_info.target_register | REG_WRITE;
 8006468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800646c:	f88d 3000 	strb.w	r3, [sp]
 *
 *  @param[in] radio  Radio's instance.
 */
static inline void sr_access_open(radio_hal_t *radio_hal)
{
    radio_hal->reset_cs();
 8006470:	6813      	ldr	r3, [r2, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	4798      	blx	r3
        phy->radio->radio_hal->transfer_full_duplex_blocking(tx_buffer, rx_buffer, 2);
 8006476:	6863      	ldr	r3, [r4, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2202      	movs	r2, #2
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	a901      	add	r1, sp, #4
 8006480:	4668      	mov	r0, sp
 8006482:	4798      	blx	r3
        sr_access_close(phy->radio->radio_hal);
 8006484:	6863      	ldr	r3, [r4, #4]
 *
 *  @param[in] radio  Radio's instance.
 */
static inline void sr_access_close(radio_hal_t *radio_hal)
{
    radio_hal->set_cs();
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	4798      	blx	r3
        phy->write_request_info.pending_request = false;
 800648c:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
            *phy->read_request_info.xfer_cmplt = true;
        } while (!(*phy->read_request_info.xfer_cmplt));
        /* Read register request */
        phy->read_request_info.pending_request = false;
    }
}
 8006490:	b003      	add	sp, #12
 8006492:	bd30      	pop	{r4, r5, pc}
    } else if (phy->read_request_info.pending_request) {
 8006494:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0f9      	beq.n	8006490 <transfer_register+0x4c>
        tx_buffer[0] = phy->read_request_info.target_register;
 800649c:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 80064a0:	f88d 3000 	strb.w	r3, [sp]
        while (phy->radio->radio_hal->is_spi_busy());
 80064a4:	6863      	ldr	r3, [r4, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	4798      	blx	r3
 80064ac:	4605      	mov	r5, r0
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d1f8      	bne.n	80064a4 <transfer_register+0x60>
        sr_access_open(phy->radio->radio_hal);
 80064b2:	6863      	ldr	r3, [r4, #4]
    radio_hal->reset_cs();
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	4798      	blx	r3
        phy->radio->radio_hal->transfer_full_duplex_blocking(tx_buffer, rx_buffer, 2);
 80064ba:	6863      	ldr	r3, [r4, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2202      	movs	r2, #2
 80064c0:	a901      	add	r1, sp, #4
 80064c2:	4668      	mov	r0, sp
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	4798      	blx	r3
        sr_access_close(phy->radio->radio_hal);
 80064c8:	6863      	ldr	r3, [r4, #4]
    radio_hal->set_cs();
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	4798      	blx	r3
        *phy->read_request_info.rx_buffer = rx_buffer[1];
 80064d0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 80064d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80064d8:	701a      	strb	r2, [r3, #0]
            *phy->read_request_info.xfer_cmplt = true;
 80064da:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80064de:	2201      	movs	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
        phy->read_request_info.pending_request = false;
 80064e2:	f884 50fc 	strb.w	r5, [r4, #252]	; 0xfc
}
 80064e6:	b003      	add	sp, #12
 80064e8:	bd30      	pop	{r4, r5, pc}
 80064ea:	bf00      	nop

080064ec <check_radio_irq>:
 *  @param[in] signal_data  Data required to process the state. The type shall be wps_phy_t.
 */
static void check_radio_irq(wps_phy_t *phy)
{
    /* irq pin is low, auto-reply has not finish to send */
    sr_access_enable_radio_irq(phy->radio->radio_hal);
 80064ec:	6843      	ldr	r3, [r0, #4]
    radio_hal->enable_radio_irq();
 80064ee:	681b      	ldr	r3, [r3, #0]
{
 80064f0:	b510      	push	{r4, lr}
 80064f2:	4604      	mov	r4, r0
 80064f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f6:	4798      	blx	r3
    if (!phy->radio->radio_hal->read_irq_pin()) {
 80064f8:	6863      	ldr	r3, [r4, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	4798      	blx	r3
 8006500:	b908      	cbnz	r0, 8006506 <check_radio_irq+0x1a>
        phy->signal_main = PHY_SIGNAL_YIELD;
 8006502:	2302      	movs	r3, #2
 8006504:	7063      	strb	r3, [r4, #1]
    }
}
 8006506:	bd10      	pop	{r4, pc}

08006508 <signal_yield>:
 *
 *  @param[in] signal_data  Data required to process the state. The type shall be wps_phy_t.
 */
static void signal_yield(wps_phy_t *phy)
{
    phy->signal_main = PHY_SIGNAL_YIELD;
 8006508:	2302      	movs	r3, #2
 800650a:	7043      	strb	r3, [r0, #1]
}
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop

08006510 <end>:
/** @brief State : End of a state machine sequence.
 *
 *  @param[in] signal_data  Data required to process the state. The type shall be wps_phy_t.
 */
static void end(wps_phy_t *phy)
{
 8006510:	b538      	push	{r3, r4, r5, lr}
    wps_phy_state_t **dequeue_state;

    phy->state_step    = 0;
    dequeue_state     = (wps_phy_state_t **)circular_queue_front_raw(&phy->next_states);
 8006512:	f100 051c 	add.w	r5, r0, #28
    phy->state_step    = 0;
 8006516:	2300      	movs	r3, #0
{
 8006518:	4604      	mov	r4, r0
    phy->state_step    = 0;
 800651a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    dequeue_state     = (wps_phy_state_t **)circular_queue_front_raw(&phy->next_states);
 800651e:	4628      	mov	r0, r5
 8006520:	f004 fd06 	bl	800af30 <circular_queue_front_raw>
 8006524:	4603      	mov	r3, r0
    phy->current_state = *dequeue_state;
    circular_queue_dequeue_raw(&phy->next_states);
 8006526:	4628      	mov	r0, r5
    phy->current_state = *dequeue_state;
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6163      	str	r3, [r4, #20]
}
 800652c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    circular_queue_dequeue_raw(&phy->next_states);
 8006530:	f004 bd50 	b.w	800afd4 <circular_queue_dequeue_raw>

08006534 <close_spi>:
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006534:	7803      	ldrb	r3, [r0, #0]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d007      	beq.n	800654a <close_spi+0x16>
        phy->state_step--;
 800653a:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
        phy->signal_main = PHY_SIGNAL_YIELD;
 800653e:	2202      	movs	r2, #2
        phy->state_step--;
 8006540:	3b01      	subs	r3, #1
 8006542:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
        phy->signal_main = PHY_SIGNAL_YIELD;
 8006546:	7042      	strb	r2, [r0, #1]
}
 8006548:	4770      	bx	lr
    sr_access_close(phy->radio->radio_hal);
 800654a:	6843      	ldr	r3, [r0, #4]
    radio_hal->set_cs();
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	4718      	bx	r3
 8006552:	bf00      	nop

08006554 <set_config>:
{
 8006554:	b538      	push	{r3, r4, r5, lr}
    uwb_transfer_non_blocking(phy->radio);
 8006556:	6844      	ldr	r4, [r0, #4]
    phy->signal_main = PHY_SIGNAL_PREPARE_DONE;
 8006558:	2303      	movs	r3, #3
 800655a:	7043      	strb	r3, [r0, #1]
    sr_access_transfer_non_blocking(radio->radio_hal, &radio->access_sequence,
 800655c:	6825      	ldr	r5, [r4, #0]
    radio_hal->reset_cs();
 800655e:	69ab      	ldr	r3, [r5, #24]
 8006560:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(access_sequence->tx_buffer,
 8006562:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006564:	7c22      	ldrb	r2, [r4, #16]
 8006566:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800656a:	4798      	blx	r3
    access_sequence->index = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	7423      	strb	r3, [r4, #16]
}
 8006570:	bd38      	pop	{r3, r4, r5, pc}
 8006572:	bf00      	nop

08006574 <set_header>:
{
 8006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    sr_access_disable_radio_irq(phy->radio->radio_hal);
 8006576:	6843      	ldr	r3, [r0, #4]
    xlayer_frame_t *frame = phy->tx.frame;
 8006578:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
    radio_hal->disable_radio_irq();
 800657c:	681b      	ldr	r3, [r3, #0]
{
 800657e:	4605      	mov	r5, r0
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	4798      	blx	r3
    uwb_fill_header_non_blocking(phy->radio, frame->header_begin_it, (frame->header_end_it - frame->header_begin_it));
 8006584:	686c      	ldr	r4, [r5, #4]
    phy->signal_main = PHY_SIGNAL_YIELD;
 8006586:	2302      	movs	r3, #2
 8006588:	706b      	strb	r3, [r5, #1]
    uint32_t index = access_sequence->index;
 800658a:	7c25      	ldrb	r5, [r4, #16]
    access_sequence->tx_buffer[index++] = starting_reg | REG_WRITE_BURST;
 800658c:	68a3      	ldr	r3, [r4, #8]
    uwb_fill_header_non_blocking(phy->radio, frame->header_begin_it, (frame->header_end_it - frame->header_begin_it));
 800658e:	e9d6 1602 	ldrd	r1, r6, [r6, #8]
 8006592:	22ff      	movs	r2, #255	; 0xff
 8006594:	555a      	strb	r2, [r3, r5]
 8006596:	1a76      	subs	r6, r6, r1
    memcpy(&access_sequence->tx_buffer[index], tx_buffer, buffer_size); /* Flawfinder: ignore */
 8006598:	68a0      	ldr	r0, [r4, #8]
    access_sequence->tx_buffer[index++] = starting_reg | REG_WRITE_BURST;
 800659a:	3501      	adds	r5, #1
    memcpy(&access_sequence->tx_buffer[index], tx_buffer, buffer_size); /* Flawfinder: ignore */
 800659c:	b2f6      	uxtb	r6, r6
 800659e:	4632      	mov	r2, r6
 80065a0:	4428      	add	r0, r5
 80065a2:	f00b fbe3 	bl	8011d6c <memcpy>
    index                       += buffer_size;
 80065a6:	4435      	add	r5, r6
 80065a8:	6827      	ldr	r7, [r4, #0]
    access_sequence->index      =  index;
 80065aa:	7425      	strb	r5, [r4, #16]
    radio_hal->reset_cs();
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(access_sequence->tx_buffer,
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	7c22      	ldrb	r2, [r4, #16]
 80065b4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80065b8:	4798      	blx	r3
    access_sequence->index = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	7423      	strb	r3, [r4, #16]
}
 80065be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065c0 <set_channel_config>:
    if ((phy->cfg.sleep_level == SLEEP_IDLE) && (phy->radio->phy_version == PHY_VERSION_8_3)) {
 80065c0:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
    phy->signal_main = PHY_SIGNAL_YIELD;
 80065c4:	2202      	movs	r2, #2
    if ((phy->cfg.sleep_level == SLEEP_IDLE) && (phy->radio->phy_version == PHY_VERSION_8_3)) {
 80065c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
{
 80065ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    phy->signal_main = PHY_SIGNAL_YIELD;
 80065ce:	7042      	strb	r2, [r0, #1]
{
 80065d0:	4605      	mov	r5, r0
    if ((phy->cfg.sleep_level == SLEEP_IDLE) && (phy->radio->phy_version == PHY_VERSION_8_3)) {
 80065d2:	6842      	ldr	r2, [r0, #4]
 80065d4:	d038      	beq.n	8006648 <set_channel_config+0x88>
    uwb_set_rx_filters_raw(phy->radio, phy->xlayer_main->config.channel->channel.rx_filter);
 80065d6:	68e9      	ldr	r1, [r5, #12]
    uint32_t index = access_sequence->index;
 80065d8:	7c13      	ldrb	r3, [r2, #16]
 80065da:	68c8      	ldr	r0, [r1, #12]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80065dc:	6891      	ldr	r1, [r2, #8]
 80065de:	7800      	ldrb	r0, [r0, #0]
 80065e0:	244f      	movs	r4, #79	; 0x4f
 80065e2:	54cc      	strb	r4, [r1, r3]
    access_sequence->tx_buffer[index++] = value;
 80065e4:	6891      	ldr	r1, [r2, #8]
 80065e6:	4419      	add	r1, r3
    access_sequence->index = index;
 80065e8:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 80065ea:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 80065ec:	7413      	strb	r3, [r2, #16]
                       (uint8_t *)phy->xlayer_main->config.channel->channel.tx_pattern,
 80065ee:	68eb      	ldr	r3, [r5, #12]
    uwb_select_channel(phy->radio,
 80065f0:	686f      	ldr	r7, [r5, #4]
                       (uint8_t *)phy->xlayer_main->config.channel->channel.tx_pattern,
 80065f2:	68d9      	ldr	r1, [r3, #12]
    uint8_t write_pulse_size = radio->shadow_reg.tx_pulse_size < pulse_size ?
 80065f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
    uwb_select_channel(phy->radio,
 80065f8:	f891 800f 	ldrb.w	r8, [r1, #15]
    uint32_t index = access_sequence->index;
 80065fc:	7c3e      	ldrb	r6, [r7, #16]
    access_sequence->tx_buffer[index++] = starting_reg | REG_WRITE_BURST;
 80065fe:	68b8      	ldr	r0, [r7, #8]
 8006600:	4542      	cmp	r2, r8
 8006602:	bf28      	it	cs
 8006604:	4642      	movcs	r2, r8
    sr_access_append_write_burst(&radio->access_sequence,
 8006606:	f102 0310 	add.w	r3, r2, #16
 800660a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800660e:	5583      	strb	r3, [r0, r6]
                       (uint8_t *)phy->xlayer_main->config.channel->channel.tx_pattern,
 8006610:	3101      	adds	r1, #1
    memcpy(&access_sequence->tx_buffer[index], tx_buffer, buffer_size); /* Flawfinder: ignore */
 8006612:	4411      	add	r1, r2
 8006614:	68b8      	ldr	r0, [r7, #8]
 8006616:	f1c2 020d 	rsb	r2, r2, #13
    access_sequence->tx_buffer[index++] = starting_reg | REG_WRITE_BURST;
 800661a:	3601      	adds	r6, #1
    memcpy(&access_sequence->tx_buffer[index], tx_buffer, buffer_size); /* Flawfinder: ignore */
 800661c:	b294      	uxth	r4, r2
 800661e:	4622      	mov	r2, r4
 8006620:	4430      	add	r0, r6
    index                       += buffer_size;
 8006622:	4434      	add	r4, r6
    memcpy(&access_sequence->tx_buffer[index], tx_buffer, buffer_size); /* Flawfinder: ignore */
 8006624:	f00b fba2 	bl	8011d6c <memcpy>
    access_sequence->index      =  index;
 8006628:	743c      	strb	r4, [r7, #16]
    radio->shadow_reg.tx_pulse_size = pulse_size;
 800662a:	f887 8022 	strb.w	r8, [r7, #34]	; 0x22
    uwb_transfer_non_blocking(phy->radio);
 800662e:	686c      	ldr	r4, [r5, #4]
    sr_access_transfer_non_blocking(radio->radio_hal, &radio->access_sequence,
 8006630:	6825      	ldr	r5, [r4, #0]
    radio_hal->reset_cs();
 8006632:	69ab      	ldr	r3, [r5, #24]
 8006634:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(access_sequence->tx_buffer,
 8006636:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006638:	7c22      	ldrb	r2, [r4, #16]
 800663a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800663e:	4798      	blx	r3
    access_sequence->index = 0;
 8006640:	2300      	movs	r3, #0
 8006642:	7423      	strb	r3, [r4, #16]
}
 8006644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((phy->cfg.sleep_level == SLEEP_IDLE) && (phy->radio->phy_version == PHY_VERSION_8_3)) {
 8006648:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800664c:	2b03      	cmp	r3, #3
 800664e:	d1c2      	bne.n	80065d6 <set_channel_config+0x16>
    radio->shadow_reg.reg_dll_tuning |= reg_data.bytes[_BIT_TO_SET];
 8006650:	7f13      	ldrb	r3, [r2, #28]
    uint32_t index = access_sequence->index;
 8006652:	7c10      	ldrb	r0, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8006654:	6891      	ldr	r1, [r2, #8]
 8006656:	f043 0304 	orr.w	r3, r3, #4
 800665a:	245d      	movs	r4, #93	; 0x5d
 800665c:	7713      	strb	r3, [r2, #28]
 800665e:	540c      	strb	r4, [r1, r0]
    access_sequence->tx_buffer[index++] = value;
 8006660:	6891      	ldr	r1, [r2, #8]
 8006662:	4401      	add	r1, r0
    access_sequence->index = index;
 8006664:	1c86      	adds	r6, r0, #2
    access_sequence->tx_buffer[index++] = value;
 8006666:	704b      	strb	r3, [r1, #1]
    access_sequence->index = index;
 8006668:	7416      	strb	r6, [r2, #16]
        uwb_set_dll_tuning(phy->radio, SET_DLLTUNING(INTEGLEN_FULL));
 800666a:	686b      	ldr	r3, [r5, #4]
    radio->shadow_reg.reg_dll_tuning &= ~reg_data.bytes[_BIT_TO_CLEAR];
 800666c:	7f19      	ldrb	r1, [r3, #28]
    uint32_t index = access_sequence->index;
 800666e:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8006670:	6898      	ldr	r0, [r3, #8]
 8006672:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    radio->shadow_reg.reg_dll_tuning |= reg_data.bytes[_BIT_TO_SET];
 8006676:	7719      	strb	r1, [r3, #28]
 8006678:	5484      	strb	r4, [r0, r2]
    access_sequence->tx_buffer[index++] = value;
 800667a:	6898      	ldr	r0, [r3, #8]
 800667c:	4410      	add	r0, r2
    access_sequence->index = index;
 800667e:	3202      	adds	r2, #2
    access_sequence->tx_buffer[index++] = value;
 8006680:	7041      	strb	r1, [r0, #1]
    access_sequence->index = index;
 8006682:	741a      	strb	r2, [r3, #16]
    uwb_set_rx_filters_raw(phy->radio, phy->xlayer_main->config.channel->channel.rx_filter);
 8006684:	686a      	ldr	r2, [r5, #4]
}
 8006686:	e7a6      	b.n	80065d6 <set_channel_config+0x16>

08006688 <set_payload_cut_through>:
{
 8006688:	b5f0      	push	{r4, r5, r6, r7, lr}
    sr_access_disable_radio_irq(phy->radio->radio_hal);
 800668a:	6843      	ldr	r3, [r0, #4]
    radio_hal->disable_radio_irq();
 800668c:	681b      	ldr	r3, [r3, #0]
{
 800668e:	4604      	mov	r4, r0
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	b083      	sub	sp, #12
 8006694:	4798      	blx	r3
    if (phy->partial_frame_index == 0) {
 8006696:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 800669a:	2b00      	cmp	r3, #0
 800669c:	d03f      	beq.n	800671e <set_payload_cut_through+0x96>
        if (!(phy->partial_frame_index + 1 < phy->partial_frame_count)) {
 800669e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
 80066a2:	3301      	adds	r3, #1
 80066a4:	4293      	cmp	r3, r2
 80066a6:	da2c      	bge.n	8006702 <set_payload_cut_through+0x7a>
        uwb_fill_cut_through_data(phy->radio, phy->tx.frame->payload_end_it, partial_frame_len);
 80066a8:	6867      	ldr	r7, [r4, #4]
 80066aa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    uint32_t index = access_sequence->index;
 80066ae:	7c3d      	ldrb	r5, [r7, #16]
 80066b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    access_sequence->tx_buffer[index++] = starting_reg | REG_WRITE_BURST;
 80066b2:	68bb      	ldr	r3, [r7, #8]
        partial_frame_len = phy->tx.payload_size / phy->partial_frame_count;
 80066b4:	f894 60a0 	ldrb.w	r6, [r4, #160]	; 0xa0
 80066b8:	fbb6 f6f2 	udiv	r6, r6, r2
 80066bc:	22ff      	movs	r2, #255	; 0xff
 80066be:	555a      	strb	r2, [r3, r5]
    memcpy(&access_sequence->tx_buffer[index], tx_buffer, buffer_size); /* Flawfinder: ignore */
 80066c0:	68b8      	ldr	r0, [r7, #8]
    access_sequence->tx_buffer[index++] = starting_reg | REG_WRITE_BURST;
 80066c2:	3501      	adds	r5, #1
    memcpy(&access_sequence->tx_buffer[index], tx_buffer, buffer_size); /* Flawfinder: ignore */
 80066c4:	4632      	mov	r2, r6
 80066c6:	4428      	add	r0, r5
    index                       += buffer_size;
 80066c8:	4435      	add	r5, r6
    memcpy(&access_sequence->tx_buffer[index], tx_buffer, buffer_size); /* Flawfinder: ignore */
 80066ca:	f00b fb4f 	bl	8011d6c <memcpy>
    access_sequence->index      =  index;
 80066ce:	743d      	strb	r5, [r7, #16]
        uwb_transfer_non_blocking(phy->radio);
 80066d0:	6865      	ldr	r5, [r4, #4]
    sr_access_transfer_non_blocking(radio->radio_hal, &radio->access_sequence,
 80066d2:	682f      	ldr	r7, [r5, #0]
    radio_hal->reset_cs();
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(access_sequence->tx_buffer,
 80066d8:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	7c2a      	ldrb	r2, [r5, #16]
 80066e0:	4798      	blx	r3
    access_sequence->index = 0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	742b      	strb	r3, [r5, #16]
        phy->tx.frame->payload_end_it += partial_frame_len;
 80066e6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80066ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
        phy->signal_main = PHY_SIGNAL_YIELD;
 80066ec:	2102      	movs	r1, #2
        phy->tx.frame->payload_end_it += partial_frame_len;
 80066ee:	4433      	add	r3, r6
 80066f0:	6293      	str	r3, [r2, #40]	; 0x28
        phy->signal_main = PHY_SIGNAL_YIELD;
 80066f2:	7061      	strb	r1, [r4, #1]
    phy->partial_frame_index++;
 80066f4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 80066f8:	3301      	adds	r3, #1
 80066fa:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
}
 80066fe:	b003      	add	sp, #12
 8006700:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uwb_disable_tx_buffer_load_irq(phy->radio);
 8006702:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8006704:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8006706:	6891      	ldr	r1, [r2, #8]
 8006708:	2042      	movs	r0, #66	; 0x42
 800670a:	54c8      	strb	r0, [r1, r3]
    access_sequence->tx_buffer[index++] = value;
 800670c:	6891      	ldr	r1, [r2, #8]
 800670e:	4419      	add	r1, r3
 8006710:	2000      	movs	r0, #0
    access_sequence->index = index;
 8006712:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 8006714:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 8006716:	7413      	strb	r3, [r2, #16]
        partial_frame_len = phy->tx.payload_size / phy->partial_frame_count;
 8006718:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
}
 800671c:	e7c4      	b.n	80066a8 <set_payload_cut_through+0x20>
        phy->tx.frame->payload_end_it = phy->tx.frame->payload_begin_it;
 800671e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8006722:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8006724:	629e      	str	r6, [r3, #40]	; 0x28
        partial_frame_len = phy->tx.payload_size / phy->partial_frame_count + phy->tx.payload_size % phy->partial_frame_count;
 8006726:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800672a:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 800672e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006732:	fb03 2215 	mls	r2, r3, r5, r2
        uwb_fill_data_non_blocking(phy->radio, phy->tx.frame->payload_end_it, partial_frame_len);
 8006736:	6863      	ldr	r3, [r4, #4]
 8006738:	681f      	ldr	r7, [r3, #0]
 800673a:	68d9      	ldr	r1, [r3, #12]
    radio_hal->reset_cs();
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	9101      	str	r1, [sp, #4]
        partial_frame_len = phy->tx.payload_size / phy->partial_frame_count + phy->tx.payload_size % phy->partial_frame_count;
 8006740:	4415      	add	r5, r2
 8006742:	b2ed      	uxtb	r5, r5
 8006744:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(tx_buffer, rx_buffer, size);
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	9901      	ldr	r1, [sp, #4]
 800674a:	462a      	mov	r2, r5
 800674c:	4630      	mov	r0, r6
 800674e:	4798      	blx	r3
        phy->tx.frame->payload_end_it += partial_frame_len;
 8006750:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8006754:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006756:	442b      	add	r3, r5
 8006758:	6293      	str	r3, [r2, #40]	; 0x28
 800675a:	e7cb      	b.n	80066f4 <set_payload_cut_through+0x6c>

0800675c <clear_err>:
/** @brief Clear radio irq pin on error.
 *
 *  @param wps_phy WPS PHY instance.
 */
static void clear_err(wps_phy_t *wps_phy)
{
 800675c:	b570      	push	{r4, r5, r6, lr}
    /* Disable radio interrupts */
    uwb_disable_irq(wps_phy->radio);
 800675e:	6842      	ldr	r2, [r0, #4]
    uwb_set_int_flag(radio, SET_INT_FLAG_CFG(INT_FLAG_ENABLE_CLEAR, radio->irq_polarity));
 8006760:	6851      	ldr	r1, [r2, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 8006762:	8a93      	ldrh	r3, [r2, #20]
{
 8006764:	b082      	sub	sp, #8
    uwb_set_int_flag(radio, SET_INT_FLAG_CFG(INT_FLAG_ENABLE_CLEAR, radio->irq_polarity));
 8006766:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
 800676a:	f441 01fe 	orr.w	r1, r1, #8323072	; 0x7f0000
    internal.reg_32_u = int_flag_cfg;
 800676e:	9101      	str	r1, [sp, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 8006770:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8006774:	4604      	mov	r4, r0
 8006776:	b289      	uxth	r1, r1
    radio->shadow_reg.reg_int_flag_status.short_val |= internal.reg_value[_BIT_TO_SET];
 8006778:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 800677c:	ea23 0301 	bic.w	r3, r3, r1
    radio->shadow_reg.reg_int_flag_status.short_val |= internal.reg_value[_BIT_TO_SET];
 8006780:	4303      	orrs	r3, r0
    uint32_t index = access_sequence->index;
 8006782:	7c11      	ldrb	r1, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8006784:	6890      	ldr	r0, [r2, #8]
 8006786:	b29b      	uxth	r3, r3
 8006788:	2540      	movs	r5, #64	; 0x40
 800678a:	8293      	strh	r3, [r2, #20]
 800678c:	5445      	strb	r5, [r0, r1]
    access_sequence->tx_buffer[index++] = value.bytes[0];
 800678e:	6890      	ldr	r0, [r2, #8]
 8006790:	4408      	add	r0, r1
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 8006792:	2541      	movs	r5, #65	; 0x41
    access_sequence->tx_buffer[index++] = value.bytes[0];
 8006794:	7043      	strb	r3, [r0, #1]
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 8006796:	6890      	ldr	r0, [r2, #8]
 8006798:	4408      	add	r0, r1
    access_sequence->tx_buffer[index++] = value.bytes[1];
 800679a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 800679e:	7085      	strb	r5, [r0, #2]
    access_sequence->tx_buffer[index++] = value.bytes[1];
 80067a0:	6890      	ldr	r0, [r2, #8]
 80067a2:	4408      	add	r0, r1
    access_sequence->index = index;
 80067a4:	3104      	adds	r1, #4
    access_sequence->tx_buffer[index++] = value.bytes[1];
 80067a6:	70c3      	strb	r3, [r0, #3]
    access_sequence->index = index;
 80067a8:	7411      	strb	r1, [r2, #16]

    /* Clear Status */
    (void)uwb_get_irq_flags(wps_phy->radio);
 80067aa:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 80067ac:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 80067ae:	6891      	ldr	r1, [r2, #8]
 80067b0:	2500      	movs	r5, #0
 80067b2:	54cd      	strb	r5, [r1, r3]
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 80067b4:	6891      	ldr	r1, [r2, #8]
 80067b6:	4419      	add	r1, r3
 80067b8:	2001      	movs	r0, #1
    access_sequence->index = index;
 80067ba:	3304      	adds	r3, #4
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 80067bc:	7088      	strb	r0, [r1, #2]
    access_sequence->index = index;
 80067be:	7413      	strb	r3, [r2, #16]

    uwb_set_timer_config(wps_phy->radio, SET_TIMER_CFG(TIMER_CFG_CLEAR,
 80067c0:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 80067c2:	7c19      	ldrb	r1, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80067c4:	689a      	ldr	r2, [r3, #8]
    radio->shadow_reg.reg_timer_cfg |= reg_data.bytes[_BIT_TO_SET];
 80067c6:	20c0      	movs	r0, #192	; 0xc0
 80067c8:	2645      	movs	r6, #69	; 0x45
 80067ca:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 80067ce:	5456      	strb	r6, [r2, r1]
    access_sequence->tx_buffer[index++] = value;
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	440a      	add	r2, r1
    access_sequence->index = index;
 80067d4:	1c8e      	adds	r6, r1, #2
    access_sequence->tx_buffer[index++] = value;
 80067d6:	7050      	strb	r0, [r2, #1]
    access_sequence->index = index;
 80067d8:	741e      	strb	r6, [r3, #16]
                                         AUTOWAKE_UP_ENABLE,
                                         WAKE_UP_ONCE_ENABLE));

    uwb_set_rx_timeout_raw(wps_phy->radio, 0xFFFF, 0xFF);
 80067da:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 80067dc:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80067de:	6899      	ldr	r1, [r3, #8]
 80067e0:	2048      	movs	r0, #72	; 0x48
 80067e2:	5488      	strb	r0, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 80067e4:	6899      	ldr	r1, [r3, #8]
 80067e6:	4411      	add	r1, r2
 80067e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80067ec:	f881 c001 	strb.w	ip, [r1, #1]
    access_sequence->index = index;
 80067f0:	1c91      	adds	r1, r2, #2
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80067f2:	6898      	ldr	r0, [r3, #8]
    uint32_t index = access_sequence->index;
 80067f4:	b2c9      	uxtb	r1, r1
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80067f6:	2649      	movs	r6, #73	; 0x49
 80067f8:	5446      	strb	r6, [r0, r1]
    access_sequence->tx_buffer[index++] = value;
 80067fa:	6898      	ldr	r0, [r3, #8]
 80067fc:	4401      	add	r1, r0
    access_sequence->index = index;
 80067fe:	3204      	adds	r2, #4
    access_sequence->tx_buffer[index++] = value;
 8006800:	f881 c001 	strb.w	ip, [r1, #1]
    access_sequence->index = index;
 8006804:	741a      	strb	r2, [r3, #16]

    uwb_set_radio_actions(wps_phy->radio, SET_RADIO_ACTIONS(RADIO_ACTIONS_CLEAR,
 8006806:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 8006808:	7c19      	ldrb	r1, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800680a:	689a      	ldr	r2, [r3, #8]
    radio->shadow_reg.radio_actions |= reg_data.bytes[_BIT_TO_SET];
 800680c:	260f      	movs	r6, #15
 800680e:	205f      	movs	r0, #95	; 0x5f
 8006810:	75de      	strb	r6, [r3, #23]
 8006812:	5450      	strb	r0, [r2, r1]
    access_sequence->tx_buffer[index++] = value;
 8006814:	689a      	ldr	r2, [r3, #8]
 8006816:	440a      	add	r2, r1
    access_sequence->index = index;
 8006818:	1c88      	adds	r0, r1, #2
    access_sequence->tx_buffer[index++] = value;
 800681a:	7056      	strb	r6, [r2, #1]
    access_sequence->index = index;
 800681c:	7418      	strb	r0, [r3, #16]
                                                            INIT_TIMER_RESET_BOTH_WAKE_UP_TIMER,
                                                            FLUSH_RX_RESET_RX_BUFFER,
                                                            FLUSH_TX_RESET_TX_BUFFER,
                                                            GO_TO_SLEEP));

    sr_access_enable_radio_irq(wps_phy->radio->radio_hal);
 800681e:	6863      	ldr	r3, [r4, #4]
    radio_hal->enable_radio_irq();
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006824:	4798      	blx	r3
    uwb_transfer_blocking(wps_phy->radio);
 8006826:	6864      	ldr	r4, [r4, #4]
    sr_access_transfer_blocking(radio->radio_hal, &radio->access_sequence, &access_sequence_error);
 8006828:	6826      	ldr	r6, [r4, #0]
    radio_hal->reset_cs();
 800682a:	69b3      	ldr	r3, [r6, #24]
 800682c:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 800682e:	7c22      	ldrb	r2, [r4, #16]
 8006830:	68e1      	ldr	r1, [r4, #12]
 8006832:	6a33      	ldr	r3, [r6, #32]
 8006834:	68a0      	ldr	r0, [r4, #8]
 8006836:	4798      	blx	r3
    radio_hal->set_cs();
 8006838:	6973      	ldr	r3, [r6, #20]
 800683a:	4798      	blx	r3
    access_sequence->index = 0;
 800683c:	7425      	strb	r5, [r4, #16]
}
 800683e:	b002      	add	sp, #8
 8006840:	bd70      	pop	{r4, r5, r6, pc}
 8006842:	bf00      	nop

08006844 <enable_radio_irq>:
{
 8006844:	b510      	push	{r4, lr}
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006846:	7803      	ldrb	r3, [r0, #0]
 8006848:	2b01      	cmp	r3, #1
{
 800684a:	4604      	mov	r4, r0
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 800684c:	d110      	bne.n	8006870 <enable_radio_irq+0x2c>
    sr_access_enable_radio_irq(phy->radio->radio_hal);
 800684e:	6843      	ldr	r3, [r0, #4]
    phy->signal_main = PHY_SIGNAL_YIELD;
 8006850:	2202      	movs	r2, #2
 8006852:	7042      	strb	r2, [r0, #1]
    radio_hal->enable_radio_irq();
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006858:	4798      	blx	r3
    if (phy->radio->radio_hal->read_irq_pin()) {
 800685a:	6863      	ldr	r3, [r4, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	4798      	blx	r3
 8006862:	b148      	cbz	r0, 8006878 <enable_radio_irq+0x34>
        phy->radio->radio_hal->context_switch();
 8006864:	6863      	ldr	r3, [r4, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
}
 8006868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        phy->radio->radio_hal->context_switch();
 800686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686e:	4718      	bx	r3
        clear_err(phy);
 8006870:	f7ff ff74 	bl	800675c <clear_err>
        phy->signal_main = PHY_SIGNAL_ERROR;
 8006874:	2309      	movs	r3, #9
 8006876:	7063      	strb	r3, [r4, #1]
}
 8006878:	bd10      	pop	{r4, pc}
 800687a:	bf00      	nop

0800687c <read_events>:
{
 800687c:	b570      	push	{r4, r5, r6, lr}
    if (phy->input_signal != PHY_SIGNAL_RADIO_IRQ) {
 800687e:	7806      	ldrb	r6, [r0, #0]
{
 8006880:	4604      	mov	r4, r0
    if (phy->input_signal != PHY_SIGNAL_RADIO_IRQ) {
 8006882:	2e00      	cmp	r6, #0
 8006884:	d12f      	bne.n	80068e6 <read_events+0x6a>
    read_irq_status = uwb_get_irq_flags(phy->radio);
 8006886:	6842      	ldr	r2, [r0, #4]
    uint32_t index = access_sequence->index;
 8006888:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 800688a:	6891      	ldr	r1, [r2, #8]
 800688c:	54ce      	strb	r6, [r1, r3]
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 800688e:	6891      	ldr	r1, [r2, #8]
    *buffer1 = &access_sequence->rx_buffer[index++];
 8006890:	68d0      	ldr	r0, [r2, #12]
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 8006892:	4419      	add	r1, r3
 8006894:	f04f 0c01 	mov.w	ip, #1
 8006898:	f881 c002 	strb.w	ip, [r1, #2]
    access_sequence->tx_buffer[index++] = target_reg;
 800689c:	1c5d      	adds	r5, r3, #1
    *buffer2 = &access_sequence->rx_buffer[index++];
 800689e:	68d1      	ldr	r1, [r2, #12]
    *buffer1 = &access_sequence->rx_buffer[index++];
 80068a0:	4428      	add	r0, r5
    access_sequence->index = index;
 80068a2:	1d1d      	adds	r5, r3, #4
 80068a4:	7415      	strb	r5, [r2, #16]
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 80068a6:	3303      	adds	r3, #3
    phy->pwr_status_cmd = uwb_read_register_8(phy->radio, REG_PWRSTATUS);
 80068a8:	6862      	ldr	r2, [r4, #4]
    phy->irq_status_1 = read_irq_status.msb;
 80068aa:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    *buffer2 = &access_sequence->rx_buffer[index++];
 80068ae:	440b      	add	r3, r1
    phy->irq_status_2 = read_irq_status.lsb;
 80068b0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    uint32_t index = access_sequence->index;
 80068b4:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 80068b6:	6891      	ldr	r1, [r2, #8]
 80068b8:	201f      	movs	r0, #31
 80068ba:	54c8      	strb	r0, [r1, r3]
 80068bc:	eb03 000c 	add.w	r0, r3, ip
    access_sequence->index = index;
 80068c0:	3302      	adds	r3, #2
 80068c2:	7413      	strb	r3, [r2, #16]
    *buffer = &access_sequence->rx_buffer[index++];
 80068c4:	68d3      	ldr	r3, [r2, #12]
    uwb_transfer_non_blocking(phy->radio);
 80068c6:	6865      	ldr	r5, [r4, #4]
    phy->signal_main = PHY_SIGNAL_YIELD;
 80068c8:	2102      	movs	r1, #2
 80068ca:	4403      	add	r3, r0
 80068cc:	7061      	strb	r1, [r4, #1]
    phy->pwr_status_cmd = uwb_read_register_8(phy->radio, REG_PWRSTATUS);
 80068ce:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    sr_access_transfer_non_blocking(radio->radio_hal, &radio->access_sequence,
 80068d2:	682c      	ldr	r4, [r5, #0]
    radio_hal->reset_cs();
 80068d4:	69a3      	ldr	r3, [r4, #24]
 80068d6:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(access_sequence->tx_buffer,
 80068d8:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 80068dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068de:	7c2a      	ldrb	r2, [r5, #16]
 80068e0:	4798      	blx	r3
    access_sequence->index = 0;
 80068e2:	742e      	strb	r6, [r5, #16]
}
 80068e4:	bd70      	pop	{r4, r5, r6, pc}
        clear_err(phy);
 80068e6:	f7ff ff39 	bl	800675c <clear_err>
        phy->signal_main = PHY_SIGNAL_ERROR;
 80068ea:	2309      	movs	r3, #9
 80068ec:	7063      	strb	r3, [r4, #1]
}
 80068ee:	bd70      	pop	{r4, r5, r6, pc}

080068f0 <setup_cut_through>:
{
 80068f0:	b538      	push	{r3, r4, r5, lr}
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 80068f2:	7803      	ldrb	r3, [r0, #0]
 80068f4:	2b01      	cmp	r3, #1
{
 80068f6:	4604      	mov	r4, r0
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 80068f8:	d13f      	bne.n	800697a <setup_cut_through+0x8a>
    if (phy->partial_frame_index >= (phy->partial_frame_count - 1)) {
 80068fa:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
 80068fe:	f890 20e9 	ldrb.w	r2, [r0, #233]	; 0xe9
 8006902:	1e59      	subs	r1, r3, #1
 8006904:	428a      	cmp	r2, r1
 8006906:	db15      	blt.n	8006934 <setup_cut_through+0x44>
        *phy->cfg.rx_wait_time = (MOV2MASK(*phy->rx_wait.rx_wait_time1, BITS_RXWAITED8) << 8) | (*phy->rx_wait.rx_wait_time0);
 8006908:	e9d0 0132 	ldrd	r0, r1, [r0, #200]	; 0xc8
 800690c:	7809      	ldrb	r1, [r1, #0]
 800690e:	7800      	ldrb	r0, [r0, #0]
 8006910:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8006912:	0209      	lsls	r1, r1, #8
 8006914:	f401 41fe 	and.w	r1, r1, #32512	; 0x7f00
 8006918:	4301      	orrs	r1, r0
        *phy->rx.rssi_raw = *phy->rssi;
 800691a:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
        *phy->cfg.rx_wait_time = (MOV2MASK(*phy->rx_wait.rx_wait_time1, BITS_RXWAITED8) << 8) | (*phy->rx_wait.rx_wait_time0);
 800691e:	8029      	strh	r1, [r5, #0]
        *phy->rx.rssi_raw = *phy->rssi;
 8006920:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8006924:	7800      	ldrb	r0, [r0, #0]
 8006926:	6008      	str	r0, [r1, #0]
        *phy->rx.rnsi_raw = *phy->rnsi;
 8006928:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 800692c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8006930:	7800      	ldrb	r0, [r0, #0]
 8006932:	6008      	str	r0, [r1, #0]
    if(phy->partial_frame_index >= (phy->partial_frame_count - 2)) {
 8006934:	3b02      	subs	r3, #2
 8006936:	429a      	cmp	r2, r3
 8006938:	db0a      	blt.n	8006950 <setup_cut_through+0x60>
        uwb_disable_rx_buffer_load_irq(phy->radio);
 800693a:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 800693c:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800693e:	6891      	ldr	r1, [r2, #8]
 8006940:	2043      	movs	r0, #67	; 0x43
 8006942:	54c8      	strb	r0, [r1, r3]
    access_sequence->tx_buffer[index++] = value;
 8006944:	6891      	ldr	r1, [r2, #8]
 8006946:	4419      	add	r1, r3
 8006948:	2000      	movs	r0, #0
    access_sequence->index = index;
 800694a:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 800694c:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 800694e:	7413      	strb	r3, [r2, #16]
    phy->radio->access_sequence.tx_buffer[phy->radio->access_sequence.index++] = REG_READ_BURST | REG_RXFIFO;
 8006950:	6863      	ldr	r3, [r4, #4]
    phy->signal_main = PHY_SIGNAL_YIELD;
 8006952:	2202      	movs	r2, #2
 8006954:	7062      	strb	r2, [r4, #1]
    phy->radio->access_sequence.tx_buffer[phy->radio->access_sequence.index++] = REG_READ_BURST | REG_RXFIFO;
 8006956:	7c1a      	ldrb	r2, [r3, #16]
 8006958:	6899      	ldr	r1, [r3, #8]
 800695a:	1c50      	adds	r0, r2, #1
 800695c:	7418      	strb	r0, [r3, #16]
 800695e:	23bf      	movs	r3, #191	; 0xbf
 8006960:	548b      	strb	r3, [r1, r2]
    uwb_transfer_non_blocking(phy->radio);
 8006962:	6864      	ldr	r4, [r4, #4]
 8006964:	6825      	ldr	r5, [r4, #0]
    radio_hal->reset_cs();
 8006966:	69ab      	ldr	r3, [r5, #24]
 8006968:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(access_sequence->tx_buffer,
 800696a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800696c:	7c22      	ldrb	r2, [r4, #16]
 800696e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8006972:	4798      	blx	r3
    access_sequence->index = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	7423      	strb	r3, [r4, #16]
}
 8006978:	bd38      	pop	{r3, r4, r5, pc}
        clear_err(phy);
 800697a:	f7ff feef 	bl	800675c <clear_err>
        phy->signal_main = PHY_SIGNAL_ERROR;
 800697e:	2309      	movs	r3, #9
 8006980:	7063      	strb	r3, [r4, #1]
}
 8006982:	bd38      	pop	{r3, r4, r5, pc}

08006984 <read_events_syncing>:
{
 8006984:	b570      	push	{r4, r5, r6, lr}
    if (phy->input_signal != PHY_SIGNAL_RADIO_IRQ) {
 8006986:	7806      	ldrb	r6, [r0, #0]
{
 8006988:	4604      	mov	r4, r0
    if (phy->input_signal != PHY_SIGNAL_RADIO_IRQ) {
 800698a:	2e00      	cmp	r6, #0
 800698c:	d13c      	bne.n	8006a08 <read_events_syncing+0x84>
    uwb_set_timer_config(phy->radio, SET_TIMER_CFG(TIMER_CFG_CLEAR,
 800698e:	6843      	ldr	r3, [r0, #4]
    uint32_t index = access_sequence->index;
 8006990:	7c19      	ldrb	r1, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8006992:	689a      	ldr	r2, [r3, #8]
    radio->shadow_reg.reg_timer_cfg |= reg_data.bytes[_BIT_TO_SET];
 8006994:	20c0      	movs	r0, #192	; 0xc0
 8006996:	2545      	movs	r5, #69	; 0x45
 8006998:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800699c:	5455      	strb	r5, [r2, r1]
    access_sequence->tx_buffer[index++] = value;
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	440a      	add	r2, r1
    access_sequence->index = index;
 80069a2:	1c8d      	adds	r5, r1, #2
    access_sequence->tx_buffer[index++] = value;
 80069a4:	7050      	strb	r0, [r2, #1]
    access_sequence->index = index;
 80069a6:	741d      	strb	r5, [r3, #16]
    read_irq_status     = uwb_get_irq_flags(phy->radio);
 80069a8:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 80069aa:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 80069ac:	6891      	ldr	r1, [r2, #8]
 80069ae:	54ce      	strb	r6, [r1, r3]
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 80069b0:	6891      	ldr	r1, [r2, #8]
    *buffer1 = &access_sequence->rx_buffer[index++];
 80069b2:	68d0      	ldr	r0, [r2, #12]
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 80069b4:	4419      	add	r1, r3
 80069b6:	f04f 0c01 	mov.w	ip, #1
 80069ba:	f881 c002 	strb.w	ip, [r1, #2]
    access_sequence->tx_buffer[index++] = target_reg;
 80069be:	1c5d      	adds	r5, r3, #1
    *buffer2 = &access_sequence->rx_buffer[index++];
 80069c0:	68d1      	ldr	r1, [r2, #12]
    *buffer1 = &access_sequence->rx_buffer[index++];
 80069c2:	4428      	add	r0, r5
    access_sequence->index = index;
 80069c4:	1d1d      	adds	r5, r3, #4
 80069c6:	7415      	strb	r5, [r2, #16]
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 80069c8:	3303      	adds	r3, #3
    phy->pwr_status_cmd = uwb_read_register_8(phy->radio, REG_PWRSTATUS);
 80069ca:	6862      	ldr	r2, [r4, #4]
    phy->irq_status_1   = read_irq_status.msb;
 80069cc:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    *buffer2 = &access_sequence->rx_buffer[index++];
 80069d0:	440b      	add	r3, r1
    phy->irq_status_2   = read_irq_status.lsb;
 80069d2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    uint32_t index = access_sequence->index;
 80069d6:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 80069d8:	6891      	ldr	r1, [r2, #8]
 80069da:	201f      	movs	r0, #31
 80069dc:	54c8      	strb	r0, [r1, r3]
 80069de:	eb03 000c 	add.w	r0, r3, ip
    access_sequence->index = index;
 80069e2:	3302      	adds	r3, #2
 80069e4:	7413      	strb	r3, [r2, #16]
    *buffer = &access_sequence->rx_buffer[index++];
 80069e6:	68d3      	ldr	r3, [r2, #12]
    uwb_transfer_non_blocking(phy->radio);
 80069e8:	6865      	ldr	r5, [r4, #4]
    phy->signal_main = PHY_SIGNAL_YIELD;
 80069ea:	2102      	movs	r1, #2
 80069ec:	4403      	add	r3, r0
 80069ee:	7061      	strb	r1, [r4, #1]
    phy->pwr_status_cmd = uwb_read_register_8(phy->radio, REG_PWRSTATUS);
 80069f0:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    sr_access_transfer_non_blocking(radio->radio_hal, &radio->access_sequence,
 80069f4:	682c      	ldr	r4, [r5, #0]
    radio_hal->reset_cs();
 80069f6:	69a3      	ldr	r3, [r4, #24]
 80069f8:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(access_sequence->tx_buffer,
 80069fa:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 80069fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a00:	7c2a      	ldrb	r2, [r5, #16]
 8006a02:	4798      	blx	r3
    access_sequence->index = 0;
 8006a04:	742e      	strb	r6, [r5, #16]
}
 8006a06:	bd70      	pop	{r4, r5, r6, pc}
        clear_err(phy);
 8006a08:	f7ff fea8 	bl	800675c <clear_err>
        phy->signal_main = PHY_SIGNAL_ERROR;
 8006a0c:	2309      	movs	r3, #9
 8006a0e:	7063      	strb	r3, [r4, #1]
}
 8006a10:	bd70      	pop	{r4, r5, r6, pc}
 8006a12:	bf00      	nop

08006a14 <end_tx_cut_through>:
{
 8006a14:	b510      	push	{r4, lr}
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006a16:	7803      	ldrb	r3, [r0, #0]
 8006a18:	2b01      	cmp	r3, #1
{
 8006a1a:	4604      	mov	r4, r0
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006a1c:	d110      	bne.n	8006a40 <end_tx_cut_through+0x2c>
    *phy->rx.rssi_raw = *phy->rssi;
 8006a1e:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 8006a22:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8006a26:	7811      	ldrb	r1, [r2, #0]
    *phy->rx.rnsi_raw = *phy->rnsi;
 8006a28:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
    *phy->rx.rssi_raw = *phy->rssi;
 8006a2c:	6019      	str	r1, [r3, #0]
    *phy->rx.rnsi_raw = *phy->rnsi;
 8006a2e:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
    *phy->tx.signal = PHY_SIGNAL_FRAME_SENT_ACK;
 8006a32:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    *phy->rx.rnsi_raw = *phy->rnsi;
 8006a36:	7810      	ldrb	r0, [r2, #0]
 8006a38:	6008      	str	r0, [r1, #0]
    *phy->tx.signal = PHY_SIGNAL_FRAME_SENT_ACK;
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	701a      	strb	r2, [r3, #0]
}
 8006a3e:	bd10      	pop	{r4, pc}
        clear_err(phy);
 8006a40:	f7ff fe8c 	bl	800675c <clear_err>
        phy->signal_main = PHY_SIGNAL_ERROR;
 8006a44:	2309      	movs	r3, #9
 8006a46:	7063      	strb	r3, [r4, #1]
}
 8006a48:	bd10      	pop	{r4, pc}
 8006a4a:	bf00      	nop

08006a4c <set_payload>:
{
 8006a4c:	b530      	push	{r4, r5, lr}
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006a4e:	7803      	ldrb	r3, [r0, #0]
 8006a50:	2b01      	cmp	r3, #1
{
 8006a52:	b083      	sub	sp, #12
 8006a54:	4604      	mov	r4, r0
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006a56:	d005      	beq.n	8006a64 <set_payload+0x18>
        clear_err(phy);
 8006a58:	f7ff fe80 	bl	800675c <clear_err>
        phy->signal_main = PHY_SIGNAL_ERROR;
 8006a5c:	2309      	movs	r3, #9
 8006a5e:	7063      	strb	r3, [r4, #1]
}
 8006a60:	b003      	add	sp, #12
 8006a62:	bd30      	pop	{r4, r5, pc}
    xlayer_frame_t *frame = phy->tx.frame;
 8006a64:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    phy->signal_main = PHY_SIGNAL_YIELD;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	7043      	strb	r3, [r0, #1]
    uwb_fill_data_non_blocking(phy->radio, frame->payload_begin_it, (frame->payload_end_it - frame->payload_begin_it));
 8006a6c:	e9d2 4209 	ldrd	r4, r2, [r2, #36]	; 0x24
 8006a70:	6843      	ldr	r3, [r0, #4]
 8006a72:	681d      	ldr	r5, [r3, #0]
 8006a74:	68d9      	ldr	r1, [r3, #12]
    radio_hal->reset_cs();
 8006a76:	69ab      	ldr	r3, [r5, #24]
 8006a78:	9101      	str	r1, [sp, #4]
 8006a7a:	1b12      	subs	r2, r2, r4
 8006a7c:	b292      	uxth	r2, r2
 8006a7e:	9200      	str	r2, [sp, #0]
 8006a80:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(tx_buffer, rx_buffer, size);
 8006a82:	e9dd 2100 	ldrd	r2, r1, [sp]
 8006a86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a88:	4620      	mov	r0, r4
}
 8006a8a:	b003      	add	sp, #12
 8006a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a90:	4718      	bx	r3
 8006a92:	bf00      	nop

08006a94 <end_flush>:
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006a94:	7803      	ldrb	r3, [r0, #0]
 8006a96:	2b01      	cmp	r3, #1
{
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	4604      	mov	r4, r0
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006a9c:	d10e      	bne.n	8006abc <end_flush+0x28>
 *  @retval true
 *  @retval false
 */
static bool auto_is_tx(wps_phy_t *phy)
{
    return (phy->xlayer_auto->config.destination_address != phy->source_address);
 8006a9e:	6903      	ldr	r3, [r0, #16]
    *phy->tx.signal = auto_is_tx(phy) ? PHY_SIGNAL_FRAME_NOT_SENT : PHY_SIGNAL_FRAME_SENT_NACK;
 8006aa0:	8901      	ldrh	r1, [r0, #8]
 8006aa2:	885b      	ldrh	r3, [r3, #2]
 8006aa4:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8006aa8:	428b      	cmp	r3, r1
 8006aaa:	bf14      	ite	ne
 8006aac:	2306      	movne	r3, #6
 8006aae:	2305      	moveq	r3, #5
 8006ab0:	7013      	strb	r3, [r2, #0]
    *phy->rx.signal = PHY_SIGNAL_FRAME_MISSED;
 8006ab2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8006ab6:	2208      	movs	r2, #8
 8006ab8:	701a      	strb	r2, [r3, #0]
}
 8006aba:	bd10      	pop	{r4, pc}
        clear_err(phy);
 8006abc:	f7ff fe4e 	bl	800675c <clear_err>
        phy->signal_main = PHY_SIGNAL_ERROR;
 8006ac0:	2309      	movs	r3, #9
 8006ac2:	7063      	strb	r3, [r4, #1]
}
 8006ac4:	bd10      	pop	{r4, pc}
 8006ac6:	bf00      	nop

08006ac8 <handle_missed_frame>:
{
 8006ac8:	b570      	push	{r4, r5, r6, lr}
    uwb_set_radio_actions(phy->radio, SET_RADIO_ACTIONS(RADIO_ACTIONS_CLEAR,
 8006aca:	6843      	ldr	r3, [r0, #4]
    phy->signal_main = PHY_SIGNAL_YIELD;
 8006acc:	2202      	movs	r2, #2
 8006ace:	7042      	strb	r2, [r0, #1]
    uint32_t index = access_sequence->index;
 8006ad0:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8006ad2:	6899      	ldr	r1, [r3, #8]
    radio->shadow_reg.radio_actions |= reg_data.bytes[_BIT_TO_SET];
 8006ad4:	2407      	movs	r4, #7
 8006ad6:	255f      	movs	r5, #95	; 0x5f
 8006ad8:	75dc      	strb	r4, [r3, #23]
 8006ada:	548d      	strb	r5, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 8006adc:	6899      	ldr	r1, [r3, #8]
 8006ade:	4411      	add	r1, r2
    access_sequence->index = index;
 8006ae0:	3202      	adds	r2, #2
    access_sequence->tx_buffer[index++] = value;
 8006ae2:	704c      	strb	r4, [r1, #1]
    access_sequence->index = index;
 8006ae4:	741a      	strb	r2, [r3, #16]
    uwb_transfer_non_blocking(phy->radio);
 8006ae6:	6845      	ldr	r5, [r0, #4]
    sr_access_transfer_non_blocking(radio->radio_hal, &radio->access_sequence,
 8006ae8:	682e      	ldr	r6, [r5, #0]
    radio_hal->reset_cs();
 8006aea:	69b3      	ldr	r3, [r6, #24]
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006aec:	f100 041c 	add.w	r4, r0, #28
 8006af0:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(access_sequence->tx_buffer,
 8006af2:	7c2a      	ldrb	r2, [r5, #16]
 8006af4:	68e9      	ldr	r1, [r5, #12]
 8006af6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006af8:	68a8      	ldr	r0, [r5, #8]
 8006afa:	4798      	blx	r3
    access_sequence->index = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	742b      	strb	r3, [r5, #16]
 8006b00:	4620      	mov	r0, r4
 8006b02:	f004 fa25 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8006b06:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <handle_missed_frame+0x4c>)
 8006b08:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006b0a:	4620      	mov	r0, r4
}
 8006b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006b10:	f004 ba2e 	b.w	800af70 <circular_queue_enqueue_raw>
 8006b14:	20000444 	.word	0x20000444

08006b18 <get_payload_cut_through>:
{
 8006b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006b1a:	7803      	ldrb	r3, [r0, #0]
 8006b1c:	2b01      	cmp	r3, #1
{
 8006b1e:	b083      	sub	sp, #12
 8006b20:	4604      	mov	r4, r0
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006b22:	d14f      	bne.n	8006bc4 <get_payload_cut_through+0xac>
    if (phy->partial_frame_index == 0) {
 8006b24:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
    phy->signal_main = PHY_SIGNAL_YIELD;
 8006b28:	2202      	movs	r2, #2
 8006b2a:	7042      	strb	r2, [r0, #1]
    if (phy->partial_frame_index == 0) {
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d13c      	bne.n	8006baa <get_payload_cut_through+0x92>
        partial_frame_len = phy->rx.payload_size / phy->partial_frame_count +
 8006b30:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
 8006b34:	f890 50c4 	ldrb.w	r5, [r0, #196]	; 0xc4
                            phy->rx.frame->header_memory_size;
 8006b38:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
        partial_frame_len = phy->rx.payload_size / phy->partial_frame_count +
 8006b3c:	fbb5 f3f1 	udiv	r3, r5, r1
 8006b40:	fb01 5513 	mls	r5, r1, r3, r5
 8006b44:	441d      	add	r5, r3
        phy->rx.frame->header_begin_it  = phy->rx.frame->header_memory;
 8006b46:	6813      	ldr	r3, [r2, #0]
        partial_frame_len = phy->rx.payload_size / phy->partial_frame_count +
 8006b48:	7911      	ldrb	r1, [r2, #4]
        phy->rx.frame->header_begin_it  = phy->rx.frame->header_memory;
 8006b4a:	6093      	str	r3, [r2, #8]
        phy->rx.frame->payload_end_it   = phy->rx.frame->header_memory + EMPTY_BYTE;
 8006b4c:	1c5f      	adds	r7, r3, #1
 8006b4e:	e9c2 3709 	strd	r3, r7, [r2, #36]	; 0x24
        partial_frame_len = phy->rx.payload_size / phy->partial_frame_count +
 8006b52:	440d      	add	r5, r1
 8006b54:	b2ed      	uxtb	r5, r5
    sr_access_spi_transfer_non_blocking(phy->radio->radio_hal,
 8006b56:	6863      	ldr	r3, [r4, #4]
 8006b58:	681e      	ldr	r6, [r3, #0]
 8006b5a:	6898      	ldr	r0, [r3, #8]
    radio_hal->reset_cs();
 8006b5c:	69b3      	ldr	r3, [r6, #24]
 8006b5e:	9001      	str	r0, [sp, #4]
 8006b60:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(tx_buffer, rx_buffer, size);
 8006b62:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006b64:	9801      	ldr	r0, [sp, #4]
 8006b66:	462a      	mov	r2, r5
 8006b68:	4639      	mov	r1, r7
 8006b6a:	4798      	blx	r3
    phy->rx.frame->payload_end_it += partial_frame_len;
 8006b6c:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 8006b70:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006b72:	442b      	add	r3, r5
 8006b74:	6293      	str	r3, [r2, #40]	; 0x28
    phy->partial_frame_index++;
 8006b76:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if (phy->partial_frame_index < phy->partial_frame_count) {
 8006b7a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    phy->partial_frame_index++;
 8006b7e:	3301      	adds	r3, #1
 8006b80:	b2db      	uxtb	r3, r3
    if (phy->partial_frame_index < phy->partial_frame_count) {
 8006b82:	429a      	cmp	r2, r3
    phy->partial_frame_index++;
 8006b84:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    if (phy->partial_frame_index < phy->partial_frame_count) {
 8006b88:	d922      	bls.n	8006bd0 <get_payload_cut_through+0xb8>
        sr_access_disable_radio_irq(phy->radio->radio_hal);
 8006b8a:	6863      	ldr	r3, [r4, #4]
    radio_hal->disable_radio_irq();
 8006b8c:	681b      	ldr	r3, [r3, #0]
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006b8e:	341c      	adds	r4, #28
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	4798      	blx	r3
 8006b94:	4620      	mov	r0, r4
 8006b96:	f004 f9db 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8006b9a:	4b1f      	ldr	r3, [pc, #124]	; (8006c18 <get_payload_cut_through+0x100>)
 8006b9c:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006b9e:	4620      	mov	r0, r4
}
 8006ba0:	b003      	add	sp, #12
 8006ba2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006ba6:	f004 b9e3 	b.w	800af70 <circular_queue_enqueue_raw>
    } else if (phy->partial_frame_index < (phy->partial_frame_count - 1)) {
 8006baa:	f890 50e8 	ldrb.w	r5, [r0, #232]	; 0xe8
 8006bae:	1e6a      	subs	r2, r5, #1
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	da1b      	bge.n	8006bec <get_payload_cut_through+0xd4>
    sr_access_spi_transfer_non_blocking(phy->radio->radio_hal,
 8006bb4:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
        partial_frame_len = phy->rx.payload_size / phy->partial_frame_count;
 8006bb8:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
    sr_access_spi_transfer_non_blocking(phy->radio->radio_hal,
 8006bbc:	6a97      	ldr	r7, [r2, #40]	; 0x28
        partial_frame_len = phy->rx.payload_size / phy->partial_frame_count;
 8006bbe:	fbb3 f5f5 	udiv	r5, r3, r5
 8006bc2:	e7c8      	b.n	8006b56 <get_payload_cut_through+0x3e>
        clear_err(phy);
 8006bc4:	f7ff fdca 	bl	800675c <clear_err>
        phy->signal_main = PHY_SIGNAL_ERROR;
 8006bc8:	2309      	movs	r3, #9
 8006bca:	7063      	strb	r3, [r4, #1]
}
 8006bcc:	b003      	add	sp, #12
 8006bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006bd0:	341c      	adds	r4, #28
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f004 f9bc 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8006bd8:	4b10      	ldr	r3, [pc, #64]	; (8006c1c <get_payload_cut_through+0x104>)
 8006bda:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f004 f9c7 	bl	800af70 <circular_queue_enqueue_raw>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006be2:	4620      	mov	r0, r4
 8006be4:	f004 f9b4 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8006be8:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <get_payload_cut_through+0x108>)
 8006bea:	e7d7      	b.n	8006b9c <get_payload_cut_through+0x84>
    return (phy->xlayer_main->config.destination_address != phy->source_address);
 8006bec:	68c3      	ldr	r3, [r0, #12]
        *phy->tx.signal = main_is_tx(phy) ? PHY_SIGNAL_FRAME_SENT_ACK : PHY_SIGNAL_FRAME_SENT_NACK;
 8006bee:	8902      	ldrh	r2, [r0, #8]
 8006bf0:	885b      	ldrh	r3, [r3, #2]
 8006bf2:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	bf14      	ite	ne
 8006bfa:	2304      	movne	r3, #4
 8006bfc:	2305      	moveq	r3, #5
        partial_frame_len = phy->rx.payload_size / phy->partial_frame_count;
 8006bfe:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
        *phy->tx.signal = main_is_tx(phy) ? PHY_SIGNAL_FRAME_SENT_ACK : PHY_SIGNAL_FRAME_SENT_NACK;
 8006c02:	700b      	strb	r3, [r1, #0]
        *phy->rx.signal = PHY_SIGNAL_FRAME_RECEIVED;
 8006c04:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
        partial_frame_len = phy->rx.payload_size / phy->partial_frame_count;
 8006c08:	fbb2 f5f5 	udiv	r5, r2, r5
        *phy->rx.signal = PHY_SIGNAL_FRAME_RECEIVED;
 8006c0c:	2107      	movs	r1, #7
 8006c0e:	7019      	strb	r1, [r3, #0]
    sr_access_spi_transfer_non_blocking(phy->radio->radio_hal,
 8006c10:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8006c14:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8006c16:	e79e      	b.n	8006b56 <get_payload_cut_through+0x3e>
 8006c18:	20000518 	.word	0x20000518
 8006c1c:	20000498 	.word	0x20000498
 8006c20:	20000490 	.word	0x20000490

08006c24 <get_frame_header>:
{
 8006c24:	b530      	push	{r4, r5, lr}
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006c26:	7803      	ldrb	r3, [r0, #0]
 8006c28:	2b01      	cmp	r3, #1
{
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	4604      	mov	r4, r0
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006c2e:	d16a      	bne.n	8006d06 <get_frame_header+0xe2>
    *phy->cfg.rx_wait_time = (MOV2MASK(*phy->rx_wait.rx_wait_time1, BITS_RXWAITED8) << 8) | (*phy->rx_wait.rx_wait_time0);
 8006c30:	e9d0 2332 	ldrd	r2, r3, [r0, #200]	; 0xc8
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	7812      	ldrb	r2, [r2, #0]
 8006c38:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8006c3a:	021b      	lsls	r3, r3, #8
 8006c3c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8006c40:	4313      	orrs	r3, r2
    *phy->rx.rssi_raw      = *phy->rssi;
 8006c42:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
    *phy->cfg.rx_wait_time = (MOV2MASK(*phy->rx_wait.rx_wait_time1, BITS_RXWAITED8) << 8) | (*phy->rx_wait.rx_wait_time0);
 8006c46:	800b      	strh	r3, [r1, #0]
    *phy->rx.rssi_raw      = *phy->rssi;
 8006c48:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8006c4c:	7812      	ldrb	r2, [r2, #0]
    *phy->rx.rnsi_raw      = *phy->rnsi;
 8006c4e:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    *phy->rx.rssi_raw      = *phy->rssi;
 8006c52:	601a      	str	r2, [r3, #0]
    *phy->rx.rnsi_raw      = *phy->rnsi;
 8006c54:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
    if (phy->cfg.phase_info != NULL) {
 8006c58:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    *phy->rx.rnsi_raw      = *phy->rnsi;
 8006c5c:	7809      	ldrb	r1, [r1, #0]
 8006c5e:	6011      	str	r1, [r2, #0]
    if (phy->cfg.phase_info != NULL) {
 8006c60:	b14b      	cbz	r3, 8006c76 <get_frame_header+0x52>
        phy->cfg.phase_info->phase1 = phy->phase_info[0];
 8006c62:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 8006c66:	7811      	ldrb	r1, [r2, #0]
 8006c68:	7019      	strb	r1, [r3, #0]
        phy->cfg.phase_info->phase2 = phy->phase_info[1];
 8006c6a:	7851      	ldrb	r1, [r2, #1]
 8006c6c:	7059      	strb	r1, [r3, #1]
        phy->cfg.phase_info->phase3 = phy->phase_info[2];
 8006c6e:	7891      	ldrb	r1, [r2, #2]
 8006c70:	7099      	strb	r1, [r3, #2]
        phy->cfg.phase_info->phase4 = phy->phase_info[3];
 8006c72:	78d2      	ldrb	r2, [r2, #3]
 8006c74:	70da      	strb	r2, [r3, #3]
    if (*phy->rx_frame_size == 0) {
 8006c76:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d034      	beq.n	8006cea <get_frame_header+0xc6>
        phy->rx.frame->header_begin_it  = phy->rx.frame->header_memory;
 8006c80:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
        phy->radio->access_sequence.tx_buffer[0] = REG_READ_BURST | REG_RXFIFO;
 8006c84:	6860      	ldr	r0, [r4, #4]
        phy->signal_main = PHY_SIGNAL_YIELD;
 8006c86:	2202      	movs	r2, #2
 8006c88:	7062      	strb	r2, [r4, #1]
        phy->rx.frame->payload_end_it   = phy->rx.frame->header_memory + phy->rx.frame->header_memory_size + EMPTY_BYTE;
 8006c8a:	791a      	ldrb	r2, [r3, #4]
        phy->rx.frame->header_begin_it  = phy->rx.frame->header_memory;
 8006c8c:	6819      	ldr	r1, [r3, #0]
        phy->radio->access_sequence.tx_buffer[0] = REG_READ_BURST | REG_RXFIFO;
 8006c8e:	6880      	ldr	r0, [r0, #8]
        phy->rx.frame->header_begin_it  = phy->rx.frame->header_memory;
 8006c90:	6099      	str	r1, [r3, #8]
        phy->rx.frame->payload_end_it   = phy->rx.frame->header_memory + phy->rx.frame->header_memory_size + EMPTY_BYTE;
 8006c92:	3201      	adds	r2, #1
 8006c94:	440a      	add	r2, r1
 8006c96:	e9c3 1209 	strd	r1, r2, [r3, #36]	; 0x24
        phy->radio->access_sequence.tx_buffer[0] = REG_READ_BURST | REG_RXFIFO;
 8006c9a:	23bf      	movs	r3, #191	; 0xbf
 8006c9c:	7003      	strb	r3, [r0, #0]
        sr_access_spi_transfer_non_blocking(phy->radio->radio_hal,
 8006c9e:	6862      	ldr	r2, [r4, #4]
                                            phy->rx.frame->header_memory,
 8006ca0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
        sr_access_spi_transfer_non_blocking(phy->radio->radio_hal,
 8006ca4:	6815      	ldr	r5, [r2, #0]
 8006ca6:	6890      	ldr	r0, [r2, #8]
                                            phy->rx.frame->header_memory_size + EMPTY_BYTE);
 8006ca8:	791a      	ldrb	r2, [r3, #4]
        sr_access_spi_transfer_non_blocking(phy->radio->radio_hal,
 8006caa:	6819      	ldr	r1, [r3, #0]
    radio_hal->reset_cs();
 8006cac:	69ab      	ldr	r3, [r5, #24]
 8006cae:	9003      	str	r0, [sp, #12]
 8006cb0:	3201      	adds	r2, #1
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006cb2:	341c      	adds	r4, #28
        sr_access_spi_transfer_non_blocking(phy->radio->radio_hal,
 8006cb4:	9102      	str	r1, [sp, #8]
 8006cb6:	9201      	str	r2, [sp, #4]
 8006cb8:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(tx_buffer, rx_buffer, size);
 8006cba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006cbc:	9803      	ldr	r0, [sp, #12]
 8006cbe:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
 8006cc2:	4798      	blx	r3
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f004 f943 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8006cca:	4b12      	ldr	r3, [pc, #72]	; (8006d14 <get_frame_header+0xf0>)
 8006ccc:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f004 f94e 	bl	800af70 <circular_queue_enqueue_raw>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f004 f93b 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8006cda:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <get_frame_header+0xf4>)
 8006cdc:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006cde:	4620      	mov	r0, r4
}
 8006ce0:	b005      	add	sp, #20
 8006ce2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006ce6:	f004 b943 	b.w	800af70 <circular_queue_enqueue_raw>
        phy->rx.frame->payload_end_it = phy->rx.frame->header_begin_it;
 8006cea:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
        *phy->tx.signal               = PHY_SIGNAL_FRAME_SENT_NACK;
 8006cee:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
        phy->rx.frame->payload_end_it = phy->rx.frame->header_begin_it;
 8006cf2:	6898      	ldr	r0, [r3, #8]
 8006cf4:	6298      	str	r0, [r3, #40]	; 0x28
        *phy->tx.signal               = PHY_SIGNAL_FRAME_SENT_NACK;
 8006cf6:	2105      	movs	r1, #5
 8006cf8:	7011      	strb	r1, [r2, #0]
        *phy->rx.signal               = PHY_SIGNAL_FRAME_MISSED;
 8006cfa:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8006cfe:	2208      	movs	r2, #8
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006d00:	341c      	adds	r4, #28
        *phy->rx.signal               = PHY_SIGNAL_FRAME_MISSED;
 8006d02:	701a      	strb	r2, [r3, #0]
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006d04:	e7e6      	b.n	8006cd4 <get_frame_header+0xb0>
        clear_err(phy);
 8006d06:	f7ff fd29 	bl	800675c <clear_err>
        phy->signal_main = PHY_SIGNAL_ERROR;
 8006d0a:	2309      	movs	r3, #9
 8006d0c:	7063      	strb	r3, [r4, #1]
}
 8006d0e:	b005      	add	sp, #20
 8006d10:	bd30      	pop	{r4, r5, pc}
 8006d12:	bf00      	nop
 8006d14:	20000488 	.word	0x20000488
 8006d18:	20000498 	.word	0x20000498

08006d1c <get_auto_reply_header>:
{
 8006d1c:	b530      	push	{r4, r5, lr}
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006d1e:	7803      	ldrb	r3, [r0, #0]
 8006d20:	2b01      	cmp	r3, #1
{
 8006d22:	b085      	sub	sp, #20
 8006d24:	4604      	mov	r4, r0
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006d26:	d16a      	bne.n	8006dfe <get_auto_reply_header+0xe2>
    *phy->cfg.rx_wait_time = (MOV2MASK(*phy->rx_wait.rx_wait_time1, BITS_RXWAITED8) << 8) | (*phy->rx_wait.rx_wait_time0);
 8006d28:	e9d0 2332 	ldrd	r2, r3, [r0, #200]	; 0xc8
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	7812      	ldrb	r2, [r2, #0]
 8006d30:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8006d38:	4313      	orrs	r3, r2
    *phy->rx.rssi_raw      = *phy->rssi;
 8006d3a:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
    *phy->cfg.rx_wait_time = (MOV2MASK(*phy->rx_wait.rx_wait_time1, BITS_RXWAITED8) << 8) | (*phy->rx_wait.rx_wait_time0);
 8006d3e:	800b      	strh	r3, [r1, #0]
    *phy->rx.rssi_raw      = *phy->rssi;
 8006d40:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8006d44:	7812      	ldrb	r2, [r2, #0]
    *phy->rx.rnsi_raw      = *phy->rnsi;
 8006d46:	f8d0 10d4 	ldr.w	r1, [r0, #212]	; 0xd4
    *phy->rx.rssi_raw      = *phy->rssi;
 8006d4a:	601a      	str	r2, [r3, #0]
    *phy->rx.rnsi_raw      = *phy->rnsi;
 8006d4c:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
    if (phy->cfg.phase_info != NULL) {
 8006d50:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    *phy->rx.rnsi_raw      = *phy->rnsi;
 8006d54:	7809      	ldrb	r1, [r1, #0]
 8006d56:	6011      	str	r1, [r2, #0]
    if (phy->cfg.phase_info != NULL) {
 8006d58:	b14b      	cbz	r3, 8006d6e <get_auto_reply_header+0x52>
        phy->cfg.phase_info->phase1 = phy->phase_info[0];
 8006d5a:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 8006d5e:	7811      	ldrb	r1, [r2, #0]
 8006d60:	7019      	strb	r1, [r3, #0]
        phy->cfg.phase_info->phase2 = phy->phase_info[1];
 8006d62:	7851      	ldrb	r1, [r2, #1]
 8006d64:	7059      	strb	r1, [r3, #1]
        phy->cfg.phase_info->phase3 = phy->phase_info[2];
 8006d66:	7891      	ldrb	r1, [r2, #2]
 8006d68:	7099      	strb	r1, [r3, #2]
        phy->cfg.phase_info->phase4 = phy->phase_info[3];
 8006d6a:	78d2      	ldrb	r2, [r2, #3]
 8006d6c:	70da      	strb	r2, [r3, #3]
    if (*phy->rx_frame_size == 0) {
 8006d6e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d034      	beq.n	8006de2 <get_auto_reply_header+0xc6>
        phy->rx.frame->header_begin_it  = phy->rx.frame->header_memory;
 8006d78:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
        phy->radio->access_sequence.tx_buffer[0] = REG_READ_BURST | REG_RXFIFO;
 8006d7c:	6860      	ldr	r0, [r4, #4]
        phy->signal_main = PHY_SIGNAL_YIELD;
 8006d7e:	2202      	movs	r2, #2
 8006d80:	7062      	strb	r2, [r4, #1]
        phy->rx.frame->payload_end_it   = phy->rx.frame->header_memory + phy->rx.frame->header_memory_size + EMPTY_BYTE;
 8006d82:	791a      	ldrb	r2, [r3, #4]
        phy->rx.frame->header_begin_it  = phy->rx.frame->header_memory;
 8006d84:	6819      	ldr	r1, [r3, #0]
        phy->radio->access_sequence.tx_buffer[0] = REG_READ_BURST | REG_RXFIFO;
 8006d86:	6880      	ldr	r0, [r0, #8]
        phy->rx.frame->header_begin_it  = phy->rx.frame->header_memory;
 8006d88:	6099      	str	r1, [r3, #8]
        phy->rx.frame->payload_end_it   = phy->rx.frame->header_memory + phy->rx.frame->header_memory_size + EMPTY_BYTE;
 8006d8a:	3201      	adds	r2, #1
 8006d8c:	440a      	add	r2, r1
 8006d8e:	e9c3 1209 	strd	r1, r2, [r3, #36]	; 0x24
        phy->radio->access_sequence.tx_buffer[0] = REG_READ_BURST | REG_RXFIFO;
 8006d92:	23bf      	movs	r3, #191	; 0xbf
 8006d94:	7003      	strb	r3, [r0, #0]
        sr_access_spi_transfer_non_blocking(phy->radio->radio_hal,
 8006d96:	6862      	ldr	r2, [r4, #4]
                                            phy->rx.frame->header_memory,
 8006d98:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
        sr_access_spi_transfer_non_blocking(phy->radio->radio_hal,
 8006d9c:	6815      	ldr	r5, [r2, #0]
 8006d9e:	6890      	ldr	r0, [r2, #8]
                                            phy->rx.frame->header_memory_size + EMPTY_BYTE);
 8006da0:	791a      	ldrb	r2, [r3, #4]
        sr_access_spi_transfer_non_blocking(phy->radio->radio_hal,
 8006da2:	6819      	ldr	r1, [r3, #0]
    radio_hal->reset_cs();
 8006da4:	69ab      	ldr	r3, [r5, #24]
 8006da6:	9003      	str	r0, [sp, #12]
 8006da8:	3201      	adds	r2, #1
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006daa:	341c      	adds	r4, #28
        sr_access_spi_transfer_non_blocking(phy->radio->radio_hal,
 8006dac:	9102      	str	r1, [sp, #8]
 8006dae:	9201      	str	r2, [sp, #4]
 8006db0:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(tx_buffer, rx_buffer, size);
 8006db2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006db4:	9803      	ldr	r0, [sp, #12]
 8006db6:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
 8006dba:	4798      	blx	r3
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f004 f8c7 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8006dc2:	4b12      	ldr	r3, [pc, #72]	; (8006e0c <get_auto_reply_header+0xf0>)
 8006dc4:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f004 f8d2 	bl	800af70 <circular_queue_enqueue_raw>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f004 f8bf 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <get_auto_reply_header+0xf4>)
 8006dd4:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006dd6:	4620      	mov	r0, r4
}
 8006dd8:	b005      	add	sp, #20
 8006dda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006dde:	f004 b8c7 	b.w	800af70 <circular_queue_enqueue_raw>
        phy->rx.frame->payload_end_it = phy->rx.frame->header_begin_it;
 8006de2:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
        *phy->tx.signal               = PHY_SIGNAL_FRAME_SENT_ACK;
 8006de6:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
        phy->rx.frame->payload_end_it = phy->rx.frame->header_begin_it;
 8006dea:	6898      	ldr	r0, [r3, #8]
 8006dec:	6298      	str	r0, [r3, #40]	; 0x28
        *phy->tx.signal               = PHY_SIGNAL_FRAME_SENT_ACK;
 8006dee:	2104      	movs	r1, #4
 8006df0:	7011      	strb	r1, [r2, #0]
        *phy->rx.signal               = PHY_SIGNAL_FRAME_MISSED;
 8006df2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8006df6:	2208      	movs	r2, #8
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006df8:	341c      	adds	r4, #28
        *phy->rx.signal               = PHY_SIGNAL_FRAME_MISSED;
 8006dfa:	701a      	strb	r2, [r3, #0]
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006dfc:	e7e6      	b.n	8006dcc <get_auto_reply_header+0xb0>
        clear_err(phy);
 8006dfe:	f7ff fcad 	bl	800675c <clear_err>
        phy->signal_main = PHY_SIGNAL_ERROR;
 8006e02:	2309      	movs	r3, #9
 8006e04:	7063      	strb	r3, [r4, #1]
}
 8006e06:	b005      	add	sp, #20
 8006e08:	bd30      	pop	{r4, r5, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000488 	.word	0x20000488
 8006e10:	20000498 	.word	0x20000498

08006e14 <get_payload>:
{
 8006e14:	b570      	push	{r4, r5, r6, lr}
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006e16:	7803      	ldrb	r3, [r0, #0]
 8006e18:	2b01      	cmp	r3, #1
{
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	4604      	mov	r4, r0
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006e1e:	d13f      	bne.n	8006ea0 <get_payload+0x8c>
    uint8_t payload_size = *phy->rx_frame_size - phy->rx.frame->header_memory_size;
 8006e20:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 8006e24:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8006e28:	7812      	ldrb	r2, [r2, #0]
 8006e2a:	7918      	ldrb	r0, [r3, #4]
    *phy->rx.signal = PHY_SIGNAL_FRAME_RECEIVED;
 8006e2c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8006e30:	2107      	movs	r1, #7
    uint8_t payload_size = *phy->rx_frame_size - phy->rx.frame->header_memory_size;
 8006e32:	1a12      	subs	r2, r2, r0
    *phy->rx.signal = PHY_SIGNAL_FRAME_RECEIVED;
 8006e34:	7019      	strb	r1, [r3, #0]
    if (payload_size == 0) {
 8006e36:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
        sr_access_close(phy->radio->radio_hal);
 8006e3a:	6863      	ldr	r3, [r4, #4]
    if (payload_size == 0) {
 8006e3c:	d02c      	beq.n	8006e98 <get_payload+0x84>
        sr_access_spi_transfer_non_blocking(phy->radio->radio_hal,
 8006e3e:	681e      	ldr	r6, [r3, #0]
 8006e40:	6898      	ldr	r0, [r3, #8]
 8006e42:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8006e46:	9001      	str	r0, [sp, #4]
 8006e48:	6a99      	ldr	r1, [r3, #40]	; 0x28
    radio_hal->reset_cs();
 8006e4a:	69b3      	ldr	r3, [r6, #24]
 8006e4c:	9100      	str	r1, [sp, #0]
 8006e4e:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(tx_buffer, rx_buffer, size);
 8006e50:	e9dd 1000 	ldrd	r1, r0, [sp]
 8006e54:	462a      	mov	r2, r5
 8006e56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006e58:	4798      	blx	r3
        phy->rx.frame->payload_end_it += payload_size;
 8006e5a:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 8006e5e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006e60:	f104 031c 	add.w	r3, r4, #28
        phy->rx.frame->payload_end_it += payload_size;
 8006e64:	442a      	add	r2, r5
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006e66:	4618      	mov	r0, r3
        phy->rx.frame->payload_end_it += payload_size;
 8006e68:	628a      	str	r2, [r1, #40]	; 0x28
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006e6a:	461d      	mov	r5, r3
 8006e6c:	f004 f870 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8006e70:	4b14      	ldr	r3, [pc, #80]	; (8006ec4 <get_payload+0xb0>)
 8006e72:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006e74:	4628      	mov	r0, r5
 8006e76:	f004 f87b 	bl	800af70 <circular_queue_enqueue_raw>
    if ((phy->xlayer_auto != NULL) && phy->wait_for_ack_tx) {
 8006e7a:	6923      	ldr	r3, [r4, #16]
 8006e7c:	b153      	cbz	r3, 8006e94 <get_payload+0x80>
 8006e7e:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
 8006e82:	b13a      	cbz	r2, 8006e94 <get_payload+0x80>
        if (auto_is_tx(phy)) {
 8006e84:	885a      	ldrh	r2, [r3, #2]
 8006e86:	8923      	ldrh	r3, [r4, #8]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d10f      	bne.n	8006eac <get_payload+0x98>
            *phy->tx.signal = PHY_SIGNAL_FRAME_SENT_ACK;
 8006e8c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8006e90:	2204      	movs	r2, #4
 8006e92:	701a      	strb	r2, [r3, #0]
}
 8006e94:	b002      	add	sp, #8
 8006e96:	bd70      	pop	{r4, r5, r6, pc}
    radio_hal->set_cs();
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	4798      	blx	r3
}
 8006e9e:	e7ec      	b.n	8006e7a <get_payload+0x66>
        clear_err(phy);
 8006ea0:	f7ff fc5c 	bl	800675c <clear_err>
        phy->signal_main = PHY_SIGNAL_ERROR;
 8006ea4:	2309      	movs	r3, #9
 8006ea6:	7063      	strb	r3, [r4, #1]
}
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006eac:	341c      	adds	r4, #28
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f004 f84e 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8006eb4:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <get_payload+0xb4>)
 8006eb6:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006eb8:	4620      	mov	r0, r4
}
 8006eba:	b002      	add	sp, #8
 8006ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006ec0:	f004 b856 	b.w	800af70 <circular_queue_enqueue_raw>
 8006ec4:	20000490 	.word	0x20000490
 8006ec8:	20000548 	.word	0x20000548

08006ecc <process_event_rx>:
{
 8006ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006ed0:	7801      	ldrb	r1, [r0, #0]
 8006ed2:	2901      	cmp	r1, #1
{
 8006ed4:	b082      	sub	sp, #8
 8006ed6:	4604      	mov	r4, r0
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8006ed8:	f040 80e1 	bne.w	800709e <process_event_rx+0x1d2>
    radio_events = (*phy->irq_status_2 << 8) | (*phy->irq_status_1);
 8006edc:	e9d0 0536 	ldrd	r0, r5, [r0, #216]	; 0xd8
 8006ee0:	7803      	ldrb	r3, [r0, #0]
 8006ee2:	782a      	ldrb	r2, [r5, #0]
 8006ee4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 *  @retval false
 */
static bool rx_good(radio_events_t radio_events)
{
    return ((radio_events & NEW_PACKET_IT) &&
            (radio_events & CRC_PASS_IT) &&
 8006ee8:	f003 0309 	and.w	r3, r3, #9
 8006eec:	2b09      	cmp	r3, #9
 8006eee:	d026      	beq.n	8006f3e <process_event_rx+0x72>
    } else if (rx_lost(radio_events)) {
 8006ef0:	0693      	lsls	r3, r2, #26
 8006ef2:	f140 80db 	bpl.w	80070ac <process_event_rx+0x1e0>
        if (BIT_RXEN & *phy->pwr_status_cmd) {
 8006ef6:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	065d      	lsls	r5, r3, #25
 8006efe:	f140 80ed 	bpl.w	80070dc <process_event_rx+0x210>
            sr_access_disable_radio_irq(phy->radio->radio_hal);
 8006f02:	6863      	ldr	r3, [r4, #4]
    radio_hal->disable_radio_irq();
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	4798      	blx	r3
            phy->tx.frame->frame_outcome = FRAME_SENT_ACK_LOST;
 8006f0a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8006f0e:	2204      	movs	r2, #4
 8006f10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            phy->rx.frame->frame_outcome = FRAME_LOST;
 8006f14:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006f1e:	f104 051c 	add.w	r5, r4, #28
            handle_missed_frame(phy);
 8006f22:	4620      	mov	r0, r4
 8006f24:	f7ff fdd0 	bl	8006ac8 <handle_missed_frame>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f004 f811 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8006f2e:	4b82      	ldr	r3, [pc, #520]	; (8007138 <process_event_rx+0x26c>)
 8006f30:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006f32:	4628      	mov	r0, r5
}
 8006f34:	b002      	add	sp, #8
 8006f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8006f3a:	f004 b819 	b.w	800af70 <circular_queue_enqueue_raw>
            (radio_events & CRC_PASS_IT) &&
 8006f3e:	f012 0f06 	tst.w	r2, #6
 8006f42:	d0d5      	beq.n	8006ef0 <process_event_rx+0x24>
        phy->tx.frame->frame_outcome = FRAME_SENT_ACK;
 8006f44:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8006f48:	2203      	movs	r2, #3
 8006f4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        phy->rx.frame->frame_outcome = FRAME_RECEIVED;
 8006f4e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8006f52:	2600      	movs	r6, #0
 8006f54:	f883 602c 	strb.w	r6, [r3, #44]	; 0x2c
    phy->rx_wait     = uwb_get_rx_wait_time(phy->radio);
 8006f58:	6862      	ldr	r2, [r4, #4]
    radio_events_t last_events  = (*phy->irq_status_2 << 8) | (*phy->irq_status_1);
 8006f5a:	f895 c000 	ldrb.w	ip, [r5]
 8006f5e:	f890 e000 	ldrb.w	lr, [r0]
    phy->signal_main = PHY_SIGNAL_YIELD;
 8006f62:	2302      	movs	r3, #2
 8006f64:	7063      	strb	r3, [r4, #1]
    uint32_t index = access_sequence->index;
 8006f66:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 8006f68:	6890      	ldr	r0, [r2, #8]
 8006f6a:	2524      	movs	r5, #36	; 0x24
 8006f6c:	54c5      	strb	r5, [r0, r3]
    access_sequence->index = index;
 8006f6e:	1c98      	adds	r0, r3, #2
    access_sequence->tx_buffer[index++] = target_reg;
 8006f70:	6895      	ldr	r5, [r2, #8]
    *buffer = &access_sequence->rx_buffer[index++];
 8006f72:	68d7      	ldr	r7, [r2, #12]
    uint32_t index = access_sequence->index;
 8006f74:	b2c0      	uxtb	r0, r0
    access_sequence->tx_buffer[index++] = target_reg;
 8006f76:	f04f 0825 	mov.w	r8, #37	; 0x25
 8006f7a:	f805 8000 	strb.w	r8, [r5, r0]
    *buffer = &access_sequence->rx_buffer[index++];
 8006f7e:	68d5      	ldr	r5, [r2, #12]
    access_sequence->tx_buffer[index++] = target_reg;
 8006f80:	3001      	adds	r0, #1
    *buffer = &access_sequence->rx_buffer[index++];
 8006f82:	4428      	add	r0, r5
    access_sequence->index = index;
 8006f84:	1d1d      	adds	r5, r3, #4
 8006f86:	7415      	strb	r5, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 8006f88:	3301      	adds	r3, #1
    phy->rssi        = uwb_get_rssi(phy->radio);
 8006f8a:	6862      	ldr	r2, [r4, #4]
    phy->rx_wait     = uwb_get_rx_wait_time(phy->radio);
 8006f8c:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    *buffer = &access_sequence->rx_buffer[index++];
 8006f90:	443b      	add	r3, r7
 8006f92:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    uint32_t index = access_sequence->index;
 8006f96:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 8006f98:	6890      	ldr	r0, [r2, #8]
 8006f9a:	2522      	movs	r5, #34	; 0x22
 8006f9c:	54c5      	strb	r5, [r0, r3]
    access_sequence->index = index;
 8006f9e:	1c98      	adds	r0, r3, #2
 8006fa0:	7410      	strb	r0, [r2, #16]
    *buffer = &access_sequence->rx_buffer[index++];
 8006fa2:	68d2      	ldr	r2, [r2, #12]
    access_sequence->tx_buffer[index++] = target_reg;
 8006fa4:	3301      	adds	r3, #1
    *buffer = &access_sequence->rx_buffer[index++];
 8006fa6:	4413      	add	r3, r2
    phy->rnsi        = uwb_get_rnsi(phy->radio);
 8006fa8:	6862      	ldr	r2, [r4, #4]
    phy->rssi        = uwb_get_rssi(phy->radio);
 8006faa:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    uint32_t index = access_sequence->index;
 8006fae:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 8006fb0:	6890      	ldr	r0, [r2, #8]
 8006fb2:	2523      	movs	r5, #35	; 0x23
 8006fb4:	54c5      	strb	r5, [r0, r3]
 8006fb6:	1c58      	adds	r0, r3, #1
    access_sequence->index = index;
 8006fb8:	3302      	adds	r3, #2
 8006fba:	7413      	strb	r3, [r2, #16]
    *buffer = &access_sequence->rx_buffer[index++];
 8006fbc:	68d3      	ldr	r3, [r2, #12]
 8006fbe:	4403      	add	r3, r0
    phy->rnsi        = uwb_get_rnsi(phy->radio);
 8006fc0:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    if (!phy->cfg.fixed_payload_size_enable) {
 8006fc4:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f040 80a0 	bne.w	800710e <process_event_rx+0x242>
        if ((phy->xlayer_auto != NULL) && (auto_is_tx(phy))) {
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d038      	beq.n	8007046 <process_event_rx+0x17a>
 8006fd4:	885a      	ldrh	r2, [r3, #2]
 8006fd6:	8923      	ldrh	r3, [r4, #8]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d034      	beq.n	8007046 <process_event_rx+0x17a>
            !(radio_events & RX_TIMEOUT_IT))) || radio_events & TX_UNDERFLOW_IT;
 8006fdc:	f00e 0330 	and.w	r3, lr, #48	; 0x30
 8006fe0:	2b10      	cmp	r3, #16
            phy->wait_for_ack_tx = true;
 8006fe2:	f884 10f0 	strb.w	r1, [r4, #240]	; 0xf0
    radio_events_t last_events  = (*phy->irq_status_2 << 8) | (*phy->irq_status_1);
 8006fe6:	ea4e 2c0c 	orr.w	ip, lr, ip, lsl #8
            !(radio_events & RX_TIMEOUT_IT))) || radio_events & TX_UNDERFLOW_IT;
 8006fea:	f000 80a0 	beq.w	800712e <process_event_rx+0x262>
 8006fee:	f41c 5f80 	tst.w	ip, #4096	; 0x1000
 8006ff2:	f040 809c 	bne.w	800712e <process_event_rx+0x262>
                uwb_set_int_flag(phy->radio, radio_events | phy->radio->irq_polarity);
 8006ff6:	6863      	ldr	r3, [r4, #4]
 8006ff8:	4a50      	ldr	r2, [pc, #320]	; (800713c <process_event_rx+0x270>)
 8006ffa:	6859      	ldr	r1, [r3, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 8006ffc:	8a98      	ldrh	r0, [r3, #20]
 8006ffe:	430a      	orrs	r2, r1
    internal.reg_32_u = int_flag_cfg;
 8007000:	9201      	str	r2, [sp, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 8007002:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    radio->shadow_reg.reg_int_flag_status.short_val |= internal.reg_value[_BIT_TO_SET];
 8007006:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 800700a:	b292      	uxth	r2, r2
 800700c:	ea20 0002 	bic.w	r0, r0, r2
    radio->shadow_reg.reg_int_flag_status.short_val |= internal.reg_value[_BIT_TO_SET];
 8007010:	b289      	uxth	r1, r1
    uint32_t index = access_sequence->index;
 8007012:	7c1a      	ldrb	r2, [r3, #16]
 8007014:	4301      	orrs	r1, r0
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007016:	6898      	ldr	r0, [r3, #8]
 8007018:	8299      	strh	r1, [r3, #20]
 800701a:	2640      	movs	r6, #64	; 0x40
 800701c:	5486      	strb	r6, [r0, r2]
    access_sequence->tx_buffer[index++] = value.bytes[0];
 800701e:	6898      	ldr	r0, [r3, #8]
 8007020:	4410      	add	r0, r2
 8007022:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8007026:	7041      	strb	r1, [r0, #1]
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 8007028:	6899      	ldr	r1, [r3, #8]
 800702a:	4411      	add	r1, r2
 800702c:	2641      	movs	r6, #65	; 0x41
 800702e:	708e      	strb	r6, [r1, #2]
    access_sequence->tx_buffer[index++] = value.bytes[1];
 8007030:	6899      	ldr	r1, [r3, #8]
 8007032:	4411      	add	r1, r2
    access_sequence->index = index;
 8007034:	3204      	adds	r2, #4
    access_sequence->tx_buffer[index++] = value.bytes[1];
 8007036:	70cd      	strb	r5, [r1, #3]
    access_sequence->index = index;
 8007038:	741a      	strb	r2, [r3, #16]
                sr_access_disable_radio_irq(phy->radio->radio_hal);
 800703a:	6863      	ldr	r3, [r4, #4]
    radio_hal->disable_radio_irq();
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007040:	4798      	blx	r3
            phy->signal_auto = PHY_SIGNAL_FRAME_SENT_NACK;
 8007042:	2305      	movs	r3, #5
 8007044:	70a3      	strb	r3, [r4, #2]
        phy->rx_frame_size = uwb_read_frame_size(phy->radio);
 8007046:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8007048:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 800704a:	6891      	ldr	r1, [r2, #8]
 800704c:	203f      	movs	r0, #63	; 0x3f
 800704e:	54c8      	strb	r0, [r1, r3]
 8007050:	1c58      	adds	r0, r3, #1
    access_sequence->index = index;
 8007052:	3302      	adds	r3, #2
    *buffer = &access_sequence->rx_buffer[index++];
 8007054:	68d1      	ldr	r1, [r2, #12]
    access_sequence->index = index;
 8007056:	7413      	strb	r3, [r2, #16]
        if (phy->cfg.phase_info != NULL) {
 8007058:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    *buffer = &access_sequence->rx_buffer[index++];
 800705c:	4401      	add	r1, r0
        phy->rx_frame_size = uwb_read_frame_size(phy->radio);
 800705e:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
        if (phy->cfg.phase_info != NULL) {
 8007062:	b15a      	cbz	r2, 800707c <process_event_rx+0x1b0>
            phy->phase_info = uwb_get_phase_info(phy->radio);
 8007064:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8007066:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = REG_READ_BURST | starting_reg;
 8007068:	6891      	ldr	r1, [r2, #8]
 800706a:	20a8      	movs	r0, #168	; 0xa8
 800706c:	54c8      	strb	r0, [r1, r3]
    *buffer  = &access_sequence->rx_buffer[index];
 800706e:	68d1      	ldr	r1, [r2, #12]
    access_sequence->tx_buffer[index++] = REG_READ_BURST | starting_reg;
 8007070:	1c58      	adds	r0, r3, #1
    *buffer  = &access_sequence->rx_buffer[index];
 8007072:	4401      	add	r1, r0
    access_sequence->index = index;
 8007074:	3305      	adds	r3, #5
 8007076:	7413      	strb	r3, [r2, #16]
 8007078:	f8c4 10ec 	str.w	r1, [r4, #236]	; 0xec
        uwb_transfer_non_blocking(phy->radio);
 800707c:	6865      	ldr	r5, [r4, #4]
    sr_access_transfer_non_blocking(radio->radio_hal, &radio->access_sequence,
 800707e:	682e      	ldr	r6, [r5, #0]
    radio_hal->reset_cs();
 8007080:	69b3      	ldr	r3, [r6, #24]
 8007082:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(access_sequence->tx_buffer,
 8007084:	7c2a      	ldrb	r2, [r5, #16]
 8007086:	68e9      	ldr	r1, [r5, #12]
 8007088:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800708a:	68a8      	ldr	r0, [r5, #8]
 800708c:	4798      	blx	r3
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 800708e:	341c      	adds	r4, #28
    access_sequence->index = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	742b      	strb	r3, [r5, #16]
 8007094:	4620      	mov	r0, r4
 8007096:	f003 ff5b 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 800709a:	4b29      	ldr	r3, [pc, #164]	; (8007140 <process_event_rx+0x274>)
 800709c:	e030      	b.n	8007100 <process_event_rx+0x234>
        clear_err(phy);
 800709e:	f7ff fb5d 	bl	800675c <clear_err>
        phy->signal_main = PHY_SIGNAL_ERROR;
 80070a2:	2309      	movs	r3, #9
 80070a4:	7063      	strb	r3, [r4, #1]
}
 80070a6:	b002      	add	sp, #8
 80070a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *  @retval true
 *  @retval false
 */
static bool rx_rejected(radio_events_t radio_events)
{
    return ((radio_events & NEW_PACKET_IT) &&
 80070ac:	0710      	lsls	r0, r2, #28
 80070ae:	d50d      	bpl.n	80070cc <process_event_rx+0x200>
 80070b0:	07d1      	lsls	r1, r2, #31
 80070b2:	d502      	bpl.n	80070ba <process_event_rx+0x1ee>
            (!(radio_events & CRC_PASS_IT) || !((radio_events & ADDR_MATCH_IT) || (radio_events & BROADCAST_IT))));
 80070b4:	f012 0f06 	tst.w	r2, #6
 80070b8:	d108      	bne.n	80070cc <process_event_rx+0x200>
        phy->tx.frame->frame_outcome = FRAME_SENT_ACK_REJECTED;
 80070ba:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80070be:	2205      	movs	r2, #5
 80070c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        phy->rx.frame->frame_outcome = FRAME_REJECTED;
 80070c4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80070c8:	2202      	movs	r2, #2
 80070ca:	e00f      	b.n	80070ec <process_event_rx+0x220>
    } else if (radio_events & BUF_LOAD_TH_IT) {
 80070cc:	0592      	lsls	r2, r2, #22
 80070ce:	d5ea      	bpl.n	80070a6 <process_event_rx+0x1da>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 80070d0:	341c      	adds	r4, #28
 80070d2:	4620      	mov	r0, r4
 80070d4:	f003 ff3c 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 80070d8:	4b1a      	ldr	r3, [pc, #104]	; (8007144 <process_event_rx+0x278>)
 80070da:	e011      	b.n	8007100 <process_event_rx+0x234>
            phy->tx.frame->frame_outcome = FRAME_SENT_ACK_LOST;
 80070dc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80070e0:	2204      	movs	r2, #4
 80070e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            phy->rx.frame->frame_outcome = FRAME_LOST;
 80070e6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80070ea:	2201      	movs	r2, #1
        handle_missed_frame(phy);
 80070ec:	4620      	mov	r0, r4
        phy->rx.frame->frame_outcome = FRAME_REJECTED;
 80070ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 80070f2:	341c      	adds	r4, #28
        handle_missed_frame(phy);
 80070f4:	f7ff fce8 	bl	8006ac8 <handle_missed_frame>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 80070f8:	4620      	mov	r0, r4
 80070fa:	f003 ff29 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 80070fe:	4b0e      	ldr	r3, [pc, #56]	; (8007138 <process_event_rx+0x26c>)
 8007100:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007102:	4620      	mov	r0, r4
}
 8007104:	b002      	add	sp, #8
 8007106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    circular_queue_enqueue_raw(&wps_phy->next_states);
 800710a:	f003 bf31 	b.w	800af70 <circular_queue_enqueue_raw>
        uwb_transfer_non_blocking(phy->radio);
 800710e:	6865      	ldr	r5, [r4, #4]
 8007110:	682f      	ldr	r7, [r5, #0]
    radio_hal->reset_cs();
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	4798      	blx	r3
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007116:	341c      	adds	r4, #28
    radio_hal->transfer_full_duplex_non_blocking(access_sequence->tx_buffer,
 8007118:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	7c2a      	ldrb	r2, [r5, #16]
 8007120:	4798      	blx	r3
    access_sequence->index = 0;
 8007122:	742e      	strb	r6, [r5, #16]
 8007124:	4620      	mov	r0, r4
 8007126:	f003 ff13 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 800712a:	4b06      	ldr	r3, [pc, #24]	; (8007144 <process_event_rx+0x278>)
 800712c:	e7e8      	b.n	8007100 <process_event_rx+0x234>
                phy->wait_for_ack_tx = false;
 800712e:	2300      	movs	r3, #0
 8007130:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
 8007134:	e785      	b.n	8007042 <process_event_rx+0x176>
 8007136:	bf00      	nop
 8007138:	20000498 	.word	0x20000498
 800713c:	ff7f0030 	.word	0xff7f0030
 8007140:	2000046c 	.word	0x2000046c
 8007144:	20000478 	.word	0x20000478

08007148 <prepare_radio>:
{
 8007148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (phy->xlayer_main->config.destination_address != phy->source_address);
 800714c:	68c3      	ldr	r3, [r0, #12]
    phy->signal_auto = PHY_SIGNAL_NONE;
 800714e:	2200      	movs	r2, #0
 8007150:	7082      	strb	r2, [r0, #2]
    if (main_is_tx(phy)) {
 8007152:	8859      	ldrh	r1, [r3, #2]
 8007154:	8902      	ldrh	r2, [r0, #8]
{
 8007156:	4604      	mov	r4, r0
    if (main_is_tx(phy)) {
 8007158:	4291      	cmp	r1, r2
    phy->cfg.radio_actions = RADIO_ACTIONS_CLEAR;
 800715a:	f44f 407f 	mov.w	r0, #65280	; 0xff00
{
 800715e:	b082      	sub	sp, #8
    phy->cfg.radio_actions = RADIO_ACTIONS_CLEAR;
 8007160:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    if (main_is_tx(phy)) {
 8007164:	f000 81cc 	beq.w	8007500 <prepare_radio+0x3b8>
    phy->cfg.destination_address       = &phy->xlayer_main->config.destination_address;
 8007168:	1c9d      	adds	r5, r3, #2
    phy->cfg.packet_cfg                = phy->xlayer_main->config.packet_cfg;
 800716a:	8a99      	ldrh	r1, [r3, #20]
    phy->cfg.sleep_level               = phy->xlayer_main->config.sleep_level;
 800716c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    phy->cfg.fixed_payload_size_enable = phy->xlayer_main->config.fixed_payload_size_enable;
 800716e:	7d98      	ldrb	r0, [r3, #22]
    phy->cfg.destination_address       = &phy->xlayer_main->config.destination_address;
 8007170:	6665      	str	r5, [r4, #100]	; 0x64
    phy->tx.modulation                 = &phy->xlayer_main->config.modulation;
 8007172:	1d9d      	adds	r5, r3, #6
    phy->cfg.packet_cfg                = phy->xlayer_main->config.packet_cfg;
 8007174:	f8a4 1080 	strh.w	r1, [r4, #128]	; 0x80
    phy->tx.cca_retry_time             = phy->xlayer_main->config.cca_retry_time;
 8007178:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    phy->tx.modulation                 = &phy->xlayer_main->config.modulation;
 800717a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
    phy->cfg.power_up_delay            = &phy->xlayer_main->config.power_up_delay;
 800717e:	f103 0518 	add.w	r5, r3, #24
    phy->tx.cca_retry_time             = phy->xlayer_main->config.cca_retry_time;
 8007182:	f8a4 10a2 	strh.w	r1, [r4, #162]	; 0xa2
    phy->cfg.sleep_level               = phy->xlayer_main->config.sleep_level;
 8007186:	f8a4 2082 	strh.w	r2, [r4, #130]	; 0x82
    phy->cfg.power_up_delay            = &phy->xlayer_main->config.power_up_delay;
 800718a:	6725      	str	r5, [r4, #112]	; 0x70
    phy->tx.fec                        = &phy->xlayer_main->config.fec;
 800718c:	f103 0108 	add.w	r1, r3, #8
    phy->tx.cca_threshold              = &phy->xlayer_main->config.cca_threshold;
 8007190:	f103 0223 	add.w	r2, r3, #35	; 0x23
    phy->cfg.rx_timeout                = &phy->xlayer_main->config.rx_timeout;
 8007194:	f103 051a 	add.w	r5, r3, #26
    phy->tx.cca_threshold              = &phy->xlayer_main->config.cca_threshold;
 8007198:	e9c4 1224 	strd	r1, r2, [r4, #144]	; 0x90
    phy->cfg.rx_timeout                = &phy->xlayer_main->config.rx_timeout;
 800719c:	6765      	str	r5, [r4, #116]	; 0x74
    phy->cfg.sleep_time                = &phy->xlayer_main->config.sleep_time;
 800719e:	f103 051c 	add.w	r5, r3, #28
 80071a2:	67a5      	str	r5, [r4, #120]	; 0x78
    phy->cfg.rx_wait_time              = &phy->xlayer_main->config.rx_wait_time;
 80071a4:	f103 0520 	add.w	r5, r3, #32
    phy->cfg.fixed_payload_size_enable = phy->xlayer_main->config.fixed_payload_size_enable;
 80071a8:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    phy->cfg.source_address            = &phy->xlayer_main->config.source_address;
 80071ac:	66a3      	str	r3, [r4, #104]	; 0x68
    phy->cfg.rx_wait_time              = &phy->xlayer_main->config.rx_wait_time;
 80071ae:	67e5      	str	r5, [r4, #124]	; 0x7c
    phy->tx.cca_max_try_count          = phy->xlayer_main->config.cca_max_try_count;
 80071b0:	f893 5026 	ldrb.w	r5, [r3, #38]	; 0x26
 80071b4:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    phy->tx.cca_fail_action            = phy->xlayer_main->config.cca_fail_action;
 80071b8:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 80071bc:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
    phy->tx.cca_try_count              = &phy->xlayer_main->config.cca_try_count;
 80071c0:	f103 0229 	add.w	r2, r3, #41	; 0x29
    phy->tx.frame                      = &phy->xlayer_main->frame;
 80071c4:	f103 0048 	add.w	r0, r3, #72	; 0x48
    phy->tx.signal                     = &phy->signal_main;
 80071c8:	1c65      	adds	r5, r4, #1
    phy->tx.cca_try_count              = &phy->xlayer_main->config.cca_try_count;
 80071ca:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
    header_size = phy->tx.frame->header_end_it - phy->tx.frame->header_begin_it;
 80071ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    if (phy->xlayer_auto != NULL) {
 80071d0:	6921      	ldr	r1, [r4, #16]
    phy->tx.frame                      = &phy->xlayer_main->frame;
 80071d2:	e9c4 0526 	strd	r0, r5, [r4, #152]	; 0x98
    header_size = phy->tx.frame->header_end_it - phy->tx.frame->header_begin_it;
 80071d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80071d8:	1a12      	subs	r2, r2, r0
 80071da:	b2d2      	uxtb	r2, r2
    if (phy->xlayer_auto != NULL) {
 80071dc:	2900      	cmp	r1, #0
 80071de:	f000 8217 	beq.w	8007610 <prepare_radio+0x4c8>
        phy->cfg.phase_info  = phy->xlayer_main->config.phases_info;
 80071e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
        *radio_events       = set_events_for_tx_with_ack();
 80071e4:	4ebd      	ldr	r6, [pc, #756]	; (80074dc <prepare_radio+0x394>)
        phy->auto_reply_mode = AUTO_REPLY_ENABLE;
 80071e6:	2340      	movs	r3, #64	; 0x40
 80071e8:	8163      	strh	r3, [r4, #10]
        phy->cfg.channel     = phy->xlayer_auto->config.channel;
 80071ea:	68cb      	ldr	r3, [r1, #12]
 80071ec:	66e3      	str	r3, [r4, #108]	; 0x6c
        phy->rx.rssi_raw     = &phy->xlayer_auto->config.rssi_raw;
 80071ee:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80071f2:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        phy->rx.rnsi_raw     = &phy->xlayer_auto->config.rnsi_raw;
 80071f6:	f101 032c 	add.w	r3, r1, #44	; 0x2c
        phy->cfg.phase_info  = phy->xlayer_main->config.phases_info;
 80071fa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        phy->rx.rnsi_raw     = &phy->xlayer_auto->config.rnsi_raw;
 80071fe:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        phy->rx.rx_constgain = &phy->xlayer_auto->config.rx_constgain;
 8007202:	f101 0022 	add.w	r0, r1, #34	; 0x22
        phy->rx.signal       = &phy->signal_auto;
 8007206:	1ca3      	adds	r3, r4, #2
        phy->rx.frame        = &phy->xlayer_auto->frame;
 8007208:	3148      	adds	r1, #72	; 0x48
        phy->rx.rx_constgain = &phy->xlayer_auto->config.rx_constgain;
 800720a:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
        phy->rx.frame        = &phy->xlayer_auto->frame;
 800720e:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
        phy->rx.signal       = &phy->signal_auto;
 8007212:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    uwb_set_const_gains(phy->radio, *phy->rx.rx_constgain);
 8007216:	6863      	ldr	r3, [r4, #4]
 8007218:	7807      	ldrb	r7, [r0, #0]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800721a:	6899      	ldr	r1, [r3, #8]
    uint32_t index = access_sequence->index;
 800721c:	7c18      	ldrb	r0, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800721e:	2570      	movs	r5, #112	; 0x70
 8007220:	540d      	strb	r5, [r1, r0]
    access_sequence->tx_buffer[index++] = value;
 8007222:	6899      	ldr	r1, [r3, #8]
 8007224:	4401      	add	r1, r0
    access_sequence->index = index;
 8007226:	1c85      	adds	r5, r0, #2
    access_sequence->tx_buffer[index++] = value;
 8007228:	704f      	strb	r7, [r1, #1]
    access_sequence->index = index;
 800722a:	741d      	strb	r5, [r3, #16]
    phy->cfg.radio_actions |= SET_RADIO_ACTIONS(RX_MODE_ENABLE_TRANSMISSION);
 800722c:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8007230:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    if (header_size == 0) {
 8007234:	2a00      	cmp	r2, #0
 8007236:	f040 81d3 	bne.w	80075e0 <prepare_radio+0x498>
        *radio_events = SET_INT_FLAG_CFG(INT_FLAG_ENABLE_CLEAR, WAKEUP_IT_ENABLE);
 800723a:	4ea9      	ldr	r6, [pc, #676]	; (80074e0 <prepare_radio+0x398>)
    phy->cfg.radio_actions |= SET_RADIO_ACTIONS(RX_MODE_ENABLE_TRANSMISSION);
 800723c:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
    uwb_set_rx_waited_src(phy->radio, RX_WAIT_SOURCE_DEFAULT);
 8007240:	6861      	ldr	r1, [r4, #4]
    uint32_t index = access_sequence->index;
 8007242:	7c0b      	ldrb	r3, [r1, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007244:	6888      	ldr	r0, [r1, #8]
 8007246:	2564      	movs	r5, #100	; 0x64
 8007248:	54c5      	strb	r5, [r0, r3]
    access_sequence->tx_buffer[index++] = value;
 800724a:	688d      	ldr	r5, [r1, #8]
 800724c:	441d      	add	r5, r3
 800724e:	2000      	movs	r0, #0
    access_sequence->index = index;
 8007250:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 8007252:	7068      	strb	r0, [r5, #1]
    access_sequence->index = index;
 8007254:	740b      	strb	r3, [r1, #16]
    uwb_set_packet_config(phy->radio, phy->cfg.packet_cfg);
 8007256:	6861      	ldr	r1, [r4, #4]
 8007258:	f8b4 5080 	ldrh.w	r5, [r4, #128]	; 0x80
    radio->shadow_reg.reg_packet_cfg &= ~reg_data.bytes[_BIT_TO_CLEAR];
 800725c:	7e8b      	ldrb	r3, [r1, #26]
    uint32_t index = access_sequence->index;
 800725e:	7c0f      	ldrb	r7, [r1, #16]
 8007260:	ea23 2315 	bic.w	r3, r3, r5, lsr #8
    radio->shadow_reg.reg_packet_cfg |= reg_data.bytes[_BIT_TO_SET];
 8007264:	432b      	orrs	r3, r5
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007266:	688d      	ldr	r5, [r1, #8]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800726e:	768b      	strb	r3, [r1, #26]
 8007270:	f805 c007 	strb.w	ip, [r5, r7]
    access_sequence->tx_buffer[index++] = value;
 8007274:	688d      	ldr	r5, [r1, #8]
 8007276:	443d      	add	r5, r7
    access_sequence->index = index;
 8007278:	f107 0c02 	add.w	ip, r7, #2
    access_sequence->tx_buffer[index++] = value;
 800727c:	706b      	strb	r3, [r5, #1]
    access_sequence->index = index;
 800727e:	f881 c010 	strb.w	ip, [r1, #16]
    uwb_set_tx_packet_size(phy->radio, (header_size + phy->tx.payload_size));
 8007282:	6861      	ldr	r1, [r4, #4]
 8007284:	f894 70a0 	ldrb.w	r7, [r4, #160]	; 0xa0
    uint32_t index = access_sequence->index;
 8007288:	7c0b      	ldrb	r3, [r1, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800728a:	688d      	ldr	r5, [r1, #8]
 800728c:	f04f 0c7c 	mov.w	ip, #124	; 0x7c
 8007290:	f805 c003 	strb.w	ip, [r5, r3]
    access_sequence->tx_buffer[index++] = value;
 8007294:	688d      	ldr	r5, [r1, #8]
 8007296:	441d      	add	r5, r3
 8007298:	4417      	add	r7, r2
    access_sequence->index = index;
 800729a:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 800729c:	706f      	strb	r7, [r5, #1]
    access_sequence->index = index;
 800729e:	740b      	strb	r3, [r1, #16]
    uwb_set_cac(phy->radio, RX_IDLE_PWR_HIGH, *phy->tx.cca_threshold);
 80072a0:	6863      	ldr	r3, [r4, #4]
 80072a2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    uint32_t index = access_sequence->index;
 80072a6:	7c1f      	ldrb	r7, [r3, #16]
    reg_data = rx_idle_pwr | MOV2MASK(cac_thresh, BITS_CSTHRES);
 80072a8:	780d      	ldrb	r5, [r1, #0]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80072aa:	6899      	ldr	r1, [r3, #8]
 80072ac:	f04f 0c6d 	mov.w	ip, #109	; 0x6d
 80072b0:	f801 c007 	strb.w	ip, [r1, r7]
    access_sequence->tx_buffer[index++] = value;
 80072b4:	6899      	ldr	r1, [r3, #8]
 80072b6:	4439      	add	r1, r7
 80072b8:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
    access_sequence->index = index;
 80072bc:	f107 0c02 	add.w	ip, r7, #2
    access_sequence->tx_buffer[index++] = value;
 80072c0:	704d      	strb	r5, [r1, #1]
    access_sequence->index = index;
 80072c2:	f883 c010 	strb.w	ip, [r3, #16]
    uint8_t reg_value = rx_pause_time_pll_cycles_to_register(rx_pause_time);
 80072c6:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    uwb_set_rx_pause_time(phy->radio, phy->tx.cca_retry_time);
 80072ca:	6861      	ldr	r1, [r4, #4]
 *  @param[in] rx_pause_time_pll_cycles  Receiver pause time, in us.
 *  @return Equivalent 8-bit register value.
 */
static uint8_t rx_pause_time_pll_cycles_to_register(uint32_t rx_pause_time_pll_cycles)
{
    int16_t raw_value      = (rx_pause_time_pll_cycles / 4) - 1;
 80072cc:	089b      	lsrs	r3, r3, #2
 80072ce:	3b01      	subs	r3, #1
 80072d0:	461d      	mov	r5, r3
 *  @param[in] value  Value to be clamped.
 *  @return Clamped value, if necessary.
 */
static uint8_t clamp_8_bit_value(int16_t value)
{
    if (value > 255) {
 80072d2:	2dff      	cmp	r5, #255	; 0xff
    int16_t raw_value      = (rx_pause_time_pll_cycles / 4) - 1;
 80072d4:	b29b      	uxth	r3, r3
    if (value > 255) {
 80072d6:	f300 829b 	bgt.w	8007810 <prepare_radio+0x6c8>
        return 255;
    } else if (value < 0) {
 80072da:	3501      	adds	r5, #1
 80072dc:	d000      	beq.n	80072e0 <prepare_radio+0x198>
        return 0;
    }
    return (uint8_t)value;
 80072de:	b2d8      	uxtb	r0, r3
    uint32_t index = access_sequence->index;
 80072e0:	7c0d      	ldrb	r5, [r1, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80072e2:	688b      	ldr	r3, [r1, #8]
 80072e4:	276e      	movs	r7, #110	; 0x6e
 80072e6:	555f      	strb	r7, [r3, r5]
    access_sequence->tx_buffer[index++] = value;
 80072e8:	688b      	ldr	r3, [r1, #8]
 80072ea:	442b      	add	r3, r5
    access_sequence->index = index;
 80072ec:	1caf      	adds	r7, r5, #2
    access_sequence->tx_buffer[index++] = value;
 80072ee:	7058      	strb	r0, [r3, #1]
    access_sequence->index = index;
 80072f0:	740f      	strb	r7, [r1, #16]
    if (frame_fits_in_radio_fifo(phy->tx.payload_size, header_size)) {
 80072f2:	f894 50a0 	ldrb.w	r5, [r4, #160]	; 0xa0
    return (radio_events & RX_TIMEOUT_IT);
}

bool frame_fits_in_radio_fifo(uint8_t payload_size, uint8_t header_size)
{
    return ((payload_size + header_size) <= MAX_FRAMESIZE);
 80072f6:	442a      	add	r2, r5
    if (frame_fits_in_radio_fifo(phy->tx.payload_size, header_size)) {
 80072f8:	2a80      	cmp	r2, #128	; 0x80
 80072fa:	f340 8178 	ble.w	80075ee <prepare_radio+0x4a6>
        uint8_t bufload_thresh = get_bufload_thresh_tx(phy->xlayer_main->config.fec, phy->tx.payload_size / phy->partial_frame_count);
 80072fe:	68e3      	ldr	r3, [r4, #12]
 8007300:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
 8007304:	891b      	ldrh	r3, [r3, #8]
 8007306:	fbb5 f5f2 	udiv	r5, r5, r2
 */
uint8_t get_bufload_thresh_tx(fec_level_t fec_level, uint8_t partial_frame_size)
{
    uint8_t bufload_thresh = 0;

    switch (fec_level) {
 800730a:	f240 3201 	movw	r2, #769	; 0x301
 800730e:	4293      	cmp	r3, r2
 8007310:	f200 80ec 	bhi.w	80074ec <prepare_radio+0x3a4>
 8007314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007318:	f080 827e 	bcs.w	8007818 <prepare_radio+0x6d0>
 800731c:	2b03      	cmp	r3, #3
 800731e:	f040 8164 	bne.w	80075ea <prepare_radio+0x4a2>
            break;
        case FEC_LVL_2:
            bufload_thresh = partial_frame_size - partial_frame_size / 4;
            break;
        case FEC_LVL_3:
            bufload_thresh = partial_frame_size - partial_frame_size / 2;
 8007322:	eba5 0555 	sub.w	r5, r5, r5, lsr #1
    write_value = BIT_TXIRQEN | MOV2MASK(threshold, BITS_TXTHRESH);
 8007326:	f065 037f 	orn	r3, r5, #127	; 0x7f
 800732a:	b2db      	uxtb	r3, r3
        uwb_set_tx_buffer_load_irq_threshold(phy->radio, bufload_thresh);
 800732c:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 800732e:	7c10      	ldrb	r0, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007330:	6891      	ldr	r1, [r2, #8]
 8007332:	2542      	movs	r5, #66	; 0x42
 8007334:	540d      	strb	r5, [r1, r0]
    access_sequence->tx_buffer[index++] = value;
 8007336:	6891      	ldr	r1, [r2, #8]
 8007338:	4401      	add	r1, r0
    access_sequence->index = index;
 800733a:	1c85      	adds	r5, r0, #2
    access_sequence->tx_buffer[index++] = value;
 800733c:	704b      	strb	r3, [r1, #1]
    access_sequence->index = index;
 800733e:	7415      	strb	r5, [r2, #16]
        for (int i = 0; i < (phy->partial_frame_count - 1); i++) {
 8007340:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 8007344:	2b01      	cmp	r3, #1
 8007346:	bf98      	it	ls
 8007348:	f104 071c 	addls.w	r7, r4, #28
 800734c:	d913      	bls.n	8007376 <prepare_radio+0x22e>
 800734e:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80074e8 <prepare_radio+0x3a0>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007352:	f104 071c 	add.w	r7, r4, #28
        for (int i = 0; i < (phy->partial_frame_count - 1); i++) {
 8007356:	2500      	movs	r5, #0
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007358:	4638      	mov	r0, r7
 800735a:	f003 fdf9 	bl	800af50 <circular_queue_get_free_slot_raw>
 800735e:	4603      	mov	r3, r0
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007360:	4638      	mov	r0, r7
    *enqueue_states = state;
 8007362:	f8c3 8000 	str.w	r8, [r3]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007366:	f003 fe03 	bl	800af70 <circular_queue_enqueue_raw>
        for (int i = 0; i < (phy->partial_frame_count - 1); i++) {
 800736a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800736e:	3501      	adds	r5, #1
 8007370:	3b01      	subs	r3, #1
 8007372:	429d      	cmp	r5, r3
 8007374:	dbf0      	blt.n	8007358 <prepare_radio+0x210>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007376:	4638      	mov	r0, r7
 8007378:	f003 fdea 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 800737c:	4b59      	ldr	r3, [pc, #356]	; (80074e4 <prepare_radio+0x39c>)
 800737e:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007380:	4638      	mov	r0, r7
 8007382:	f003 fdf5 	bl	800af70 <circular_queue_enqueue_raw>
    (void)uwb_get_irq_flags(phy->radio);
 8007386:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8007388:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 800738a:	6891      	ldr	r1, [r2, #8]
 800738c:	2000      	movs	r0, #0
 800738e:	54c8      	strb	r0, [r1, r3]
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 8007390:	6891      	ldr	r1, [r2, #8]
 8007392:	4419      	add	r1, r3
 8007394:	2001      	movs	r0, #1
    access_sequence->index = index;
 8007396:	3304      	adds	r3, #4
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 8007398:	7088      	strb	r0, [r1, #2]
    access_sequence->index = index;
 800739a:	7413      	strb	r3, [r2, #16]
    uwb_set_destination_address(phy->radio, *phy->cfg.destination_address, ADDRESS_LENGTH_16);
 800739c:	6863      	ldr	r3, [r4, #4]
 800739e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    uint32_t index = access_sequence->index;
 80073a0:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80073a2:	6898      	ldr	r0, [r3, #8]
 80073a4:	8809      	ldrh	r1, [r1, #0]
 80073a6:	2579      	movs	r5, #121	; 0x79
 80073a8:	5485      	strb	r5, [r0, r2]
    access_sequence->tx_buffer[index++] = value;
 80073aa:	689d      	ldr	r5, [r3, #8]
 80073ac:	4415      	add	r5, r2
    access_sequence->index = index;
 80073ae:	1c90      	adds	r0, r2, #2
        sr_access_append_write_8(&radio->access_sequence, REG_REMOTADDR0, EXTRACT_BYTE(address, 0), &access_sequence_error);
 80073b0:	7069      	strb	r1, [r5, #1]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80073b2:	689d      	ldr	r5, [r3, #8]
    uint32_t index = access_sequence->index;
 80073b4:	b2c0      	uxtb	r0, r0
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80073b6:	2778      	movs	r7, #120	; 0x78
 80073b8:	542f      	strb	r7, [r5, r0]
    access_sequence->tx_buffer[index++] = value;
 80073ba:	689d      	ldr	r5, [r3, #8]
 80073bc:	4428      	add	r0, r5
        sr_access_append_write_8(&radio->access_sequence, REG_REMOTADDR1, EXTRACT_BYTE(address, 1), &access_sequence_error);
 80073be:	0a09      	lsrs	r1, r1, #8
    access_sequence->index = index;
 80073c0:	3204      	adds	r2, #4
 80073c2:	7041      	strb	r1, [r0, #1]
 80073c4:	741a      	strb	r2, [r3, #16]
    main_modem_feat = SET_MAIN_MODEM_FEAT(MAIN_MODEM_FEAT_CLEAR,
 80073c6:	e9d4 3223 	ldrd	r3, r2, [r4, #140]	; 0x8c
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	8812      	ldrh	r2, [r2, #0]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	8962      	ldrh	r2, [r4, #10]
 80073d2:	4313      	orrs	r3, r2
    uwb_set_main_modem_features(phy->radio, main_modem_feat);
 80073d4:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 80073d6:	7c10      	ldrb	r0, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80073d8:	6891      	ldr	r1, [r2, #8]
    radio->shadow_reg.reg_main_modem |= reg_data.bytes[_BIT_TO_SET];
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	276c      	movs	r7, #108	; 0x6c
 80073de:	77d3      	strb	r3, [r2, #31]
 80073e0:	540f      	strb	r7, [r1, r0]
    access_sequence->tx_buffer[index++] = value;
 80073e2:	6891      	ldr	r1, [r2, #8]
 80073e4:	4401      	add	r1, r0
    access_sequence->index = index;
 80073e6:	1c85      	adds	r5, r0, #2
    access_sequence->tx_buffer[index++] = value;
 80073e8:	704b      	strb	r3, [r1, #1]
    access_sequence->index = index;
 80073ea:	7415      	strb	r5, [r2, #16]
    uwb_set_int_flag(phy->radio, radio_events | phy->radio->irq_polarity);
 80073ec:	6862      	ldr	r2, [r4, #4]
 80073ee:	6851      	ldr	r1, [r2, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 80073f0:	8a93      	ldrh	r3, [r2, #20]
 80073f2:	430e      	orrs	r6, r1
    internal.reg_32_u = int_flag_cfg;
 80073f4:	9601      	str	r6, [sp, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 80073f6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    radio->shadow_reg.reg_int_flag_status.short_val |= internal.reg_value[_BIT_TO_SET];
 80073fa:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 80073fe:	b289      	uxth	r1, r1
 8007400:	ea23 0301 	bic.w	r3, r3, r1
    radio->shadow_reg.reg_int_flag_status.short_val |= internal.reg_value[_BIT_TO_SET];
 8007404:	4303      	orrs	r3, r0
    uint32_t index = access_sequence->index;
 8007406:	7c11      	ldrb	r1, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007408:	6890      	ldr	r0, [r2, #8]
 800740a:	b29b      	uxth	r3, r3
 800740c:	2540      	movs	r5, #64	; 0x40
 800740e:	8293      	strh	r3, [r2, #20]
 8007410:	5445      	strb	r5, [r0, r1]
    access_sequence->tx_buffer[index++] = value.bytes[0];
 8007412:	6890      	ldr	r0, [r2, #8]
 8007414:	4408      	add	r0, r1
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 8007416:	2541      	movs	r5, #65	; 0x41
    access_sequence->tx_buffer[index++] = value.bytes[0];
 8007418:	7043      	strb	r3, [r0, #1]
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 800741a:	6890      	ldr	r0, [r2, #8]
 800741c:	4408      	add	r0, r1
    access_sequence->tx_buffer[index++] = value.bytes[1];
 800741e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 8007422:	7085      	strb	r5, [r0, #2]
    access_sequence->tx_buffer[index++] = value.bytes[1];
 8007424:	6890      	ldr	r0, [r2, #8]
 8007426:	4408      	add	r0, r1
    access_sequence->index = index;
 8007428:	3104      	adds	r1, #4
    access_sequence->tx_buffer[index++] = value.bytes[1];
 800742a:	70c3      	strb	r3, [r0, #3]
    access_sequence->index = index;
 800742c:	7411      	strb	r1, [r2, #16]
    if (phy->cfg.fixed_payload_size_enable) {
 800742e:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
        uwb_set_radio_actions(phy->radio, SET_RADIO_ACTIONS(phy->cfg.radio_actions, GO_TO_SLEEP));
 8007432:	6862      	ldr	r2, [r4, #4]
 8007434:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
    if (phy->cfg.fixed_payload_size_enable) {
 8007438:	2b00      	cmp	r3, #0
 800743a:	d04a      	beq.n	80074d2 <prepare_radio+0x38a>
    radio->shadow_reg.radio_actions &= ~reg_data.bytes[_BIT_TO_CLEAR];
 800743c:	7dd3      	ldrb	r3, [r2, #23]
        uwb_set_radio_actions(phy->radio, SET_RADIO_ACTIONS(phy->cfg.radio_actions, GO_TO_SLEEP));
 800743e:	f041 0004 	orr.w	r0, r1, #4
 8007442:	ea23 2311 	bic.w	r3, r3, r1, lsr #8
    radio->shadow_reg.radio_actions |= reg_data.bytes[_BIT_TO_SET];
 8007446:	4303      	orrs	r3, r0
    uint32_t index = access_sequence->index;
 8007448:	7c11      	ldrb	r1, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800744a:	6890      	ldr	r0, [r2, #8]
 800744c:	b2db      	uxtb	r3, r3
 800744e:	255f      	movs	r5, #95	; 0x5f
 8007450:	75d3      	strb	r3, [r2, #23]
 8007452:	5445      	strb	r5, [r0, r1]
    access_sequence->tx_buffer[index++] = value;
 8007454:	6890      	ldr	r0, [r2, #8]
 8007456:	4408      	add	r0, r1
    access_sequence->index = index;
 8007458:	3102      	adds	r1, #2
    access_sequence->tx_buffer[index++] = value;
 800745a:	7043      	strb	r3, [r0, #1]
    access_sequence->index = index;
 800745c:	7411      	strb	r1, [r2, #16]
    uwb_set_integgain(phy->radio, phy->xlayer_main->config.channel->integgain);
 800745e:	68e2      	ldr	r2, [r4, #12]
 8007460:	6863      	ldr	r3, [r4, #4]
 8007462:	68d2      	ldr	r2, [r2, #12]
    radio->shadow_reg.reg_dll_tuning &= ~reg_data.bytes[_BIT_TO_CLEAR];
 8007464:	7f18      	ldrb	r0, [r3, #28]
    reg_data.short_val = SET_REGISTER_8(BITS_INTEGGAIN, integgain_value);
 8007466:	7b92      	ldrb	r2, [r2, #14]
    uint32_t index = access_sequence->index;
 8007468:	7c19      	ldrb	r1, [r3, #16]
    radio->shadow_reg.reg_dll_tuning &= ~reg_data.bytes[_BIT_TO_CLEAR];
 800746a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    reg_data.short_val = SET_REGISTER_8(BITS_INTEGGAIN, integgain_value);
 800746e:	f002 0203 	and.w	r2, r2, #3
    radio->shadow_reg.reg_dll_tuning |= reg_data.bytes[_BIT_TO_SET];
 8007472:	4302      	orrs	r2, r0
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007474:	6898      	ldr	r0, [r3, #8]
 8007476:	771a      	strb	r2, [r3, #28]
 8007478:	255d      	movs	r5, #93	; 0x5d
 800747a:	5445      	strb	r5, [r0, r1]
    access_sequence->tx_buffer[index++] = value;
 800747c:	6898      	ldr	r0, [r3, #8]
 800747e:	4408      	add	r0, r1
    access_sequence->index = index;
 8007480:	3102      	adds	r1, #2
    access_sequence->tx_buffer[index++] = value;
 8007482:	7042      	strb	r2, [r0, #1]
    access_sequence->index = index;
 8007484:	7419      	strb	r1, [r3, #16]
    uwb_set_timer_cfg_burst(phy->radio, *phy->cfg.sleep_time, *phy->cfg.rx_timeout, 3, *phy->cfg.power_up_delay);
 8007486:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8007488:	6865      	ldr	r5, [r4, #4]
    uint8_t pwr_up_reg_value = pwr_up / 4;
 800748a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800748e:	e9d4 311d 	ldrd	r3, r1, [r4, #116]	; 0x74
 8007492:	2a00      	cmp	r2, #0
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	680e      	ldr	r6, [r1, #0]
 8007498:	bfb8      	it	lt
 800749a:	3203      	addlt	r2, #3
 800749c:	f3c2 0487 	ubfx	r4, r2, #2, #8
    uint8_t rx_timeout_msb   = (EXTRACT_BYTE((rx_timeout / 8), 1) << 4) | (EXTRACT_BYTE((rx_timeout / 8), 0) >> 4);
 80074a0:	09d8      	lsrs	r0, r3, #7
    uint32_t index = access_sequence->index;
 80074a2:	7c2a      	ldrb	r2, [r5, #16]
    uint8_t rx_timeout_lsb   = (((EXTRACT_BYTE((rx_timeout / 8), 0) & 0x0F) << 4) | (rx_pwr_up_delay & 0x0F));
 80074a4:	08d9      	lsrs	r1, r3, #3
    access_sequence->tx_buffer[index++] = starting_reg | REG_WRITE_BURST;
 80074a6:	68ab      	ldr	r3, [r5, #8]
 80074a8:	27c6      	movs	r7, #198	; 0xc6
 80074aa:	549f      	strb	r7, [r3, r2]
 80074ac:	1c57      	adds	r7, r2, #1
    memcpy(&access_sequence->tx_buffer[index], tx_buffer, buffer_size); /* Flawfinder: ignore */
 80074ae:	68ab      	ldr	r3, [r5, #8]
 *  @param[in]  in_data   Input array in uint16_t
 *  @param[out] out_data  Output array in uint8_t
 */
static inline void serialize_uint16_to_uint8_array(uint16_t in_data, uint8_t *out_data)
{
    out_data[0] = EXTRACT_BYTE(in_data, 1);
 80074b0:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 80074b4:	f803 c007 	strb.w	ip, [r3, r7]
 80074b8:	0109      	lsls	r1, r1, #4
 80074ba:	443b      	add	r3, r7
 80074bc:	f041 0103 	orr.w	r1, r1, #3
    access_sequence->index      =  index;
 80074c0:	3206      	adds	r2, #6
    out_data[1] = EXTRACT_BYTE(in_data, 0);
 80074c2:	705e      	strb	r6, [r3, #1]
    memcpy(&access_sequence->tx_buffer[index], tx_buffer, buffer_size); /* Flawfinder: ignore */
 80074c4:	7098      	strb	r0, [r3, #2]
 80074c6:	70d9      	strb	r1, [r3, #3]
 80074c8:	711c      	strb	r4, [r3, #4]
    access_sequence->index      =  index;
 80074ca:	742a      	strb	r2, [r5, #16]
}
 80074cc:	b002      	add	sp, #8
 80074ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    radio->shadow_reg.radio_actions &= ~reg_data.bytes[_BIT_TO_CLEAR];
 80074d2:	7dd3      	ldrb	r3, [r2, #23]
        uwb_set_radio_actions(phy->radio, SET_RADIO_ACTIONS(phy->cfg.radio_actions,
 80074d4:	f041 0007 	orr.w	r0, r1, #7
 80074d8:	e7b3      	b.n	8007442 <prepare_radio+0x2fa>
 80074da:	bf00      	nop
 80074dc:	ff7f3228 	.word	0xff7f3228
 80074e0:	ff7f4000 	.word	0xff7f4000
 80074e4:	2000045c 	.word	0x2000045c
 80074e8:	200004e0 	.word	0x200004e0
    switch (fec_level) {
 80074ec:	f240 3202 	movw	r2, #770	; 0x302
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d17a      	bne.n	80075ea <prepare_radio+0x4a2>
            bufload_thresh = partial_frame_size - partial_frame_size / 4;
 80074f4:	eba5 0595 	sub.w	r5, r5, r5, lsr #2
    write_value = BIT_TXIRQEN | MOV2MASK(threshold, BITS_TXTHRESH);
 80074f8:	f065 037f 	orn	r3, r5, #127	; 0x7f
 80074fc:	b2db      	uxtb	r3, r3
            break;
 80074fe:	e715      	b.n	800732c <prepare_radio+0x1e4>
    phy->cfg.fixed_payload_size_enable =  phy->xlayer_main->config.fixed_payload_size_enable;
 8007500:	7d99      	ldrb	r1, [r3, #22]
    phy->cfg.packet_cfg     = phy->xlayer_main->config.packet_cfg;
 8007502:	8a9a      	ldrh	r2, [r3, #20]
    phy->cfg.channel        = phy->xlayer_main->config.channel;
 8007504:	68d8      	ldr	r0, [r3, #12]
    phy->cfg.fixed_payload_size_enable =  phy->xlayer_main->config.fixed_payload_size_enable;
 8007506:	f884 1086 	strb.w	r1, [r4, #134]	; 0x86
    phy->cfg.sleep_level    = phy->xlayer_main->config.sleep_level;
 800750a:	8e99      	ldrh	r1, [r3, #52]	; 0x34
    phy->cfg.packet_cfg     = phy->xlayer_main->config.packet_cfg;
 800750c:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
    phy->rx.rx_constgain    = &phy->xlayer_main->config.rx_constgain;
 8007510:	f103 0222 	add.w	r2, r3, #34	; 0x22
    phy->cfg.channel        = phy->xlayer_main->config.channel;
 8007514:	66e0      	str	r0, [r4, #108]	; 0x6c
    phy->rx.rx_constgain    = &phy->xlayer_main->config.rx_constgain;
 8007516:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
    phy->rx.rssi_raw        = &phy->xlayer_main->config.rssi_raw;
 800751a:	f103 0030 	add.w	r0, r3, #48	; 0x30
    phy->rx.rnsi_raw        = &phy->xlayer_main->config.rnsi_raw;
 800751e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8007522:	e9c4 202d 	strd	r2, r0, [r4, #180]	; 0xb4
    phy->cfg.sleep_level    = phy->xlayer_main->config.sleep_level;
 8007526:	f8a4 1082 	strh.w	r1, [r4, #130]	; 0x82
    phy->rx.signal          = &phy->signal_main;
 800752a:	1c62      	adds	r2, r4, #1
    phy->rx.frame           = &phy->xlayer_main->frame;
 800752c:	f103 0148 	add.w	r1, r3, #72	; 0x48
    phy->rx.signal          = &phy->signal_main;
 8007530:	e9c4 122f 	strd	r1, r2, [r4, #188]	; 0xbc
    phy->cfg.rx_timeout     = &phy->xlayer_main->config.rx_timeout;
 8007534:	f103 011a 	add.w	r1, r3, #26
 8007538:	6761      	str	r1, [r4, #116]	; 0x74
    phy->cfg.sleep_time     = &phy->xlayer_main->config.sleep_time;
 800753a:	f103 011c 	add.w	r1, r3, #28
 800753e:	67a1      	str	r1, [r4, #120]	; 0x78
    phy->cfg.power_up_delay = &phy->xlayer_main->config.power_up_delay;
 8007540:	f103 0518 	add.w	r5, r3, #24
    phy->cfg.rx_wait_time   = &phy->xlayer_main->config.rx_wait_time;
 8007544:	f103 0120 	add.w	r1, r3, #32
    phy->cfg.power_up_delay = &phy->xlayer_main->config.power_up_delay;
 8007548:	6725      	str	r5, [r4, #112]	; 0x70
    phy->cfg.rx_wait_time   = &phy->xlayer_main->config.rx_wait_time;
 800754a:	67e1      	str	r1, [r4, #124]	; 0x7c
    phy->rx.payload_size    = phy->xlayer_main->frame.payload_memory_size - phy->xlayer_main->frame.header_memory_size - SIZE_HDR_SIZE;
 800754c:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8007550:	f893 604c 	ldrb.w	r6, [r3, #76]	; 0x4c
    if (phy->xlayer_auto != NULL) {
 8007554:	6922      	ldr	r2, [r4, #16]
    phy->rx.header_size     = phy->xlayer_main->frame.header_memory_size;
 8007556:	f884 60c5 	strb.w	r6, [r4, #197]	; 0xc5
    phy->rx.payload_size    = phy->xlayer_main->frame.payload_memory_size - phy->xlayer_main->frame.header_memory_size - SIZE_HDR_SIZE;
 800755a:	3901      	subs	r1, #1
    phy->tx.modulation      = &phy->xlayer_main->config.modulation;
 800755c:	1d9d      	adds	r5, r3, #6
    phy->tx.fec             = &phy->xlayer_main->config.fec;
 800755e:	f103 0008 	add.w	r0, r3, #8
    phy->rx.payload_size    = phy->xlayer_main->frame.payload_memory_size - phy->xlayer_main->frame.header_memory_size - SIZE_HDR_SIZE;
 8007562:	1b89      	subs	r1, r1, r6
    phy->tx.fec             = &phy->xlayer_main->config.fec;
 8007564:	e9c4 5023 	strd	r5, r0, [r4, #140]	; 0x8c
    phy->rx.payload_size    = phy->xlayer_main->frame.payload_memory_size - phy->xlayer_main->frame.header_memory_size - SIZE_HDR_SIZE;
 8007568:	f884 10c4 	strb.w	r1, [r4, #196]	; 0xc4
    if (phy->xlayer_auto != NULL) {
 800756c:	2a00      	cmp	r2, #0
 800756e:	d079      	beq.n	8007664 <prepare_radio+0x51c>
        phy->auto_reply_mode         = AUTO_REPLY_ENABLE;
 8007570:	2140      	movs	r1, #64	; 0x40
        phy->cfg.channel             = phy->xlayer_auto->config.channel;
 8007572:	68d0      	ldr	r0, [r2, #12]
        phy->cfg.phase_info          = phy->xlayer_main->config.phases_info;
 8007574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        phy->auto_reply_mode         = AUTO_REPLY_ENABLE;
 8007576:	8161      	strh	r1, [r4, #10]
        phy->cfg.destination_address = &phy->xlayer_auto->config.destination_address;
 8007578:	1c91      	adds	r1, r2, #2
 800757a:	6661      	str	r1, [r4, #100]	; 0x64
        phy->tx.cca_threshold        = &phy->xlayer_auto->config.cca_threshold;
 800757c:	f102 0123 	add.w	r1, r2, #35	; 0x23
        phy->cfg.channel             = phy->xlayer_auto->config.channel;
 8007580:	e9c4 201a 	strd	r2, r0, [r4, #104]	; 0x68
        phy->tx.cca_threshold        = &phy->xlayer_auto->config.cca_threshold;
 8007584:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
        phy->tx.frame                = &phy->xlayer_auto->frame;
 8007588:	f102 0048 	add.w	r0, r2, #72	; 0x48
        phy->tx.signal               = &phy->signal_auto;
 800758c:	1ca1      	adds	r1, r4, #2
 800758e:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
        phy->cfg.phase_info          = phy->xlayer_main->config.phases_info;
 8007592:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        payload_size = phy->tx.frame->payload_end_it - phy->tx.frame->payload_begin_it;
 8007596:	e9d2 051b 	ldrd	r0, r5, [r2, #108]	; 0x6c
        header_size  = phy->tx.frame->header_end_it - phy->tx.frame->header_begin_it;
 800759a:	e9d2 2314 	ldrd	r2, r3, [r2, #80]	; 0x50
        uwb_set_tx_packet_size(phy->radio, (header_size + payload_size));
 800759e:	6861      	ldr	r1, [r4, #4]
        header_size  = phy->tx.frame->header_end_it - phy->tx.frame->header_begin_it;
 80075a0:	1a9b      	subs	r3, r3, r2
        payload_size = phy->tx.frame->payload_end_it - phy->tx.frame->payload_begin_it;
 80075a2:	1a2d      	subs	r5, r5, r0
    uint32_t index = access_sequence->index;
 80075a4:	7c0a      	ldrb	r2, [r1, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80075a6:	6888      	ldr	r0, [r1, #8]
 80075a8:	267c      	movs	r6, #124	; 0x7c
 80075aa:	5486      	strb	r6, [r0, r2]
    access_sequence->tx_buffer[index++] = value;
 80075ac:	6888      	ldr	r0, [r1, #8]
 80075ae:	b2ed      	uxtb	r5, r5
 80075b0:	4410      	add	r0, r2
        uwb_set_tx_packet_size(phy->radio, (header_size + payload_size));
 80075b2:	18ee      	adds	r6, r5, r3
    access_sequence->index = index;
 80075b4:	3202      	adds	r2, #2
    if (header_size + payload_size != 0) {
 80075b6:	fa55 f383 	uxtab	r3, r5, r3
    access_sequence->tx_buffer[index++] = value;
 80075ba:	7046      	strb	r6, [r0, #1]
    access_sequence->index = index;
 80075bc:	740a      	strb	r2, [r1, #16]
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 80075be:	f104 061c 	add.w	r6, r4, #28
    if (header_size + payload_size != 0) {
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f040 8111 	bne.w	80077ea <prepare_radio+0x6a2>
    if (payload_size != 0) {
 80075c8:	2d00      	cmp	r5, #0
 80075ca:	f040 8160 	bne.w	800788e <prepare_radio+0x746>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 80075ce:	4630      	mov	r0, r6
 80075d0:	f003 fcbe 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 80075d4:	4bb5      	ldr	r3, [pc, #724]	; (80078ac <prepare_radio+0x764>)
 80075d6:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 80075d8:	4630      	mov	r0, r6
 80075da:	f003 fcc9 	bl	800af70 <circular_queue_enqueue_raw>
}
 80075de:	e073      	b.n	80076c8 <prepare_radio+0x580>
        phy->cfg.radio_actions |= SET_RADIO_ACTIONS(START_TX);
 80075e0:	f043 0310 	orr.w	r3, r3, #16
 80075e4:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 80075e8:	e62a      	b.n	8007240 <prepare_radio+0xf8>
    switch (fec_level) {
 80075ea:	2380      	movs	r3, #128	; 0x80
 80075ec:	e69e      	b.n	800732c <prepare_radio+0x1e4>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 80075ee:	f104 071c 	add.w	r7, r4, #28
    if (header_size + payload_size != 0) {
 80075f2:	2a00      	cmp	r2, #0
 80075f4:	f040 80ed 	bne.w	80077d2 <prepare_radio+0x68a>
    if (payload_size != 0) {
 80075f8:	2d00      	cmp	r5, #0
 80075fa:	f040 80e1 	bne.w	80077c0 <prepare_radio+0x678>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 80075fe:	4638      	mov	r0, r7
 8007600:	f003 fca6 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8007604:	4baa      	ldr	r3, [pc, #680]	; (80078b0 <prepare_radio+0x768>)
 8007606:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007608:	4638      	mov	r0, r7
 800760a:	f003 fcb1 	bl	800af70 <circular_queue_enqueue_raw>
}
 800760e:	e6ba      	b.n	8007386 <prepare_radio+0x23e>
    } else if (phy->xlayer_main->config.expect_ack) {
 8007610:	791d      	ldrb	r5, [r3, #4]
 8007612:	2d00      	cmp	r5, #0
 8007614:	f000 8105 	beq.w	8007822 <prepare_radio+0x6da>
        phy->auto_reply_mode = AUTO_REPLY_ENABLE;
 8007618:	2040      	movs	r0, #64	; 0x40
 800761a:	8160      	strh	r0, [r4, #10]
        phy->cfg.channel     = phy->xlayer_main->config.channel;
 800761c:	68d8      	ldr	r0, [r3, #12]
 800761e:	66e0      	str	r0, [r4, #108]	; 0x6c
        phy->rx.rx_constgain = &phy->xlayer_main->config.rx_constgain;
 8007620:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8007624:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
        phy->rx.rssi_raw     = &phy->xlayer_main->config.rssi_raw;
 8007628:	f103 0030 	add.w	r0, r3, #48	; 0x30
        phy->rx.rnsi_raw     = &phy->xlayer_main->config.rnsi_raw;
 800762c:	332c      	adds	r3, #44	; 0x2c
        phy->rx.rssi_raw     = &phy->xlayer_main->config.rssi_raw;
 800762e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
        phy->rx.rnsi_raw     = &phy->xlayer_main->config.rnsi_raw;
 8007632:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
        phy->rx.frame        = &unused_frame;
 8007636:	489f      	ldr	r0, [pc, #636]	; (80078b4 <prepare_radio+0x76c>)
        phy->rx.signal       = &unused_signal;
 8007638:	4b9f      	ldr	r3, [pc, #636]	; (80078b8 <prepare_radio+0x770>)
        phy->rx.payload_size = 0;
 800763a:	f884 10c4 	strb.w	r1, [r4, #196]	; 0xc4
        phy->rx.signal       = &unused_signal;
 800763e:	e9c4 032f 	strd	r0, r3, [r4, #188]	; 0xbc
        phy->cfg.phase_info  = NULL;
 8007642:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
        uwb_set_rx_packet_size(phy->radio, 1);
 8007646:	6861      	ldr	r1, [r4, #4]
        *radio_events        = set_events_for_tx_with_ack();
 8007648:	4e9c      	ldr	r6, [pc, #624]	; (80078bc <prepare_radio+0x774>)
    uint32_t index = access_sequence->index;
 800764a:	7c0b      	ldrb	r3, [r1, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800764c:	6888      	ldr	r0, [r1, #8]
 800764e:	257d      	movs	r5, #125	; 0x7d
 8007650:	54c5      	strb	r5, [r0, r3]
    access_sequence->tx_buffer[index++] = value;
 8007652:	6888      	ldr	r0, [r1, #8]
 8007654:	4418      	add	r0, r3
 8007656:	2501      	movs	r5, #1
    access_sequence->index = index;
 8007658:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 800765a:	7045      	strb	r5, [r0, #1]
    access_sequence->index = index;
 800765c:	740b      	strb	r3, [r1, #16]
    uwb_set_const_gains(phy->radio, *phy->rx.rx_constgain);
 800765e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
}
 8007662:	e5d8      	b.n	8007216 <prepare_radio+0xce>
    } else if (phy->xlayer_main->config.expect_ack) {
 8007664:	7919      	ldrb	r1, [r3, #4]
        phy->cfg.source_address      = &phy->xlayer_main->config.destination_address;
 8007666:	1c98      	adds	r0, r3, #2
    } else if (phy->xlayer_main->config.expect_ack) {
 8007668:	2900      	cmp	r1, #0
 800766a:	f000 80f4 	beq.w	8007856 <prepare_radio+0x70e>
        phy->tx.cca_threshold        = &phy->xlayer_main->config.cca_threshold;
 800766e:	f103 0123 	add.w	r1, r3, #35	; 0x23
        phy->auto_reply_mode         = AUTO_REPLY_ENABLE;
 8007672:	2540      	movs	r5, #64	; 0x40
        phy->cfg.destination_address = &phy->xlayer_main->config.source_address;
 8007674:	6663      	str	r3, [r4, #100]	; 0x64
        phy->tx.frame                = &unused_frame;
 8007676:	4b8f      	ldr	r3, [pc, #572]	; (80078b4 <prepare_radio+0x76c>)
        phy->auto_reply_mode         = AUTO_REPLY_ENABLE;
 8007678:	8165      	strh	r5, [r4, #10]
        phy->tx.frame                = &unused_frame;
 800767a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 800767e:	f104 051c 	add.w	r5, r4, #28
        phy->tx.signal               = &unused_signal;
 8007682:	4b8d      	ldr	r3, [pc, #564]	; (80078b8 <prepare_radio+0x770>)
        phy->cfg.phase_info          = NULL;
 8007684:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        phy->tx.cca_threshold        = &phy->xlayer_main->config.cca_threshold;
 8007688:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
        phy->cfg.source_address      = &phy->xlayer_main->config.destination_address;
 800768c:	66a0      	str	r0, [r4, #104]	; 0x68
        phy->tx.signal               = &unused_signal;
 800768e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007692:	4628      	mov	r0, r5
 8007694:	f003 fc5c 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8007698:	4b84      	ldr	r3, [pc, #528]	; (80078ac <prepare_radio+0x764>)
 800769a:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 800769c:	4628      	mov	r0, r5
 800769e:	f003 fc67 	bl	800af70 <circular_queue_enqueue_raw>
        payload_size = phy->tx.frame->payload_end_it - phy->tx.frame->payload_begin_it;
 80076a2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        uwb_set_tx_packet_size(phy->radio, (header_size + payload_size));
 80076a6:	6861      	ldr	r1, [r4, #4]
        payload_size = phy->tx.frame->payload_end_it - phy->tx.frame->payload_begin_it;
 80076a8:	e9d0 2309 	ldrd	r2, r3, [r0, #36]	; 0x24
 80076ac:	1a9a      	subs	r2, r3, r2
        header_size  = phy->tx.frame->header_end_it - phy->tx.frame->header_begin_it;
 80076ae:	e9d0 0302 	ldrd	r0, r3, [r0, #8]
 80076b2:	1a18      	subs	r0, r3, r0
        uwb_set_tx_packet_size(phy->radio, (header_size + payload_size));
 80076b4:	4402      	add	r2, r0
    uint32_t index = access_sequence->index;
 80076b6:	7c0b      	ldrb	r3, [r1, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80076b8:	6888      	ldr	r0, [r1, #8]
 80076ba:	257c      	movs	r5, #124	; 0x7c
 80076bc:	54c5      	strb	r5, [r0, r3]
    access_sequence->tx_buffer[index++] = value;
 80076be:	6888      	ldr	r0, [r1, #8]
 80076c0:	4418      	add	r0, r3
    access_sequence->index = index;
 80076c2:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 80076c4:	7042      	strb	r2, [r0, #1]
    access_sequence->index = index;
 80076c6:	740b      	strb	r3, [r1, #16]
    if (!frame_fits_in_radio_fifo(phy->rx.payload_size, phy->rx.header_size)) {
 80076c8:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
 80076cc:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
    return ((payload_size + header_size) <= MAX_FRAMESIZE);
 80076d0:	4413      	add	r3, r2
    if (!frame_fits_in_radio_fifo(phy->rx.payload_size, phy->rx.header_size)) {
 80076d2:	2b80      	cmp	r3, #128	; 0x80
 80076d4:	dd22      	ble.n	800771c <prepare_radio+0x5d4>
        uint8_t bufload_thresh = get_bufload_thresh_rx(phy->xlayer_main->config.fec, phy->rx.payload_size / phy->partial_frame_count);
 80076d6:	68e3      	ldr	r3, [r4, #12]
 80076d8:	8919      	ldrh	r1, [r3, #8]
 80076da:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 80076de:	fbb2 f2f3 	udiv	r2, r2, r3
 */
uint8_t get_bufload_thresh_rx(fec_level_t fec_level, uint8_t partial_frame_size)
{
    uint8_t bufload_thresh = 0;

    switch (fec_level) {
 80076e2:	f240 3001 	movw	r0, #769	; 0x301
 80076e6:	4281      	cmp	r1, r0
 80076e8:	f200 8088 	bhi.w	80077fc <prepare_radio+0x6b4>
 80076ec:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80076f0:	f080 80d6 	bcs.w	80078a0 <prepare_radio+0x758>
 80076f4:	2903      	cmp	r1, #3
 80076f6:	f040 808d 	bne.w	8007814 <prepare_radio+0x6cc>
    write_value = BIT_RXIRQEN | MOV2MASK(threshold, BITS_RXTHRESH);
 80076fa:	f042 0380 	orr.w	r3, r2, #128	; 0x80
        uwb_set_rx_buffer_load_irq_threshold(phy->radio, bufload_thresh);
 80076fe:	6861      	ldr	r1, [r4, #4]
    uint32_t index = access_sequence->index;
 8007700:	7c0a      	ldrb	r2, [r1, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007702:	6888      	ldr	r0, [r1, #8]
 8007704:	2543      	movs	r5, #67	; 0x43
 8007706:	5485      	strb	r5, [r0, r2]
    access_sequence->tx_buffer[index++] = value;
 8007708:	6888      	ldr	r0, [r1, #8]
 800770a:	4410      	add	r0, r2
    access_sequence->index = index;
 800770c:	3202      	adds	r2, #2
    access_sequence->tx_buffer[index++] = value;
 800770e:	7043      	strb	r3, [r0, #1]
    access_sequence->index = index;
 8007710:	740a      	strb	r2, [r1, #16]
    uwb_set_rx_packet_size(phy->radio, phy->rx.payload_size + phy->rx.header_size);
 8007712:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
 8007716:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800771a:	4413      	add	r3, r2
 800771c:	6861      	ldr	r1, [r4, #4]
}
 800771e:	4e68      	ldr	r6, [pc, #416]	; (80078c0 <prepare_radio+0x778>)
    uint32_t index = access_sequence->index;
 8007720:	7c0a      	ldrb	r2, [r1, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007722:	6888      	ldr	r0, [r1, #8]
 8007724:	257d      	movs	r5, #125	; 0x7d
 8007726:	5485      	strb	r5, [r0, r2]
    access_sequence->tx_buffer[index++] = value;
 8007728:	6888      	ldr	r0, [r1, #8]
 800772a:	4410      	add	r0, r2
    access_sequence->index = index;
 800772c:	3202      	adds	r2, #2
    access_sequence->tx_buffer[index++] = value;
 800772e:	7043      	strb	r3, [r0, #1]
    access_sequence->index = index;
 8007730:	740a      	strb	r2, [r1, #16]
    uwb_set_packet_config(phy->radio, phy->cfg.packet_cfg);
 8007732:	6862      	ldr	r2, [r4, #4]
 8007734:	f8b4 0080 	ldrh.w	r0, [r4, #128]	; 0x80
    radio->shadow_reg.reg_packet_cfg &= ~reg_data.bytes[_BIT_TO_CLEAR];
 8007738:	7e93      	ldrb	r3, [r2, #26]
    uint32_t index = access_sequence->index;
 800773a:	7c11      	ldrb	r1, [r2, #16]
 800773c:	ea23 2310 	bic.w	r3, r3, r0, lsr #8
    radio->shadow_reg.reg_packet_cfg |= reg_data.bytes[_BIT_TO_SET];
 8007740:	4303      	orrs	r3, r0
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007742:	6890      	ldr	r0, [r2, #8]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	257e      	movs	r5, #126	; 0x7e
 8007748:	7693      	strb	r3, [r2, #26]
 800774a:	5445      	strb	r5, [r0, r1]
    access_sequence->tx_buffer[index++] = value;
 800774c:	6890      	ldr	r0, [r2, #8]
 800774e:	4408      	add	r0, r1
    access_sequence->index = index;
 8007750:	3102      	adds	r1, #2
    access_sequence->tx_buffer[index++] = value;
 8007752:	7043      	strb	r3, [r0, #1]
    access_sequence->index = index;
 8007754:	7411      	strb	r1, [r2, #16]
    uwb_set_const_gains(phy->radio, *phy->rx.rx_constgain);
 8007756:	6862      	ldr	r2, [r4, #4]
 8007758:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
    uint32_t index = access_sequence->index;
 800775c:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800775e:	6891      	ldr	r1, [r2, #8]
 8007760:	7800      	ldrb	r0, [r0, #0]
 8007762:	2570      	movs	r5, #112	; 0x70
 8007764:	54cd      	strb	r5, [r1, r3]
    access_sequence->tx_buffer[index++] = value;
 8007766:	6891      	ldr	r1, [r2, #8]
 8007768:	4419      	add	r1, r3
    access_sequence->index = index;
 800776a:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 800776c:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 800776e:	7413      	strb	r3, [r2, #16]
    uwb_set_rx_waited_src(phy->radio, RX_WAIT_SOURCE_REGISTER);
 8007770:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8007772:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007774:	6891      	ldr	r1, [r2, #8]
 8007776:	2064      	movs	r0, #100	; 0x64
 8007778:	54c8      	strb	r0, [r1, r3]
    access_sequence->tx_buffer[index++] = value;
 800777a:	6891      	ldr	r1, [r2, #8]
 800777c:	4419      	add	r1, r3
 800777e:	2080      	movs	r0, #128	; 0x80
    access_sequence->index = index;
 8007780:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 8007782:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 8007784:	7413      	strb	r3, [r2, #16]
    uwb_set_cac(phy->radio, RX_IDLE_PWR_HIGH, DISABLE_CCA_THRSH_VALUE);
 8007786:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8007788:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800778a:	6891      	ldr	r1, [r2, #8]
 800778c:	206d      	movs	r0, #109	; 0x6d
 800778e:	54c8      	strb	r0, [r1, r3]
    access_sequence->tx_buffer[index++] = value;
 8007790:	6891      	ldr	r1, [r2, #8]
 8007792:	4419      	add	r1, r3
 8007794:	20ff      	movs	r0, #255	; 0xff
    access_sequence->index = index;
 8007796:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 8007798:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 800779a:	7413      	strb	r3, [r2, #16]
    uwb_set_rx_pause_time(phy->radio, 0);
 800779c:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 800779e:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80077a0:	6891      	ldr	r1, [r2, #8]
 80077a2:	206e      	movs	r0, #110	; 0x6e
 80077a4:	54c8      	strb	r0, [r1, r3]
    access_sequence->tx_buffer[index++] = value;
 80077a6:	6891      	ldr	r1, [r2, #8]
 80077a8:	4419      	add	r1, r3
 80077aa:	2000      	movs	r0, #0
    access_sequence->index = index;
 80077ac:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 80077ae:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 80077b0:	7413      	strb	r3, [r2, #16]
    phy->cfg.radio_actions |= SET_RADIO_ACTIONS(RX_MODE_ENABLE_RECEPTION);
 80077b2:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 80077b6:	f043 0320 	orr.w	r3, r3, #32
 80077ba:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
}
 80077be:	e5e2      	b.n	8007386 <prepare_radio+0x23e>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 80077c0:	4638      	mov	r0, r7
 80077c2:	f003 fbc5 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 80077c6:	4b3f      	ldr	r3, [pc, #252]	; (80078c4 <prepare_radio+0x77c>)
 80077c8:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 80077ca:	4638      	mov	r0, r7
 80077cc:	f003 fbd0 	bl	800af70 <circular_queue_enqueue_raw>
}
 80077d0:	e715      	b.n	80075fe <prepare_radio+0x4b6>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 80077d2:	4638      	mov	r0, r7
 80077d4:	f003 fbbc 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 80077d8:	4b3b      	ldr	r3, [pc, #236]	; (80078c8 <prepare_radio+0x780>)
 80077da:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 80077dc:	4638      	mov	r0, r7
 80077de:	f003 fbc7 	bl	800af70 <circular_queue_enqueue_raw>
    if (payload_size != 0) {
 80077e2:	2d00      	cmp	r5, #0
 80077e4:	f43f af0b 	beq.w	80075fe <prepare_radio+0x4b6>
 80077e8:	e7ea      	b.n	80077c0 <prepare_radio+0x678>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 80077ea:	4630      	mov	r0, r6
 80077ec:	f003 fbb0 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 80077f0:	4b35      	ldr	r3, [pc, #212]	; (80078c8 <prepare_radio+0x780>)
 80077f2:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 80077f4:	4630      	mov	r0, r6
 80077f6:	f003 fbbb 	bl	800af70 <circular_queue_enqueue_raw>
}
 80077fa:	e6e5      	b.n	80075c8 <prepare_radio+0x480>
    switch (fec_level) {
 80077fc:	f240 3302 	movw	r3, #770	; 0x302
 8007800:	4299      	cmp	r1, r3
 8007802:	d107      	bne.n	8007814 <prepare_radio+0x6cc>
        case FEC_LVL_0:
        case FEC_LVL_1:
            bufload_thresh = 1 + partial_frame_size / 2;
            break;
        case FEC_LVL_2:
            bufload_thresh = partial_frame_size / 2 + partial_frame_size / 4;
 8007804:	0893      	lsrs	r3, r2, #2
 8007806:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    write_value = BIT_RXIRQEN | MOV2MASK(threshold, BITS_RXTHRESH);
 800780a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            break;
 800780e:	e776      	b.n	80076fe <prepare_radio+0x5b6>
        return 255;
 8007810:	20ff      	movs	r0, #255	; 0xff
 8007812:	e565      	b.n	80072e0 <prepare_radio+0x198>
    switch (fec_level) {
 8007814:	2380      	movs	r3, #128	; 0x80
 8007816:	e772      	b.n	80076fe <prepare_radio+0x5b6>
            bufload_thresh = partial_frame_size - 1;
 8007818:	3d01      	subs	r5, #1
    write_value = BIT_TXIRQEN | MOV2MASK(threshold, BITS_TXTHRESH);
 800781a:	f065 037f 	orn	r3, r5, #127	; 0x7f
 800781e:	b2db      	uxtb	r3, r3
            break;
 8007820:	e584      	b.n	800732c <prepare_radio+0x1e4>
        phy->auto_reply_mode = AUTO_REPLY_DISABLE;
 8007822:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007826:	8161      	strh	r1, [r4, #10]
        phy->cfg.channel     = phy->xlayer_main->config.channel;
 8007828:	68d9      	ldr	r1, [r3, #12]
 800782a:	66e1      	str	r1, [r4, #108]	; 0x6c
        phy->rx.frame        = &unused_frame;
 800782c:	4921      	ldr	r1, [pc, #132]	; (80078b4 <prepare_radio+0x76c>)
 800782e:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
        phy->rx.signal       = &unused_signal;
 8007832:	4921      	ldr	r1, [pc, #132]	; (80078b8 <prepare_radio+0x770>)
 8007834:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
        phy->rx.rx_constgain = &phy->xlayer_main->config.rx_constgain;
 8007838:	f103 0022 	add.w	r0, r3, #34	; 0x22
        phy->rx.rssi_raw     = &phy->xlayer_main->config.rssi_raw;
 800783c:	f103 0130 	add.w	r1, r3, #48	; 0x30
        phy->rx.rnsi_raw     = &phy->xlayer_main->config.rnsi_raw;
 8007840:	332c      	adds	r3, #44	; 0x2c
        *radio_events        = set_events_for_tx_without_ack();
 8007842:	4e22      	ldr	r6, [pc, #136]	; (80078cc <prepare_radio+0x784>)
        phy->cfg.phase_info  = NULL;
 8007844:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        phy->rx.rx_constgain = &phy->xlayer_main->config.rx_constgain;
 8007848:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
        phy->rx.rssi_raw     = &phy->xlayer_main->config.rssi_raw;
 800784c:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
        phy->rx.rnsi_raw     = &phy->xlayer_main->config.rnsi_raw;
 8007850:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 *
 *  @return radio_events_t
 */
static int_flag_cfg_t set_events_for_tx_without_ack(void)
{
    return SET_INT_FLAG_CFG(INT_FLAG_ENABLE_CLEAR,
 8007854:	e4df      	b.n	8007216 <prepare_radio+0xce>
        phy->tx.cca_threshold        = &phy->xlayer_main->config.cca_threshold;
 8007856:	f103 0223 	add.w	r2, r3, #35	; 0x23
        phy->cfg.destination_address = &phy->xlayer_main->config.source_address;
 800785a:	6663      	str	r3, [r4, #100]	; 0x64
        phy->auto_reply_mode         = AUTO_REPLY_DISABLE;
 800785c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
        phy->tx.frame                = &unused_frame;
 8007860:	4b14      	ldr	r3, [pc, #80]	; (80078b4 <prepare_radio+0x76c>)
        phy->auto_reply_mode         = AUTO_REPLY_DISABLE;
 8007862:	8165      	strh	r5, [r4, #10]
        phy->tx.frame                = &unused_frame;
 8007864:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007868:	f104 051c 	add.w	r5, r4, #28
        phy->tx.signal               = &unused_signal;
 800786c:	4b12      	ldr	r3, [pc, #72]	; (80078b8 <prepare_radio+0x770>)
        phy->cfg.source_address      = &phy->xlayer_main->config.destination_address;
 800786e:	66a0      	str	r0, [r4, #104]	; 0x68
        phy->tx.signal               = &unused_signal;
 8007870:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        phy->cfg.phase_info          = NULL;
 8007874:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
        phy->tx.cca_threshold        = &phy->xlayer_main->config.cca_threshold;
 8007878:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 800787c:	4628      	mov	r0, r5
 800787e:	f003 fb67 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8007882:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <prepare_radio+0x764>)
 8007884:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007886:	4628      	mov	r0, r5
 8007888:	f003 fb72 	bl	800af70 <circular_queue_enqueue_raw>
}
 800788c:	e71c      	b.n	80076c8 <prepare_radio+0x580>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 800788e:	4630      	mov	r0, r6
 8007890:	f003 fb5e 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8007894:	4b0b      	ldr	r3, [pc, #44]	; (80078c4 <prepare_radio+0x77c>)
 8007896:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007898:	4630      	mov	r0, r6
 800789a:	f003 fb69 	bl	800af70 <circular_queue_enqueue_raw>
}
 800789e:	e696      	b.n	80075ce <prepare_radio+0x486>
            bufload_thresh = 1 + partial_frame_size / 2;
 80078a0:	0853      	lsrs	r3, r2, #1
 80078a2:	3301      	adds	r3, #1
    write_value = BIT_RXIRQEN | MOV2MASK(threshold, BITS_RXTHRESH);
 80078a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
            break;
 80078a8:	e729      	b.n	80076fe <prepare_radio+0x5b6>
 80078aa:	bf00      	nop
 80078ac:	20000518 	.word	0x20000518
 80078b0:	20000530 	.word	0x20000530
 80078b4:	20005e20 	.word	0x20005e20
 80078b8:	20005e50 	.word	0x20005e50
 80078bc:	ff7f3228 	.word	0xff7f3228
 80078c0:	ff7f0228 	.word	0xff7f0228
 80078c4:	200004f0 	.word	0x200004f0
 80078c8:	200004d4 	.word	0x200004d4
 80078cc:	ff7f3210 	.word	0xff7f3210

080078d0 <prepare_phy>:
{
 80078d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (phy->input_signal == PHY_SIGNAL_SYNCING) {
 80078d4:	7803      	ldrb	r3, [r0, #0]
 80078d6:	2b03      	cmp	r3, #3
{
 80078d8:	b082      	sub	sp, #8
 80078da:	4604      	mov	r4, r0
    if (phy->input_signal == PHY_SIGNAL_SYNCING) {
 80078dc:	d042      	beq.n	8007964 <prepare_phy+0x94>
        phy->partial_frame_count = PARTIAL_FRAME_COUNT;
 80078de:	2303      	movs	r3, #3
    return (phy->xlayer_main->config.destination_address != phy->source_address);
 80078e0:	68c2      	ldr	r2, [r0, #12]
        phy->partial_frame_count = PARTIAL_FRAME_COUNT;
 80078e2:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
        if (main_is_tx(phy)) {
 80078e6:	8851      	ldrh	r1, [r2, #2]
 80078e8:	8903      	ldrh	r3, [r0, #8]
 80078ea:	4299      	cmp	r1, r3
 80078ec:	d023      	beq.n	8007936 <prepare_phy+0x66>
            phy->tx.payload_size = phy->tx.frame->payload_end_it - phy->tx.frame->payload_begin_it;
 80078ee:	e9d2 031b 	ldrd	r0, r3, [r2, #108]	; 0x6c
            phy->tx.frame        = &phy->xlayer_main->frame;
 80078f2:	f102 0148 	add.w	r1, r2, #72	; 0x48
            phy->tx.payload_size = phy->tx.frame->payload_end_it - phy->tx.frame->payload_begin_it;
 80078f6:	1a1b      	subs	r3, r3, r0
 80078f8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
            phy->tx.frame        = &phy->xlayer_main->frame;
 80078fc:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    return ((payload_size + header_size) <= MAX_FRAMESIZE);
 8007900:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8007904:	fa52 f383 	uxtab	r3, r2, r3
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007908:	f104 051c 	add.w	r5, r4, #28
            if (!frame_fits_in_radio_fifo(phy->tx.payload_size, phy->tx.frame->header_memory_size)) {
 800790c:	2b80      	cmp	r3, #128	; 0x80
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 800790e:	4628      	mov	r0, r5
            if (!frame_fits_in_radio_fifo(phy->tx.payload_size, phy->tx.frame->header_memory_size)) {
 8007910:	dd14      	ble.n	800793c <prepare_phy+0x6c>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007912:	f003 fb1d 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8007916:	4b10      	ldr	r3, [pc, #64]	; (8007958 <prepare_phy+0x88>)
 8007918:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 800791a:	4628      	mov	r0, r5
 800791c:	f003 fb28 	bl	800af70 <circular_queue_enqueue_raw>
                wps_phy_state_t **next_state = (wps_phy_state_t **)circular_queue_front_raw(&phy->next_states);
 8007920:	4628      	mov	r0, r5
 8007922:	f003 fb05 	bl	800af30 <circular_queue_front_raw>
                if (*next_state == new_frame_states) {
 8007926:	4b0d      	ldr	r3, [pc, #52]	; (800795c <prepare_phy+0x8c>)
 8007928:	6802      	ldr	r2, [r0, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	f000 81b6 	beq.w	8007c9c <prepare_phy+0x3cc>
}
 8007930:	b002      	add	sp, #8
 8007932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007936:	f100 051c 	add.w	r5, r0, #28
 800793a:	4628      	mov	r0, r5
 800793c:	f003 fb08 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8007940:	4b07      	ldr	r3, [pc, #28]	; (8007960 <prepare_phy+0x90>)
 8007942:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007944:	4628      	mov	r0, r5
 8007946:	f003 fb13 	bl	800af70 <circular_queue_enqueue_raw>
            prepare_radio(phy);
 800794a:	4620      	mov	r0, r4
}
 800794c:	b002      	add	sp, #8
 800794e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            prepare_radio(phy);
 8007952:	f7ff bbf9 	b.w	8007148 <prepare_radio>
 8007956:	bf00      	nop
 8007958:	200004a0 	.word	0x200004a0
 800795c:	20000490 	.word	0x20000490
 8007960:	200004c4 	.word	0x200004c4
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007964:	f100 051c 	add.w	r5, r0, #28
 8007968:	4628      	mov	r0, r5
 800796a:	f003 faf1 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 800796e:	4bbf      	ldr	r3, [pc, #764]	; (8007c6c <prepare_phy+0x39c>)
 8007970:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007972:	4628      	mov	r0, r5
 8007974:	f003 fafc 	bl	800af70 <circular_queue_enqueue_raw>
    phy->cfg.channel        =  phy->xlayer_main->config.channel;
 8007978:	68e3      	ldr	r3, [r4, #12]
    phy->signal_main = PHY_SIGNAL_YIELD;
 800797a:	2202      	movs	r2, #2
 800797c:	7062      	strb	r2, [r4, #1]
    phy->cfg.fixed_payload_size_enable =  phy->xlayer_main->config.fixed_payload_size_enable;
 800797e:	7d99      	ldrb	r1, [r3, #22]
    phy->cfg.packet_cfg     =  phy->xlayer_main->config.packet_cfg;
 8007980:	8a9a      	ldrh	r2, [r3, #20]
    phy->cfg.channel        =  phy->xlayer_main->config.channel;
 8007982:	68d8      	ldr	r0, [r3, #12]
    phy->cfg.fixed_payload_size_enable =  phy->xlayer_main->config.fixed_payload_size_enable;
 8007984:	f884 1086 	strb.w	r1, [r4, #134]	; 0x86
    phy->cfg.sleep_level    =  phy->xlayer_main->config.sleep_level;
 8007988:	8e99      	ldrh	r1, [r3, #52]	; 0x34
    phy->cfg.packet_cfg     =  phy->xlayer_main->config.packet_cfg;
 800798a:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
    phy->rx.rx_constgain    = &phy->xlayer_main->config.rx_constgain;
 800798e:	f103 0222 	add.w	r2, r3, #34	; 0x22
    phy->cfg.channel        =  phy->xlayer_main->config.channel;
 8007992:	66e0      	str	r0, [r4, #108]	; 0x6c
    phy->rx.rx_constgain    = &phy->xlayer_main->config.rx_constgain;
 8007994:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
    phy->rx.rssi_raw        = &phy->xlayer_main->config.rssi_raw;
 8007998:	f103 0030 	add.w	r0, r3, #48	; 0x30
    phy->rx.rnsi_raw        = &phy->xlayer_main->config.rnsi_raw;
 800799c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80079a0:	e9c4 202d 	strd	r2, r0, [r4, #180]	; 0xb4
    phy->cfg.sleep_level    =  phy->xlayer_main->config.sleep_level;
 80079a4:	f8a4 1082 	strh.w	r1, [r4, #130]	; 0x82
    phy->rx.signal          = &phy->signal_main;
 80079a8:	1c62      	adds	r2, r4, #1
    phy->rx.frame           = &phy->xlayer_main->frame;
 80079aa:	f103 0148 	add.w	r1, r3, #72	; 0x48
    phy->rx.signal          = &phy->signal_main;
 80079ae:	e9c4 122f 	strd	r1, r2, [r4, #188]	; 0xbc
    phy->cfg.rx_timeout     = &phy->xlayer_main->config.rx_timeout;
 80079b2:	f103 021a 	add.w	r2, r3, #26
 80079b6:	6762      	str	r2, [r4, #116]	; 0x74
    phy->cfg.sleep_time     = &phy->xlayer_main->config.sleep_time;
 80079b8:	f103 021c 	add.w	r2, r3, #28
    phy->cfg.power_up_delay = &phy->xlayer_main->config.power_up_delay;
 80079bc:	f103 0518 	add.w	r5, r3, #24
    phy->cfg.sleep_time     = &phy->xlayer_main->config.sleep_time;
 80079c0:	67a2      	str	r2, [r4, #120]	; 0x78
    phy->cfg.rx_wait_time   = &phy->xlayer_main->config.rx_wait_time;
 80079c2:	f103 0220 	add.w	r2, r3, #32
    phy->cfg.power_up_delay = &phy->xlayer_main->config.power_up_delay;
 80079c6:	6725      	str	r5, [r4, #112]	; 0x70
    phy->cfg.rx_wait_time   = &phy->xlayer_main->config.rx_wait_time;
 80079c8:	67e2      	str	r2, [r4, #124]	; 0x7c
    phy->rx.payload_size    =  phy->xlayer_main->frame.payload_memory_size - phy->xlayer_main->frame.header_memory_size - SIZE_HDR_SIZE;
 80079ca:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80079ce:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 80079d2:	3a01      	subs	r2, #1
 80079d4:	1a12      	subs	r2, r2, r0
 80079d6:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
    phy->tx.modulation      = &phy->xlayer_main->config.modulation;
 80079da:	1d9d      	adds	r5, r3, #6
    phy->tx.fec             = &phy->xlayer_main->config.fec;
 80079dc:	f103 0108 	add.w	r1, r3, #8
    if (phy->xlayer_main->config.expect_ack) {
 80079e0:	791b      	ldrb	r3, [r3, #4]
    phy->tx.modulation      = &phy->xlayer_main->config.modulation;
 80079e2:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
    phy->tx.fec             = &phy->xlayer_main->config.fec;
 80079e6:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (phy->xlayer_main->config.expect_ack) {
 80079ea:	b153      	cbz	r3, 8007a02 <prepare_phy+0x132>
        uwb_set_tx_packet_size(phy->radio, 0);
 80079ec:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 80079ee:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80079f0:	6891      	ldr	r1, [r2, #8]
 80079f2:	207c      	movs	r0, #124	; 0x7c
 80079f4:	54c8      	strb	r0, [r1, r3]
    access_sequence->tx_buffer[index++] = value;
 80079f6:	6891      	ldr	r1, [r2, #8]
 80079f8:	4419      	add	r1, r3
 80079fa:	2000      	movs	r0, #0
    access_sequence->index = index;
 80079fc:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 80079fe:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 8007a00:	7413      	strb	r3, [r2, #16]
    uwb_set_rx_packet_size(phy->radio, MAX_FRAMESIZE);
 8007a02:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8007a04:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007a06:	6890      	ldr	r0, [r2, #8]
 8007a08:	217d      	movs	r1, #125	; 0x7d
 8007a0a:	54c1      	strb	r1, [r0, r3]
    access_sequence->tx_buffer[index++] = value;
 8007a0c:	6890      	ldr	r0, [r2, #8]
 8007a0e:	4418      	add	r0, r3
 8007a10:	2580      	movs	r5, #128	; 0x80
    access_sequence->index = index;
 8007a12:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 8007a14:	7045      	strb	r5, [r0, #1]
    access_sequence->index = index;
 8007a16:	7413      	strb	r3, [r2, #16]
    uwb_set_destination_address(phy->radio, *phy->cfg.destination_address, ADDRESS_LENGTH_16);
 8007a18:	6863      	ldr	r3, [r4, #4]
 8007a1a:	6e60      	ldr	r0, [r4, #100]	; 0x64
    uint32_t index = access_sequence->index;
 8007a1c:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007a1e:	689d      	ldr	r5, [r3, #8]
 8007a20:	8800      	ldrh	r0, [r0, #0]
 8007a22:	2679      	movs	r6, #121	; 0x79
 8007a24:	54ae      	strb	r6, [r5, r2]
    access_sequence->tx_buffer[index++] = value;
 8007a26:	689d      	ldr	r5, [r3, #8]
 8007a28:	4415      	add	r5, r2
    access_sequence->index = index;
 8007a2a:	1c96      	adds	r6, r2, #2
        sr_access_append_write_8(&radio->access_sequence, REG_REMOTADDR0, EXTRACT_BYTE(address, 0), &access_sequence_error);
 8007a2c:	7068      	strb	r0, [r5, #1]
    uint32_t index = access_sequence->index;
 8007a2e:	b2f6      	uxtb	r6, r6
        sr_access_append_write_8(&radio->access_sequence, REG_REMOTADDR1, EXTRACT_BYTE(address, 1), &access_sequence_error);
 8007a30:	0a05      	lsrs	r5, r0, #8
    access_sequence->index = index;
 8007a32:	1d10      	adds	r0, r2, #4
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007a34:	689a      	ldr	r2, [r3, #8]
 8007a36:	2778      	movs	r7, #120	; 0x78
 8007a38:	5597      	strb	r7, [r2, r6]
    access_sequence->tx_buffer[index++] = value;
 8007a3a:	689f      	ldr	r7, [r3, #8]
 8007a3c:	443e      	add	r6, r7
        main_modem_feat = SET_MAIN_MODEM_FEAT(MAIN_MODEM_FEAT_CLEAR, AUTO_REPLY_DISABLE);
 8007a3e:	f64f 7240 	movw	r2, #65344	; 0xff40
 8007a42:	7075      	strb	r5, [r6, #1]
    access_sequence->index = index;
 8007a44:	7418      	strb	r0, [r3, #16]
    if (phy->xlayer_main->config.expect_ack) {
 8007a46:	68e0      	ldr	r0, [r4, #12]
    main_modem_feat |= SET_MAIN_MODEM_FEAT(*phy->tx.modulation,
 8007a48:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    if (phy->xlayer_main->config.expect_ack) {
 8007a4c:	7900      	ldrb	r0, [r0, #4]
    main_modem_feat |= SET_MAIN_MODEM_FEAT(*phy->tx.modulation,
 8007a4e:	881b      	ldrh	r3, [r3, #0]
        main_modem_feat = SET_MAIN_MODEM_FEAT(MAIN_MODEM_FEAT_CLEAR, AUTO_REPLY_DISABLE);
 8007a50:	2800      	cmp	r0, #0
    main_modem_feat |= SET_MAIN_MODEM_FEAT(*phy->tx.modulation,
 8007a52:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8007a56:	8800      	ldrh	r0, [r0, #0]
 8007a58:	ea43 0300 	orr.w	r3, r3, r0
    uwb_set_main_modem_features(phy->radio, main_modem_feat);
 8007a5c:	6860      	ldr	r0, [r4, #4]
        main_modem_feat = SET_MAIN_MODEM_FEAT(MAIN_MODEM_FEAT_CLEAR, AUTO_REPLY_DISABLE);
 8007a5e:	bf08      	it	eq
 8007a60:	f44f 427f 	moveq.w	r2, #65280	; 0xff00
    main_modem_feat |= SET_MAIN_MODEM_FEAT(*phy->tx.modulation,
 8007a64:	431a      	orrs	r2, r3
    radio->shadow_reg.reg_main_modem &= ~reg_data.bytes[_BIT_TO_CLEAR];
 8007a66:	7fc3      	ldrb	r3, [r0, #31]
 8007a68:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8007a6c:	ea23 0505 	bic.w	r5, r3, r5
    radio->shadow_reg.reg_main_modem |= reg_data.bytes[_BIT_TO_SET];
 8007a70:	b2d3      	uxtb	r3, r2
 8007a72:	432b      	orrs	r3, r5
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007a74:	6882      	ldr	r2, [r0, #8]
    uint32_t index = access_sequence->index;
 8007a76:	7c05      	ldrb	r5, [r0, #16]
 8007a78:	77c3      	strb	r3, [r0, #31]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007a7a:	266c      	movs	r6, #108	; 0x6c
 8007a7c:	5556      	strb	r6, [r2, r5]
    access_sequence->tx_buffer[index++] = value;
 8007a7e:	6882      	ldr	r2, [r0, #8]
 8007a80:	442a      	add	r2, r5
    access_sequence->index = index;
 8007a82:	1cae      	adds	r6, r5, #2
    access_sequence->tx_buffer[index++] = value;
 8007a84:	7053      	strb	r3, [r2, #1]
    access_sequence->index = index;
 8007a86:	7406      	strb	r6, [r0, #16]
    uwb_set_integgain(phy->radio, phy->cfg.channel->integgain);
 8007a88:	6863      	ldr	r3, [r4, #4]
 8007a8a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    radio->shadow_reg.reg_dll_tuning &= ~reg_data.bytes[_BIT_TO_CLEAR];
 8007a8c:	7f18      	ldrb	r0, [r3, #28]
    reg_data.short_val = SET_REGISTER_8(BITS_INTEGGAIN, integgain_value);
 8007a8e:	7b92      	ldrb	r2, [r2, #14]
    uint32_t index = access_sequence->index;
 8007a90:	7c1d      	ldrb	r5, [r3, #16]
    radio->shadow_reg.reg_dll_tuning &= ~reg_data.bytes[_BIT_TO_CLEAR];
 8007a92:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    reg_data.short_val = SET_REGISTER_8(BITS_INTEGGAIN, integgain_value);
 8007a96:	f002 0203 	and.w	r2, r2, #3
    radio->shadow_reg.reg_dll_tuning |= reg_data.bytes[_BIT_TO_SET];
 8007a9a:	4302      	orrs	r2, r0
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007a9c:	6898      	ldr	r0, [r3, #8]
 8007a9e:	771a      	strb	r2, [r3, #28]
 8007aa0:	265d      	movs	r6, #93	; 0x5d
 8007aa2:	5546      	strb	r6, [r0, r5]
    access_sequence->tx_buffer[index++] = value;
 8007aa4:	6898      	ldr	r0, [r3, #8]
 8007aa6:	4428      	add	r0, r5
    access_sequence->index = index;
 8007aa8:	1cae      	adds	r6, r5, #2
    access_sequence->tx_buffer[index++] = value;
 8007aaa:	7042      	strb	r2, [r0, #1]
    access_sequence->index = index;
 8007aac:	741e      	strb	r6, [r3, #16]
    uwb_set_packet_config(phy->radio, phy->cfg.packet_cfg);
 8007aae:	6862      	ldr	r2, [r4, #4]
 8007ab0:	f8b4 0080 	ldrh.w	r0, [r4, #128]	; 0x80
    radio->shadow_reg.reg_packet_cfg &= ~reg_data.bytes[_BIT_TO_CLEAR];
 8007ab4:	7e93      	ldrb	r3, [r2, #26]
    uint32_t index = access_sequence->index;
 8007ab6:	7c15      	ldrb	r5, [r2, #16]
 8007ab8:	ea23 2310 	bic.w	r3, r3, r0, lsr #8
    radio->shadow_reg.reg_packet_cfg |= reg_data.bytes[_BIT_TO_SET];
 8007abc:	4303      	orrs	r3, r0
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007abe:	6890      	ldr	r0, [r2, #8]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	267e      	movs	r6, #126	; 0x7e
 8007ac4:	7693      	strb	r3, [r2, #26]
 8007ac6:	5546      	strb	r6, [r0, r5]
    access_sequence->tx_buffer[index++] = value;
 8007ac8:	6890      	ldr	r0, [r2, #8]
 8007aca:	4428      	add	r0, r5
    access_sequence->index = index;
 8007acc:	1cae      	adds	r6, r5, #2
    access_sequence->tx_buffer[index++] = value;
 8007ace:	7043      	strb	r3, [r0, #1]
    access_sequence->index = index;
 8007ad0:	7416      	strb	r6, [r2, #16]
    uwb_set_const_gains(phy->radio, *phy->rx.rx_constgain);
 8007ad2:	6863      	ldr	r3, [r4, #4]
 8007ad4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
    uint32_t index = access_sequence->index;
 8007ad8:	7c18      	ldrb	r0, [r3, #16]
 8007ada:	7816      	ldrb	r6, [r2, #0]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	2570      	movs	r5, #112	; 0x70
 8007ae0:	5415      	strb	r5, [r2, r0]
    access_sequence->tx_buffer[index++] = value;
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	4402      	add	r2, r0
    access_sequence->index = index;
 8007ae6:	1c85      	adds	r5, r0, #2
    access_sequence->tx_buffer[index++] = value;
 8007ae8:	7056      	strb	r6, [r2, #1]
    access_sequence->index = index;
 8007aea:	741d      	strb	r5, [r3, #16]
    uwb_set_int_flag(phy->radio, SET_INT_FLAG_CFG(INT_FLAG_ENABLE_CLEAR, phy->radio->irq_polarity, NEWPKT_IT_ENABLE));
 8007aec:	6862      	ldr	r2, [r4, #4]
 8007aee:	4b60      	ldr	r3, [pc, #384]	; (8007c70 <prepare_phy+0x3a0>)
 8007af0:	6850      	ldr	r0, [r2, #4]
 8007af2:	4303      	orrs	r3, r0
    internal.reg_32_u = int_flag_cfg;
 8007af4:	9301      	str	r3, [sp, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 8007af6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    radio->shadow_reg.reg_int_flag_status.short_val |= internal.reg_value[_BIT_TO_SET];
 8007afa:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 8007afe:	b298      	uxth	r0, r3
 8007b00:	8a93      	ldrh	r3, [r2, #20]
 8007b02:	ea23 0300 	bic.w	r3, r3, r0
    radio->shadow_reg.reg_int_flag_status.short_val |= internal.reg_value[_BIT_TO_SET];
 8007b06:	432b      	orrs	r3, r5
    uint32_t index = access_sequence->index;
 8007b08:	7c10      	ldrb	r0, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007b0a:	6895      	ldr	r5, [r2, #8]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2640      	movs	r6, #64	; 0x40
 8007b10:	8293      	strh	r3, [r2, #20]
 8007b12:	542e      	strb	r6, [r5, r0]
    access_sequence->tx_buffer[index++] = value.bytes[0];
 8007b14:	6895      	ldr	r5, [r2, #8]
 8007b16:	4405      	add	r5, r0
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 8007b18:	2641      	movs	r6, #65	; 0x41
    access_sequence->tx_buffer[index++] = value.bytes[0];
 8007b1a:	706b      	strb	r3, [r5, #1]
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 8007b1c:	6895      	ldr	r5, [r2, #8]
 8007b1e:	4405      	add	r5, r0
    access_sequence->tx_buffer[index++] = value.bytes[1];
 8007b20:	f3c3 2307 	ubfx	r3, r3, #8, #8
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 8007b24:	70ae      	strb	r6, [r5, #2]
    access_sequence->tx_buffer[index++] = value.bytes[1];
 8007b26:	6895      	ldr	r5, [r2, #8]
 8007b28:	4405      	add	r5, r0
    access_sequence->index = index;
 8007b2a:	3004      	adds	r0, #4
    access_sequence->tx_buffer[index++] = value.bytes[1];
 8007b2c:	70eb      	strb	r3, [r5, #3]
    access_sequence->index = index;
 8007b2e:	7410      	strb	r0, [r2, #16]
    uwb_set_wake_sleep_raw(phy->radio, FAST_SYNC_TIMER_VALUE);
 8007b30:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 8007b32:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007b34:	6898      	ldr	r0, [r3, #8]
 8007b36:	f04f 0c46 	mov.w	ip, #70	; 0x46
 8007b3a:	f800 c002 	strb.w	ip, [r0, r2]
    access_sequence->tx_buffer[index++] = value;
 8007b3e:	6898      	ldr	r0, [r3, #8]
 8007b40:	4410      	add	r0, r2
 8007b42:	26ff      	movs	r6, #255	; 0xff
 8007b44:	7046      	strb	r6, [r0, #1]
    access_sequence->index = index;
 8007b46:	1c90      	adds	r0, r2, #2
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007b48:	689d      	ldr	r5, [r3, #8]
    uint32_t index = access_sequence->index;
 8007b4a:	b2c0      	uxtb	r0, r0
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007b4c:	2747      	movs	r7, #71	; 0x47
 8007b4e:	542f      	strb	r7, [r5, r0]
    access_sequence->tx_buffer[index++] = value;
 8007b50:	689f      	ldr	r7, [r3, #8]
 8007b52:	4438      	add	r0, r7
 8007b54:	2500      	movs	r5, #0
 8007b56:	7045      	strb	r5, [r0, #1]
    access_sequence->index = index;
 8007b58:	1d10      	adds	r0, r2, #4
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007b5a:	689f      	ldr	r7, [r3, #8]
    uint32_t index = access_sequence->index;
 8007b5c:	b2c0      	uxtb	r0, r0
    access_sequence->index = index;
 8007b5e:	3206      	adds	r2, #6
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007b60:	f807 c000 	strb.w	ip, [r7, r0]
    access_sequence->tx_buffer[index++] = value;
 8007b64:	689f      	ldr	r7, [r3, #8]
 8007b66:	4438      	add	r0, r7
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007b68:	f04f 0c6d 	mov.w	ip, #109	; 0x6d
    access_sequence->tx_buffer[index++] = value;
 8007b6c:	7041      	strb	r1, [r0, #1]
    access_sequence->index = index;
 8007b6e:	741a      	strb	r2, [r3, #16]
    uwb_set_cac(phy->radio, DEFAULT_RX_IDLE_PWR, DISABLE_CCA_THRSH_VALUE);
 8007b70:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 8007b72:	7c19      	ldrb	r1, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	f802 c001 	strb.w	ip, [r2, r1]
    access_sequence->tx_buffer[index++] = value;
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	440a      	add	r2, r1
    access_sequence->index = index;
 8007b7e:	1c8f      	adds	r7, r1, #2
    access_sequence->tx_buffer[index++] = value;
 8007b80:	7056      	strb	r6, [r2, #1]
    access_sequence->index = index;
 8007b82:	741f      	strb	r7, [r3, #16]
    uwb_set_rx_pause_time(phy->radio, 0);
 8007b84:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8007b86:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007b88:	6891      	ldr	r1, [r2, #8]
 8007b8a:	206e      	movs	r0, #110	; 0x6e
 8007b8c:	54c8      	strb	r0, [r1, r3]
    access_sequence->tx_buffer[index++] = value;
 8007b8e:	6891      	ldr	r1, [r2, #8]
 8007b90:	4419      	add	r1, r3
    access_sequence->index = index;
 8007b92:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 8007b94:	704d      	strb	r5, [r1, #1]
    access_sequence->index = index;
 8007b96:	7413      	strb	r3, [r2, #16]
    uwb_set_timer_config(phy->radio, timer_config);
 8007b98:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 8007b9a:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007b9c:	6899      	ldr	r1, [r3, #8]
    radio->shadow_reg.reg_timer_cfg |= reg_data.bytes[_BIT_TO_SET];
 8007b9e:	2088      	movs	r0, #136	; 0x88
 8007ba0:	2545      	movs	r5, #69	; 0x45
 8007ba2:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 8007ba6:	548d      	strb	r5, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 8007ba8:	6899      	ldr	r1, [r3, #8]
 8007baa:	4411      	add	r1, r2
    access_sequence->index = index;
 8007bac:	3202      	adds	r2, #2
    access_sequence->tx_buffer[index++] = value;
 8007bae:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 8007bb0:	741a      	strb	r2, [r3, #16]
    uwb_set_rx_timeout_raw(phy->radio, FAST_SYNC_TIMER_VALUE - 1, 3);
 8007bb2:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 8007bb4:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007bb6:	6899      	ldr	r1, [r3, #8]
 8007bb8:	2048      	movs	r0, #72	; 0x48
 8007bba:	5488      	strb	r0, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 8007bbc:	6899      	ldr	r1, [r3, #8]
 8007bbe:	4411      	add	r1, r2
 8007bc0:	20f9      	movs	r0, #249	; 0xf9
 8007bc2:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 8007bc4:	1c91      	adds	r1, r2, #2
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007bc6:	6898      	ldr	r0, [r3, #8]
    uint32_t index = access_sequence->index;
 8007bc8:	b2c9      	uxtb	r1, r1
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007bca:	2549      	movs	r5, #73	; 0x49
 8007bcc:	5445      	strb	r5, [r0, r1]
    access_sequence->tx_buffer[index++] = value;
 8007bce:	6898      	ldr	r0, [r3, #8]
 8007bd0:	4401      	add	r1, r0
    access_sequence->index = index;
 8007bd2:	3204      	adds	r2, #4
    access_sequence->tx_buffer[index++] = value;
 8007bd4:	20f3      	movs	r0, #243	; 0xf3
 8007bd6:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 8007bd8:	741a      	strb	r2, [r3, #16]
    uwb_set_pwr_up_delay_raw(phy->radio, *phy->cfg.power_up_delay);
 8007bda:	6861      	ldr	r1, [r4, #4]
 8007bdc:	6f23      	ldr	r3, [r4, #112]	; 0x70
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007bde:	6888      	ldr	r0, [r1, #8]
    uint8_t pwr_up_reg_value             = pwr_up / 4;
 8007be0:	f9b3 2000 	ldrsh.w	r2, [r3]
    uint32_t index = access_sequence->index;
 8007be4:	7c0b      	ldrb	r3, [r1, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007be6:	254a      	movs	r5, #74	; 0x4a
 8007be8:	54c5      	strb	r5, [r0, r3]
    access_sequence->tx_buffer[index++] = value;
 8007bea:	6888      	ldr	r0, [r1, #8]
 8007bec:	2a00      	cmp	r2, #0
 8007bee:	4418      	add	r0, r3
 8007bf0:	bfb8      	it	lt
 8007bf2:	3203      	addlt	r2, #3
 8007bf4:	f3c2 0287 	ubfx	r2, r2, #2, #8
    access_sequence->index = index;
 8007bf8:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 8007bfa:	7042      	strb	r2, [r0, #1]
    access_sequence->index = index;
 8007bfc:	740b      	strb	r3, [r1, #16]
    uwb_set_radio_actions(phy->radio, SET_RADIO_ACTIONS(RADIO_ACTIONS_CLEAR,
 8007bfe:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 8007c00:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007c02:	6899      	ldr	r1, [r3, #8]
    radio->shadow_reg.radio_actions |= reg_data.bytes[_BIT_TO_SET];
 8007c04:	2027      	movs	r0, #39	; 0x27
 8007c06:	255f      	movs	r5, #95	; 0x5f
 8007c08:	75d8      	strb	r0, [r3, #23]
 8007c0a:	548d      	strb	r5, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 8007c0c:	6899      	ldr	r1, [r3, #8]
 8007c0e:	4411      	add	r1, r2
    access_sequence->index = index;
 8007c10:	3202      	adds	r2, #2
    access_sequence->tx_buffer[index++] = value;
 8007c12:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 8007c14:	741a      	strb	r2, [r3, #16]
    uwb_set_rx_filters_raw(phy->radio, phy->xlayer_main->config.channel->channel.rx_filter);
 8007c16:	6862      	ldr	r2, [r4, #4]
 8007c18:	68e1      	ldr	r1, [r4, #12]
    uint32_t index = access_sequence->index;
 8007c1a:	7c13      	ldrb	r3, [r2, #16]
 8007c1c:	68c8      	ldr	r0, [r1, #12]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007c1e:	6891      	ldr	r1, [r2, #8]
 8007c20:	7800      	ldrb	r0, [r0, #0]
 8007c22:	254f      	movs	r5, #79	; 0x4f
 8007c24:	54cd      	strb	r5, [r1, r3]
    access_sequence->tx_buffer[index++] = value;
 8007c26:	6891      	ldr	r1, [r2, #8]
 8007c28:	4419      	add	r1, r3
    access_sequence->index = index;
 8007c2a:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 8007c2c:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 8007c2e:	7413      	strb	r3, [r2, #16]
    uwb_select_channel(phy->radio,
 8007c30:	6867      	ldr	r7, [r4, #4]
                       (uint8_t *)phy->cfg.channel->channel.tx_pattern,
 8007c32:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    uint8_t write_pulse_size = radio->shadow_reg.tx_pulse_size < pulse_size ?
 8007c34:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
    uwb_select_channel(phy->radio,
 8007c38:	f891 800f 	ldrb.w	r8, [r1, #15]
    uint32_t index = access_sequence->index;
 8007c3c:	7c3e      	ldrb	r6, [r7, #16]
    access_sequence->tx_buffer[index++] = starting_reg | REG_WRITE_BURST;
 8007c3e:	68b8      	ldr	r0, [r7, #8]
 8007c40:	4542      	cmp	r2, r8
 8007c42:	bf28      	it	cs
 8007c44:	4642      	movcs	r2, r8
    sr_access_append_write_burst(&radio->access_sequence,
 8007c46:	f102 0310 	add.w	r3, r2, #16
 8007c4a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8007c4e:	5583      	strb	r3, [r0, r6]
                       (uint8_t *)phy->cfg.channel->channel.tx_pattern,
 8007c50:	3101      	adds	r1, #1
    memcpy(&access_sequence->tx_buffer[index], tx_buffer, buffer_size); /* Flawfinder: ignore */
 8007c52:	4411      	add	r1, r2
 8007c54:	68b8      	ldr	r0, [r7, #8]
 8007c56:	f1c2 020d 	rsb	r2, r2, #13
    access_sequence->tx_buffer[index++] = starting_reg | REG_WRITE_BURST;
 8007c5a:	3601      	adds	r6, #1
    memcpy(&access_sequence->tx_buffer[index], tx_buffer, buffer_size); /* Flawfinder: ignore */
 8007c5c:	b295      	uxth	r5, r2
 8007c5e:	462a      	mov	r2, r5
 8007c60:	4430      	add	r0, r6
    index                       += buffer_size;
 8007c62:	4435      	add	r5, r6
    memcpy(&access_sequence->tx_buffer[index], tx_buffer, buffer_size); /* Flawfinder: ignore */
 8007c64:	f00a f882 	bl	8011d6c <memcpy>
    access_sequence->index      =  index;
 8007c68:	743d      	strb	r5, [r7, #16]
 8007c6a:	e003      	b.n	8007c74 <prepare_phy+0x3a4>
 8007c6c:	200004f8 	.word	0x200004f8
 8007c70:	ff7f0008 	.word	0xff7f0008
    radio->shadow_reg.tx_pulse_size = pulse_size;
 8007c74:	f887 8022 	strb.w	r8, [r7, #34]	; 0x22
    sr_access_disable_radio_irq(phy->radio->radio_hal);
 8007c78:	6863      	ldr	r3, [r4, #4]
    radio_hal->disable_radio_irq();
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7e:	4798      	blx	r3
    uwb_transfer_non_blocking(phy->radio);
 8007c80:	6864      	ldr	r4, [r4, #4]
    sr_access_transfer_non_blocking(radio->radio_hal, &radio->access_sequence,
 8007c82:	6825      	ldr	r5, [r4, #0]
    radio_hal->reset_cs();
 8007c84:	69ab      	ldr	r3, [r5, #24]
 8007c86:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(access_sequence->tx_buffer,
 8007c88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c8a:	7c22      	ldrb	r2, [r4, #16]
 8007c8c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8007c90:	4798      	blx	r3
    access_sequence->index = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	7423      	strb	r3, [r4, #16]
}
 8007c96:	b002      	add	sp, #8
 8007c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    phy->signal_main = PHY_SIGNAL_YIELD;
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	7063      	strb	r3, [r4, #1]
 8007ca0:	e646      	b.n	8007930 <prepare_phy+0x60>
 8007ca2:	bf00      	nop

08007ca4 <process_event_tx>:
{
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8007ca6:	7803      	ldrb	r3, [r0, #0]
 8007ca8:	2b01      	cmp	r3, #1
{
 8007caa:	4604      	mov	r4, r0
    if (phy->input_signal != PHY_SIGNAL_DMA_CMPLT) {
 8007cac:	d179      	bne.n	8007da2 <process_event_tx+0xfe>
    radio_events = (*phy->irq_status_2 << 8) | (*phy->irq_status_1);
 8007cae:	e9d0 3236 	ldrd	r3, r2, [r0, #216]	; 0xd8
 8007cb2:	7812      	ldrb	r2, [r2, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (radio_events & CSC_FAIL_IT) {
 8007cba:	f413 5500 	ands.w	r5, r3, #8192	; 0x2000
 8007cbe:	d130      	bne.n	8007d22 <process_event_tx+0x7e>
            (radio_events & CRC_PASS_IT) &&
 8007cc0:	f003 0209 	and.w	r2, r3, #9
 8007cc4:	2a09      	cmp	r2, #9
 8007cc6:	f000 8094 	beq.w	8007df2 <process_event_tx+0x14e>
    } else if (rx_lost(radio_events)) {
 8007cca:	069a      	lsls	r2, r3, #26
 8007ccc:	d56e      	bpl.n	8007dac <process_event_tx+0x108>
        if (BIT_RXEN & *phy->pwr_status_cmd) {
 8007cce:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	065f      	lsls	r7, r3, #25
 8007cd6:	f140 812c 	bpl.w	8007f32 <process_event_tx+0x28e>
            sr_access_disable_radio_irq(phy->radio->radio_hal);
 8007cda:	6863      	ldr	r3, [r4, #4]
    radio_hal->disable_radio_irq();
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce0:	4798      	blx	r3
            phy->tx.frame->frame_outcome = FRAME_SENT_ACK_LOST;
 8007ce2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007ce6:	2204      	movs	r2, #4
 8007ce8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            phy->rx.frame->frame_outcome = FRAME_LOST;
 8007cec:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    *phy->tx.signal = PHY_SIGNAL_FRAME_SENT_NACK;
 8007cf6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    phy->signal_main = PHY_SIGNAL_YIELD;
 8007cfa:	2102      	movs	r1, #2
    *phy->tx.signal = PHY_SIGNAL_FRAME_SENT_NACK;
 8007cfc:	2205      	movs	r2, #5
    phy->signal_main = PHY_SIGNAL_YIELD;
 8007cfe:	7061      	strb	r1, [r4, #1]
    *phy->tx.signal = PHY_SIGNAL_FRAME_SENT_NACK;
 8007d00:	701a      	strb	r2, [r3, #0]
    *phy->rx.signal = PHY_SIGNAL_FRAME_MISSED;
 8007d02:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007d06:	f104 051c 	add.w	r5, r4, #28
    *phy->rx.signal = PHY_SIGNAL_FRAME_MISSED;
 8007d0a:	2208      	movs	r2, #8
 8007d0c:	701a      	strb	r2, [r3, #0]
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f003 f91e 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8007d14:	4ba7      	ldr	r3, [pc, #668]	; (8007fb4 <process_event_tx+0x310>)
 8007d16:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007d18:	4628      	mov	r0, r5
}
 8007d1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007d1e:	f003 b927 	b.w	800af70 <circular_queue_enqueue_raw>
    (*phy->tx.cca_try_count)++;
 8007d22:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    phy->signal_main = PHY_SIGNAL_YIELD;
 8007d26:	2302      	movs	r3, #2
 8007d28:	7043      	strb	r3, [r0, #1]
    (*phy->tx.cca_try_count)++;
 8007d2a:	7813      	ldrb	r3, [r2, #0]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	7013      	strb	r3, [r2, #0]
    if (*phy->tx.cca_try_count >= phy->tx.cca_max_try_count) {
 8007d30:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 8007d34:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8007d38:	7812      	ldrb	r2, [r2, #0]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d326      	bcc.n	8007d8c <process_event_tx+0xe8>
        if (phy->tx.cca_fail_action == CCA_FAIL_ACTION_ABORT_TX) {
 8007d3e:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	f000 8129 	beq.w	8007f9a <process_event_tx+0x2f6>
        uwb_set_cac(phy->radio, DEFAULT_RX_IDLE_PWR, DISABLE_CCA_THRSH_VALUE);
 8007d48:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8007d4a:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007d4c:	6891      	ldr	r1, [r2, #8]
 8007d4e:	206d      	movs	r0, #109	; 0x6d
 8007d50:	54c8      	strb	r0, [r1, r3]
    access_sequence->tx_buffer[index++] = value;
 8007d52:	6891      	ldr	r1, [r2, #8]
 8007d54:	4419      	add	r1, r3
 8007d56:	20ff      	movs	r0, #255	; 0xff
    access_sequence->index = index;
 8007d58:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 8007d5a:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 8007d5c:	7413      	strb	r3, [r2, #16]
        uwb_set_rx_pause_time(phy->radio, 0);
 8007d5e:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8007d60:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007d62:	6891      	ldr	r1, [r2, #8]
 8007d64:	206e      	movs	r0, #110	; 0x6e
 8007d66:	54c8      	strb	r0, [r1, r3]
    access_sequence->tx_buffer[index++] = value;
 8007d68:	6891      	ldr	r1, [r2, #8]
 8007d6a:	4419      	add	r1, r3
 8007d6c:	2700      	movs	r7, #0
    access_sequence->index = index;
 8007d6e:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 8007d70:	704f      	strb	r7, [r1, #1]
    access_sequence->index = index;
 8007d72:	7413      	strb	r3, [r2, #16]
        uwb_transfer_blocking(phy->radio);
 8007d74:	6865      	ldr	r5, [r4, #4]
    sr_access_transfer_blocking(radio->radio_hal, &radio->access_sequence, &access_sequence_error);
 8007d76:	682e      	ldr	r6, [r5, #0]
    radio_hal->reset_cs();
 8007d78:	69b3      	ldr	r3, [r6, #24]
 8007d7a:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 8007d7c:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8007d80:	6a33      	ldr	r3, [r6, #32]
 8007d82:	7c2a      	ldrb	r2, [r5, #16]
 8007d84:	4798      	blx	r3
    radio_hal->set_cs();
 8007d86:	6973      	ldr	r3, [r6, #20]
 8007d88:	4798      	blx	r3
    access_sequence->index = 0;
 8007d8a:	742f      	strb	r7, [r5, #16]
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007d8c:	341c      	adds	r4, #28
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f003 f8de 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8007d94:	4b88      	ldr	r3, [pc, #544]	; (8007fb8 <process_event_tx+0x314>)
 8007d96:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007d98:	4620      	mov	r0, r4
}
 8007d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007d9e:	f003 b8e7 	b.w	800af70 <circular_queue_enqueue_raw>
        clear_err(phy);
 8007da2:	f7fe fcdb 	bl	800675c <clear_err>
        phy->signal_main = PHY_SIGNAL_ERROR;
 8007da6:	2309      	movs	r3, #9
 8007da8:	7063      	strb	r3, [r4, #1]
}
 8007daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ((radio_events & NEW_PACKET_IT) &&
 8007dac:	071e      	lsls	r6, r3, #28
 8007dae:	f140 8098 	bpl.w	8007ee2 <process_event_tx+0x23e>
 8007db2:	07dd      	lsls	r5, r3, #31
 8007db4:	f100 8091 	bmi.w	8007eda <process_event_tx+0x236>
        phy->tx.frame->frame_outcome = FRAME_SENT_ACK_REJECTED;
 8007db8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8007dbc:	2305      	movs	r3, #5
 8007dbe:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
        phy->rx.frame->frame_outcome = FRAME_REJECTED;
 8007dc2:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
    *phy->tx.signal = PHY_SIGNAL_FRAME_SENT_NACK;
 8007dcc:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
    phy->signal_main = PHY_SIGNAL_YIELD;
 8007dd0:	7062      	strb	r2, [r4, #1]
    *phy->tx.signal = PHY_SIGNAL_FRAME_SENT_NACK;
 8007dd2:	700b      	strb	r3, [r1, #0]
    *phy->rx.signal = PHY_SIGNAL_FRAME_MISSED;
 8007dd4:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8007dd8:	2208      	movs	r2, #8
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007dda:	341c      	adds	r4, #28
    *phy->rx.signal = PHY_SIGNAL_FRAME_MISSED;
 8007ddc:	701a      	strb	r2, [r3, #0]
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007dde:	4620      	mov	r0, r4
 8007de0:	f003 f8b6 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8007de4:	4b73      	ldr	r3, [pc, #460]	; (8007fb4 <process_event_tx+0x310>)
 8007de6:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007de8:	4620      	mov	r0, r4
}
 8007dea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007dee:	f003 b8bf 	b.w	800af70 <circular_queue_enqueue_raw>
            (radio_events & CRC_PASS_IT) &&
 8007df2:	f013 0f06 	tst.w	r3, #6
 8007df6:	f43f af68 	beq.w	8007cca <process_event_tx+0x26>
        phy->tx.frame->frame_outcome = FRAME_SENT_ACK;
 8007dfa:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8007dfe:	2203      	movs	r2, #3
 8007e00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        phy->rx.frame->frame_outcome = FRAME_RECEIVED;
 8007e04:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 8007e08:	f882 502c 	strb.w	r5, [r2, #44]	; 0x2c
    phy->rx_wait     = uwb_get_rx_wait_time(phy->radio);
 8007e0c:	6842      	ldr	r2, [r0, #4]
    phy->signal_main = PHY_SIGNAL_YIELD;
 8007e0e:	2302      	movs	r3, #2
 8007e10:	7043      	strb	r3, [r0, #1]
    uint32_t index = access_sequence->index;
 8007e12:	7c11      	ldrb	r1, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 8007e14:	6893      	ldr	r3, [r2, #8]
 8007e16:	2024      	movs	r0, #36	; 0x24
 8007e18:	5458      	strb	r0, [r3, r1]
    access_sequence->index = index;
 8007e1a:	1c8b      	adds	r3, r1, #2
    access_sequence->tx_buffer[index++] = target_reg;
 8007e1c:	6897      	ldr	r7, [r2, #8]
    *buffer = &access_sequence->rx_buffer[index++];
 8007e1e:	68d0      	ldr	r0, [r2, #12]
    uint32_t index = access_sequence->index;
 8007e20:	b2db      	uxtb	r3, r3
    access_sequence->tx_buffer[index++] = target_reg;
 8007e22:	f04f 0c25 	mov.w	ip, #37	; 0x25
 8007e26:	f807 c003 	strb.w	ip, [r7, r3]
 8007e2a:	1c4e      	adds	r6, r1, #1
    access_sequence->index = index;
 8007e2c:	3104      	adds	r1, #4
 8007e2e:	7411      	strb	r1, [r2, #16]
    *buffer = &access_sequence->rx_buffer[index++];
 8007e30:	68d2      	ldr	r2, [r2, #12]
    access_sequence->tx_buffer[index++] = target_reg;
 8007e32:	3301      	adds	r3, #1
    *buffer = &access_sequence->rx_buffer[index++];
 8007e34:	4413      	add	r3, r2
 8007e36:	4430      	add	r0, r6
    phy->rssi        = uwb_get_rssi(phy->radio);
 8007e38:	6862      	ldr	r2, [r4, #4]
    phy->rx_wait     = uwb_get_rx_wait_time(phy->radio);
 8007e3a:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
 8007e3e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    uint32_t index = access_sequence->index;
 8007e42:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 8007e44:	6891      	ldr	r1, [r2, #8]
 8007e46:	2022      	movs	r0, #34	; 0x22
 8007e48:	54c8      	strb	r0, [r1, r3]
 8007e4a:	1c59      	adds	r1, r3, #1
    access_sequence->index = index;
 8007e4c:	3302      	adds	r3, #2
 8007e4e:	7413      	strb	r3, [r2, #16]
    *buffer = &access_sequence->rx_buffer[index++];
 8007e50:	68d3      	ldr	r3, [r2, #12]
    phy->rnsi        = uwb_get_rnsi(phy->radio);
 8007e52:	6862      	ldr	r2, [r4, #4]
 8007e54:	440b      	add	r3, r1
    phy->rssi        = uwb_get_rssi(phy->radio);
 8007e56:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    uint32_t index = access_sequence->index;
 8007e5a:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 8007e5c:	6891      	ldr	r1, [r2, #8]
 8007e5e:	2023      	movs	r0, #35	; 0x23
 8007e60:	54c8      	strb	r0, [r1, r3]
 8007e62:	1c59      	adds	r1, r3, #1
    access_sequence->index = index;
 8007e64:	3302      	adds	r3, #2
 8007e66:	7413      	strb	r3, [r2, #16]
    *buffer = &access_sequence->rx_buffer[index++];
 8007e68:	68d3      	ldr	r3, [r2, #12]
    if (!phy->cfg.fixed_payload_size_enable) {
 8007e6a:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
 8007e6e:	440b      	add	r3, r1
    phy->rnsi        = uwb_get_rnsi(phy->radio);
 8007e70:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    if (!phy->cfg.fixed_payload_size_enable) {
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	d16d      	bne.n	8007f54 <process_event_tx+0x2b0>
        phy->rx_frame_size = uwb_read_frame_size(phy->radio);
 8007e78:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8007e7a:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 8007e7c:	6891      	ldr	r1, [r2, #8]
 8007e7e:	203f      	movs	r0, #63	; 0x3f
 8007e80:	54c8      	strb	r0, [r1, r3]
 8007e82:	1c58      	adds	r0, r3, #1
    access_sequence->index = index;
 8007e84:	3302      	adds	r3, #2
    *buffer = &access_sequence->rx_buffer[index++];
 8007e86:	68d1      	ldr	r1, [r2, #12]
    access_sequence->index = index;
 8007e88:	7413      	strb	r3, [r2, #16]
        if (phy->cfg.phase_info != NULL) {
 8007e8a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    *buffer = &access_sequence->rx_buffer[index++];
 8007e8e:	4401      	add	r1, r0
        phy->rx_frame_size = uwb_read_frame_size(phy->radio);
 8007e90:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
        if (phy->cfg.phase_info != NULL) {
 8007e94:	b15a      	cbz	r2, 8007eae <process_event_tx+0x20a>
            phy->phase_info = uwb_get_phase_info(phy->radio);
 8007e96:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8007e98:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = REG_READ_BURST | starting_reg;
 8007e9a:	6891      	ldr	r1, [r2, #8]
 8007e9c:	20a8      	movs	r0, #168	; 0xa8
 8007e9e:	54c8      	strb	r0, [r1, r3]
    *buffer  = &access_sequence->rx_buffer[index];
 8007ea0:	68d1      	ldr	r1, [r2, #12]
    access_sequence->tx_buffer[index++] = REG_READ_BURST | starting_reg;
 8007ea2:	1c58      	adds	r0, r3, #1
    *buffer  = &access_sequence->rx_buffer[index];
 8007ea4:	4401      	add	r1, r0
    access_sequence->index = index;
 8007ea6:	3305      	adds	r3, #5
 8007ea8:	7413      	strb	r3, [r2, #16]
 8007eaa:	f8c4 10ec 	str.w	r1, [r4, #236]	; 0xec
        uwb_transfer_non_blocking(phy->radio);
 8007eae:	6865      	ldr	r5, [r4, #4]
    sr_access_transfer_non_blocking(radio->radio_hal, &radio->access_sequence,
 8007eb0:	682e      	ldr	r6, [r5, #0]
    radio_hal->reset_cs();
 8007eb2:	69b3      	ldr	r3, [r6, #24]
 8007eb4:	4798      	blx	r3
    radio_hal->transfer_full_duplex_non_blocking(access_sequence->tx_buffer,
 8007eb6:	7c2a      	ldrb	r2, [r5, #16]
 8007eb8:	68e9      	ldr	r1, [r5, #12]
 8007eba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007ebc:	68a8      	ldr	r0, [r5, #8]
 8007ebe:	4798      	blx	r3
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007ec0:	341c      	adds	r4, #28
    access_sequence->index = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	742b      	strb	r3, [r5, #16]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f003 f842 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8007ecc:	4b3b      	ldr	r3, [pc, #236]	; (8007fbc <process_event_tx+0x318>)
 8007ece:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007ed0:	4620      	mov	r0, r4
}
 8007ed2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007ed6:	f003 b84b 	b.w	800af70 <circular_queue_enqueue_raw>
            (!(radio_events & CRC_PASS_IT) || !((radio_events & ADDR_MATCH_IT) || (radio_events & BROADCAST_IT))));
 8007eda:	f013 0f06 	tst.w	r3, #6
 8007ede:	f43f af6b 	beq.w	8007db8 <process_event_tx+0x114>
            !(radio_events & RX_TIMEOUT_IT))) || radio_events & TX_UNDERFLOW_IT;
 8007ee2:	f003 0218 	and.w	r2, r3, #24
 8007ee6:	2a10      	cmp	r2, #16
 8007ee8:	d001      	beq.n	8007eee <process_event_tx+0x24a>
 8007eea:	04d8      	lsls	r0, r3, #19
 8007eec:	d50a      	bpl.n	8007f04 <process_event_tx+0x260>
        *phy->tx.signal              = PHY_SIGNAL_FRAME_SENT_NACK;
 8007eee:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8007ef2:	2205      	movs	r2, #5
 8007ef4:	701a      	strb	r2, [r3, #0]
        phy->tx.frame->frame_outcome = FRAME_SENT_ACK_LOST;
 8007ef6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007efa:	2204      	movs	r2, #4
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007efc:	341c      	adds	r4, #28
        phy->tx.frame->frame_outcome = FRAME_SENT_ACK_LOST;
 8007efe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007f02:	e76c      	b.n	8007dde <process_event_tx+0x13a>
    } else if (radio_events & WAKEUP_IT) {
 8007f04:	0459      	lsls	r1, r3, #17
 8007f06:	f57f af50 	bpl.w	8007daa <process_event_tx+0x106>
        *phy->tx.signal              = PHY_SIGNAL_FRAME_SENT_NACK;
 8007f0a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8007f0e:	2205      	movs	r2, #5
 8007f10:	701a      	strb	r2, [r3, #0]
        *phy->rx.signal              = PHY_SIGNAL_FRAME_MISSED;
 8007f12:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8007f16:	2208      	movs	r2, #8
 8007f18:	701a      	strb	r2, [r3, #0]
        phy->tx.frame->frame_outcome = FRAME_WAIT;
 8007f1a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007f1e:	2206      	movs	r2, #6
 8007f20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        phy->rx.frame->frame_outcome = FRAME_LOST;
 8007f24:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8007f28:	2201      	movs	r2, #1
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007f2a:	341c      	adds	r4, #28
        phy->rx.frame->frame_outcome = FRAME_LOST;
 8007f2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007f30:	e755      	b.n	8007dde <process_event_tx+0x13a>
            phy->tx.frame->frame_outcome = FRAME_SENT_ACK_LOST;
 8007f32:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007f36:	2204      	movs	r2, #4
 8007f38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            phy->rx.frame->frame_outcome = FRAME_LOST;
 8007f3c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    *phy->tx.signal = PHY_SIGNAL_FRAME_SENT_NACK;
 8007f46:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    phy->signal_main = PHY_SIGNAL_YIELD;
 8007f4a:	2102      	movs	r1, #2
    *phy->tx.signal = PHY_SIGNAL_FRAME_SENT_NACK;
 8007f4c:	2205      	movs	r2, #5
    phy->signal_main = PHY_SIGNAL_YIELD;
 8007f4e:	7061      	strb	r1, [r4, #1]
    *phy->tx.signal = PHY_SIGNAL_FRAME_SENT_NACK;
 8007f50:	701a      	strb	r2, [r3, #0]
    *phy->rx.signal = PHY_SIGNAL_FRAME_MISSED;
 8007f52:	e73f      	b.n	8007dd4 <process_event_tx+0x130>
        uwb_set_radio_actions(phy->radio, SET_RADIO_ACTIONS(RADIO_ACTIONS_CLEAR, GO_TO_SLEEP, FLUSH_RX_RESET_RX_BUFFER));
 8007f54:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 8007f56:	7c19      	ldrb	r1, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007f58:	689a      	ldr	r2, [r3, #8]
    radio->shadow_reg.radio_actions |= reg_data.bytes[_BIT_TO_SET];
 8007f5a:	2006      	movs	r0, #6
 8007f5c:	265f      	movs	r6, #95	; 0x5f
 8007f5e:	75d8      	strb	r0, [r3, #23]
 8007f60:	5456      	strb	r6, [r2, r1]
    access_sequence->tx_buffer[index++] = value;
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	440a      	add	r2, r1
    access_sequence->index = index;
 8007f66:	1c8e      	adds	r6, r1, #2
    access_sequence->tx_buffer[index++] = value;
 8007f68:	7050      	strb	r0, [r2, #1]
    access_sequence->index = index;
 8007f6a:	741e      	strb	r6, [r3, #16]
        *phy->rx_frame_size = 0;
 8007f6c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8007f70:	701d      	strb	r5, [r3, #0]
        uwb_transfer_non_blocking(phy->radio);
 8007f72:	6866      	ldr	r6, [r4, #4]
    sr_access_transfer_non_blocking(radio->radio_hal, &radio->access_sequence,
 8007f74:	6837      	ldr	r7, [r6, #0]
    radio_hal->reset_cs();
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	4798      	blx	r3
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007f7a:	341c      	adds	r4, #28
    radio_hal->transfer_full_duplex_non_blocking(access_sequence->tx_buffer,
 8007f7c:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	7c32      	ldrb	r2, [r6, #16]
 8007f84:	4798      	blx	r3
    access_sequence->index = 0;
 8007f86:	7435      	strb	r5, [r6, #16]
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f002 ffe1 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <process_event_tx+0x31c>)
 8007f90:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 8007f92:	4620      	mov	r0, r4
 8007f94:	f002 ffec 	bl	800af70 <circular_queue_enqueue_raw>
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 8007f98:	e721      	b.n	8007dde <process_event_tx+0x13a>
            uwb_set_radio_actions(phy->radio, SET_RADIO_ACTIONS(RADIO_ACTIONS_CLEAR,
 8007f9a:	6842      	ldr	r2, [r0, #4]
    uint32_t index = access_sequence->index;
 8007f9c:	7c11      	ldrb	r1, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8007f9e:	6890      	ldr	r0, [r2, #8]
    radio->shadow_reg.radio_actions |= reg_data.bytes[_BIT_TO_SET];
 8007fa0:	75d3      	strb	r3, [r2, #23]
 8007fa2:	255f      	movs	r5, #95	; 0x5f
 8007fa4:	5445      	strb	r5, [r0, r1]
    access_sequence->tx_buffer[index++] = value;
 8007fa6:	6890      	ldr	r0, [r2, #8]
 8007fa8:	4408      	add	r0, r1
    access_sequence->index = index;
 8007faa:	3102      	adds	r1, #2
    access_sequence->tx_buffer[index++] = value;
 8007fac:	7043      	strb	r3, [r0, #1]
    access_sequence->index = index;
 8007fae:	7411      	strb	r1, [r2, #16]
}
 8007fb0:	e6ca      	b.n	8007d48 <process_event_tx+0xa4>
 8007fb2:	bf00      	nop
 8007fb4:	20000498 	.word	0x20000498
 8007fb8:	2000045c 	.word	0x2000045c
 8007fbc:	20000450 	.word	0x20000450
 8007fc0:	20000438 	.word	0x20000438

08007fc4 <phy_init>:
{
 8007fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    wps_phy->state_step      = 0;
 8007fc8:	2300      	movs	r3, #0
{
 8007fca:	4604      	mov	r4, r0
    wps_phy->state_step      = 0;
 8007fcc:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    wps_phy->radio           = cfg->radio;
 8007fd0:	680b      	ldr	r3, [r1, #0]
    wps_phy->current_state   = prepare_phy_states;
 8007fd2:	4ac1      	ldr	r2, [pc, #772]	; (80082d8 <phy_init+0x314>)
{
 8007fd4:	460d      	mov	r5, r1
    wps_phy->source_address  = cfg->local_address;
 8007fd6:	8889      	ldrh	r1, [r1, #4]
    wps_phy->radio           = cfg->radio;
 8007fd8:	6063      	str	r3, [r4, #4]
    wps_phy->end_state       = end;
 8007fda:	4bc0      	ldr	r3, [pc, #768]	; (80082dc <phy_init+0x318>)
    wps_phy->source_address  = cfg->local_address;
 8007fdc:	8121      	strh	r1, [r4, #8]
    wps_phy->wait_for_ack_tx = true;
 8007fde:	2001      	movs	r0, #1
{
 8007fe0:	b083      	sub	sp, #12
    wps_phy->end_state       = end;
 8007fe2:	e9c4 2305 	strd	r2, r3, [r4, #20]
    wps_phy->wait_for_ack_tx = true;
 8007fe6:	f884 00f0 	strb.w	r0, [r4, #240]	; 0xf0
    circular_queue_init(&wps_phy->next_states, wps_phy->next_state_pool, PHY_STATE_Q_SIZE, sizeof(wps_phy_state_t **));
 8007fea:	2304      	movs	r3, #4
 8007fec:	220a      	movs	r2, #10
 8007fee:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8007ff2:	f104 001c 	add.w	r0, r4, #28
 8007ff6:	f002 ff8d 	bl	800af14 <circular_queue_init>
    uwb_disable_irq(wps_phy->radio);
 8007ffa:	6862      	ldr	r2, [r4, #4]
    uwb_set_int_flag(radio, SET_INT_FLAG_CFG(INT_FLAG_ENABLE_CLEAR, radio->irq_polarity));
 8007ffc:	6853      	ldr	r3, [r2, #4]
    uint32_t index = access_sequence->index;
 8007ffe:	f892 c010 	ldrb.w	ip, [r2, #16]
 8008002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008006:	f443 03fe 	orr.w	r3, r3, #8323072	; 0x7f0000
    internal.reg_32_u = int_flag_cfg;
 800800a:	9301      	str	r3, [sp, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 800800c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    radio->shadow_reg.reg_int_flag_status.short_val |= internal.reg_value[_BIT_TO_SET];
 8008010:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 8008014:	b299      	uxth	r1, r3
 8008016:	8a93      	ldrh	r3, [r2, #20]
 8008018:	ea23 0301 	bic.w	r3, r3, r1
    radio->shadow_reg.reg_int_flag_status.short_val |= internal.reg_value[_BIT_TO_SET];
 800801c:	4303      	orrs	r3, r0
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800801e:	6891      	ldr	r1, [r2, #8]
 8008020:	b29b      	uxth	r3, r3
 8008022:	2040      	movs	r0, #64	; 0x40
 8008024:	8293      	strh	r3, [r2, #20]
 8008026:	f801 000c 	strb.w	r0, [r1, ip]
    access_sequence->tx_buffer[index++] = value.bytes[0];
 800802a:	6896      	ldr	r6, [r2, #8]
 800802c:	4466      	add	r6, ip
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 800802e:	f04f 0941 	mov.w	r9, #65	; 0x41
    access_sequence->tx_buffer[index++] = value.bytes[0];
 8008032:	7073      	strb	r3, [r6, #1]
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 8008034:	6896      	ldr	r6, [r2, #8]
 8008036:	4466      	add	r6, ip
    access_sequence->tx_buffer[index++] = value.bytes[1];
 8008038:	f3c3 2307 	ubfx	r3, r3, #8, #8
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 800803c:	f886 9002 	strb.w	r9, [r6, #2]
    access_sequence->tx_buffer[index++] = value.bytes[1];
 8008040:	6896      	ldr	r6, [r2, #8]
 8008042:	4466      	add	r6, ip
    access_sequence->index = index;
 8008044:	f10c 0c04 	add.w	ip, ip, #4
    access_sequence->tx_buffer[index++] = value.bytes[1];
 8008048:	70f3      	strb	r3, [r6, #3]
    access_sequence->index = index;
 800804a:	f882 c010 	strb.w	ip, [r2, #16]
                         SET_REGISTER(BITS_SWCORRTOL, cfg->syncword_tolerance);
 800804e:	f895 c00d 	ldrb.w	ip, [r5, #13]
                         SET_REGISTER(BITS_SWBITCOST, cfg->syncword_bit_cost) |
 8008052:	7b2a      	ldrb	r2, [r5, #12]
    uwb_set_syncword_config(wps_phy->radio, &cfg->syncword_cfg);
 8008054:	6863      	ldr	r3, [r4, #4]
 8008056:	89ee      	ldrh	r6, [r5, #14]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008058:	6899      	ldr	r1, [r3, #8]
                         SET_REGISTER(BITS_SWCORRTOL, cfg->syncword_tolerance);
 800805a:	f00c 0c1f 	and.w	ip, ip, #31
                         SET_REGISTER(BITS_SWBITCOST, cfg->syncword_bit_cost) |
 800805e:	0152      	lsls	r2, r2, #5
 8008060:	ea4c 0c06 	orr.w	ip, ip, r6
 8008064:	f002 0260 	and.w	r2, r2, #96	; 0x60
    radio->shadow_reg.reg_sync_word_cfg &= ~reg_data.bytes[_BIT_TO_CLEAR];
 8008068:	7e1e      	ldrb	r6, [r3, #24]
                         SET_REGISTER(BITS_SWBITCOST, cfg->syncword_bit_cost) |
 800806a:	ea4c 0202 	orr.w	r2, ip, r2
    radio->shadow_reg.reg_sync_word_cfg &= ~reg_data.bytes[_BIT_TO_CLEAR];
 800806e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8008072:	ea26 0c0c 	bic.w	ip, r6, ip
    radio->shadow_reg.reg_sync_word_cfg |= reg_data.bytes[_BIT_TO_SET];
 8008076:	b2d2      	uxtb	r2, r2
 8008078:	ea42 020c 	orr.w	r2, r2, ip
    uint32_t index = access_sequence->index;
 800807c:	f893 c010 	ldrb.w	ip, [r3, #16]
 8008080:	68ae      	ldr	r6, [r5, #8]
 8008082:	761a      	strb	r2, [r3, #24]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008084:	2771      	movs	r7, #113	; 0x71
 8008086:	f801 700c 	strb.w	r7, [r1, ip]
    access_sequence->tx_buffer[index++] = value;
 800808a:	689f      	ldr	r7, [r3, #8]
 800808c:	4467      	add	r7, ip
    access_sequence->index = index;
 800808e:	f10c 0802 	add.w	r8, ip, #2
    access_sequence->tx_buffer[index++] = value;
 8008092:	707a      	strb	r2, [r7, #1]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008094:	689a      	ldr	r2, [r3, #8]
    uint32_t index = access_sequence->index;
 8008096:	fa5f f888 	uxtb.w	r8, r8
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800809a:	2775      	movs	r7, #117	; 0x75
 800809c:	f802 7008 	strb.w	r7, [r2, r8]
    access_sequence->tx_buffer[index++] = value;
 80080a0:	689f      	ldr	r7, [r3, #8]
 80080a2:	4447      	add	r7, r8
    access_sequence->index = index;
 80080a4:	f10c 0e04 	add.w	lr, ip, #4
static inline void serialize_uint32_to_uint8_array(uint32_t in_data, uint8_t *out_data)
{
    out_data[0] = EXTRACT_BYTE(in_data, 3);
    out_data[1] = EXTRACT_BYTE(in_data, 2);
    out_data[2] = EXTRACT_BYTE(in_data, 1);
    out_data[3] = EXTRACT_BYTE(in_data, 0);
 80080a8:	707e      	strb	r6, [r7, #1]
    uint32_t index = access_sequence->index;
 80080aa:	fa5f fe8e 	uxtb.w	lr, lr
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80080ae:	689f      	ldr	r7, [r3, #8]
 80080b0:	2274      	movs	r2, #116	; 0x74
 80080b2:	f807 200e 	strb.w	r2, [r7, lr]
    access_sequence->tx_buffer[index++] = value;
 80080b6:	689a      	ldr	r2, [r3, #8]
 80080b8:	4472      	add	r2, lr
    out_data[2] = EXTRACT_BYTE(in_data, 1);
 80080ba:	0a37      	lsrs	r7, r6, #8
 80080bc:	7057      	strb	r7, [r2, #1]
    access_sequence->index = index;
 80080be:	f10c 0706 	add.w	r7, ip, #6
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80080c2:	689a      	ldr	r2, [r3, #8]
    uint32_t index = access_sequence->index;
 80080c4:	b2ff      	uxtb	r7, r7
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80080c6:	f04f 0e73 	mov.w	lr, #115	; 0x73
 80080ca:	f802 e007 	strb.w	lr, [r2, r7]
    access_sequence->tx_buffer[index++] = value;
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	443a      	add	r2, r7
    out_data[1] = EXTRACT_BYTE(in_data, 2);
 80080d2:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80080d6:	f882 e001 	strb.w	lr, [r2, #1]
    access_sequence->index = index;
 80080da:	f10c 0208 	add.w	r2, ip, #8
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80080de:	689f      	ldr	r7, [r3, #8]
    uint32_t index = access_sequence->index;
 80080e0:	b2d2      	uxtb	r2, r2
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80080e2:	f04f 0e72 	mov.w	lr, #114	; 0x72
 80080e6:	f807 e002 	strb.w	lr, [r7, r2]
    access_sequence->tx_buffer[index++] = value;
 80080ea:	689f      	ldr	r7, [r3, #8]
 80080ec:	443a      	add	r2, r7
    out_data[0] = EXTRACT_BYTE(in_data, 3);
 80080ee:	0e36      	lsrs	r6, r6, #24
    access_sequence->index = index;
 80080f0:	f10c 0c0a 	add.w	ip, ip, #10
 80080f4:	7056      	strb	r6, [r2, #1]
 80080f6:	f883 c010 	strb.w	ip, [r3, #16]
    uwb_set_crc(wps_phy->radio, cfg->crc_polynomial);
 80080fa:	6863      	ldr	r3, [r4, #4]
 80080fc:	f8d5 e018 	ldr.w	lr, [r5, #24]
    uint32_t index = access_sequence->index;
 8008100:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008102:	689e      	ldr	r6, [r3, #8]
 8008104:	f04f 0876 	mov.w	r8, #118	; 0x76
 8008108:	f806 8002 	strb.w	r8, [r6, r2]
    access_sequence->tx_buffer[index++] = value;
 800810c:	689e      	ldr	r6, [r3, #8]
 800810e:	4416      	add	r6, r2
    uint8_t crc_high                     = EXTRACT_BYTE(crc_polynomial, 1);
 8008110:	f3ce 2707 	ubfx	r7, lr, #8, #8
 8008114:	7077      	strb	r7, [r6, #1]
    access_sequence->index = index;
 8008116:	1c96      	adds	r6, r2, #2
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008118:	689f      	ldr	r7, [r3, #8]
    uint32_t index = access_sequence->index;
 800811a:	b2f6      	uxtb	r6, r6
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800811c:	f04f 0c77 	mov.w	ip, #119	; 0x77
 8008120:	f807 c006 	strb.w	ip, [r7, r6]
    access_sequence->tx_buffer[index++] = value;
 8008124:	689f      	ldr	r7, [r3, #8]
 8008126:	443e      	add	r6, r7
    access_sequence->index = index;
 8008128:	3204      	adds	r2, #4
    uint8_t crc_low                      = EXTRACT_BYTE(crc_polynomial, 0);
 800812a:	f886 e001 	strb.w	lr, [r6, #1]
 800812e:	741a      	strb	r2, [r3, #16]
    uwb_set_preamble_length(wps_phy->radio, cfg->preamble_len);
 8008130:	6862      	ldr	r2, [r4, #4]
    uint8_t register_preamble_size       = (preamble_size / 2) - 8;
 8008132:	8a2b      	ldrh	r3, [r5, #16]
    uint32_t index = access_sequence->index;
 8008134:	f892 e010 	ldrb.w	lr, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008138:	6897      	ldr	r7, [r2, #8]
 800813a:	f04f 0c6f 	mov.w	ip, #111	; 0x6f
 800813e:	f807 c00e 	strb.w	ip, [r7, lr]
    access_sequence->tx_buffer[index++] = value;
 8008142:	6896      	ldr	r6, [r2, #8]
 8008144:	085b      	lsrs	r3, r3, #1
 8008146:	4476      	add	r6, lr
    access_sequence->index = index;
 8008148:	f10e 0702 	add.w	r7, lr, #2
 800814c:	3b08      	subs	r3, #8
    access_sequence->tx_buffer[index++] = value;
 800814e:	7073      	strb	r3, [r6, #1]
    access_sequence->index = index;
 8008150:	7417      	strb	r7, [r2, #16]
    uwb_set_rx_packet_size(wps_phy->radio, MAX_FRAMESIZE);
 8008152:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8008154:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008156:	6896      	ldr	r6, [r2, #8]
 8008158:	277d      	movs	r7, #125	; 0x7d
 800815a:	54f7      	strb	r7, [r6, r3]
    access_sequence->tx_buffer[index++] = value;
 800815c:	6896      	ldr	r6, [r2, #8]
 800815e:	441e      	add	r6, r3
 8008160:	f04f 0c80 	mov.w	ip, #128	; 0x80
    access_sequence->index = index;
 8008164:	3302      	adds	r3, #2
    access_sequence->tx_buffer[index++] = value;
 8008166:	f886 c001 	strb.w	ip, [r6, #1]
    access_sequence->index = index;
 800816a:	7413      	strb	r3, [r2, #16]
    uwb_set_tx_packet_size(wps_phy->radio, MAX_FRAMESIZE);
 800816c:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 800816e:	7c1e      	ldrb	r6, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	277c      	movs	r7, #124	; 0x7c
 8008174:	5597      	strb	r7, [r2, r6]
    access_sequence->tx_buffer[index++] = value;
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	4432      	add	r2, r6
    access_sequence->index = index;
 800817a:	1cb7      	adds	r7, r6, #2
    access_sequence->tx_buffer[index++] = value;
 800817c:	f882 c001 	strb.w	ip, [r2, #1]
    access_sequence->index = index;
 8008180:	741f      	strb	r7, [r3, #16]
    uwb_set_local_address(wps_phy->radio, cfg->local_address, ADDRESS_LENGTH_16);
 8008182:	6863      	ldr	r3, [r4, #4]
 8008184:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    uint32_t index = access_sequence->index;
 8008188:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800818a:	689e      	ldr	r6, [r3, #8]
 800818c:	277b      	movs	r7, #123	; 0x7b
 800818e:	54b7      	strb	r7, [r6, r2]
    access_sequence->tx_buffer[index++] = value;
 8008190:	689e      	ldr	r6, [r3, #8]
 8008192:	4416      	add	r6, r2
    access_sequence->index = index;
 8008194:	1c97      	adds	r7, r2, #2
        sr_access_append_write_8(&radio->access_sequence, REG_LOCALADDR0, EXTRACT_BYTE(address, 0), &access_sequence_error);
 8008196:	f886 e001 	strb.w	lr, [r6, #1]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800819a:	689e      	ldr	r6, [r3, #8]
    uint32_t index = access_sequence->index;
 800819c:	b2ff      	uxtb	r7, r7
        sr_access_append_write_8(&radio->access_sequence, REG_LOCALADDR1, EXTRACT_BYTE(address, 1), &access_sequence_error);
 800819e:	ea4f 281e 	mov.w	r8, lr, lsr #8
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80081a2:	f04f 0e7a 	mov.w	lr, #122	; 0x7a
 80081a6:	f806 e007 	strb.w	lr, [r6, r7]
    access_sequence->tx_buffer[index++] = value;
 80081aa:	6899      	ldr	r1, [r3, #8]
 80081ac:	440f      	add	r7, r1
    access_sequence->index = index;
 80081ae:	3204      	adds	r2, #4
 80081b0:	f887 8001 	strb.w	r8, [r7, #1]
 80081b4:	741a      	strb	r2, [r3, #16]
    uwb_set_sleep_config(wps_phy->radio, cfg->sleep_lvl, sleep_events);
 80081b6:	6862      	ldr	r2, [r4, #4]
    reg_data.short_val = level | events;
 80081b8:	8aae      	ldrh	r6, [r5, #20]
    radio->shadow_reg.reg_slp_cfg &= ~reg_data.bytes[_BIT_TO_CLEAR];
 80081ba:	7d93      	ldrb	r3, [r2, #22]
    uint32_t index = access_sequence->index;
 80081bc:	7c17      	ldrb	r7, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80081be:	6891      	ldr	r1, [r2, #8]
 80081c0:	ea23 2316 	bic.w	r3, r3, r6, lsr #8
    reg_data.short_val = level | events;
 80081c4:	f046 0638 	orr.w	r6, r6, #56	; 0x38
    radio->shadow_reg.reg_slp_cfg |= reg_data.bytes[_BIT_TO_SET];
 80081c8:	4333      	orrs	r3, r6
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	f04f 0e44 	mov.w	lr, #68	; 0x44
 80081d0:	7593      	strb	r3, [r2, #22]
 80081d2:	f801 e007 	strb.w	lr, [r1, r7]
    access_sequence->tx_buffer[index++] = value;
 80081d6:	6896      	ldr	r6, [r2, #8]
 80081d8:	443e      	add	r6, r7
    access_sequence->index = index;
 80081da:	3702      	adds	r7, #2
    access_sequence->tx_buffer[index++] = value;
 80081dc:	7073      	strb	r3, [r6, #1]
    access_sequence->index = index;
 80081de:	7417      	strb	r7, [r2, #16]
    uwb_set_radio_actions(wps_phy->radio, SET_RADIO_ACTIONS(RADIO_ACTIONS_CLEAR,
 80081e0:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 80081e2:	7c1e      	ldrb	r6, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80081e4:	689a      	ldr	r2, [r3, #8]
    radio->shadow_reg.radio_actions |= reg_data.bytes[_BIT_TO_SET];
 80081e6:	2707      	movs	r7, #7
 80081e8:	f04f 0e5f 	mov.w	lr, #95	; 0x5f
 80081ec:	75df      	strb	r7, [r3, #23]
 80081ee:	f802 e006 	strb.w	lr, [r2, r6]
    access_sequence->tx_buffer[index++] = value;
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	4432      	add	r2, r6
    access_sequence->index = index;
 80081f6:	f106 0e02 	add.w	lr, r6, #2
    access_sequence->tx_buffer[index++] = value;
 80081fa:	7057      	strb	r7, [r2, #1]
    access_sequence->index = index;
 80081fc:	f883 e010 	strb.w	lr, [r3, #16]
    uwb_set_int_flag(wps_phy->radio, SET_INT_FLAG_CFG(INT_FLAG_ENABLE_CLEAR,
 8008200:	6863      	ldr	r3, [r4, #4]
 8008202:	4a37      	ldr	r2, [pc, #220]	; (80082e0 <phy_init+0x31c>)
 8008204:	685e      	ldr	r6, [r3, #4]
    uint32_t index = access_sequence->index;
 8008206:	f893 e010 	ldrb.w	lr, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800820a:	6899      	ldr	r1, [r3, #8]
 800820c:	4332      	orrs	r2, r6
    internal.reg_32_u = int_flag_cfg;
 800820e:	9200      	str	r2, [sp, #0]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 8008210:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8008214:	b296      	uxth	r6, r2
 8008216:	8a9a      	ldrh	r2, [r3, #20]
 8008218:	ea22 0206 	bic.w	r2, r2, r6
    radio->shadow_reg.reg_int_flag_status.short_val |= internal.reg_value[_BIT_TO_SET];
 800821c:	f8bd 6000 	ldrh.w	r6, [sp]
 8008220:	4332      	orrs	r2, r6
 8008222:	b292      	uxth	r2, r2
 8008224:	829a      	strh	r2, [r3, #20]
 8008226:	f801 000e 	strb.w	r0, [r1, lr]
    access_sequence->tx_buffer[index++] = value.bytes[0];
 800822a:	6898      	ldr	r0, [r3, #8]
 800822c:	4470      	add	r0, lr
    access_sequence->tx_buffer[index++] = value.bytes[1];
 800822e:	f3c2 2607 	ubfx	r6, r2, #8, #8
    access_sequence->tx_buffer[index++] = value.bytes[0];
 8008232:	7042      	strb	r2, [r0, #1]
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	4472      	add	r2, lr
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008238:	2064      	movs	r0, #100	; 0x64
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 800823a:	f882 9002 	strb.w	r9, [r2, #2]
    access_sequence->tx_buffer[index++] = value.bytes[1];
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	4472      	add	r2, lr
    access_sequence->index = index;
 8008242:	f10e 0e04 	add.w	lr, lr, #4
    access_sequence->tx_buffer[index++] = value.bytes[1];
 8008246:	70d6      	strb	r6, [r2, #3]
    access_sequence->index = index;
 8008248:	f883 e010 	strb.w	lr, [r3, #16]
    uwb_set_rx_waited_src(wps_phy->radio, RX_WAIT_SOURCE_REGISTER);
 800824c:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 800824e:	7c19      	ldrb	r1, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	5450      	strb	r0, [r2, r1]
    access_sequence->tx_buffer[index++] = value;
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	440a      	add	r2, r1
    access_sequence->index = index;
 8008258:	1c88      	adds	r0, r1, #2
    access_sequence->tx_buffer[index++] = value;
 800825a:	f882 c001 	strb.w	ip, [r2, #1]
    access_sequence->index = index;
 800825e:	7418      	strb	r0, [r3, #16]
    if ((cfg->sleep_lvl != SLEEP_IDLE) && (wps_phy->radio->phy_version == PHY_VERSION_8_3)) {
 8008260:	8aab      	ldrh	r3, [r5, #20]
 8008262:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008266:	6863      	ldr	r3, [r4, #4]
 8008268:	d003      	beq.n	8008272 <phy_init+0x2ae>
 800826a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800826e:	2a03      	cmp	r2, #3
 8008270:	d023      	beq.n	80082ba <phy_init+0x2f6>
    uint32_t index = access_sequence->index;
 8008272:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008274:	6899      	ldr	r1, [r3, #8]
 8008276:	206b      	movs	r0, #107	; 0x6b
 8008278:	5488      	strb	r0, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 800827a:	6899      	ldr	r1, [r3, #8]
 800827c:	4411      	add	r1, r2
 800827e:	2060      	movs	r0, #96	; 0x60
    access_sequence->index = index;
 8008280:	3202      	adds	r2, #2
    access_sequence->tx_buffer[index++] = value;
 8008282:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 8008284:	741a      	strb	r2, [r3, #16]
    (void)uwb_get_irq_flags(wps_phy->radio);
 8008286:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 8008288:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 800828a:	6891      	ldr	r1, [r2, #8]
 800828c:	2600      	movs	r6, #0
 800828e:	54ce      	strb	r6, [r1, r3]
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 8008290:	6891      	ldr	r1, [r2, #8]
 8008292:	4419      	add	r1, r3
 8008294:	2001      	movs	r0, #1
    access_sequence->index = index;
 8008296:	3304      	adds	r3, #4
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 8008298:	7088      	strb	r0, [r1, #2]
    access_sequence->index = index;
 800829a:	7413      	strb	r3, [r2, #16]
    uwb_transfer_blocking(wps_phy->radio);
 800829c:	6864      	ldr	r4, [r4, #4]
    sr_access_transfer_blocking(radio->radio_hal, &radio->access_sequence, &access_sequence_error);
 800829e:	6825      	ldr	r5, [r4, #0]
    radio_hal->reset_cs();
 80082a0:	69ab      	ldr	r3, [r5, #24]
 80082a2:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 80082a4:	7c22      	ldrb	r2, [r4, #16]
 80082a6:	68e1      	ldr	r1, [r4, #12]
 80082a8:	6a2b      	ldr	r3, [r5, #32]
 80082aa:	68a0      	ldr	r0, [r4, #8]
 80082ac:	4798      	blx	r3
    radio_hal->set_cs();
 80082ae:	696b      	ldr	r3, [r5, #20]
 80082b0:	4798      	blx	r3
    access_sequence->index = 0;
 80082b2:	7426      	strb	r6, [r4, #16]
}
 80082b4:	b003      	add	sp, #12
 80082b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    radio->shadow_reg.reg_dll_tuning |= reg_data.bytes[_BIT_TO_SET];
 80082ba:	7f19      	ldrb	r1, [r3, #28]
    uint32_t index = access_sequence->index;
 80082bc:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80082be:	6898      	ldr	r0, [r3, #8]
 80082c0:	f041 0104 	orr.w	r1, r1, #4
 80082c4:	255d      	movs	r5, #93	; 0x5d
 80082c6:	7719      	strb	r1, [r3, #28]
 80082c8:	5485      	strb	r5, [r0, r2]
    access_sequence->tx_buffer[index++] = value;
 80082ca:	6898      	ldr	r0, [r3, #8]
 80082cc:	4410      	add	r0, r2
    access_sequence->index = index;
 80082ce:	3202      	adds	r2, #2
    access_sequence->tx_buffer[index++] = value;
 80082d0:	7041      	strb	r1, [r0, #1]
    access_sequence->index = index;
 80082d2:	741a      	strb	r2, [r3, #16]
    uwb_enable_phase_tracking(wps_phy->radio);
 80082d4:	6863      	ldr	r3, [r4, #4]
}
 80082d6:	e7cc      	b.n	8008272 <phy_init+0x2ae>
 80082d8:	20000498 	.word	0x20000498
 80082dc:	08006511 	.word	0x08006511
 80082e0:	ff7f0038 	.word	0xff7f0038

080082e4 <phy_connect>:
{
 80082e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uwb_apply_saved_calibration(wps_phy->radio);
 80082e8:	6843      	ldr	r3, [r0, #4]
    uint32_t index = access_sequence->index;
 80082ea:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80082ec:	6899      	ldr	r1, [r3, #8]
 80082ee:	254d      	movs	r5, #77	; 0x4d
{
 80082f0:	4604      	mov	r4, r0
    sr_access_append_write_8(&radio->access_sequence, REG_RESISTUNE, radio->shadow_reg.reg_resistune, &access_sequence_error);
 80082f2:	f893 0020 	ldrb.w	r0, [r3, #32]
 80082f6:	548d      	strb	r5, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 80082f8:	6899      	ldr	r1, [r3, #8]
 80082fa:	4411      	add	r1, r2
    access_sequence->index = index;
 80082fc:	3202      	adds	r2, #2
    access_sequence->tx_buffer[index++] = value;
 80082fe:	7048      	strb	r0, [r1, #1]
    access_sequence->index = index;
 8008300:	741a      	strb	r2, [r3, #16]
    uwb_set_rx_timeout_raw(wps_phy->radio, 0xFFFF, 0xFF);
 8008302:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 8008304:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008306:	6899      	ldr	r1, [r3, #8]
 8008308:	2048      	movs	r0, #72	; 0x48
 800830a:	5488      	strb	r0, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 800830c:	6899      	ldr	r1, [r3, #8]
 800830e:	4411      	add	r1, r2
 8008310:	25ff      	movs	r5, #255	; 0xff
 8008312:	704d      	strb	r5, [r1, #1]
    access_sequence->index = index;
 8008314:	1c91      	adds	r1, r2, #2
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008316:	6898      	ldr	r0, [r3, #8]
    uint32_t index = access_sequence->index;
 8008318:	b2c9      	uxtb	r1, r1
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800831a:	2649      	movs	r6, #73	; 0x49
 800831c:	5446      	strb	r6, [r0, r1]
    access_sequence->tx_buffer[index++] = value;
 800831e:	6898      	ldr	r0, [r3, #8]
 8008320:	4401      	add	r1, r0
    access_sequence->index = index;
 8008322:	3204      	adds	r2, #4
    access_sequence->tx_buffer[index++] = value;
 8008324:	704d      	strb	r5, [r1, #1]
    access_sequence->index = index;
 8008326:	741a      	strb	r2, [r3, #16]
    (void)uwb_get_irq_flags(wps_phy->radio);
 8008328:	6862      	ldr	r2, [r4, #4]
    uint32_t index = access_sequence->index;
 800832a:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 800832c:	6891      	ldr	r1, [r2, #8]
 800832e:	2600      	movs	r6, #0
 8008330:	54ce      	strb	r6, [r1, r3]
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 8008332:	6891      	ldr	r1, [r2, #8]
 8008334:	4419      	add	r1, r3
 8008336:	2001      	movs	r0, #1
    access_sequence->index = index;
 8008338:	3304      	adds	r3, #4
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 800833a:	7088      	strb	r0, [r1, #2]
    access_sequence->index = index;
 800833c:	7413      	strb	r3, [r2, #16]
    uwb_set_radio_actions(wps_phy->radio, SET_RADIO_ACTIONS(RADIO_ACTIONS_CLEAR,
 800833e:	6863      	ldr	r3, [r4, #4]
    uint32_t index = access_sequence->index;
 8008340:	7c19      	ldrb	r1, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008342:	689a      	ldr	r2, [r3, #8]
    radio->shadow_reg.radio_actions |= reg_data.bytes[_BIT_TO_SET];
 8008344:	200f      	movs	r0, #15
 8008346:	255f      	movs	r5, #95	; 0x5f
 8008348:	75d8      	strb	r0, [r3, #23]
 800834a:	5455      	strb	r5, [r2, r1]
    access_sequence->tx_buffer[index++] = value;
 800834c:	689a      	ldr	r2, [r3, #8]
 800834e:	440a      	add	r2, r1
    access_sequence->index = index;
 8008350:	1c8d      	adds	r5, r1, #2
    access_sequence->tx_buffer[index++] = value;
 8008352:	7050      	strb	r0, [r2, #1]
    access_sequence->index = index;
 8008354:	741d      	strb	r5, [r3, #16]
    uwb_transfer_blocking(wps_phy->radio);
 8008356:	6865      	ldr	r5, [r4, #4]
    sr_access_transfer_blocking(radio->radio_hal, &radio->access_sequence, &access_sequence_error);
 8008358:	682f      	ldr	r7, [r5, #0]
    radio_hal->reset_cs();
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 800835e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8008362:	7c2a      	ldrb	r2, [r5, #16]
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	4798      	blx	r3
    radio_hal->set_cs();
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	4798      	blx	r3
    access_sequence->index = 0;
 800836c:	742e      	strb	r6, [r5, #16]
    sr_access_enable_radio_irq(wps_phy->radio->radio_hal);
 800836e:	6863      	ldr	r3, [r4, #4]
    radio_hal->enable_radio_irq();
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008374:	4798      	blx	r3
    sr_access_enable_dma_irq(wps_phy->radio->radio_hal);
 8008376:	6863      	ldr	r3, [r4, #4]
    radio_hal->enable_radio_dma_irq();
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837c:	4798      	blx	r3
    wps_phy->current_state = prepare_phy_states;
 800837e:	4b07      	ldr	r3, [pc, #28]	; (800839c <phy_connect+0xb8>)
    wps_phy->state_step    = 0;
 8008380:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    wps_phy->current_state = prepare_phy_states;
 8008384:	6163      	str	r3, [r4, #20]
    circular_queue_init(&wps_phy->next_states, wps_phy->next_state_pool, PHY_STATE_Q_SIZE, sizeof(wps_phy_state_t **));
 8008386:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800838a:	f104 001c 	add.w	r0, r4, #28
 800838e:	2304      	movs	r3, #4
}
 8008390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    circular_queue_init(&wps_phy->next_states, wps_phy->next_state_pool, PHY_STATE_Q_SIZE, sizeof(wps_phy_state_t **));
 8008394:	220a      	movs	r2, #10
 8008396:	f002 bdbd 	b.w	800af14 <circular_queue_init>
 800839a:	bf00      	nop
 800839c:	20000498 	.word	0x20000498

080083a0 <phy_disconnect>:
{
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4605      	mov	r5, r0
 80083a4:	b082      	sub	sp, #8
    while (wps_phy->radio->radio_hal->is_spi_busy()) {
 80083a6:	686b      	ldr	r3, [r5, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	4798      	blx	r3
 80083ae:	4604      	mov	r4, r0
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d1f8      	bne.n	80083a6 <phy_disconnect+0x6>
    wps_phy->radio->radio_hal->disable_radio_dma_irq();
 80083b4:	686b      	ldr	r3, [r5, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	4798      	blx	r3
    wps_phy->radio->radio_hal->disable_radio_irq();
 80083bc:	686b      	ldr	r3, [r5, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c2:	4798      	blx	r3
    uwb_disable_irq(wps_phy->radio);
 80083c4:	686a      	ldr	r2, [r5, #4]
    uwb_set_int_flag(radio, SET_INT_FLAG_CFG(INT_FLAG_ENABLE_CLEAR, radio->irq_polarity));
 80083c6:	6853      	ldr	r3, [r2, #4]
 80083c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083cc:	f443 03fe 	orr.w	r3, r3, #8323072	; 0x7f0000
    internal.reg_32_u = int_flag_cfg;
 80083d0:	9301      	str	r3, [sp, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 80083d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    radio->shadow_reg.reg_int_flag_status.short_val |= internal.reg_value[_BIT_TO_SET];
 80083d6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    radio->shadow_reg.reg_int_flag_status.short_val &= ~internal.reg_value[_BIT_TO_CLEAR];
 80083da:	b299      	uxth	r1, r3
 80083dc:	8a93      	ldrh	r3, [r2, #20]
 80083de:	ea23 0301 	bic.w	r3, r3, r1
    radio->shadow_reg.reg_int_flag_status.short_val |= internal.reg_value[_BIT_TO_SET];
 80083e2:	4303      	orrs	r3, r0
    uint32_t index = access_sequence->index;
 80083e4:	7c11      	ldrb	r1, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 80083e6:	6890      	ldr	r0, [r2, #8]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2640      	movs	r6, #64	; 0x40
 80083ec:	8293      	strh	r3, [r2, #20]
 80083ee:	5446      	strb	r6, [r0, r1]
    access_sequence->tx_buffer[index++] = value.bytes[0];
 80083f0:	6890      	ldr	r0, [r2, #8]
 80083f2:	4408      	add	r0, r1
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 80083f4:	2641      	movs	r6, #65	; 0x41
    access_sequence->tx_buffer[index++] = value.bytes[0];
 80083f6:	7043      	strb	r3, [r0, #1]
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 80083f8:	6890      	ldr	r0, [r2, #8]
 80083fa:	4408      	add	r0, r1
    access_sequence->tx_buffer[index++] = value.bytes[1];
 80083fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    access_sequence->tx_buffer[index++] = (target_reg + 1) | REG_WRITE;
 8008400:	7086      	strb	r6, [r0, #2]
    access_sequence->tx_buffer[index++] = value.bytes[1];
 8008402:	6890      	ldr	r0, [r2, #8]
 8008404:	4408      	add	r0, r1
    access_sequence->index = index;
 8008406:	3104      	adds	r1, #4
    access_sequence->tx_buffer[index++] = value.bytes[1];
 8008408:	70c3      	strb	r3, [r0, #3]
    access_sequence->index = index;
 800840a:	7411      	strb	r1, [r2, #16]
    uwb_set_timer_config(wps_phy->radio, SET_TIMER_CFG(TIMER_CFG_CLEAR,
 800840c:	686b      	ldr	r3, [r5, #4]
    uint32_t index = access_sequence->index;
 800840e:	7c1a      	ldrb	r2, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008410:	6899      	ldr	r1, [r3, #8]
    radio->shadow_reg.reg_timer_cfg |= reg_data.bytes[_BIT_TO_SET];
 8008412:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
 8008416:	2045      	movs	r0, #69	; 0x45
 8008418:	5488      	strb	r0, [r1, r2]
    access_sequence->tx_buffer[index++] = value;
 800841a:	6899      	ldr	r1, [r3, #8]
 800841c:	4411      	add	r1, r2
    access_sequence->index = index;
 800841e:	3202      	adds	r2, #2
    access_sequence->tx_buffer[index++] = value;
 8008420:	704c      	strb	r4, [r1, #1]
    access_sequence->index = index;
 8008422:	741a      	strb	r2, [r3, #16]
    uwb_set_sleep_config(wps_phy->radio, sleep_lvl, sleep_events);
 8008424:	686b      	ldr	r3, [r5, #4]
    radio->shadow_reg.reg_slp_cfg |= reg_data.bytes[_BIT_TO_SET];
 8008426:	7d9a      	ldrb	r2, [r3, #22]
    uint32_t index = access_sequence->index;
 8008428:	7c18      	ldrb	r0, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 800842a:	6899      	ldr	r1, [r3, #8]
 800842c:	f042 02f8 	orr.w	r2, r2, #248	; 0xf8
 8008430:	2644      	movs	r6, #68	; 0x44
 8008432:	759a      	strb	r2, [r3, #22]
 8008434:	540e      	strb	r6, [r1, r0]
    access_sequence->tx_buffer[index++] = value;
 8008436:	6899      	ldr	r1, [r3, #8]
 8008438:	4401      	add	r1, r0
    access_sequence->index = index;
 800843a:	1c86      	adds	r6, r0, #2
    access_sequence->tx_buffer[index++] = value;
 800843c:	704a      	strb	r2, [r1, #1]
    access_sequence->index = index;
 800843e:	741e      	strb	r6, [r3, #16]
    uwb_set_radio_actions(wps_phy->radio, SET_RADIO_ACTIONS(RADIO_ACTIONS_CLEAR,
 8008440:	686b      	ldr	r3, [r5, #4]
    uint32_t index = access_sequence->index;
 8008442:	7c19      	ldrb	r1, [r3, #16]
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008444:	689a      	ldr	r2, [r3, #8]
    radio->shadow_reg.radio_actions |= reg_data.bytes[_BIT_TO_SET];
 8008446:	2004      	movs	r0, #4
 8008448:	265f      	movs	r6, #95	; 0x5f
 800844a:	75d8      	strb	r0, [r3, #23]
 800844c:	5456      	strb	r6, [r2, r1]
    access_sequence->tx_buffer[index++] = value;
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	440a      	add	r2, r1
    access_sequence->index = index;
 8008452:	1c8e      	adds	r6, r1, #2
    access_sequence->tx_buffer[index++] = value;
 8008454:	7050      	strb	r0, [r2, #1]
    access_sequence->index = index;
 8008456:	741e      	strb	r6, [r3, #16]
    (void)uwb_get_irq_flags(wps_phy->radio);
 8008458:	686a      	ldr	r2, [r5, #4]
    uint32_t index = access_sequence->index;
 800845a:	7c13      	ldrb	r3, [r2, #16]
    access_sequence->tx_buffer[index++] = target_reg;
 800845c:	6891      	ldr	r1, [r2, #8]
 800845e:	54cc      	strb	r4, [r1, r3]
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 8008460:	6891      	ldr	r1, [r2, #8]
 8008462:	4419      	add	r1, r3
    access_sequence->index = index;
 8008464:	4403      	add	r3, r0
    access_sequence->tx_buffer[index++] = (target_reg + 1);
 8008466:	2001      	movs	r0, #1
 8008468:	7088      	strb	r0, [r1, #2]
    access_sequence->index = index;
 800846a:	7413      	strb	r3, [r2, #16]
    uwb_transfer_blocking(wps_phy->radio);
 800846c:	686d      	ldr	r5, [r5, #4]
    sr_access_transfer_blocking(radio->radio_hal, &radio->access_sequence, &access_sequence_error);
 800846e:	682e      	ldr	r6, [r5, #0]
    radio_hal->reset_cs();
 8008470:	69b3      	ldr	r3, [r6, #24]
 8008472:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 8008474:	7c2a      	ldrb	r2, [r5, #16]
 8008476:	68e9      	ldr	r1, [r5, #12]
 8008478:	6a33      	ldr	r3, [r6, #32]
 800847a:	68a8      	ldr	r0, [r5, #8]
 800847c:	4798      	blx	r3
    radio_hal->set_cs();
 800847e:	6973      	ldr	r3, [r6, #20]
 8008480:	4798      	blx	r3
    access_sequence->index = 0;
 8008482:	742c      	strb	r4, [r5, #16]
}
 8008484:	b002      	add	sp, #8
 8008486:	bd70      	pop	{r4, r5, r6, pc}

08008488 <phy_get_main_signal>:
}
 8008488:	7840      	ldrb	r0, [r0, #1]
 800848a:	4770      	bx	lr

0800848c <phy_get_auto_signal>:
}
 800848c:	7880      	ldrb	r0, [r0, #2]
 800848e:	4770      	bx	lr

08008490 <phy_set_main_xlayer>:
    wps_phy->xlayer_main = xlayer;
 8008490:	60c1      	str	r1, [r0, #12]
}
 8008492:	4770      	bx	lr

08008494 <phy_set_auto_xlayer>:
    wps_phy->xlayer_auto = xlayer;
 8008494:	6101      	str	r1, [r0, #16]
}
 8008496:	4770      	bx	lr

08008498 <phy_write_register>:
{
 8008498:	b510      	push	{r4, lr}
    wps_phy->write_request_info.pending_request = true;
 800849a:	2301      	movs	r3, #1
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 800849c:	f100 041c 	add.w	r4, r0, #28
    wps_phy->write_request_info.pending_request = true;
 80084a0:	f880 30f3 	strb.w	r3, [r0, #243]	; 0xf3
    wps_phy->write_request_info.target_register = starting_reg;
 80084a4:	f880 10f1 	strb.w	r1, [r0, #241]	; 0xf1
    wps_phy->write_request_info.data = data;
 80084a8:	f880 20f2 	strb.w	r2, [r0, #242]	; 0xf2
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 80084ac:	4620      	mov	r0, r4
 80084ae:	f002 fd4f 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 80084b2:	4b03      	ldr	r3, [pc, #12]	; (80084c0 <phy_write_register+0x28>)
 80084b4:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 80084b6:	4620      	mov	r0, r4
}
 80084b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    circular_queue_enqueue_raw(&wps_phy->next_states);
 80084bc:	f002 bd58 	b.w	800af70 <circular_queue_enqueue_raw>
 80084c0:	20000510 	.word	0x20000510

080084c4 <phy_read_register>:
{
 80084c4:	b510      	push	{r4, lr}
    wps_phy->read_request_info.pending_request = true;
 80084c6:	f04f 0c01 	mov.w	ip, #1
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 80084ca:	f100 041c 	add.w	r4, r0, #28
    wps_phy->read_request_info.xfer_cmplt      = xfer_cmplt;
 80084ce:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
    wps_phy->read_request_info.pending_request = true;
 80084d2:	f880 c0fc 	strb.w	ip, [r0, #252]	; 0xfc
    wps_phy->read_request_info.rx_buffer       = rx_buffer;
 80084d6:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    wps_phy->read_request_info.target_register = target_register;
 80084da:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    enqueue_states  = (wps_phy_state_t **)circular_queue_get_free_slot_raw(&wps_phy->next_states);
 80084de:	4620      	mov	r0, r4
 80084e0:	f002 fd36 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 80084e4:	4b03      	ldr	r3, [pc, #12]	; (80084f4 <phy_read_register+0x30>)
 80084e6:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps_phy->next_states);
 80084e8:	4620      	mov	r0, r4
}
 80084ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    circular_queue_enqueue_raw(&wps_phy->next_states);
 80084ee:	f002 bd3f 	b.w	800af70 <circular_queue_enqueue_raw>
 80084f2:	bf00      	nop
 80084f4:	20000510 	.word	0x20000510

080084f8 <wps_us_to_pll_cycle>:
static void initialize_request_queues(wps_t *wps);

/* PUBLIC FUNCTION PROTOTYPES *************************************************/
uint32_t wps_us_to_pll_cycle(uint32_t time_us, chip_rate_cfg_t chip_rate)
{
    return (time_us * PLL_FREQ_KHZ(chip_rate) / US_TO_PLL_FACTOR) - 1;
 80084f8:	4b04      	ldr	r3, [pc, #16]	; (800850c <wps_us_to_pll_cycle+0x14>)
 80084fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80084fe:	0300      	lsls	r0, r0, #12
 8008500:	fba3 3000 	umull	r3, r0, r3, r0
 8008504:	0980      	lsrs	r0, r0, #6
}
 8008506:	3801      	subs	r0, #1
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	10624dd3 	.word	0x10624dd3

08008510 <wps_radio_init>:
{
    wps_mac_set_phase_interface(&wps->mac, (wps_mac_phase_interface_t *)phase_itf);
}

void wps_radio_init(wps_radio_t *wps_radio, wps_error_t *error)
{
 8008510:	b570      	push	{r4, r5, r6, lr}
    sr_api_error_t     uwb_err;

    *error = WPS_NO_ERROR;
 8008512:	2500      	movs	r5, #0
{
 8008514:	4604      	mov	r4, r0
    *error = WPS_NO_ERROR;
 8008516:	700d      	strb	r5, [r1, #0]

    uwb_init(&wps_radio->radio,
 8008518:	f100 0228 	add.w	r2, r0, #40	; 0x28
    radio->radio_hal = radio_hal;
 800851c:	6002      	str	r2, [r0, #0]
    radio->radio_hal->reset_reset_pin();
 800851e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008520:	4798      	blx	r3
    radio->radio_hal->delay_ms(delay_ms);
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	200a      	movs	r0, #10
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	4798      	blx	r3
    radio->radio_hal->set_reset_pin();
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	4798      	blx	r3
    radio->radio_hal->delay_ms(delay_ms);
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	200a      	movs	r0, #10
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	4798      	blx	r3
    access_sequence->tx_buffer[index++] = target_reg | REG_WRITE;
 8008538:	224e      	movs	r2, #78	; 0x4e
    radio->shadow_reg.reg_disables |= reg_data.bytes[_BIT_TO_SET];
 800853a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800853e:	f884 2138 	strb.w	r2, [r4, #312]	; 0x138
    access_sequence->tx_buffer[index++] = target_reg;
 8008542:	223e      	movs	r2, #62	; 0x3e
 8008544:	76e3      	strb	r3, [r4, #27]
    access_sequence->tx_buffer[index++] = value;
 8008546:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
    access_sequence->tx_buffer[index++] = target_reg;
 800854a:	f884 213a 	strb.w	r2, [r4, #314]	; 0x13a
 800854e:	231d      	movs	r3, #29
 8008550:	220e      	movs	r2, #14
 8008552:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
 8008556:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
 800855a:	220b      	movs	r2, #11
 800855c:	230d      	movs	r3, #13
 800855e:	f884 2140 	strb.w	r2, [r4, #320]	; 0x140
 8008562:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
 8008566:	2204      	movs	r2, #4
 8008568:	2331      	movs	r3, #49	; 0x31
 800856a:	f884 2144 	strb.w	r2, [r4, #324]	; 0x144
 800856e:	f884 3146 	strb.w	r3, [r4, #326]	; 0x146
 8008572:	221c      	movs	r2, #28
 8008574:	232c      	movs	r3, #44	; 0x2c
    sr_access_transfer_blocking(radio->radio_hal, &radio->access_sequence, &access_sequence_error);
 8008576:	6826      	ldr	r6, [r4, #0]
 8008578:	f884 2148 	strb.w	r2, [r4, #328]	; 0x148
 800857c:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
 8008580:	2205      	movs	r2, #5
    access_sequence->index = index;
 8008582:	f64c 0316 	movw	r3, #51222	; 0xc816
    access_sequence->tx_buffer[index++] = target_reg;
 8008586:	f884 214c 	strb.w	r2, [r4, #332]	; 0x14c
             &wps_radio->radio_hal,
             wps_radio->spi_rx_buffer,
             wps_radio->spi_tx_buffer,
 800858a:	f504 719c 	add.w	r1, r4, #312	; 0x138
             wps_radio->spi_rx_buffer,
 800858e:	f104 0270 	add.w	r2, r4, #112	; 0x70
    access_sequence->index = index;
 8008592:	8223      	strh	r3, [r4, #16]
    radio_hal->reset_cs();
 8008594:	69b3      	ldr	r3, [r6, #24]
    access_sequence->burst_mode    = false;
 8008596:	74a5      	strb	r5, [r4, #18]
    access_sequence->rx_buffer = app_rx_buffer;
 8008598:	e9c4 1202 	strd	r1, r2, [r4, #8]
    radio_hal->reset_cs();
 800859c:	4798      	blx	r3
    radio_hal->transfer_full_duplex_blocking(access_sequence->tx_buffer,
 800859e:	7c22      	ldrb	r2, [r4, #16]
 80085a0:	68e1      	ldr	r1, [r4, #12]
 80085a2:	68a0      	ldr	r0, [r4, #8]
 80085a4:	6a33      	ldr	r3, [r6, #32]
 80085a6:	4798      	blx	r3
    radio_hal->set_cs();
 80085a8:	6973      	ldr	r3, [r6, #20]
 80085aa:	4798      	blx	r3
    radio->shadow_reg.reg_dll_tuning    = *reg_dll_tuning |= BIT_ECO;
 80085ac:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
    radio->shadow_reg.reg_disables      = *reg_disables;
 80085b0:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 80085b4:	76e2      	strb	r2, [r4, #27]
    radio->shadow_reg.reg_dll_tuning    = *reg_dll_tuning |= BIT_ECO;
 80085b6:	f043 0308 	orr.w	r3, r3, #8
    radio->shadow_reg.reg_resistune     = *reg_resistune;
 80085ba:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
    radio->shadow_reg.reg_dll_tuning    = *reg_dll_tuning |= BIT_ECO;
 80085be:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
 80085c2:	7723      	strb	r3, [r4, #28]
    radio->shadow_reg.reg_int_flag_status.short_val = REG16_INTFLG_DFLT;
 80085c4:	f647 6098 	movw	r0, #32408	; 0x7e98
    radio->shadow_reg.reg_sync_word_cfg = *reg_sync_word_cfg;
 80085c8:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    radio->shadow_reg.reg_packet_cfg    = *reg_packet_cfg;
 80085cc:	f894 1073 	ldrb.w	r1, [r4, #115]	; 0x73
    radio->shadow_reg.reg_int_flag_status.short_val = REG16_INTFLG_DFLT;
 80085d0:	82a0      	strh	r0, [r4, #20]
    radio->shadow_reg.reg_resistune     = *reg_resistune;
 80085d2:	f884 2020 	strb.w	r2, [r4, #32]
    radio->shadow_reg.reg_pll_startup   = *reg_pll_startup;
 80085d6:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    radio->shadow_reg.reg_main_modem    = *reg_main_modem;
 80085da:	f894 2083 	ldrb.w	r2, [r4, #131]	; 0x83
    radio->shadow_reg.reg_sync_word_cfg = *reg_sync_word_cfg;
 80085de:	7623      	strb	r3, [r4, #24]
    radio->shadow_reg.reg_timer_cfg     = *reg_timer_cfg;
 80085e0:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
    radio->shadow_reg.reg_packet_cfg    = *reg_packet_cfg;
 80085e4:	76a1      	strb	r1, [r4, #26]
    radio->shadow_reg.reg_pll_startup   = *reg_pll_startup;
 80085e6:	7760      	strb	r0, [r4, #29]
    radio->shadow_reg.reg_slp_cfg       = *reg_slp_cfg;
 80085e8:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
    radio->shadow_reg.reg_tx_params     = *reg_tx_params;
 80085ec:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    radio->shadow_reg.reg_main_modem    = *reg_main_modem;
 80085f0:	77e2      	strb	r2, [r4, #31]
    radio->shadow_reg.reg_timer_cfg     = *reg_timer_cfg;
 80085f2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    radio->shadow_reg.radio_actions       = BIT_RXMODE | BIT_GOTOSLP;
 80085f6:	2224      	movs	r2, #36	; 0x24
    radio->shadow_reg.reg_modem_gain    = MOV2MASK(0b111111, BITS_MANUGAIN);
 80085f8:	233f      	movs	r3, #63	; 0x3f
    radio->shadow_reg.reg_slp_cfg       = *reg_slp_cfg;
 80085fa:	75a1      	strb	r1, [r4, #22]
    radio->shadow_reg.reg_tx_params     = *reg_tx_params;
 80085fc:	7660      	strb	r0, [r4, #25]
    if (uwb_err != API_ERR_NONE) {
        *error = WPS_RADIO_NOT_INITIALIZED_ERROR;
        return;
    }

    sr_nvm_init(&wps_radio->radio, wps_radio->nvm);
 80085fe:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    radio->shadow_reg.radio_actions       = BIT_RXMODE | BIT_GOTOSLP;
 8008600:	75e2      	strb	r2, [r4, #23]
    access_sequence->index = 0;
 8008602:	7425      	strb	r5, [r4, #16]
 8008604:	4620      	mov	r0, r4
    radio->shadow_reg.reg_modem_gain    = MOV2MASK(0b111111, BITS_MANUGAIN);
 8008606:	77a3      	strb	r3, [r4, #30]
 8008608:	f7fd fd6e 	bl	80060e8 <sr_nvm_init>
    sr_calibrate(&wps_radio->radio, wps_radio->spectral_calib_vars, wps_radio->nvm);
 800860c:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8008610:	4620      	mov	r0, r4
}
 8008612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sr_calibrate(&wps_radio->radio, wps_radio->spectral_calib_vars, wps_radio->nvm);
 8008616:	f7fd bb79 	b.w	8005d0c <sr_calibrate>
 800861a:	bf00      	nop

0800861c <wps_init_callback_queue>:
void wps_init_callback_queue(wps_t *wps,
                             wps_callback_inst_t *callback_buffer,
                             size_t size,
                             void (*context_switch)(void))
{
    wps->callback_context_switch = context_switch;
 800861c:	f8c0 3380 	str.w	r3, [r0, #896]	; 0x380
    circular_queue_init(&wps->l7.callback_queue, callback_buffer, size, sizeof(wps_callback_inst_t));
 8008620:	2308      	movs	r3, #8
 8008622:	3018      	adds	r0, #24
 8008624:	f002 bc76 	b.w	800af14 <circular_queue_init>

08008628 <wps_init_request_queue>:
}

void wps_init_request_queue(wps_t *wps, wps_request_info_t *request_buffer, size_t size)
{
    circular_queue_init(&wps->l7.request_queue, request_buffer, size, sizeof(wps_request_info_t));
 8008628:	2308      	movs	r3, #8
 800862a:	3034      	adds	r0, #52	; 0x34
 800862c:	f002 bc72 	b.w	800af14 <circular_queue_init>

08008630 <wps_init>:
}

void wps_init(wps_t *wps, wps_node_t *node, wps_error_t *err)
{
 8008630:	b530      	push	{r4, r5, lr}
    wps_mac_sync_cfg_t mac_sync_cfg = {0};
 8008632:	2500      	movs	r5, #0

    *err = WPS_NO_ERROR;
 8008634:	7015      	strb	r5, [r2, #0]

    if (node->radio == NULL) {
 8008636:	680b      	ldr	r3, [r1, #0]
{
 8008638:	b08b      	sub	sp, #44	; 0x2c
    wps_mac_sync_cfg_t mac_sync_cfg = {0};
 800863a:	e9cd 5506 	strd	r5, r5, [sp, #24]
 800863e:	e9cd 5508 	strd	r5, r5, [sp, #32]
    if (node->radio == NULL) {
 8008642:	2b00      	cmp	r3, #0
 8008644:	d05a      	beq.n	80086fc <wps_init+0xcc>
        *err = WPS_RADIO_NOT_INITIALIZED_ERROR;
        return;
    } else if (wps->channel_sequence.channel == NULL) {
 8008646:	68c3      	ldr	r3, [r0, #12]
 8008648:	4604      	mov	r4, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d052      	beq.n	80086f4 <wps_init+0xc4>
        return;
    }

    wps->node   = node;
    wps->status = WPS_IDLE;
    wps->signal = WPS_NONE;
 800864e:	f8a0 537c 	strh.w	r5, [r0, #892]	; 0x37c

    mac_sync_cfg.sleep_level      = wps->node->sleep_lvl;
 8008652:	8acb      	ldrh	r3, [r1, #22]
    wps->node   = node;
 8008654:	6001      	str	r1, [r0, #0]
    mac_sync_cfg.isi_mitig        = wps->node->isi_mitig;
 8008656:	8b88      	ldrh	r0, [r1, #28]
    mac_sync_cfg.sleep_level      = wps->node->sleep_lvl;
 8008658:	f8ad 3018 	strh.w	r3, [sp, #24]
    mac_sync_cfg.isi_mitig        = wps->node->isi_mitig;
 800865c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    mac_sync_cfg.isi_mitig_pauses = link_tdma_sync_get_isi_mitigation_pauses(mac_sync_cfg.isi_mitig);
 8008660:	f7fc ff54 	bl	800550c <link_tdma_sync_get_isi_mitigation_pauses>
    mac_sync_cfg.preamble_len     = link_tdma_get_preamble_length(mac_sync_cfg.isi_mitig_pauses,
 8008664:	6823      	ldr	r3, [r4, #0]
    mac_sync_cfg.isi_mitig_pauses = link_tdma_sync_get_isi_mitigation_pauses(mac_sync_cfg.isi_mitig);
 8008666:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    mac_sync_cfg.preamble_len     = link_tdma_get_preamble_length(mac_sync_cfg.isi_mitig_pauses,
 800866a:	6919      	ldr	r1, [r3, #16]
 800866c:	f7fc ff50 	bl	8005510 <link_tdma_get_preamble_length>
                                                                  wps->node->preamble_len);
    mac_sync_cfg.syncword_len     = link_tdma_get_syncword_length(mac_sync_cfg.isi_mitig_pauses,
 8008670:	6823      	ldr	r3, [r4, #0]
    mac_sync_cfg.preamble_len     = link_tdma_get_preamble_length(mac_sync_cfg.isi_mitig_pauses,
 8008672:	9007      	str	r0, [sp, #28]
    mac_sync_cfg.syncword_len     = link_tdma_get_syncword_length(mac_sync_cfg.isi_mitig_pauses,
 8008674:	89d9      	ldrh	r1, [r3, #14]
 8008676:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 800867a:	f7fc ff4b 	bl	8005514 <link_tdma_get_syncword_length>
    wps_mac_init(&wps->mac,
                 &wps->l7.callback_queue,
                 &wps->schedule,
                 &wps->channel_sequence,
                 &mac_sync_cfg,
                 wps->node->local_address,
 800867e:	4623      	mov	r3, r4
    wps_mac_init(&wps->mac,
 8008680:	7d61      	ldrb	r1, [r4, #21]
                 wps->node->local_address,
 8008682:	f853 2b0c 	ldr.w	r2, [r3], #12
    wps_mac_init(&wps->mac,
 8008686:	9104      	str	r1, [sp, #16]
 8008688:	7d21      	ldrb	r1, [r4, #20]
    mac_sync_cfg.syncword_len     = link_tdma_get_syncword_length(mac_sync_cfg.isi_mitig_pauses,
 800868a:	9008      	str	r0, [sp, #32]
    wps_mac_init(&wps->mac,
 800868c:	9103      	str	r1, [sp, #12]
 800868e:	7911      	ldrb	r1, [r2, #4]
 8008690:	9102      	str	r1, [sp, #8]
 8008692:	88d2      	ldrh	r2, [r2, #6]
 8008694:	9201      	str	r2, [sp, #4]
 8008696:	a906      	add	r1, sp, #24
 8008698:	1d22      	adds	r2, r4, #4
 800869a:	9100      	str	r1, [sp, #0]
 800869c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086a0:	f104 0118 	add.w	r1, r4, #24
 80086a4:	f001 f9a0 	bl	80099e8 <wps_mac_init>
}

static void initialize_request_queues(wps_t *wps)
{
    /* Initialize pattern queue for throttling */
    memset(pattern_cfg, 1, sizeof(pattern_cfg));
 80086a8:	2228      	movs	r2, #40	; 0x28
 80086aa:	2101      	movs	r1, #1
 80086ac:	4815      	ldr	r0, [pc, #84]	; (8008704 <wps_init+0xd4>)
 80086ae:	f009 fb85 	bl	8011dbc <memset>
    wps->throttle_cfg.pattern_queue = &pattern_cfg_queue;
 80086b2:	4815      	ldr	r0, [pc, #84]	; (8008708 <wps_init+0xd8>)
 80086b4:	f8c4 0370 	str.w	r0, [r4, #880]	; 0x370
    circular_queue_init(wps->throttle_cfg.pattern_queue,
 80086b8:	4912      	ldr	r1, [pc, #72]	; (8008704 <wps_init+0xd4>)
 80086ba:	2314      	movs	r3, #20
 80086bc:	2202      	movs	r2, #2
 80086be:	f002 fc29 	bl	800af14 <circular_queue_init>
                        pattern_cfg,
                        WPS_REQUEST_MEMORY_SIZE,
                        sizeof(bool) * WPS_CONNECTION_THROTTLE_GRANULARITY);

    /* Initialize write request buffer and queue */
    memset(write_request_buffer, 0, sizeof(write_request_buffer));
 80086c2:	4912      	ldr	r1, [pc, #72]	; (800870c <wps_init+0xdc>)
    wps->write_request_queue = &write_request_queue;
 80086c4:	4812      	ldr	r0, [pc, #72]	; (8008710 <wps_init+0xe0>)
 80086c6:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
    circular_queue_init(wps->write_request_queue,
 80086ca:	2303      	movs	r3, #3
    memset(write_request_buffer, 0, sizeof(write_request_buffer));
 80086cc:	600d      	str	r5, [r1, #0]
 80086ce:	808d      	strh	r5, [r1, #4]
    circular_queue_init(wps->write_request_queue,
 80086d0:	2202      	movs	r2, #2
 80086d2:	f002 fc1f 	bl	800af14 <circular_queue_init>
                        write_request_buffer,
                        WPS_REQUEST_MEMORY_SIZE,
                        sizeof(wps_write_request_info_t));

    /* Initialize read request buffer and queue */
    memset(read_request_buffer, 0, sizeof(read_request_buffer));
 80086d6:	4629      	mov	r1, r5
 80086d8:	2220      	movs	r2, #32
 80086da:	480e      	ldr	r0, [pc, #56]	; (8008714 <wps_init+0xe4>)
 80086dc:	f009 fb6e 	bl	8011dbc <memset>
    wps->read_request_queue = &read_request_queue;
 80086e0:	480d      	ldr	r0, [pc, #52]	; (8008718 <wps_init+0xe8>)
    circular_queue_init(wps->read_request_queue,
 80086e2:	490c      	ldr	r1, [pc, #48]	; (8008714 <wps_init+0xe4>)
    wps->read_request_queue = &read_request_queue;
 80086e4:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
    circular_queue_init(wps->read_request_queue,
 80086e8:	2310      	movs	r3, #16
 80086ea:	2202      	movs	r2, #2
 80086ec:	f002 fc12 	bl	800af14 <circular_queue_init>
}
 80086f0:	b00b      	add	sp, #44	; 0x2c
 80086f2:	bd30      	pop	{r4, r5, pc}
        *err = WPS_CHANNEL_SEQUENCE_NOT_INITIALIZED_ERROR;
 80086f4:	2309      	movs	r3, #9
 80086f6:	7013      	strb	r3, [r2, #0]
}
 80086f8:	b00b      	add	sp, #44	; 0x2c
 80086fa:	bd30      	pop	{r4, r5, pc}
        *err = WPS_RADIO_NOT_INITIALIZED_ERROR;
 80086fc:	230a      	movs	r3, #10
 80086fe:	7013      	strb	r3, [r2, #0]
}
 8008700:	b00b      	add	sp, #44	; 0x2c
 8008702:	bd30      	pop	{r4, r5, pc}
 8008704:	20005e54 	.word	0x20005e54
 8008708:	20005e7c 	.word	0x20005e7c
 800870c:	20005ed4 	.word	0x20005ed4
 8008710:	20005edc 	.word	0x20005edc
 8008714:	20005e98 	.word	0x20005e98
 8008718:	20005eb8 	.word	0x20005eb8

0800871c <wps_set_syncing_address>:
    *err = WPS_NO_ERROR;
 800871c:	2300      	movs	r3, #0
 800871e:	7013      	strb	r3, [r2, #0]
    wps->mac.syncing_address = address;
 8008720:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
}
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop

08008728 <wps_set_network_id>:
    *err = WPS_NO_ERROR;
 8008728:	2300      	movs	r3, #0
 800872a:	7013      	strb	r3, [r2, #0]
    wps->network_id = network_id;
 800872c:	7541      	strb	r1, [r0, #21]
}
 800872e:	4770      	bx	lr

08008730 <wps_config_node>:
{
 8008730:	b410      	push	{r4}
    *err = WPS_NO_ERROR;
 8008732:	2400      	movs	r4, #0
 8008734:	701c      	strb	r4, [r3, #0]
    node->radio                     = radio;
 8008736:	6001      	str	r1, [r0, #0]
    node->role                      = cfg->role;
 8008738:	7813      	ldrb	r3, [r2, #0]
 800873a:	7103      	strb	r3, [r0, #4]
    node->local_address             = cfg->local_address;
 800873c:	8a11      	ldrh	r1, [r2, #16]
    node->crc_polynomial            = cfg->crc_polynomial;
 800873e:	68d3      	ldr	r3, [r2, #12]
    node->preamble_len              = cfg->preamble_len;
 8008740:	6854      	ldr	r4, [r2, #4]
    node->local_address             = cfg->local_address;
 8008742:	80c1      	strh	r1, [r0, #6]
    node->crc_polynomial            = cfg->crc_polynomial;
 8008744:	6183      	str	r3, [r0, #24]
    node->sleep_lvl                 = cfg->sleep_lvl;
 8008746:	8911      	ldrh	r1, [r2, #8]
    node->isi_mitig                 = cfg->isi_mitig;
 8008748:	8b53      	ldrh	r3, [r2, #26]
 800874a:	8383      	strh	r3, [r0, #28]
    node->preamble_len              = cfg->preamble_len;
 800874c:	6104      	str	r4, [r0, #16]
    node->sleep_lvl                 = cfg->sleep_lvl;
 800874e:	82c1      	strh	r1, [r0, #22]
    node->rx_gain                   = cfg->rx_gain;
 8008750:	7f13      	ldrb	r3, [r2, #28]
 8008752:	7503      	strb	r3, [r0, #20]
    node->syncword_cfg.syncword_bit_cost  = 2;
 8008754:	f640 4302 	movw	r3, #3074	; 0xc02
    node->syncword_cfg.syncword_length    = cfg->syncword_len;
 8008758:	8b11      	ldrh	r1, [r2, #24]
    node->syncword_cfg.syncword_bit_cost  = 2;
 800875a:	8183      	strh	r3, [r0, #12]
    node->syncword_cfg.syncword           = cfg->syncword;
 800875c:	6953      	ldr	r3, [r2, #20]
}
 800875e:	f85d 4b04 	ldr.w	r4, [sp], #4
    node->syncword_cfg.syncword_length    = cfg->syncword_len;
 8008762:	81c1      	strh	r1, [r0, #14]
    node->syncword_cfg.syncword           = cfg->syncword;
 8008764:	6083      	str	r3, [r0, #8]
}
 8008766:	4770      	bx	lr

08008768 <wps_config_network_schedule>:
{
 8008768:	b410      	push	{r4}
    *err = WPS_NO_ERROR;
 800876a:	9c01      	ldr	r4, [sp, #4]
 800876c:	f04f 0c00 	mov.w	ip, #0
 8008770:	f884 c000 	strb.w	ip, [r4]
    wps->schedule.timeslot = timeslot;
 8008774:	e9c0 2301 	strd	r2, r3, [r0, #4]
    for (uint32_t i = 0; i < schedule_size; ++i) {
 8008778:	b14b      	cbz	r3, 800878e <wps_config_network_schedule+0x26>
 800877a:	3904      	subs	r1, #4
 800877c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
        timeslot[i].duration_pll_cycles = timeslot_duration_pll_cycles[i];
 8008780:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8008784:	6093      	str	r3, [r2, #8]
    for (uint32_t i = 0; i < schedule_size; ++i) {
 8008786:	4281      	cmp	r1, r0
 8008788:	f102 020c 	add.w	r2, r2, #12
 800878c:	d1f8      	bne.n	8008780 <wps_config_network_schedule+0x18>
}
 800878e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008792:	4770      	bx	lr

08008794 <wps_config_network_channel_sequence>:
    *err = WPS_NO_ERROR;
 8008794:	f04f 0c00 	mov.w	ip, #0
 8008798:	f883 c000 	strb.w	ip, [r3]
    wps->channel_sequence.sequence_size = sequence_size;
 800879c:	e9c0 1203 	strd	r1, r2, [r0, #12]
}
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop

080087a4 <wps_enable_random_channel_sequence>:
    *err = WPS_NO_ERROR;
 80087a4:	2200      	movs	r2, #0
    wps->random_channel_sequence_enabled = true;
 80087a6:	2301      	movs	r3, #1
    *err = WPS_NO_ERROR;
 80087a8:	700a      	strb	r2, [r1, #0]
    wps->random_channel_sequence_enabled = true;
 80087aa:	7503      	strb	r3, [r0, #20]
}
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop

080087b0 <wps_disable_random_channel_sequence>:
    *err = WPS_NO_ERROR;
 80087b0:	2300      	movs	r3, #0
 80087b2:	700b      	strb	r3, [r1, #0]
    wps->random_channel_sequence_enabled = false;
 80087b4:	7503      	strb	r3, [r0, #20]
}
 80087b6:	4770      	bx	lr

080087b8 <wps_get_connection_header_size>:
{
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	b082      	sub	sp, #8
                                                wps_mac_get_timeslot_id_saw_proto_size(&wps->mac) : 0;
 80087bc:	b2cc      	uxtb	r4, r1
{
 80087be:	4605      	mov	r5, r0
 80087c0:	9101      	str	r1, [sp, #4]
                                                wps_mac_get_timeslot_id_saw_proto_size(&wps->mac) : 0;
 80087c2:	b96c      	cbnz	r4, 80087e0 <wps_get_connection_header_size+0x28>
    header_size += header_cfg.rdo_enabled ? sizeof(wps->mac.link_rdo.offset) : 0;
 80087c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80087c8:	b10b      	cbz	r3, 80087ce <wps_get_connection_header_size+0x16>
 80087ca:	3402      	adds	r4, #2
 80087cc:	b2e4      	uxtb	r4, r4
    header_size += header_cfg.ranging_phase_provider ? wps_mac_get_ranging_phases_proto_size(&wps->mac) : 0;
 80087ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80087d2:	b9d3      	cbnz	r3, 800880a <wps_get_connection_header_size+0x52>
    header_size += header_cfg.ranging_phase_accumulator ? wps_mac_get_ranging_phase_count_proto_size(&wps->mac) : 0;
 80087d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80087d8:	b973      	cbnz	r3, 80087f8 <wps_get_connection_header_size+0x40>
}
 80087da:	4620      	mov	r0, r4
 80087dc:	b002      	add	sp, #8
 80087de:	bd70      	pop	{r4, r5, r6, pc}
    header_size += header_cfg.main_connection ? wps_mac_get_channel_index_proto_size(&wps->mac) +
 80087e0:	f100 0650 	add.w	r6, r0, #80	; 0x50
 80087e4:	4630      	mov	r0, r6
 80087e6:	f001 fa07 	bl	8009bf8 <wps_mac_get_channel_index_proto_size>
 80087ea:	4604      	mov	r4, r0
                                                wps_mac_get_timeslot_id_saw_proto_size(&wps->mac) : 0;
 80087ec:	4630      	mov	r0, r6
 80087ee:	f001 fa4d 	bl	8009c8c <wps_mac_get_timeslot_id_saw_proto_size>
    header_size += header_cfg.main_connection ? wps_mac_get_channel_index_proto_size(&wps->mac) +
 80087f2:	4404      	add	r4, r0
 80087f4:	b2e4      	uxtb	r4, r4
 80087f6:	e7e5      	b.n	80087c4 <wps_get_connection_header_size+0xc>
    header_size += header_cfg.ranging_phase_accumulator ? wps_mac_get_ranging_phase_count_proto_size(&wps->mac) : 0;
 80087f8:	f105 0050 	add.w	r0, r5, #80	; 0x50
 80087fc:	f001 faba 	bl	8009d74 <wps_mac_get_ranging_phase_count_proto_size>
 8008800:	4420      	add	r0, r4
 8008802:	b2c4      	uxtb	r4, r0
}
 8008804:	4620      	mov	r0, r4
 8008806:	b002      	add	sp, #8
 8008808:	bd70      	pop	{r4, r5, r6, pc}
    header_size += header_cfg.ranging_phase_provider ? wps_mac_get_ranging_phases_proto_size(&wps->mac) : 0;
 800880a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800880e:	f001 faa7 	bl	8009d60 <wps_mac_get_ranging_phases_proto_size>
 8008812:	4404      	add	r4, r0
 8008814:	b2e4      	uxtb	r4, r4
 8008816:	e7dd      	b.n	80087d4 <wps_get_connection_header_size+0x1c>

08008818 <wps_configure_header_connection>:
{
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	b088      	sub	sp, #32
    link_protocol_init(&connection->link_protocol, &proto_init_cfg, &link_err);
 800881c:	f101 040c 	add.w	r4, r1, #12
{
 8008820:	9201      	str	r2, [sp, #4]
    proto_init_cfg.buffer_size = wps_get_connection_header_size(wps, header_cfg);
 8008822:	4611      	mov	r1, r2
    *err = WPS_NO_ERROR;
 8008824:	2200      	movs	r2, #0
 8008826:	701a      	strb	r2, [r3, #0]
{
 8008828:	4605      	mov	r5, r0
    proto_init_cfg.buffer_size = wps_get_connection_header_size(wps, header_cfg);
 800882a:	f7ff ffc5 	bl	80087b8 <wps_get_connection_header_size>
    link_protocol_init(&connection->link_protocol, &proto_init_cfg, &link_err);
 800882e:	f10d 020b 	add.w	r2, sp, #11
    proto_init_cfg.buffer_size = wps_get_connection_header_size(wps, header_cfg);
 8008832:	f8ad 000c 	strh.w	r0, [sp, #12]
    link_protocol_init(&connection->link_protocol, &proto_init_cfg, &link_err);
 8008836:	a903      	add	r1, sp, #12
 8008838:	4620      	mov	r0, r4
 800883a:	f7fc fb03 	bl	8004e44 <link_protocol_init>
    if (header_cfg.main_connection == true) {
 800883e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008842:	b96b      	cbnz	r3, 8008860 <wps_configure_header_connection+0x48>
    if (header_cfg.rdo_enabled == true) {
 8008844:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d12f      	bne.n	80088ac <wps_configure_header_connection+0x94>
    if (header_cfg.ranging_phase_provider == true) {
 800884c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d140      	bne.n	80088d6 <wps_configure_header_connection+0xbe>
    if (header_cfg.ranging_phase_accumulator == true) {
 8008854:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d151      	bne.n	8008900 <wps_configure_header_connection+0xe8>
}
 800885c:	b008      	add	sp, #32
 800885e:	bd70      	pop	{r4, r5, r6, pc}
        link_proto_cfg.instance = &wps->mac;
 8008860:	f105 0650 	add.w	r6, r5, #80	; 0x50
        link_proto_cfg.send     = wps_mac_send_timeslot_id_saw;
 8008864:	4b30      	ldr	r3, [pc, #192]	; (8008928 <wps_configure_header_connection+0x110>)
 8008866:	9306      	str	r3, [sp, #24]
        link_proto_cfg.size     = wps_mac_get_timeslot_id_saw_proto_size(&wps->mac);
 8008868:	4630      	mov	r0, r6
        link_proto_cfg.receive  = wps_mac_receive_timeslot_id_saw;
 800886a:	4b30      	ldr	r3, [pc, #192]	; (800892c <wps_configure_header_connection+0x114>)
 800886c:	9307      	str	r3, [sp, #28]
        link_proto_cfg.instance = &wps->mac;
 800886e:	9604      	str	r6, [sp, #16]
        link_proto_cfg.size     = wps_mac_get_timeslot_id_saw_proto_size(&wps->mac);
 8008870:	f001 fa0c 	bl	8009c8c <wps_mac_get_timeslot_id_saw_proto_size>
        link_protocol_add(&connection->link_protocol, &link_proto_cfg, &link_err);
 8008874:	f10d 020b 	add.w	r2, sp, #11
 8008878:	a904      	add	r1, sp, #16
        link_proto_cfg.size     = wps_mac_get_timeslot_id_saw_proto_size(&wps->mac);
 800887a:	f88d 0014 	strb.w	r0, [sp, #20]
        link_protocol_add(&connection->link_protocol, &link_proto_cfg, &link_err);
 800887e:	4620      	mov	r0, r4
 8008880:	f7fc fae8 	bl	8004e54 <link_protocol_add>
        link_proto_cfg.send     = wps_mac_send_channel_index;
 8008884:	4b2a      	ldr	r3, [pc, #168]	; (8008930 <wps_configure_header_connection+0x118>)
 8008886:	9306      	str	r3, [sp, #24]
        link_proto_cfg.size     = wps_mac_get_channel_index_proto_size(&wps->mac);
 8008888:	4630      	mov	r0, r6
        link_proto_cfg.receive  = wps_mac_receive_channel_index;
 800888a:	4b2a      	ldr	r3, [pc, #168]	; (8008934 <wps_configure_header_connection+0x11c>)
 800888c:	9307      	str	r3, [sp, #28]
        link_proto_cfg.instance = &wps->mac;
 800888e:	9604      	str	r6, [sp, #16]
        link_proto_cfg.size     = wps_mac_get_channel_index_proto_size(&wps->mac);
 8008890:	f001 f9b2 	bl	8009bf8 <wps_mac_get_channel_index_proto_size>
        link_protocol_add(&connection->link_protocol, &link_proto_cfg, &link_err);
 8008894:	a904      	add	r1, sp, #16
        link_proto_cfg.size     = wps_mac_get_channel_index_proto_size(&wps->mac);
 8008896:	f88d 0014 	strb.w	r0, [sp, #20]
        link_protocol_add(&connection->link_protocol, &link_proto_cfg, &link_err);
 800889a:	f10d 020b 	add.w	r2, sp, #11
 800889e:	4620      	mov	r0, r4
 80088a0:	f7fc fad8 	bl	8004e54 <link_protocol_add>
    if (header_cfg.rdo_enabled == true) {
 80088a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d0cf      	beq.n	800884c <wps_configure_header_connection+0x34>
        link_proto_cfg.send     = wps_mac_send_rdo;
 80088ac:	4b22      	ldr	r3, [pc, #136]	; (8008938 <wps_configure_header_connection+0x120>)
 80088ae:	9306      	str	r3, [sp, #24]
        link_proto_cfg.instance = &wps->mac;
 80088b0:	f105 0050 	add.w	r0, r5, #80	; 0x50
        link_proto_cfg.receive  = wps_mac_receive_rdo;
 80088b4:	4b21      	ldr	r3, [pc, #132]	; (800893c <wps_configure_header_connection+0x124>)
 80088b6:	9307      	str	r3, [sp, #28]
        link_proto_cfg.instance = &wps->mac;
 80088b8:	9004      	str	r0, [sp, #16]
        link_proto_cfg.size     = wps_mac_get_rdo_proto_size(&wps->mac);
 80088ba:	f001 f9f1 	bl	8009ca0 <wps_mac_get_rdo_proto_size>
        link_protocol_add(&connection->link_protocol, &link_proto_cfg, &link_err);
 80088be:	f10d 020b 	add.w	r2, sp, #11
        link_proto_cfg.size     = wps_mac_get_rdo_proto_size(&wps->mac);
 80088c2:	f88d 0014 	strb.w	r0, [sp, #20]
        link_protocol_add(&connection->link_protocol, &link_proto_cfg, &link_err);
 80088c6:	a904      	add	r1, sp, #16
 80088c8:	4620      	mov	r0, r4
 80088ca:	f7fc fac3 	bl	8004e54 <link_protocol_add>
    if (header_cfg.ranging_phase_provider == true) {
 80088ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d0be      	beq.n	8008854 <wps_configure_header_connection+0x3c>
        link_proto_cfg.send     = wps_mac_send_ranging_phases;
 80088d6:	4b1a      	ldr	r3, [pc, #104]	; (8008940 <wps_configure_header_connection+0x128>)
 80088d8:	9306      	str	r3, [sp, #24]
        link_proto_cfg.instance = &wps->mac;
 80088da:	f105 0050 	add.w	r0, r5, #80	; 0x50
        link_proto_cfg.receive  = wps_mac_receive_ranging_phases;
 80088de:	4b19      	ldr	r3, [pc, #100]	; (8008944 <wps_configure_header_connection+0x12c>)
 80088e0:	9307      	str	r3, [sp, #28]
        link_proto_cfg.instance = &wps->mac;
 80088e2:	9004      	str	r0, [sp, #16]
        link_proto_cfg.size     = wps_mac_get_ranging_phases_proto_size(&wps->mac);
 80088e4:	f001 fa3c 	bl	8009d60 <wps_mac_get_ranging_phases_proto_size>
        link_protocol_add(&connection->link_protocol, &link_proto_cfg, &link_err);
 80088e8:	f10d 020b 	add.w	r2, sp, #11
        link_proto_cfg.size     = wps_mac_get_ranging_phases_proto_size(&wps->mac);
 80088ec:	f88d 0014 	strb.w	r0, [sp, #20]
        link_protocol_add(&connection->link_protocol, &link_proto_cfg, &link_err);
 80088f0:	a904      	add	r1, sp, #16
 80088f2:	4620      	mov	r0, r4
 80088f4:	f7fc faae 	bl	8004e54 <link_protocol_add>
    if (header_cfg.ranging_phase_accumulator == true) {
 80088f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0ad      	beq.n	800885c <wps_configure_header_connection+0x44>
        link_proto_cfg.send     = wps_mac_send_ranging_phase_count;
 8008900:	4a11      	ldr	r2, [pc, #68]	; (8008948 <wps_configure_header_connection+0x130>)
        link_proto_cfg.receive  = wps_mac_receive_ranging_phase_count;
 8008902:	4b12      	ldr	r3, [pc, #72]	; (800894c <wps_configure_header_connection+0x134>)
        link_proto_cfg.instance = &wps->mac;
 8008904:	f105 0050 	add.w	r0, r5, #80	; 0x50
        link_proto_cfg.receive  = wps_mac_receive_ranging_phase_count;
 8008908:	e9cd 2306 	strd	r2, r3, [sp, #24]
        link_proto_cfg.instance = &wps->mac;
 800890c:	9004      	str	r0, [sp, #16]
        link_proto_cfg.size     = wps_mac_get_ranging_phase_count_proto_size(&wps->mac);
 800890e:	f001 fa31 	bl	8009d74 <wps_mac_get_ranging_phase_count_proto_size>
        link_protocol_add(&connection->link_protocol, &link_proto_cfg, &link_err);
 8008912:	f10d 020b 	add.w	r2, sp, #11
        link_proto_cfg.size     = wps_mac_get_ranging_phase_count_proto_size(&wps->mac);
 8008916:	4603      	mov	r3, r0
        link_protocol_add(&connection->link_protocol, &link_proto_cfg, &link_err);
 8008918:	a904      	add	r1, sp, #16
 800891a:	4620      	mov	r0, r4
        link_proto_cfg.size     = wps_mac_get_ranging_phase_count_proto_size(&wps->mac);
 800891c:	f88d 3014 	strb.w	r3, [sp, #20]
        link_protocol_add(&connection->link_protocol, &link_proto_cfg, &link_err);
 8008920:	f7fc fa98 	bl	8004e54 <link_protocol_add>
}
 8008924:	b008      	add	sp, #32
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	08009bfd 	.word	0x08009bfd
 800892c:	08009c21 	.word	0x08009c21
 8008930:	08009bd5 	.word	0x08009bd5
 8008934:	08009be5 	.word	0x08009be5
 8008938:	08009c91 	.word	0x08009c91
 800893c:	08009c99 	.word	0x08009c99
 8008940:	08009ca5 	.word	0x08009ca5
 8008944:	08009cc5 	.word	0x08009cc5
 8008948:	08009d65 	.word	0x08009d65
 800894c:	08009d6d 	.word	0x08009d6d

08008950 <wps_create_connection>:
{
 8008950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008954:	4615      	mov	r5, r2
    *err = WPS_NO_ERROR;
 8008956:	2200      	movs	r2, #0
 8008958:	701a      	strb	r2, [r3, #0]
    connection->source_address      = config->source_address;
 800895a:	882b      	ldrh	r3, [r5, #0]
    connection->header_size = config->header_length;
 800895c:	8a2a      	ldrh	r2, [r5, #16]
    connection->source_address      = config->source_address;
 800895e:	8003      	strh	r3, [r0, #0]
    connection->destination_address = config->destination_address;
 8008960:	886b      	ldrh	r3, [r5, #2]
 8008962:	8043      	strh	r3, [r0, #2]
    connection->header_size = config->header_length;
 8008964:	7282      	strb	r2, [r0, #10]
{
 8008966:	4604      	mov	r4, r0
 8008968:	460e      	mov	r6, r1
    connection->auto_sync_enable    = true;
 800896a:	2301      	movs	r3, #1
 800896c:	7243      	strb	r3, [r0, #9]
    circular_queue_init(&connection->xlayer_queue, config->fifo_buffer, config->fifo_buffer_size, sizeof(xlayer_t));
 800896e:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8008972:	2378      	movs	r3, #120	; 0x78
 8008974:	f500 7041 	add.w	r0, r0, #772	; 0x304
 8008978:	f002 facc 	bl	800af14 <circular_queue_init>
    if (node->local_address == connection->source_address) {
 800897c:	88f2      	ldrh	r2, [r6, #6]
 800897e:	8823      	ldrh	r3, [r4, #0]
 8008980:	429a      	cmp	r2, r3
 8008982:	d033      	beq.n	80089ec <wps_create_connection+0x9c>
        set_rx_conn_queue_memory(config->frame_buffer,
 8008984:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
                                 config->header_length,
 8008988:	8a28      	ldrh	r0, [r5, #16]
        set_rx_conn_queue_memory(config->frame_buffer,
 800898a:	696e      	ldr	r6, [r5, #20]
 800898c:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    for (uint32_t i = 0; i < queue_size; ++i) {
 8008990:	b19a      	cbz	r2, 80089ba <wps_create_connection+0x6a>
 8008992:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
            buffer_begin[i].frame.payload_memory_size = max_frame_len - hdr_len;
 8008996:	b2c0      	uxtb	r0, r0
 8008998:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800899c:	fa5f fc86 	uxtb.w	ip, r6
        buffer_begin[i].frame.payload_memory      = (buffer + i * max_frame_len);
 80089a0:	6659      	str	r1, [r3, #100]	; 0x64
        buffer_begin[i].frame.payload_begin_it    = buffer_begin[i].frame.payload_memory;
 80089a2:	66d9      	str	r1, [r3, #108]	; 0x6c
        buffer_begin[i].frame.header_memory      = buffer_begin[i].frame.payload_memory;
 80089a4:	6499      	str	r1, [r3, #72]	; 0x48
        buffer_begin[i].frame.header_end_it   = buffer_begin[i].frame.payload_memory;
 80089a6:	e9c3 1114 	strd	r1, r1, [r3, #80]	; 0x50
        buffer_begin[i].frame.payload_memory_size = max_frame_len;
 80089aa:	f883 c068 	strb.w	ip, [r3, #104]	; 0x68
        buffer_begin[i].frame.header_memory_size = hdr_len;
 80089ae:	f883 004c 	strb.w	r0, [r3, #76]	; 0x4c
    for (uint32_t i = 0; i < queue_size; ++i) {
 80089b2:	3378      	adds	r3, #120	; 0x78
 80089b4:	4293      	cmp	r3, r2
 80089b6:	4431      	add	r1, r6
 80089b8:	d1f2      	bne.n	80089a0 <wps_create_connection+0x50>
    connection->tx_success_callback_t       = NULL;
 80089ba:	2300      	movs	r3, #0
    connection->get_tick_quarter_ms  = config->get_tick_quarter_ms;
 80089bc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    connection->channel              = config->channel_buffer;
 80089be:	69aa      	ldr	r2, [r5, #24]
 80089c0:	f8c4 2328 	str.w	r2, [r4, #808]	; 0x328
    connection->tx_fail_callback_t          = NULL;
 80089c4:	e9c4 33cc 	strd	r3, r3, [r4, #816]	; 0x330
    connection->rx_success_callback_t       = NULL;
 80089c8:	e9c4 33ce 	strd	r3, r3, [r4, #824]	; 0x338
    connection->packet_cfg           = DEFAULT_PACKET_CONFIGURATION;
 80089cc:	f64f 70f9 	movw	r0, #65529	; 0xfff9
 80089d0:	f8a4 032c 	strh.w	r0, [r4, #812]	; 0x32c
    connection->get_tick_quarter_ms  = config->get_tick_quarter_ms;
 80089d4:	f8c4 1358 	str.w	r1, [r4, #856]	; 0x358
    connection->evt_callback_t              = NULL;
 80089d8:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    link_fallback_init(&connection->link_fallback, config->fallback_threshold, config->fallback_count);
 80089dc:	7f2a      	ldrb	r2, [r5, #28]
 80089de:	6a29      	ldr	r1, [r5, #32]
 80089e0:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
 80089e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    link_fallback_init(&connection->link_fallback, config->fallback_threshold, config->fallback_count);
 80089e8:	f7fc ba0a 	b.w	8004e00 <link_fallback_init>
                                 config->header_length,
 80089ec:	8a2a      	ldrh	r2, [r5, #16]
        set_tx_conn_queue_memory(config->frame_buffer,
 80089ee:	6968      	ldr	r0, [r5, #20]
 80089f0:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
    if (max_frame_len > hdr_len) {
 80089f4:	4282      	cmp	r2, r0
        set_tx_conn_queue_memory(config->frame_buffer,
 80089f6:	e9d5 7102 	ldrd	r7, r1, [r5, #8]
    if (max_frame_len > hdr_len) {
 80089fa:	d314      	bcc.n	8008a26 <wps_create_connection+0xd6>
    for (uint32_t i = 0; i < queue_size; ++i) {
 80089fc:	2f00      	cmp	r7, #0
 80089fe:	d0dc      	beq.n	80089ba <wps_create_connection+0x6a>
            buffer_begin[i].frame.payload_memory_size = max_frame_len - hdr_len;
 8008a00:	fa5f fe82 	uxtb.w	lr, r2
 8008a04:	440a      	add	r2, r1
{
 8008a06:	f04f 0c00 	mov.w	ip, #0
    for (uint32_t i = 0; i < queue_size; ++i) {
 8008a0a:	f10c 0c01 	add.w	ip, ip, #1
 8008a0e:	4567      	cmp	r7, ip
        buffer_begin[i].frame.header_begin_it    = buffer_begin[i].frame.header_end_it;
 8008a10:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
        buffer_begin[i].frame.header_memory      = (buffer + i * max_frame_len);
 8008a14:	6499      	str	r1, [r3, #72]	; 0x48
        buffer_begin[i].frame.header_memory_size = hdr_len;
 8008a16:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
    for (uint32_t i = 0; i < queue_size; ++i) {
 8008a1a:	4401      	add	r1, r0
 8008a1c:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8008a20:	4402      	add	r2, r0
 8008a22:	d8f2      	bhi.n	8008a0a <wps_create_connection+0xba>
 8008a24:	e7c9      	b.n	80089ba <wps_create_connection+0x6a>
        for (uint32_t i = 0; i < queue_size; ++i) {
 8008a26:	2f00      	cmp	r7, #0
 8008a28:	d0c7      	beq.n	80089ba <wps_create_connection+0x6a>
            buffer_begin[i].frame.payload_memory_size = max_frame_len - hdr_len;
 8008a2a:	fa5f fe82 	uxtb.w	lr, r2
 8008a2e:	eba0 0a0e 	sub.w	sl, r0, lr
 8008a32:	440a      	add	r2, r1
 8008a34:	ebc7 1907 	rsb	r9, r7, r7, lsl #4
 8008a38:	fa5f fa8a 	uxtb.w	sl, sl
 8008a3c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008a40:	4688      	mov	r8, r1
 8008a42:	469c      	mov	ip, r3
 8008a44:	4616      	mov	r6, r2
            buffer_begin[i].frame.payload_memory      = (buffer + i * max_frame_len);
 8008a46:	f8cc 8064 	str.w	r8, [ip, #100]	; 0x64
            buffer_begin[i].frame.payload_begin_it    = buffer_begin[i].frame.payload_memory + hdr_len;
 8008a4a:	f8cc 606c 	str.w	r6, [ip, #108]	; 0x6c
            buffer_begin[i].frame.payload_memory_size = max_frame_len - hdr_len;
 8008a4e:	f88c a068 	strb.w	sl, [ip, #104]	; 0x68
        for (uint32_t i = 0; i < queue_size; ++i) {
 8008a52:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 8008a56:	45cc      	cmp	ip, r9
 8008a58:	4480      	add	r8, r0
 8008a5a:	4406      	add	r6, r0
 8008a5c:	d1f3      	bne.n	8008a46 <wps_create_connection+0xf6>
 8008a5e:	e7d2      	b.n	8008a06 <wps_create_connection+0xb6>

08008a60 <wps_connection_set_timeslot>:
{
 8008a60:	b410      	push	{r4}
 8008a62:	9c01      	ldr	r4, [sp, #4]
    *err = WPS_NO_ERROR;
 8008a64:	f04f 0c00 	mov.w	ip, #0
 8008a68:	f884 c000 	strb.w	ip, [r4]
    for (uint32_t i = 0; i < nb_timeslots; ++i) {
 8008a6c:	b1b3      	cbz	r3, 8008a9c <wps_connection_set_timeslot+0x3c>
 8008a6e:	f1a2 0c04 	sub.w	ip, r2, #4
 8008a72:	684c      	ldr	r4, [r1, #4]
 8008a74:	eb0c 0183 	add.w	r1, ip, r3, lsl #2
        id = timeslot_id[i];
 8008a78:	f85c 3f04 	ldr.w	r3, [ip, #4]!
            network->schedule.timeslot[id].connection_auto_reply = connection;
 8008a7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (id & (BIT_AUTO_REPLY_TIMESLOT)) {
 8008a84:	f013 0f80 	tst.w	r3, #128	; 0x80
            network->schedule.timeslot[id].connection_auto_reply = connection;
 8008a88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
            network->schedule.timeslot[id].connection_main = connection;
 8008a8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            network->schedule.timeslot[id].connection_auto_reply = connection;
 8008a90:	bf14      	ite	ne
 8008a92:	6050      	strne	r0, [r2, #4]
            network->schedule.timeslot[id].connection_main = connection;
 8008a94:	f844 0023 	streq.w	r0, [r4, r3, lsl #2]
    for (uint32_t i = 0; i < nb_timeslots; ++i) {
 8008a98:	458c      	cmp	ip, r1
 8008a9a:	d1ed      	bne.n	8008a78 <wps_connection_set_timeslot+0x18>
}
 8008a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop

08008aa4 <wps_connection_config_channel>:
{
 8008aa4:	b410      	push	{r4}
 8008aa6:	9c02      	ldr	r4, [sp, #8]
    *err = WPS_NO_ERROR;
 8008aa8:	f04f 0c00 	mov.w	ip, #0
 8008aac:	f884 c000 	strb.w	ip, [r4]
        config_spectrum_advance(node->radio[i].spectral_calib_vars, config, &connection->channel[fallback_index][i][channel_x]);
 8008ab0:	f8d0 4328 	ldr.w	r4, [r0, #808]	; 0x328
 8008ab4:	6808      	ldr	r0, [r1, #0]
 8008ab6:	0112      	lsls	r2, r2, #4
 8008ab8:	2150      	movs	r1, #80	; 0x50
 8008aba:	fb01 2203 	mla	r2, r1, r3, r2
 8008abe:	4422      	add	r2, r4
 8008ac0:	9901      	ldr	r1, [sp, #4]
 8008ac2:	6e80      	ldr	r0, [r0, #104]	; 0x68
}
 8008ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
        config_spectrum_advance(node->radio[i].spectral_calib_vars, config, &connection->channel[fallback_index][i][channel_x]);
 8008ac8:	f7fd bbf2 	b.w	80062b0 <config_spectrum_advance>

08008acc <wps_connection_config_frame>:
    *err = WPS_NO_ERROR;
 8008acc:	f04f 0c00 	mov.w	ip, #0
 8008ad0:	f883 c000 	strb.w	ip, [r3]
    connection->frame_cfg.modulation = modulation;
 8008ad4:	f8a0 1320 	strh.w	r1, [r0, #800]	; 0x320
    connection->frame_cfg.fec = fec;
 8008ad8:	f8a0 2322 	strh.w	r2, [r0, #802]	; 0x322
}
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop

08008ae0 <wps_connection_enable_ack>:
    *err = WPS_NO_ERROR;
 8008ae0:	2200      	movs	r2, #0
    connection->ack_enable = true;
 8008ae2:	2301      	movs	r3, #1
    *err = WPS_NO_ERROR;
 8008ae4:	700a      	strb	r2, [r1, #0]
    connection->ack_enable = true;
 8008ae6:	7203      	strb	r3, [r0, #8]
}
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop

08008aec <wps_connection_disable_ack>:
    *err = WPS_NO_ERROR;
 8008aec:	2300      	movs	r3, #0
 8008aee:	700b      	strb	r3, [r1, #0]
    connection->ack_enable = false;
 8008af0:	7203      	strb	r3, [r0, #8]
}
 8008af2:	4770      	bx	lr

08008af4 <wps_connection_enable_stop_and_wait_arq>:
{
 8008af4:	b410      	push	{r4}
 8008af6:	9c01      	ldr	r4, [sp, #4]
 8008af8:	469c      	mov	ip, r3
    *err = WPS_NO_ERROR;
 8008afa:	2300      	movs	r3, #0
 8008afc:	7023      	strb	r3, [r4, #0]
    if (connection->ack_enable == false) {
 8008afe:	7a03      	ldrb	r3, [r0, #8]
 8008b00:	b173      	cbz	r3, 8008b20 <wps_connection_enable_stop_and_wait_arq+0x2c>
    if (local_address == connection->destination_address) {
 8008b02:	8843      	ldrh	r3, [r0, #2]
    link_saw_arq_init(&connection->stop_and_wait_arq, deadline_quarter_ms, retry, board_seq, true);
 8008b04:	1a5b      	subs	r3, r3, r1
 8008b06:	2401      	movs	r4, #1
 8008b08:	fab3 f383 	clz	r3, r3
 8008b0c:	9401      	str	r4, [sp, #4]
 8008b0e:	095b      	lsrs	r3, r3, #5
}
 8008b10:	f85d 4b04 	ldr.w	r4, [sp], #4
    link_saw_arq_init(&connection->stop_and_wait_arq, deadline_quarter_ms, retry, board_seq, true);
 8008b14:	b292      	uxth	r2, r2
 8008b16:	fa1f f18c 	uxth.w	r1, ip
 8008b1a:	30e0      	adds	r0, #224	; 0xe0
 8008b1c:	f7fc ba2e 	b.w	8004f7c <link_saw_arq_init>
        *err = WPS_ACK_DISABLED_ERROR;
 8008b20:	230b      	movs	r3, #11
 8008b22:	7023      	strb	r3, [r4, #0]
}
 8008b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop

08008b2c <wps_connection_disable_stop_and_wait_arq>:
{
 8008b2c:	b500      	push	{lr}
 8008b2e:	b083      	sub	sp, #12
    *err = WPS_NO_ERROR;
 8008b30:	2300      	movs	r3, #0
 8008b32:	700b      	strb	r3, [r1, #0]
    link_saw_arq_init(&connection->stop_and_wait_arq, 0, 0, false, false);
 8008b34:	461a      	mov	r2, r3
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	30e0      	adds	r0, #224	; 0xe0
 8008b3c:	f7fc fa1e 	bl	8004f7c <link_saw_arq_init>
}
 8008b40:	b003      	add	sp, #12
 8008b42:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b46:	bf00      	nop

08008b48 <wps_connection_enable_auto_sync>:
    *err = WPS_NO_ERROR;
 8008b48:	2200      	movs	r2, #0
    connection->auto_sync_enable = true;
 8008b4a:	2301      	movs	r3, #1
    *err = WPS_NO_ERROR;
 8008b4c:	700a      	strb	r2, [r1, #0]
    connection->auto_sync_enable = true;
 8008b4e:	7243      	strb	r3, [r0, #9]
}
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop

08008b54 <wps_connection_disable_auto_sync>:
    *err = WPS_NO_ERROR;
 8008b54:	2300      	movs	r3, #0
 8008b56:	700b      	strb	r3, [r1, #0]
    connection->auto_sync_enable = false;
 8008b58:	7243      	strb	r3, [r0, #9]
}
 8008b5a:	4770      	bx	lr

08008b5c <wps_connection_enable_cca>:
{
 8008b5c:	b500      	push	{lr}
 8008b5e:	b085      	sub	sp, #20
    *err = WPS_NO_ERROR;
 8008b60:	f04f 0c00 	mov.w	ip, #0
    link_cca_init(&connection->cca, threshold, retry_time_pll_cycles, CCA_ON_TIME_PLL_CYCLE, try_count, fail_action, true);
 8008b64:	9300      	str	r3, [sp, #0]
{
 8008b66:	f89d 3018 	ldrb.w	r3, [sp, #24]
    link_cca_init(&connection->cca, threshold, retry_time_pll_cycles, CCA_ON_TIME_PLL_CYCLE, try_count, fail_action, true);
 8008b6a:	9301      	str	r3, [sp, #4]
{
 8008b6c:	9b07      	ldr	r3, [sp, #28]
    *err = WPS_NO_ERROR;
 8008b6e:	f883 c000 	strb.w	ip, [r3]
    link_cca_init(&connection->cca, threshold, retry_time_pll_cycles, CCA_ON_TIME_PLL_CYCLE, try_count, fail_action, true);
 8008b72:	2301      	movs	r3, #1
 8008b74:	9302      	str	r3, [sp, #8]
 8008b76:	30f8      	adds	r0, #248	; 0xf8
 8008b78:	2310      	movs	r3, #16
 8008b7a:	f7fc fadb 	bl	8005134 <link_cca_init>
}
 8008b7e:	b005      	add	sp, #20
 8008b80:	f85d fb04 	ldr.w	pc, [sp], #4

08008b84 <wps_connection_disable_cca>:
{
 8008b84:	b500      	push	{lr}
 8008b86:	b085      	sub	sp, #20
    *err = WPS_NO_ERROR;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	700b      	strb	r3, [r1, #0]
    link_cca_init(&connection->cca, 0xff, 0, 0, 0, CCA_FAIL_ACTION_TX, false);
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	21ff      	movs	r1, #255	; 0xff
 8008b96:	30f8      	adds	r0, #248	; 0xf8
 8008b98:	f7fc facc 	bl	8005134 <link_cca_init>
}
 8008b9c:	b005      	add	sp, #20
 8008b9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ba2:	bf00      	nop

08008ba4 <wps_enable_rdo>:
    *err = WPS_NO_ERROR;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	7013      	strb	r3, [r2, #0]
    link_rdo_init(&wps->mac.link_rdo, rollover_value);
 8008ba8:	f500 70f6 	add.w	r0, r0, #492	; 0x1ec
 8008bac:	f7fc b9b4 	b.w	8004f18 <link_rdo_init>

08008bb0 <wps_connect>:
{
 8008bb0:	b530      	push	{r4, r5, lr}
 8008bb2:	b089      	sub	sp, #36	; 0x24
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	4604      	mov	r4, r0
    wps_phy_cfg_t phy_cfg = {0};
 8008bb8:	2220      	movs	r2, #32
 8008bba:	2100      	movs	r1, #0
 8008bbc:	4668      	mov	r0, sp
 8008bbe:	f009 f8fd 	bl	8011dbc <memset>
    *err = WPS_NO_ERROR;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	702b      	strb	r3, [r5, #0]
    if (!((wps->signal == WPS_DISCONNECT) || (wps->signal == WPS_NONE))) {
 8008bc6:	f894 337c 	ldrb.w	r3, [r4, #892]	; 0x37c
 8008bca:	f013 0ffb 	tst.w	r3, #251	; 0xfb
 8008bce:	d003      	beq.n	8008bd8 <wps_connect+0x28>
        *err = WPS_ALREADY_CONNECTED_ERROR;
 8008bd0:	2307      	movs	r3, #7
 8008bd2:	702b      	strb	r3, [r5, #0]
}
 8008bd4:	b009      	add	sp, #36	; 0x24
 8008bd6:	bd30      	pop	{r4, r5, pc}
    wps->signal = WPS_CONNECT;
 8008bd8:	2203      	movs	r2, #3
        wps->node->radio->radio_hal.reset_reset_pin();
 8008bda:	6823      	ldr	r3, [r4, #0]
    wps->signal = WPS_CONNECT;
 8008bdc:	f884 237c 	strb.w	r2, [r4, #892]	; 0x37c
        wps->node->radio->radio_hal.reset_reset_pin();
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be4:	4798      	blx	r3
        wps->node->radio->radio_hal.reset_shutdown_pin();
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bec:	4798      	blx	r3
        wps->node->radio->radio_hal.delay_ms(25);
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2019      	movs	r0, #25
 8008bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf6:	4798      	blx	r3
        wps->node->radio->radio_hal.set_reset_pin();
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfe:	4798      	blx	r3
    wps->node->radio->radio_hal.delay_ms(100);
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2064      	movs	r0, #100	; 0x64
 8008c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c08:	4798      	blx	r3
        phy_cfg.radio                     = &wps->node->radio[i].radio;
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	6818      	ldr	r0, [r3, #0]
 8008c0e:	9000      	str	r0, [sp, #0]
        phy_cfg.syncword_cfg              = wps->node->syncword_cfg;
 8008c10:	f103 0108 	add.w	r1, r3, #8
 8008c14:	c903      	ldmia	r1, {r0, r1}
        phy_cfg.sleep_lvl                 = wps->node->sleep_lvl;
 8008c16:	f8b3 c016 	ldrh.w	ip, [r3, #22]
        phy_cfg.crc_polynomial            = wps->node->crc_polynomial;
 8008c1a:	699d      	ldr	r5, [r3, #24]
        phy_cfg.local_address             = wps->node->local_address;
 8008c1c:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 8008c20:	f8ad e004 	strh.w	lr, [sp, #4]
        phy_cfg.syncword_cfg              = wps->node->syncword_cfg;
 8008c24:	aa02      	add	r2, sp, #8
 8008c26:	e882 0003 	stmia.w	r2, {r0, r1}
        phy_cfg.preamble_len              = wps->node->preamble_len;
 8008c2a:	691a      	ldr	r2, [r3, #16]
        phy_cfg.sleep_lvl                 = wps->node->sleep_lvl;
 8008c2c:	f8ad c014 	strh.w	ip, [sp, #20]
        phy_cfg.crc_polynomial            = wps->node->crc_polynomial;
 8008c30:	9506      	str	r5, [sp, #24]
        wps_phy_init(&wps->phy[i], &phy_cfg);
 8008c32:	f504 7504 	add.w	r5, r4, #528	; 0x210
        phy_cfg.rx_gain                   = wps->node->rx_gain;
 8008c36:	7d1b      	ldrb	r3, [r3, #20]
        phy_cfg.preamble_len              = wps->node->preamble_len;
 8008c38:	9204      	str	r2, [sp, #16]
        wps_phy_init(&wps->phy[i], &phy_cfg);
 8008c3a:	4669      	mov	r1, sp
 8008c3c:	4628      	mov	r0, r5
        phy_cfg.rx_gain                   = wps->node->rx_gain;
 8008c3e:	f88d 301d 	strb.w	r3, [sp, #29]
        wps_phy_init(&wps->phy[i], &phy_cfg);
 8008c42:	f7fd fb75 	bl	8006330 <wps_phy_init>
    wps_process_init(wps);
 8008c46:	4620      	mov	r0, r4
 8008c48:	f001 faf0 	bl	800a22c <wps_process_init>
    wps_mac_reset(&wps->mac);
 8008c4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c50:	f000 ff38 	bl	8009ac4 <wps_mac_reset>
    wps_phy_connect(wps->phy);
 8008c54:	4628      	mov	r0, r5
 8008c56:	f7fd fb6d 	bl	8006334 <wps_phy_connect>
}
 8008c5a:	b009      	add	sp, #36	; 0x24
 8008c5c:	bd30      	pop	{r4, r5, pc}
 8008c5e:	bf00      	nop

08008c60 <wps_init_connection_throttle>:
    *err = WPS_NO_ERROR;
 8008c60:	2300      	movs	r3, #0
 8008c62:	700b      	strb	r3, [r1, #0]
    if (connection->pattern != NULL) {
 8008c64:	f8d0 32f0 	ldr.w	r3, [r0, #752]	; 0x2f0
 8008c68:	b16b      	cbz	r3, 8008c86 <wps_init_connection_throttle+0x26>
        memset(connection->pattern, 1, WPS_CONNECTION_THROTTLE_GRANULARITY * sizeof(bool));
 8008c6a:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
        connection->pattern_count = 0;
 8008c6e:	f44f 4cc8 	mov.w	ip, #25600	; 0x6400
        connection->pattern_total_count = WPS_CONNECTION_THROTTLE_GRANULARITY;
 8008c72:	2114      	movs	r1, #20
        memset(connection->pattern, 1, WPS_CONNECTION_THROTTLE_GRANULARITY * sizeof(bool));
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	605a      	str	r2, [r3, #4]
 8008c78:	609a      	str	r2, [r3, #8]
 8008c7a:	60da      	str	r2, [r3, #12]
 8008c7c:	611a      	str	r2, [r3, #16]
        connection->pattern_count = 0;
 8008c7e:	f8a0 c2ec 	strh.w	ip, [r0, #748]	; 0x2ec
        connection->pattern_total_count = WPS_CONNECTION_THROTTLE_GRANULARITY;
 8008c82:	f880 12ee 	strb.w	r1, [r0, #750]	; 0x2ee
}
 8008c86:	4770      	bx	lr

08008c88 <wps_get_free_slot>:
{
 8008c88:	b538      	push	{r3, r4, r5, lr}
    xlayer_t *frame = circular_queue_get_free_slot(&connection->xlayer_queue);
 8008c8a:	f500 7041 	add.w	r0, r0, #772	; 0x304
{
 8008c8e:	4614      	mov	r4, r2
 8008c90:	460d      	mov	r5, r1
    xlayer_t *frame = circular_queue_get_free_slot(&connection->xlayer_queue);
 8008c92:	f002 f95f 	bl	800af54 <circular_queue_get_free_slot>
    *err = WPS_NO_ERROR;
 8008c96:	2300      	movs	r3, #0
 8008c98:	7023      	strb	r3, [r4, #0]
    if (frame == NULL) {
 8008c9a:	b110      	cbz	r0, 8008ca2 <wps_get_free_slot+0x1a>
    *payload = frame->frame.payload_begin_it;
 8008c9c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8008c9e:	602b      	str	r3, [r5, #0]
}
 8008ca0:	bd38      	pop	{r3, r4, r5, pc}
        *err = WPS_QUEUE_FULL_ERROR;
 8008ca2:	2304      	movs	r3, #4
 8008ca4:	7023      	strb	r3, [r4, #0]
}
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}

08008ca8 <wps_send>:
{
 8008ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    xlayer_t *frame = circular_queue_get_free_slot(&connection->xlayer_queue);
 8008cac:	f500 7941 	add.w	r9, r0, #772	; 0x304
{
 8008cb0:	461d      	mov	r5, r3
 8008cb2:	4606      	mov	r6, r0
    xlayer_t *frame = circular_queue_get_free_slot(&connection->xlayer_queue);
 8008cb4:	4648      	mov	r0, r9
{
 8008cb6:	460f      	mov	r7, r1
 8008cb8:	4690      	mov	r8, r2
    xlayer_t *frame = circular_queue_get_free_slot(&connection->xlayer_queue);
 8008cba:	f002 f94b 	bl	800af54 <circular_queue_get_free_slot>
    *err = WPS_NO_ERROR;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	702b      	strb	r3, [r5, #0]
    if (connection->fixed_payload_size_enable && (connection->fixed_payload_size != size)) {
 8008cc2:	7933      	ldrb	r3, [r6, #4]
    xlayer_t *frame = circular_queue_get_free_slot(&connection->xlayer_queue);
 8008cc4:	4604      	mov	r4, r0
    if (connection->fixed_payload_size_enable && (connection->fixed_payload_size != size)) {
 8008cc6:	b133      	cbz	r3, 8008cd6 <wps_send+0x2e>
 8008cc8:	7973      	ldrb	r3, [r6, #5]
 8008cca:	4543      	cmp	r3, r8
 8008ccc:	d003      	beq.n	8008cd6 <wps_send+0x2e>
        *err = WPS_WRONG_TX_SIZE_ERROR;
 8008cce:	2305      	movs	r3, #5
 8008cd0:	702b      	strb	r3, [r5, #0]
}
 8008cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (frame) {
 8008cd6:	b19c      	cbz	r4, 8008d00 <wps_send+0x58>
        frame->frame.retry_count         = 0;
 8008cd8:	2200      	movs	r2, #0
        frame->frame.time_stamp          = connection->get_tick_quarter_ms();
 8008cda:	f8d6 3358 	ldr.w	r3, [r6, #856]	; 0x358
        frame->frame.retry_count         = 0;
 8008cde:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        frame->frame.time_stamp          = connection->get_tick_quarter_ms();
 8008ce2:	4798      	blx	r3
        frame->frame.payload_end_it      = payload + size;
 8008ce4:	eb07 0308 	add.w	r3, r7, r8
        frame->frame.payload_memory_size = size;
 8008ce8:	f884 8068 	strb.w	r8, [r4, #104]	; 0x68
        frame->frame.time_stamp          = connection->get_tick_quarter_ms();
 8008cec:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
        frame->frame.payload_end_it      = payload + size;
 8008cf0:	e9c4 731b 	strd	r7, r3, [r4, #108]	; 0x6c
        frame->frame.payload_memory      = payload;
 8008cf4:	6667      	str	r7, [r4, #100]	; 0x64
        circular_queue_enqueue(&connection->xlayer_queue);
 8008cf6:	4648      	mov	r0, r9
}
 8008cf8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        circular_queue_enqueue(&connection->xlayer_queue);
 8008cfc:	f002 b94a 	b.w	800af94 <circular_queue_enqueue>
        *err = WPS_QUEUE_FULL_ERROR;
 8008d00:	2304      	movs	r3, #4
 8008d02:	702b      	strb	r3, [r5, #0]
}
 8008d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008d08 <wps_read>:
{
 8008d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (circular_queue_is_empty(&connection->xlayer_queue)) {
 8008d0a:	f501 7641 	add.w	r6, r1, #772	; 0x304
    *err = WPS_NO_ERROR;
 8008d0e:	2700      	movs	r7, #0
{
 8008d10:	4604      	mov	r4, r0
    *err = WPS_NO_ERROR;
 8008d12:	7017      	strb	r7, [r2, #0]
    if (circular_queue_is_empty(&connection->xlayer_queue)) {
 8008d14:	4630      	mov	r0, r6
{
 8008d16:	4615      	mov	r5, r2
    if (circular_queue_is_empty(&connection->xlayer_queue)) {
 8008d18:	f002 f990 	bl	800b03c <circular_queue_is_empty>
 8008d1c:	b128      	cbz	r0, 8008d2a <wps_read+0x22>
        *err              = WPS_QUEUE_EMPTY_ERROR;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	702b      	strb	r3, [r5, #0]
        return frame_out;
 8008d22:	7127      	strb	r7, [r4, #4]
 8008d24:	6027      	str	r7, [r4, #0]
}
 8008d26:	4620      	mov	r0, r4
 8008d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    xlayer_t *frame = circular_queue_front(&connection->xlayer_queue);
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f002 f902 	bl	800af34 <circular_queue_front>
    frame_out.size = frame->frame.payload_end_it - frame->frame.payload_begin_it;
 8008d30:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
 8008d34:	1a9b      	subs	r3, r3, r2
    return frame_out;
 8008d36:	7123      	strb	r3, [r4, #4]
 8008d38:	6022      	str	r2, [r4, #0]
}
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d3e:	bf00      	nop

08008d40 <wps_read_done>:
{
 8008d40:	b510      	push	{r4, lr}
    *err = circular_queue_dequeue(&connection->xlayer_queue) ? WPS_NO_ERROR : WPS_QUEUE_EMPTY_ERROR;
 8008d42:	f500 7041 	add.w	r0, r0, #772	; 0x304
{
 8008d46:	460c      	mov	r4, r1
    *err = circular_queue_dequeue(&connection->xlayer_queue) ? WPS_NO_ERROR : WPS_QUEUE_EMPTY_ERROR;
 8008d48:	f002 f956 	bl	800aff8 <circular_queue_dequeue>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	bf14      	ite	ne
 8008d50:	2300      	movne	r3, #0
 8008d52:	2303      	moveq	r3, #3
 8008d54:	7023      	strb	r3, [r4, #0]
}
 8008d56:	bd10      	pop	{r4, pc}

08008d58 <wps_enable_fast_sync>:
    *err = WPS_NO_ERROR;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	700b      	strb	r3, [r1, #0]
    wps_mac_enable_fast_sync(&wps->mac);
 8008d5c:	3050      	adds	r0, #80	; 0x50
 8008d5e:	f000 bf31 	b.w	8009bc4 <wps_mac_enable_fast_sync>
 8008d62:	bf00      	nop

08008d64 <wps_disable_fast_sync>:
    *err = WPS_NO_ERROR;
 8008d64:	2300      	movs	r3, #0
 8008d66:	700b      	strb	r3, [r1, #0]
    wps_mac_disable_fast_sync(&wps->mac);
 8008d68:	3050      	adds	r0, #80	; 0x50
 8008d6a:	f000 bf2f 	b.w	8009bcc <wps_mac_disable_fast_sync>
 8008d6e:	bf00      	nop

08008d70 <wps_callback_enqueue>:
#include "wps_callback.h"
#include "xlayer.h"

/* PUBLIC FUNCTIONS ***********************************************************/
void wps_callback_enqueue(circular_queue_t *queue, xlayer_t *xlayer)
{
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4605      	mov	r5, r0
 8008d74:	460c      	mov	r4, r1
    wps_callback_inst_t *callback;

    callback = circular_queue_get_free_slot(queue);
 8008d76:	f002 f8ed 	bl	800af54 <circular_queue_get_free_slot>
    if (callback != NULL) {
 8008d7a:	b140      	cbz	r0, 8008d8e <wps_callback_enqueue+0x1e>
        callback->func = xlayer->config.callback;
        callback->parg = xlayer->config.parg_callback;
 8008d7c:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 8008d80:	e9c0 2300 	strd	r2, r3, [r0]
        circular_queue_enqueue(queue);
 8008d84:	4628      	mov	r0, r5
    }
}
 8008d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        circular_queue_enqueue(queue);
 8008d8a:	f002 b903 	b.w	800af94 <circular_queue_enqueue>
}
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}

08008d90 <state_stop_wait_arq>:
 *  @param[in] signal_data  MAC structure.
 */
static void state_stop_wait_arq(void *signal_data)
{
    (void)signal_data;
}
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop

08008d94 <update_wps_stats>:
/** @brief Update WPS statistics
 *
 *  @param[in] MAC  WPS MAC instance.
 */
static void update_wps_stats(wps_mac_t *mac)
{
 8008d94:	b430      	push	{r4, r5}
    xlayer_t *current_xlayer;

    current_xlayer = mac->main_xlayer;
    switch (mac->output_signal.main_signal) {
 8008d96:	7883      	ldrb	r3, [r0, #2]
    current_xlayer = mac->main_xlayer;
 8008d98:	f8d0 2190 	ldr.w	r2, [r0, #400]	; 0x190
    switch (mac->output_signal.main_signal) {
 8008d9c:	2b06      	cmp	r3, #6
 8008d9e:	d813      	bhi.n	8008dc8 <update_wps_stats+0x34>
 8008da0:	e8df f003 	tbb	[pc, r3]
 8008da4:	64120452 	.word	0x64120452
 8008da8:	816c      	.short	0x816c
 8008daa:	8d          	.byte	0x8d
 8008dab:	00          	.byte	0x00
    case MAC_SIGNAL_WPS_FRAME_RX_SUCCESS:
        mac->current_timeslot->connection_main->wps_stats.rx_received++;
 8008dac:	6b43      	ldr	r3, [r0, #52]	; 0x34
        mac->current_timeslot->connection_main->wps_stats.rx_byte_received +=
            (current_xlayer->frame.payload_end_it - current_xlayer->frame.payload_begin_it);
 8008dae:	6f14      	ldr	r4, [r2, #112]	; 0x70
        mac->current_timeslot->connection_main->wps_stats.rx_received++;
 8008db0:	681b      	ldr	r3, [r3, #0]
            (current_xlayer->frame.payload_end_it - current_xlayer->frame.payload_begin_it);
 8008db2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
        mac->current_timeslot->connection_main->wps_stats.rx_received++;
 8008db4:	f8d3 12d8 	ldr.w	r1, [r3, #728]	; 0x2d8
            (current_xlayer->frame.payload_end_it - current_xlayer->frame.payload_begin_it);
 8008db8:	eba4 0c02 	sub.w	ip, r4, r2
        mac->current_timeslot->connection_main->wps_stats.rx_byte_received +=
 8008dbc:	f8d3 22dc 	ldr.w	r2, [r3, #732]	; 0x2dc
        mac->current_timeslot->connection_main->wps_stats.rx_received++;
 8008dc0:	3101      	adds	r1, #1
        mac->current_timeslot->connection_main->wps_stats.rx_byte_received +=
 8008dc2:	4462      	add	r2, ip
 8008dc4:	e9c3 12b6 	strd	r1, r2, [r3, #728]	; 0x2d8
        break;
    default:
        break;
    }
    current_xlayer = mac->auto_xlayer;
    switch (mac->output_signal.auto_signal) {
 8008dc8:	78c3      	ldrb	r3, [r0, #3]
    current_xlayer = mac->auto_xlayer;
 8008dca:	f8d0 2194 	ldr.w	r2, [r0, #404]	; 0x194
    switch (mac->output_signal.auto_signal) {
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	2b05      	cmp	r3, #5
 8008dd2:	d80b      	bhi.n	8008dec <update_wps_stats+0x58>
 8008dd4:	e8df f003 	tbb	[pc, r3]
 8008dd8:	22190a0c 	.word	0x22190a0c
 8008ddc:	032f      	.short	0x032f
        break;
    case MAC_SIGNAL_WPS_TX_FAIL:
        mac->current_timeslot->connection_auto_reply->wps_stats.tx_fail++;
        break;
    case MAC_SIGNAL_WPS_TX_DROP:
            mac->current_timeslot->connection_auto_reply->wps_stats.tx_drop++;
 8008dde:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	f8d2 32d0 	ldr.w	r3, [r2, #720]	; 0x2d0
 8008de6:	3301      	adds	r3, #1
 8008de8:	f8c2 32d0 	str.w	r3, [r2, #720]	; 0x2d0
        break;
    default:
        break;
    }
}
 8008dec:	bc30      	pop	{r4, r5}
 8008dee:	4770      	bx	lr
        mac->current_timeslot->connection_auto_reply->wps_stats.rx_received++;
 8008df0:	6b43      	ldr	r3, [r0, #52]	; 0x34
            (current_xlayer->frame.payload_end_it - current_xlayer->frame.payload_begin_it);
 8008df2:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
        mac->current_timeslot->connection_auto_reply->wps_stats.rx_received++;
 8008df4:	685b      	ldr	r3, [r3, #4]
            (current_xlayer->frame.payload_end_it - current_xlayer->frame.payload_begin_it);
 8008df6:	6f10      	ldr	r0, [r2, #112]	; 0x70
        mac->current_timeslot->connection_auto_reply->wps_stats.rx_byte_received +=
 8008df8:	e9d3 12b6 	ldrd	r1, r2, [r3, #728]	; 0x2d8
            (current_xlayer->frame.payload_end_it - current_xlayer->frame.payload_begin_it);
 8008dfc:	1b00      	subs	r0, r0, r4
        mac->current_timeslot->connection_auto_reply->wps_stats.rx_received++;
 8008dfe:	3101      	adds	r1, #1
        mac->current_timeslot->connection_auto_reply->wps_stats.rx_byte_received +=
 8008e00:	4402      	add	r2, r0
}
 8008e02:	bc30      	pop	{r4, r5}
        mac->current_timeslot->connection_auto_reply->wps_stats.rx_byte_received +=
 8008e04:	e9c3 12b6 	strd	r1, r2, [r3, #728]	; 0x2d8
}
 8008e08:	4770      	bx	lr
        mac->current_timeslot->connection_auto_reply->wps_stats.rx_overrun++;
 8008e0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	f8d2 32e0 	ldr.w	r3, [r2, #736]	; 0x2e0
 8008e12:	3301      	adds	r3, #1
}
 8008e14:	bc30      	pop	{r4, r5}
        mac->current_timeslot->connection_auto_reply->wps_stats.rx_overrun++;
 8008e16:	f8c2 32e0 	str.w	r3, [r2, #736]	; 0x2e0
}
 8008e1a:	4770      	bx	lr
        mac->current_timeslot->connection_auto_reply->wps_stats.tx_success++;
 8008e1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
            (current_xlayer->frame.payload_end_it - current_xlayer->frame.payload_begin_it);
 8008e1e:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
        mac->current_timeslot->connection_auto_reply->wps_stats.tx_success++;
 8008e20:	685b      	ldr	r3, [r3, #4]
            (current_xlayer->frame.payload_end_it - current_xlayer->frame.payload_begin_it);
 8008e22:	6f10      	ldr	r0, [r2, #112]	; 0x70
        mac->current_timeslot->connection_auto_reply->wps_stats.tx_byte_sent +=
 8008e24:	e9d3 12b2 	ldrd	r1, r2, [r3, #712]	; 0x2c8
            (current_xlayer->frame.payload_end_it - current_xlayer->frame.payload_begin_it);
 8008e28:	1b00      	subs	r0, r0, r4
        mac->current_timeslot->connection_auto_reply->wps_stats.tx_success++;
 8008e2a:	3101      	adds	r1, #1
        mac->current_timeslot->connection_auto_reply->wps_stats.tx_byte_sent +=
 8008e2c:	4402      	add	r2, r0
}
 8008e2e:	bc30      	pop	{r4, r5}
        mac->current_timeslot->connection_auto_reply->wps_stats.tx_byte_sent +=
 8008e30:	e9c3 12b2 	strd	r1, r2, [r3, #712]	; 0x2c8
}
 8008e34:	4770      	bx	lr
        mac->current_timeslot->connection_auto_reply->wps_stats.tx_fail++;
 8008e36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	f8d2 32d4 	ldr.w	r3, [r2, #724]	; 0x2d4
 8008e3e:	3301      	adds	r3, #1
}
 8008e40:	bc30      	pop	{r4, r5}
        mac->current_timeslot->connection_auto_reply->wps_stats.tx_fail++;
 8008e42:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
}
 8008e46:	4770      	bx	lr
        if (mac->current_timeslot->connection_main->cca.enable) {
 8008e48:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f893 10fe 	ldrb.w	r1, [r3, #254]	; 0xfe
 8008e50:	2900      	cmp	r1, #0
 8008e52:	d0b9      	beq.n	8008dc8 <update_wps_stats+0x34>
            if (current_xlayer->config.cca_try_count >= current_xlayer->config.cca_max_try_count) {
 8008e54:	f892 4029 	ldrb.w	r4, [r2, #41]	; 0x29
 8008e58:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 8008e5c:	428c      	cmp	r4, r1
 8008e5e:	d336      	bcc.n	8008ece <update_wps_stats+0x13a>
                mac->current_timeslot->connection_main->wps_stats.cca_fail++;
 8008e60:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008e64:	3201      	adds	r2, #1
 8008e66:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
 8008e6a:	e7ad      	b.n	8008dc8 <update_wps_stats+0x34>
        mac->current_timeslot->connection_main->wps_stats.rx_overrun++;
 8008e6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	f8d2 32e0 	ldr.w	r3, [r2, #736]	; 0x2e0
 8008e74:	3301      	adds	r3, #1
 8008e76:	f8c2 32e0 	str.w	r3, [r2, #736]	; 0x2e0
        break;
 8008e7a:	e7a5      	b.n	8008dc8 <update_wps_stats+0x34>
        mac->current_timeslot->connection_main->wps_stats.tx_success++;
 8008e7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
            (current_xlayer->frame.payload_end_it - current_xlayer->frame.payload_begin_it);
 8008e7e:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
        mac->current_timeslot->connection_main->wps_stats.tx_success++;
 8008e80:	681b      	ldr	r3, [r3, #0]
            (current_xlayer->frame.payload_end_it - current_xlayer->frame.payload_begin_it);
 8008e82:	6f15      	ldr	r5, [r2, #112]	; 0x70
        mac->current_timeslot->connection_main->wps_stats.tx_success++;
 8008e84:	f8d3 12c8 	ldr.w	r1, [r3, #712]	; 0x2c8
 8008e88:	3101      	adds	r1, #1
 8008e8a:	f8c3 12c8 	str.w	r1, [r3, #712]	; 0x2c8
        mac->current_timeslot->connection_main->wps_stats.tx_byte_sent +=
 8008e8e:	f8d3 12cc 	ldr.w	r1, [r3, #716]	; 0x2cc
            (current_xlayer->frame.payload_end_it - current_xlayer->frame.payload_begin_it);
 8008e92:	eba5 0c04 	sub.w	ip, r5, r4
        if (mac->current_timeslot->connection_main->cca.enable) {
 8008e96:	f893 40fe 	ldrb.w	r4, [r3, #254]	; 0xfe
        mac->current_timeslot->connection_main->wps_stats.tx_byte_sent +=
 8008e9a:	4461      	add	r1, ip
 8008e9c:	f8c3 12cc 	str.w	r1, [r3, #716]	; 0x2cc
        if (mac->current_timeslot->connection_main->cca.enable) {
 8008ea0:	2c00      	cmp	r4, #0
 8008ea2:	d091      	beq.n	8008dc8 <update_wps_stats+0x34>
 8008ea4:	e7d6      	b.n	8008e54 <update_wps_stats+0xc0>
        mac->current_timeslot->connection_main->wps_stats.tx_fail++;
 8008ea6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f8d3 12d4 	ldr.w	r1, [r3, #724]	; 0x2d4
        if (mac->current_timeslot->connection_main->cca.enable) {
 8008eae:	f893 40fe 	ldrb.w	r4, [r3, #254]	; 0xfe
        mac->current_timeslot->connection_main->wps_stats.tx_fail++;
 8008eb2:	3101      	adds	r1, #1
 8008eb4:	f8c3 12d4 	str.w	r1, [r3, #724]	; 0x2d4
        if (mac->current_timeslot->connection_main->cca.enable) {
 8008eb8:	2c00      	cmp	r4, #0
 8008eba:	d085      	beq.n	8008dc8 <update_wps_stats+0x34>
 8008ebc:	e7ca      	b.n	8008e54 <update_wps_stats+0xc0>
            mac->current_timeslot->connection_main->wps_stats.tx_drop++;
 8008ebe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	f8d2 32d0 	ldr.w	r3, [r2, #720]	; 0x2d0
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	f8c2 32d0 	str.w	r3, [r2, #720]	; 0x2d0
        break;
 8008ecc:	e77c      	b.n	8008dc8 <update_wps_stats+0x34>
            } else if (current_xlayer->frame.frame_outcome != FRAME_WAIT) {
 8008ece:	f892 2074 	ldrb.w	r2, [r2, #116]	; 0x74
 8008ed2:	2a06      	cmp	r2, #6
 8008ed4:	f43f af78 	beq.w	8008dc8 <update_wps_stats+0x34>
                mac->current_timeslot->connection_main->wps_stats.cca_pass++;
 8008ed8:	f8d3 22e4 	ldr.w	r2, [r3, #740]	; 0x2e4
 8008edc:	3201      	adds	r2, #1
 8008ede:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
 8008ee2:	e771      	b.n	8008dc8 <update_wps_stats+0x34>

08008ee4 <link_lqi_update_mode_0>:
static inline void link_lqi_update_mode_0(lqi_t *lqi,
                                          uint8_t gain_index,
                                          frame_outcome_t frame_outcome,
                                          uint8_t rssi,
                                          uint8_t rnsi)
{
 8008ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lqi->total_count++;
 8008ee8:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
 8008eea:	f89d 6018 	ldrb.w	r6, [sp, #24]
    lqi->total_count++;
 8008eee:	3501      	adds	r5, #1
{
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	4688      	mov	r8, r1
 8008ef4:	461f      	mov	r7, r3
    lqi->total_count++;
 8008ef6:	6305      	str	r5, [r0, #48]	; 0x30
    switch (frame_outcome) {
 8008ef8:	2a06      	cmp	r2, #6
 8008efa:	d81f      	bhi.n	8008f3c <link_lqi_update_mode_0+0x58>
 8008efc:	e8df f002 	tbb	[pc, r2]
 8008f00:	5a555025 	.word	0x5a555025
 8008f04:	0404      	.short	0x0404
 8008f06:	20          	.byte	0x20
 8008f07:	00          	.byte	0x00
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
        break;
    case FRAME_SENT_ACK_LOST:
    case FRAME_SENT_ACK_REJECTED:
        lqi->sent_count++;
 8008f08:	6982      	ldr	r2, [r0, #24]
        lqi->nack_count++;
 8008f0a:	6a03      	ldr	r3, [r0, #32]
        lqi->sent_count++;
 8008f0c:	3201      	adds	r2, #1
        lqi->nack_count++;
 8008f0e:	3301      	adds	r3, #1
        lqi->sent_count++;
 8008f10:	6182      	str	r2, [r0, #24]
        lqi->nack_count++;
 8008f12:	6203      	str	r3, [r0, #32]
        lqi->rssi_total_tenth_db += link_gain_loop_get_min_tenth_db(gain_index);
 8008f14:	4608      	mov	r0, r1
        lqi->rssi_total_tenth_db += link_gain_loop_get_min_tenth_db(gain_index);
 8008f16:	f7fc f95b 	bl	80051d0 <link_gain_loop_get_min_tenth_db>
 8008f1a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8008f1e:	1818      	adds	r0, r3, r0
 8008f20:	f142 0200 	adc.w	r2, r2, #0
 8008f24:	e9c4 0202 	strd	r0, r2, [r4, #8]
        lqi->rnsi_total_tenth_db += link_gain_loop_get_rnsi_tenth_db(gain_index);
 8008f28:	4640      	mov	r0, r8
 8008f2a:	f7fc f959 	bl	80051e0 <link_gain_loop_get_rnsi_tenth_db>
 8008f2e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8008f32:	1818      	adds	r0, r3, r0
 8008f34:	f142 0200 	adc.w	r2, r2, #0
 8008f38:	e9c4 0204 	strd	r0, r2, [r4, #16]
    case FRAME_WAIT:
        lqi->sent_count++;
    default:
        break;
    }
}
 8008f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lqi->sent_count++;
 8008f40:	6983      	ldr	r3, [r0, #24]
 8008f42:	3301      	adds	r3, #1
 8008f44:	6183      	str	r3, [r0, #24]
}
 8008f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lqi->received_count++;
 8008f4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
        lqi->inst_rnsi = rnsi;
 8008f4c:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
        lqi->received_count++;
 8008f50:	3301      	adds	r3, #1
 8008f52:	6243      	str	r3, [r0, #36]	; 0x24
        lqi->inst_rssi = rssi;
 8008f54:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
        lqi->inst_rnsi_tenth_db = calculate_normalized_gain(link_gain_loop_get_min_tenth_db(gain_index), rnsi);
 8008f58:	4608      	mov	r0, r1
 8008f5a:	f7fc f939 	bl	80051d0 <link_gain_loop_get_min_tenth_db>
 *  @param[in] rssi        Receiver signal strength indicator.
 *  @return Normalized gain in tenths of dB.
 */
static inline uint16_t calculate_normalized_gain(uint16_t min_db, uint8_t rssi)
{
    return (min_db + (GAIN_ENTRY_RANGE_TENTH_DB * (WEAKEST_SIGNAL_CODE - rssi) / WEAKEST_SIGNAL_CODE));
 8008f5e:	f1c6 062f 	rsb	r6, r6, #47	; 0x2f
 8008f62:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8008f66:	4406      	add	r6, r0
 8008f68:	8726      	strh	r6, [r4, #56]	; 0x38
        lqi->inst_rssi_tenth_db = calculate_normalized_gain(link_gain_loop_get_min_tenth_db(gain_index), rssi);
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	f7fc f930 	bl	80051d0 <link_gain_loop_get_min_tenth_db>
 8008f70:	f1c7 032f 	rsb	r3, r7, #47	; 0x2f
 8008f74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 8008f78:	68a2      	ldr	r2, [r4, #8]
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 8008f7a:	8f25      	ldrh	r5, [r4, #56]	; 0x38
 8008f7c:	4418      	add	r0, r3
 8008f7e:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 8008f82:	b280      	uxth	r0, r0
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 8008f84:	1812      	adds	r2, r2, r0
 8008f86:	f141 0100 	adc.w	r1, r1, #0
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 8008f8a:	195b      	adds	r3, r3, r5
 8008f8c:	6123      	str	r3, [r4, #16]
 8008f8e:	6963      	ldr	r3, [r4, #20]
        lqi->inst_rssi_tenth_db = calculate_normalized_gain(link_gain_loop_get_min_tenth_db(gain_index), rssi);
 8008f90:	86e0      	strh	r0, [r4, #54]	; 0x36
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 8008f92:	f143 0300 	adc.w	r3, r3, #0
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 8008f96:	60a2      	str	r2, [r4, #8]
 8008f98:	60e1      	str	r1, [r4, #12]
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 8008f9a:	6163      	str	r3, [r4, #20]
}
 8008f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lqi->lost_count++;
 8008fa0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008fa2:	3301      	adds	r3, #1
        lqi->rssi_total_tenth_db += link_gain_loop_get_min_tenth_db(gain_index);
 8008fa4:	4608      	mov	r0, r1
        lqi->lost_count++;
 8008fa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fa8:	e7b5      	b.n	8008f16 <link_lqi_update_mode_0+0x32>
        lqi->rejected_count++;
 8008faa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008fac:	3301      	adds	r3, #1
        lqi->rssi_total_tenth_db += link_gain_loop_get_min_tenth_db(gain_index);
 8008fae:	4608      	mov	r0, r1
        lqi->rejected_count++;
 8008fb0:	62a3      	str	r3, [r4, #40]	; 0x28
        lqi->rssi_total_tenth_db += link_gain_loop_get_min_tenth_db(gain_index);
 8008fb2:	e7b0      	b.n	8008f16 <link_lqi_update_mode_0+0x32>
        lqi->sent_count++;
 8008fb4:	6983      	ldr	r3, [r0, #24]
        lqi->inst_rnsi = rnsi;
 8008fb6:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
        lqi->sent_count++;
 8008fba:	3301      	adds	r3, #1
 8008fbc:	6183      	str	r3, [r0, #24]
        lqi->ack_count++;
 8008fbe:	69c3      	ldr	r3, [r0, #28]
        lqi->inst_rssi = rssi;
 8008fc0:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
        lqi->ack_count++;
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	61c3      	str	r3, [r0, #28]
        lqi->inst_rnsi_tenth_db = calculate_normalized_gain(link_gain_loop_get_min_tenth_db(gain_index), rnsi);
 8008fc8:	4608      	mov	r0, r1
 8008fca:	f7fc f901 	bl	80051d0 <link_gain_loop_get_min_tenth_db>
 8008fce:	f1c6 062f 	rsb	r6, r6, #47	; 0x2f
 8008fd2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8008fd6:	4406      	add	r6, r0
 8008fd8:	8726      	strh	r6, [r4, #56]	; 0x38
        lqi->inst_rssi_tenth_db = calculate_normalized_gain(link_gain_loop_get_min_tenth_db(gain_index), rssi);
 8008fda:	4640      	mov	r0, r8
 8008fdc:	f7fc f8f8 	bl	80051d0 <link_gain_loop_get_min_tenth_db>
 8008fe0:	f1c7 032f 	rsb	r3, r7, #47	; 0x2f
 8008fe4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 8008fe8:	68a2      	ldr	r2, [r4, #8]
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 8008fea:	8f25      	ldrh	r5, [r4, #56]	; 0x38
 8008fec:	4403      	add	r3, r0
 8008fee:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8008ff2:	b29b      	uxth	r3, r3
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 8008ff4:	18d2      	adds	r2, r2, r3
        lqi->inst_rssi_tenth_db = calculate_normalized_gain(link_gain_loop_get_min_tenth_db(gain_index), rssi);
 8008ff6:	86e3      	strh	r3, [r4, #54]	; 0x36
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 8008ff8:	6963      	ldr	r3, [r4, #20]
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 8008ffa:	60a2      	str	r2, [r4, #8]
 8008ffc:	f140 0000 	adc.w	r0, r0, #0
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 8009000:	1949      	adds	r1, r1, r5
 8009002:	f143 0300 	adc.w	r3, r3, #0
 8009006:	6121      	str	r1, [r4, #16]
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 8009008:	60e0      	str	r0, [r4, #12]
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 800900a:	6163      	str	r3, [r4, #20]
}
 800900c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009010 <get_xlayer_for_tx>:
{
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool unsync = ((wps_mac->tdma_sync.slave_sync_state == STATE_SYNCING) && (wps_mac->node_role == NETWORK_NODE));
 8009014:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
{
 8009018:	b087      	sub	sp, #28
 800901a:	4605      	mov	r5, r0
 800901c:	460e      	mov	r6, r1
    bool unsync = ((wps_mac->tdma_sync.slave_sync_state == STATE_SYNCING) && (wps_mac->node_role == NETWORK_NODE));
 800901e:	bb3b      	cbnz	r3, 8009070 <get_xlayer_for_tx+0x60>
 8009020:	f890 9094 	ldrb.w	r9, [r0, #148]	; 0x94
    if (is_saw_arq_enable(connection)) {
 8009024:	f896 30f4 	ldrb.w	r3, [r6, #244]	; 0xf4
    bool unsync = ((wps_mac->tdma_sync.slave_sync_state == STATE_SYNCING) && (wps_mac->node_role == NETWORK_NODE));
 8009028:	f1a9 0901 	sub.w	r9, r9, #1
 800902c:	fab9 f989 	clz	r9, r9
 8009030:	ea4f 1959 	mov.w	r9, r9, lsr #5
    free_xlayer = circular_queue_front(&connection->xlayer_queue);
 8009034:	f506 7841 	add.w	r8, r6, #772	; 0x304
    if (is_saw_arq_enable(connection)) {
 8009038:	bb13      	cbnz	r3, 8009080 <get_xlayer_for_tx+0x70>
    free_xlayer = circular_queue_front(&connection->xlayer_queue);
 800903a:	4640      	mov	r0, r8
 800903c:	f001 ff7a 	bl	800af34 <circular_queue_front>
    if (free_xlayer == NULL || unsync) {
 8009040:	2800      	cmp	r0, #0
 8009042:	d05c      	beq.n	80090fe <get_xlayer_for_tx+0xee>
 8009044:	f1b9 0f00 	cmp.w	r9, #0
 8009048:	d054      	beq.n	80090f4 <get_xlayer_for_tx+0xe4>
            wps_mac->empty_frame_tx.frame.header_memory    = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
            wps_mac->empty_frame_tx.frame.header_end_it    = NULL;
 8009050:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
        wps_mac->empty_frame_tx.frame.time_stamp           = connection->get_tick_quarter_ms();
 8009054:	f8d6 2358 	ldr.w	r2, [r6, #856]	; 0x358
        wps_mac->empty_frame_tx.frame.header_begin_it      = wps_mac->empty_frame_tx.frame.header_end_it;
 8009058:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
        wps_mac->empty_frame_tx.frame.payload_begin_it     = wps_mac->empty_frame_tx.frame.header_end_it;
 800905c:	e9c5 3341 	strd	r3, r3, [r5, #260]	; 0x104
        wps_mac->empty_frame_tx.frame.time_stamp           = connection->get_tick_quarter_ms();
 8009060:	4790      	blx	r2
 8009062:	e9c5 013c 	strd	r0, r1, [r5, #240]	; 0xf0
        free_xlayer                                       = &wps_mac->empty_frame_tx;
 8009066:	f105 0098 	add.w	r0, r5, #152	; 0x98
}
 800906a:	b007      	add	sp, #28
 800906c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (is_saw_arq_enable(connection)) {
 8009070:	f896 30f4 	ldrb.w	r3, [r6, #244]	; 0xf4
    bool unsync = ((wps_mac->tdma_sync.slave_sync_state == STATE_SYNCING) && (wps_mac->node_role == NETWORK_NODE));
 8009074:	f04f 0900 	mov.w	r9, #0
    free_xlayer = circular_queue_front(&connection->xlayer_queue);
 8009078:	f506 7841 	add.w	r8, r6, #772	; 0x304
    if (is_saw_arq_enable(connection)) {
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0dc      	beq.n	800903a <get_xlayer_for_tx+0x2a>
        xlayer = circular_queue_front(&connection->xlayer_queue);
 8009080:	4640      	mov	r0, r8
 8009082:	f001 ff57 	bl	800af34 <circular_queue_front>
            timeout = link_saw_arq_is_frame_timeout(&connection->stop_and_wait_arq,
 8009086:	f106 0ae0 	add.w	sl, r6, #224	; 0xe0
                wps_mac->output_signal.main_signal = MAC_SIGNAL_WPS_TX_DROP;
 800908a:	f04f 0b06 	mov.w	fp, #6
        if (xlayer != NULL) {
 800908e:	4604      	mov	r4, r0
 8009090:	2800      	cmp	r0, #0
 8009092:	d0d2      	beq.n	800903a <get_xlayer_for_tx+0x2a>
                                                    xlayer->frame.retry_count++,
 8009094:	f8b0 7060 	ldrh.w	r7, [r0, #96]	; 0x60
            timeout = link_saw_arq_is_frame_timeout(&connection->stop_and_wait_arq,
 8009098:	f8d6 1358 	ldr.w	r1, [r6, #856]	; 0x358
 800909c:	e9d0 2316 	ldrd	r2, r3, [r0, #88]	; 0x58
 80090a0:	1c78      	adds	r0, r7, #1
 80090a2:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
 80090a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090aa:	4788      	blx	r1
 80090ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090b4:	9700      	str	r7, [sp, #0]
 80090b6:	4650      	mov	r0, sl
 80090b8:	f7fb ff6e 	bl	8004f98 <link_saw_arq_is_frame_timeout>
            if (timeout) {
 80090bc:	2800      	cmp	r0, #0
 80090be:	d0bc      	beq.n	800903a <get_xlayer_for_tx+0x2a>
                xlayer->config.callback = connection->tx_drop_callback_t;
 80090c0:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 80090c4:	6423      	str	r3, [r4, #64]	; 0x40
                xlayer->config.parg_callback = connection->tx_drop_parg_callback_t;
 80090c6:	f8d6 334c 	ldr.w	r3, [r6, #844]	; 0x34c
 80090ca:	6463      	str	r3, [r4, #68]	; 0x44
                wps_callback_enqueue(wps_mac->callback_queue, xlayer);
 80090cc:	4621      	mov	r1, r4
 80090ce:	f8d5 0198 	ldr.w	r0, [r5, #408]	; 0x198
 80090d2:	f7ff fe4d 	bl	8008d70 <wps_callback_enqueue>
                update_wps_stats(wps_mac);
 80090d6:	4628      	mov	r0, r5
                wps_mac->output_signal.main_signal = MAC_SIGNAL_WPS_TX_DROP;
 80090d8:	f885 b002 	strb.w	fp, [r5, #2]
                update_wps_stats(wps_mac);
 80090dc:	f7ff fe5a 	bl	8008d94 <update_wps_stats>
    return circular_queue_dequeue(&connection->xlayer_queue);
 80090e0:	4640      	mov	r0, r8
 80090e2:	f001 ff89 	bl	800aff8 <circular_queue_dequeue>
        xlayer = circular_queue_front(&connection->xlayer_queue);
 80090e6:	4640      	mov	r0, r8
 80090e8:	f001 ff24 	bl	800af34 <circular_queue_front>
        if (xlayer != NULL) {
 80090ec:	4604      	mov	r4, r0
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d1d0      	bne.n	8009094 <get_xlayer_for_tx+0x84>
 80090f2:	e7a2      	b.n	800903a <get_xlayer_for_tx+0x2a>
        free_xlayer->frame.header_begin_it = free_xlayer->frame.header_end_it;
 80090f4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80090f6:	6503      	str	r3, [r0, #80]	; 0x50
}
 80090f8:	b007      	add	sp, #28
 80090fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (connection->auto_sync_enable && !unsync) {
 80090fe:	7a73      	ldrb	r3, [r6, #9]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d0a2      	beq.n	800904a <get_xlayer_for_tx+0x3a>
 8009104:	f1b9 0f00 	cmp.w	r9, #0
 8009108:	d19f      	bne.n	800904a <get_xlayer_for_tx+0x3a>
            wps_mac->empty_frame_tx.frame.header_memory = overrun_buffer;
 800910a:	4b04      	ldr	r3, [pc, #16]	; (800911c <get_xlayer_for_tx+0x10c>)
 800910c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
            wps_mac->empty_frame_tx.frame.header_end_it = overrun_buffer + connection->header_size;
 8009110:	7ab2      	ldrb	r2, [r6, #10]
 8009112:	4413      	add	r3, r2
 8009114:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
 8009118:	e79c      	b.n	8009054 <get_xlayer_for_tx+0x44>
 800911a:	bf00      	nop
 800911c:	20005ef8 	.word	0x20005ef8

08009120 <get_xlayer_for_rx>:
{
 8009120:	b570      	push	{r4, r5, r6, lr}
    free_xlayer = circular_queue_get_free_slot(&connection->xlayer_queue);
 8009122:	f501 7641 	add.w	r6, r1, #772	; 0x304
{
 8009126:	4604      	mov	r4, r0
    free_xlayer = circular_queue_get_free_slot(&connection->xlayer_queue);
 8009128:	4630      	mov	r0, r6
{
 800912a:	460d      	mov	r5, r1
    free_xlayer = circular_queue_get_free_slot(&connection->xlayer_queue);
 800912c:	f001 ff12 	bl	800af54 <circular_queue_get_free_slot>
    if (free_xlayer == NULL) {
 8009130:	b100      	cbz	r0, 8009134 <get_xlayer_for_rx+0x14>
}
 8009132:	bd70      	pop	{r4, r5, r6, pc}
        empty_free_xlayer = circular_queue_front(&connection->xlayer_queue);
 8009134:	4630      	mov	r0, r6
 8009136:	f001 fefd 	bl	800af34 <circular_queue_front>
        wps_mac->empty_frame_rx.frame.payload_memory_size = connection->fixed_payload_size_enable
 800913a:	7929      	ldrb	r1, [r5, #4]
        wps_mac->empty_frame_rx.frame.payload_memory      = overrun_buffer;
 800913c:	4b11      	ldr	r3, [pc, #68]	; (8009184 <get_xlayer_for_rx+0x64>)
 800913e:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
        empty_free_xlayer = circular_queue_front(&connection->xlayer_queue);
 8009142:	4602      	mov	r2, r0
        free_xlayer = &wps_mac->empty_frame_rx;
 8009144:	f504 7088 	add.w	r0, r4, #272	; 0x110
        wps_mac->empty_frame_rx.frame.payload_memory_size = connection->fixed_payload_size_enable
 8009148:	b189      	cbz	r1, 800916e <get_xlayer_for_rx+0x4e>
                                                         ? (connection->fixed_payload_size + connection->header_size + 1)
 800914a:	796a      	ldrb	r2, [r5, #5]
 800914c:	7aa9      	ldrb	r1, [r5, #10]
        wps_mac->empty_frame_rx.frame.payload_begin_it    = overrun_buffer;
 800914e:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
                                                         ? (connection->fixed_payload_size + connection->header_size + 1)
 8009152:	440a      	add	r2, r1
        wps_mac->empty_frame_rx.frame.payload_memory_size = connection->fixed_payload_size_enable
 8009154:	3201      	adds	r2, #1
 8009156:	f884 2178 	strb.w	r2, [r4, #376]	; 0x178
                                                         : overrun_buffer + empty_free_xlayer->frame.payload_memory_size;
 800915a:	441a      	add	r2, r3
        wps_mac->empty_frame_rx.frame.header_memory_size  = connection->header_size;
 800915c:	f884 115c 	strb.w	r1, [r4, #348]	; 0x15c
        wps_mac->empty_frame_rx.frame.header_end_it       = overrun_buffer;
 8009160:	e9c4 3358 	strd	r3, r3, [r4, #352]	; 0x160
        wps_mac->empty_frame_rx.frame.payload_end_it      = connection->fixed_payload_size_enable
 8009164:	f8c4 2180 	str.w	r2, [r4, #384]	; 0x180
        wps_mac->empty_frame_rx.frame.header_memory       = overrun_buffer;
 8009168:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
}
 800916c:	bd70      	pop	{r4, r5, r6, pc}
        wps_mac->empty_frame_rx.frame.payload_memory_size = connection->fixed_payload_size_enable
 800916e:	f892 1068 	ldrb.w	r1, [r2, #104]	; 0x68
 8009172:	f884 1178 	strb.w	r1, [r4, #376]	; 0x178
        wps_mac->empty_frame_rx.frame.payload_begin_it    = overrun_buffer;
 8009176:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
                                                         : overrun_buffer + empty_free_xlayer->frame.payload_memory_size;
 800917a:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
                                                         ? (connection->fixed_payload_size + connection->header_size + 1)
 800917e:	7aa9      	ldrb	r1, [r5, #10]
                                                         : overrun_buffer + empty_free_xlayer->frame.payload_memory_size;
 8009180:	441a      	add	r2, r3
 8009182:	e7eb      	b.n	800915c <get_xlayer_for_rx+0x3c>
 8009184:	20005ef8 	.word	0x20005ef8

08009188 <state_setup_prime_link>:
{
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	4604      	mov	r4, r0
    uint32_t next_channel = link_channel_hopping_get_channel(&wps_mac->channel_hopping);
 800918c:	304c      	adds	r0, #76	; 0x4c
 800918e:	f7fb fe2f 	bl	8004df0 <link_channel_hopping_get_channel>
    if (wps_mac->current_ts_prime) {
 8009192:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    uint32_t next_channel = link_channel_hopping_get_channel(&wps_mac->channel_hopping);
 8009196:	4605      	mov	r5, r0
    if (wps_mac->current_ts_prime) {
 8009198:	2b00      	cmp	r3, #0
 800919a:	d04b      	beq.n	8009234 <state_setup_prime_link+0xac>
        if (wps_mac->current_ts_prime_tx) {
 800919c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d13b      	bne.n	800921c <state_setup_prime_link+0x94>
            wps_mac->auto_xlayer = get_xlayer_for_rx(wps_mac, wps_mac->current_timeslot->connection_auto_reply);
 80091a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
            wps_mac->output_signal.auto_signal = MAC_SIGNAL_WPS_PREPARE_DONE;
 80091a6:	2207      	movs	r2, #7
 80091a8:	70e2      	strb	r2, [r4, #3]
            wps_mac->auto_xlayer = get_xlayer_for_rx(wps_mac, wps_mac->current_timeslot->connection_auto_reply);
 80091aa:	6859      	ldr	r1, [r3, #4]
 80091ac:	4620      	mov	r0, r4
 80091ae:	f7ff ffb7 	bl	8009120 <get_xlayer_for_rx>
 80091b2:	f8c4 0194 	str.w	r0, [r4, #404]	; 0x194
    xlayer->config.destination_address = wps_mac->current_timeslot->connection_auto_reply->destination_address;
 80091b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80091b8:	6853      	ldr	r3, [r2, #4]
 80091ba:	8859      	ldrh	r1, [r3, #2]
    xlayer->config.source_address      = wps_mac->current_timeslot->connection_auto_reply->source_address;
 80091bc:	881b      	ldrh	r3, [r3, #0]
    xlayer->config.destination_address = wps_mac->current_timeslot->connection_auto_reply->destination_address;
 80091be:	8041      	strh	r1, [r0, #2]
    xlayer->config.source_address      = wps_mac->current_timeslot->connection_auto_reply->source_address;
 80091c0:	8003      	strh	r3, [r0, #0]
        uint8_t payload_size = wps_mac->main_xlayer->frame.payload_end_it - wps_mac->main_xlayer->frame.payload_begin_it;
 80091c2:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
        uint8_t fallback_index = link_fallback_get_channel_index(&wps_mac->current_timeslot->connection_main->link_fallback, payload_size);
 80091c6:	6810      	ldr	r0, [r2, #0]
        uint8_t payload_size = wps_mac->main_xlayer->frame.payload_end_it - wps_mac->main_xlayer->frame.payload_begin_it;
 80091c8:	e9d3 311b 	ldrd	r3, r1, [r3, #108]	; 0x6c
 80091cc:	1ac9      	subs	r1, r1, r3
        uint8_t fallback_index = link_fallback_get_channel_index(&wps_mac->current_timeslot->connection_main->link_fallback, payload_size);
 80091ce:	b2c9      	uxtb	r1, r1
 80091d0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80091d4:	f7fb fe18 	bl	8004e08 <link_fallback_get_channel_index>
        wps_mac->auto_xlayer->config.channel = &wps_mac->current_timeslot->connection_main->channel[fallback_index][MULTI_RADIO_BASE_IDX][next_channel];
 80091d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
        wps_mac->auto_xlayer->config.packet_cfg = wps_mac->main_xlayer->config.packet_cfg;
 80091da:	f8d4 6190 	ldr.w	r6, [r4, #400]	; 0x190
        wps_mac->auto_xlayer->config.channel = &wps_mac->current_timeslot->connection_main->channel[fallback_index][MULTI_RADIO_BASE_IDX][next_channel];
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
 80091e4:	f8d3 1328 	ldr.w	r1, [r3, #808]	; 0x328
 80091e8:	012d      	lsls	r5, r5, #4
 80091ea:	f04f 0c50 	mov.w	ip, #80	; 0x50
 80091ee:	fb1c 5500 	smlabb	r5, ip, r0, r5
 80091f2:	4429      	add	r1, r5
 80091f4:	60d1      	str	r1, [r2, #12]
        wps_mac->auto_xlayer->config.packet_cfg = wps_mac->main_xlayer->config.packet_cfg;
 80091f6:	8ab1      	ldrh	r1, [r6, #20]
 80091f8:	8291      	strh	r1, [r2, #20]
        wps_mac->auto_xlayer->config.gain_loop = wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index];
 80091fa:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
	    wps_mac->auto_xlayer->config.fixed_payload_size_enable = wps_mac->main_xlayer->config.fixed_payload_size_enable;
 80091fe:	7db0      	ldrb	r0, [r6, #22]
 8009200:	7590      	strb	r0, [r2, #22]
        wps_mac->auto_xlayer->config.gain_loop = wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index];
 8009202:	2003      	movs	r0, #3
 8009204:	fb00 3301 	mla	r3, r0, r1, r3
 8009208:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800920c:	6113      	str	r3, [r2, #16]
    wps_mac->current_input = MAC_SIGNAL_PREPARE_FRAME;
 800920e:	2206      	movs	r2, #6
    wps_mac->state_process_idx   = 0;
 8009210:	2300      	movs	r3, #0
    wps_mac->current_input = MAC_SIGNAL_PREPARE_FRAME;
 8009212:	f884 2188 	strb.w	r2, [r4, #392]	; 0x188
    wps_mac->state_process_idx   = 0;
 8009216:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800921a:	bd70      	pop	{r4, r5, r6, pc}
            wps_mac->auto_xlayer = get_xlayer_for_tx(wps_mac, wps_mac->current_timeslot->connection_auto_reply);
 800921c:	6b63      	ldr	r3, [r4, #52]	; 0x34
            wps_mac->output_signal.auto_signal = MAC_SIGNAL_WPS_PREPARE_DONE;
 800921e:	2207      	movs	r2, #7
 8009220:	70e2      	strb	r2, [r4, #3]
            wps_mac->auto_xlayer = get_xlayer_for_tx(wps_mac, wps_mac->current_timeslot->connection_auto_reply);
 8009222:	6859      	ldr	r1, [r3, #4]
 8009224:	4620      	mov	r0, r4
 8009226:	f7ff fef3 	bl	8009010 <get_xlayer_for_tx>
 800922a:	f8c4 0194 	str.w	r0, [r4, #404]	; 0x194
            wps_mac->current_xlayer = wps_mac->auto_xlayer;
 800922e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8009232:	e7c0      	b.n	80091b6 <state_setup_prime_link+0x2e>
    if( wps_mac->auto_xlayer != NULL){
 8009234:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8009238:	2b00      	cmp	r3, #0
 800923a:	d0e8      	beq.n	800920e <state_setup_prime_link+0x86>
        uint8_t fallback_index = link_fallback_get_channel_index(&wps_mac->current_timeslot->connection_main->link_fallback, payload_size);
 800923c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800923e:	e7c0      	b.n	80091c2 <state_setup_prime_link+0x3a>

08009240 <state_scheduler>:
{
 8009240:	b570      	push	{r4, r5, r6, lr}
    link_scheduler_reset_sleep_time(&wps_mac->scheduler);
 8009242:	f100 053c 	add.w	r5, r0, #60	; 0x3c
{
 8009246:	b082      	sub	sp, #8
 8009248:	4604      	mov	r4, r0
    link_scheduler_reset_sleep_time(&wps_mac->scheduler);
 800924a:	4628      	mov	r0, r5
 800924c:	f7fb ff68 	bl	8005120 <link_scheduler_reset_sleep_time>
    inc_count = link_scheduler_increment_time_slot(&wps_mac->scheduler);
 8009250:	4628      	mov	r0, r5
 8009252:	f7fb fefb 	bl	800504c <link_scheduler_increment_time_slot>
 8009256:	4606      	mov	r6, r0
 *  @param[in] wps_mac    WPS MAC instance.
 *  @param[in] inc_count  Increment count.
 */
static void handle_link_throttle(wps_mac_t *wps_mac, uint8_t *inc_count)
{
    timeslot_t *candidate_timeslot = link_scheduler_get_current_timeslot(&wps_mac->scheduler);
 8009258:	4628      	mov	r0, r5
 800925a:	f7fb ff4d 	bl	80050f8 <link_scheduler_get_current_timeslot>

    if (candidate_timeslot->connection_main->pattern != NULL) {
 800925e:	6802      	ldr	r2, [r0, #0]
 8009260:	f8d2 12f0 	ldr.w	r1, [r2, #752]	; 0x2f0
 8009264:	b161      	cbz	r1, 8009280 <state_scheduler+0x40>
        uint8_t total_pattern_count = candidate_timeslot->connection_main->pattern_total_count;
        uint8_t current_pattern_count = (candidate_timeslot->connection_main->pattern_count + 1) % total_pattern_count;
 8009266:	f892 32ec 	ldrb.w	r3, [r2, #748]	; 0x2ec
 800926a:	f892 02ee 	ldrb.w	r0, [r2, #750]	; 0x2ee
 800926e:	3301      	adds	r3, #1
 8009270:	fbb3 fcf0 	udiv	ip, r3, r0
 8009274:	fb00 331c 	mls	r3, r0, ip, r3
 8009278:	f882 32ec 	strb.w	r3, [r2, #748]	; 0x2ec

        candidate_timeslot->connection_main->pattern_count = current_pattern_count;
        if (candidate_timeslot->connection_main->pattern[current_pattern_count] == 0) {
 800927c:	5ccb      	ldrb	r3, [r1, r3]
 800927e:	b31b      	cbz	r3, 80092c8 <state_scheduler+0x88>
    link_channel_hopping_increment_sequence(&wps_mac->channel_hopping, inc_count);
 8009280:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8009284:	4631      	mov	r1, r6
 8009286:	9001      	str	r0, [sp, #4]
 8009288:	f7fb fd9a 	bl	8004dc0 <link_channel_hopping_increment_sequence>
    wps_mac->current_channel_index = link_channel_hopping_get_channel(&wps_mac->channel_hopping);
 800928c:	9801      	ldr	r0, [sp, #4]
 800928e:	f7fb fdaf 	bl	8004df0 <link_channel_hopping_get_channel>
 8009292:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    wps_mac->current_timeslot      = link_scheduler_get_current_timeslot(&wps_mac->scheduler);
 8009296:	4628      	mov	r0, r5
 8009298:	f7fb ff2e 	bl	80050f8 <link_scheduler_get_current_timeslot>
    return (wps_mac->current_timeslot->connection_auto_reply != NULL);
 800929c:	6843      	ldr	r3, [r0, #4]
    wps_mac->current_timeslot      = link_scheduler_get_current_timeslot(&wps_mac->scheduler);
 800929e:	6360      	str	r0, [r4, #52]	; 0x34
    if (is_current_timeslot_prime(wps_mac)) {
 80092a0:	b363      	cbz	r3, 80092fc <state_scheduler+0xbc>
        if (is_current_prime_timeslot_tx(wps_mac)) {
 80092a2:	8819      	ldrh	r1, [r3, #0]
 80092a4:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
        wps_mac->current_ts_prime    = true;
 80092a8:	2301      	movs	r3, #1
        if (is_current_prime_timeslot_tx(wps_mac)) {
 80092aa:	4291      	cmp	r1, r2
        wps_mac->current_ts_prime    = true;
 80092ac:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
            wps_mac->current_ts_prime_tx = false;
 80092b0:	bf18      	it	ne
 80092b2:	2300      	movne	r3, #0
 80092b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    wps_mac->current_input     = MAC_SIGNAL_SETUP_LINK;
 80092b8:	2207      	movs	r2, #7
    wps_mac->state_process_idx = 0;
 80092ba:	2300      	movs	r3, #0
    wps_mac->current_input     = MAC_SIGNAL_SETUP_LINK;
 80092bc:	f884 2188 	strb.w	r2, [r4, #392]	; 0x188
    wps_mac->state_process_idx = 0;
 80092c0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 80092c4:	b002      	add	sp, #8
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
            do {
                *inc_count += link_scheduler_increment_time_slot(&wps_mac->scheduler);
 80092c8:	4628      	mov	r0, r5
 80092ca:	f7fb febf 	bl	800504c <link_scheduler_increment_time_slot>
 80092ce:	1981      	adds	r1, r0, r6
                candidate_timeslot = link_scheduler_get_current_timeslot(&wps_mac->scheduler);
 80092d0:	4628      	mov	r0, r5
                *inc_count += link_scheduler_increment_time_slot(&wps_mac->scheduler);
 80092d2:	b2ce      	uxtb	r6, r1
                candidate_timeslot = link_scheduler_get_current_timeslot(&wps_mac->scheduler);
 80092d4:	f7fb ff10 	bl	80050f8 <link_scheduler_get_current_timeslot>
                total_pattern_count = candidate_timeslot->connection_main->pattern_total_count;
 80092d8:	6802      	ldr	r2, [r0, #0]
                current_pattern_count = (candidate_timeslot->connection_main->pattern_count + 1) % total_pattern_count;
 80092da:	f892 32ec 	ldrb.w	r3, [r2, #748]	; 0x2ec
 80092de:	f892 12ee 	ldrb.w	r1, [r2, #750]	; 0x2ee
                candidate_timeslot->connection_main->pattern_count = current_pattern_count;
            } while (candidate_timeslot->connection_main->pattern[current_pattern_count] == 0);
 80092e2:	f8d2 02f0 	ldr.w	r0, [r2, #752]	; 0x2f0
                current_pattern_count = (candidate_timeslot->connection_main->pattern_count + 1) % total_pattern_count;
 80092e6:	3301      	adds	r3, #1
 80092e8:	fbb3 fcf1 	udiv	ip, r3, r1
 80092ec:	fb01 331c 	mls	r3, r1, ip, r3
 80092f0:	f882 32ec 	strb.w	r3, [r2, #748]	; 0x2ec
            } while (candidate_timeslot->connection_main->pattern[current_pattern_count] == 0);
 80092f4:	5cc3      	ldrb	r3, [r0, r3]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0e6      	beq.n	80092c8 <state_scheduler+0x88>
 80092fa:	e7c1      	b.n	8009280 <state_scheduler+0x40>
        wps_mac->current_ts_prime    = false;
 80092fc:	8723      	strh	r3, [r4, #56]	; 0x38
 80092fe:	e7db      	b.n	80092b8 <state_scheduler+0x78>

08009300 <state_sync>:
{
 8009300:	b530      	push	{r4, r5, lr}
    if (wps_mac->output_signal.main_signal == MAC_SIGNAL_SYNCING) {
 8009302:	7883      	ldrb	r3, [r0, #2]
 8009304:	2b08      	cmp	r3, #8
{
 8009306:	b083      	sub	sp, #12
 8009308:	4604      	mov	r4, r0
    if (wps_mac->output_signal.main_signal == MAC_SIGNAL_SYNCING) {
 800930a:	d103      	bne.n	8009314 <state_sync+0x14>
        wps_mac->current_xlayer->config.rx_wait_time = 0;
 800930c:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
 8009310:	2200      	movs	r2, #0
 8009312:	841a      	strh	r2, [r3, #32]
    if (is_network_node(wps_mac)) {
 8009314:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8009318:	2b01      	cmp	r3, #1
 800931a:	d001      	beq.n	8009320 <state_sync+0x20>
}
 800931c:	b003      	add	sp, #12
 800931e:	bd30      	pop	{r4, r5, pc}
        if ((!wps_mac->current_ts_prime) || (wps_mac->current_ts_prime_tx)) {
 8009320:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8009324:	b11b      	cbz	r3, 800932e <state_sync+0x2e>
 8009326:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0f6      	beq.n	800931c <state_sync+0x1c>
            if (!link_tdma_sync_is_slave_synced(&wps_mac->tdma_sync)) {
 800932e:	f104 0564 	add.w	r5, r4, #100	; 0x64
 8009332:	4628      	mov	r0, r5
 8009334:	f7fc f8e8 	bl	8005508 <link_tdma_sync_is_slave_synced>
 8009338:	b198      	cbz	r0, 8009362 <state_sync+0x62>
            } else if (wps_mac->current_timeslot->connection_main->source_address == wps_mac->syncing_address) {
 800933a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800933c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	8819      	ldrh	r1, [r3, #0]
 8009344:	4291      	cmp	r1, r2
 8009346:	d1e9      	bne.n	800931c <state_sync+0x1c>
                                            wps_mac->current_xlayer->frame.frame_outcome,
 8009348:	f8d4 018c 	ldr.w	r0, [r4, #396]	; 0x18c
                link_tdma_sync_slave_adjust(&wps_mac->tdma_sync,
 800934c:	8c02      	ldrh	r2, [r0, #32]
 800934e:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
 8009352:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8009356:	9000      	str	r0, [sp, #0]
 8009358:	33f8      	adds	r3, #248	; 0xf8
 800935a:	4628      	mov	r0, r5
 800935c:	f7fc f812 	bl	8005384 <link_tdma_sync_slave_adjust>
}
 8009360:	e7dc      	b.n	800931c <state_sync+0x1c>
                                         &wps_mac->current_timeslot->connection_main->cca,
 8009362:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                          wps_mac->current_xlayer->frame.frame_outcome,
 8009364:	f8d4 018c 	ldr.w	r0, [r4, #396]	; 0x18c
                link_tdma_sync_slave_find(&wps_mac->tdma_sync,
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	8c02      	ldrh	r2, [r0, #32]
 800936c:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
 8009370:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8009374:	9000      	str	r0, [sp, #0]
 8009376:	33f8      	adds	r3, #248	; 0xf8
 8009378:	4628      	mov	r0, r5
 800937a:	f7fc f865 	bl	8005448 <link_tdma_sync_slave_find>
 800937e:	e7cd      	b.n	800931c <state_sync+0x1c>

08009380 <state_setup_primary_link>:
{
 8009380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009382:	4604      	mov	r4, r0
    uint32_t next_channel = link_channel_hopping_get_channel(&wps_mac->channel_hopping);
 8009384:	304c      	adds	r0, #76	; 0x4c
 8009386:	f7fb fd33 	bl	8004df0 <link_channel_hopping_get_channel>
 800938a:	4605      	mov	r5, r0
    uint16_t rdo_value    = link_rdo_get_offset(&wps_mac->link_rdo);
 800938c:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
 8009390:	f7fb fdee 	bl	8004f70 <link_rdo_get_offset>
    return (wps_mac->current_timeslot->connection_main->source_address == wps_mac->local_address);
 8009394:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if (is_current_timeslot_tx(wps_mac)) {
 8009396:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    return (wps_mac->current_timeslot->connection_main->source_address == wps_mac->local_address);
 800939a:	6812      	ldr	r2, [r2, #0]
    if (is_current_timeslot_tx(wps_mac)) {
 800939c:	8812      	ldrh	r2, [r2, #0]
 800939e:	429a      	cmp	r2, r3
    uint16_t rdo_value    = link_rdo_get_offset(&wps_mac->link_rdo);
 80093a0:	4607      	mov	r7, r0
                                 link_scheduler_get_sleep_time(&wps_mac->scheduler) + rdo_value,
 80093a2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    if (is_current_timeslot_tx(wps_mac)) {
 80093a6:	f000 8085 	beq.w	80094b4 <state_setup_primary_link+0x134>
                                 link_scheduler_get_sleep_time(&wps_mac->scheduler) + rdo_value,
 80093aa:	f7fb feaf 	bl	800510c <link_scheduler_get_sleep_time>
                                 &wps_mac->current_timeslot->connection_main->cca);
 80093ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
        link_tdma_sync_update_rx(&wps_mac->tdma_sync,
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	f104 0664 	add.w	r6, r4, #100	; 0x64
 80093b6:	1839      	adds	r1, r7, r0
 80093b8:	32f8      	adds	r2, #248	; 0xf8
 80093ba:	4630      	mov	r0, r6
 80093bc:	f7fb ff98 	bl	80052f0 <link_tdma_sync_update_rx>
        wps_mac->main_xlayer               = get_xlayer_for_rx(wps_mac, wps_mac->current_timeslot->connection_main);
 80093c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
        wps_mac->output_signal.main_signal = MAC_SIGNAL_WPS_PREPARE_DONE;
 80093c2:	2207      	movs	r2, #7
 80093c4:	8062      	strh	r2, [r4, #2]
        wps_mac->main_xlayer               = get_xlayer_for_rx(wps_mac, wps_mac->current_timeslot->connection_main);
 80093c6:	6819      	ldr	r1, [r3, #0]
 80093c8:	4620      	mov	r0, r4
 80093ca:	f7ff fea9 	bl	8009120 <get_xlayer_for_rx>
        wps_mac->auto_xlayer               = NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	e9c4 0364 	strd	r0, r3, [r4, #400]	; 0x190
        if ((!link_tdma_sync_is_slave_synced(&wps_mac->tdma_sync)) &&
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7fc f897 	bl	8005508 <link_tdma_sync_is_slave_synced>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d05c      	beq.n	8009498 <state_setup_primary_link+0x118>
    uint8_t fallback_index = link_fallback_get_channel_index(&wps_mac->current_timeslot->connection_main->link_fallback, payload_size);
 80093de:	6b62      	ldr	r2, [r4, #52]	; 0x34
    uint8_t payload_size = wps_mac->main_xlayer->frame.payload_end_it - wps_mac->main_xlayer->frame.payload_begin_it;
 80093e0:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    uint8_t fallback_index = link_fallback_get_channel_index(&wps_mac->current_timeslot->connection_main->link_fallback, payload_size);
 80093e4:	6810      	ldr	r0, [r2, #0]
    uint8_t payload_size = wps_mac->main_xlayer->frame.payload_end_it - wps_mac->main_xlayer->frame.payload_begin_it;
 80093e6:	e9d3 311b 	ldrd	r3, r1, [r3, #108]	; 0x6c
 80093ea:	1ac9      	subs	r1, r1, r3
    uint8_t fallback_index = link_fallback_get_channel_index(&wps_mac->current_timeslot->connection_main->link_fallback, payload_size);
 80093ec:	b2c9      	uxtb	r1, r1
 80093ee:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80093f2:	f7fb fd09 	bl	8004e08 <link_fallback_get_channel_index>
    wps_mac->main_xlayer->config.channel = &wps_mac->current_timeslot->connection_main->channel[fallback_index][MULTI_RADIO_BASE_IDX][next_channel];
 80093f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2150      	movs	r1, #80	; 0x50
 80093fc:	f8d3 2328 	ldr.w	r2, [r3, #808]	; 0x328
 8009400:	012d      	lsls	r5, r5, #4
 8009402:	fb11 5500 	smlabb	r5, r1, r0, r5
 8009406:	442a      	add	r2, r5
 8009408:	f8d4 5190 	ldr.w	r5, [r4, #400]	; 0x190
    wps_mac->main_xlayer->config.packet_cfg = wps_mac->current_timeslot->connection_main->packet_cfg;
 800940c:	f8b3 132c 	ldrh.w	r1, [r3, #812]	; 0x32c
 8009410:	82a9      	strh	r1, [r5, #20]
    wps_mac->main_xlayer->config.channel = &wps_mac->current_timeslot->connection_main->channel[fallback_index][MULTI_RADIO_BASE_IDX][next_channel];
 8009412:	60ea      	str	r2, [r5, #12]
    wps_mac->main_xlayer->config.cca_threshold   = wps_mac->current_timeslot->connection_main->cca.threshold;
 8009414:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
 8009418:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23
    wps_mac->main_xlayer->config.cca_retry_time  = wps_mac->current_timeslot->connection_main->cca.retry_time_pll_cycles;
 800941c:	f8b3 20fc 	ldrh.w	r2, [r3, #252]	; 0xfc
 8009420:	84aa      	strh	r2, [r5, #36]	; 0x24
    wps_mac->main_xlayer->config.cca_max_try_count = wps_mac->current_timeslot->connection_main->cca.max_try_count;
 8009422:	f893 20f9 	ldrb.w	r2, [r3, #249]	; 0xf9
 8009426:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
    wps_mac->main_xlayer->config.cca_try_count = 0;
 800942a:	2200      	movs	r2, #0
 800942c:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
    wps_mac->main_xlayer->config.cca_fail_action = wps_mac->current_timeslot->connection_main->cca.fail_action;
 8009430:	f893 20fa 	ldrb.w	r2, [r3, #250]	; 0xfa
 8009434:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
    wps_mac->main_xlayer->config.sleep_level = wps_mac->tdma_sync.sleep_mode;
 8009438:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800943c:	86aa      	strh	r2, [r5, #52]	; 0x34
    wps_mac->main_xlayer->config.gain_loop = wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index];
 800943e:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 8009442:	2103      	movs	r1, #3
 8009444:	fb01 3202 	mla	r2, r1, r2, r3
 8009448:	f502 723d 	add.w	r2, r2, #756	; 0x2f4
 800944c:	612a      	str	r2, [r5, #16]
    wps_mac->main_xlayer->config.fixed_payload_size_enable = wps_mac->current_timeslot->connection_main->fixed_payload_size_enable;
 800944e:	791a      	ldrb	r2, [r3, #4]
 8009450:	75aa      	strb	r2, [r5, #22]
    wps_mac->main_xlayer->config.phases_info = &wps_mac->phase_data.local_phases_info;
 8009452:	f504 72d9 	add.w	r2, r4, #434	; 0x1b2
 8009456:	63aa      	str	r2, [r5, #56]	; 0x38
    wps_mac->main_xlayer->config.isi_mitig = wps_mac->tdma_sync.isi_mitig;
 8009458:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 800945c:	87ea      	strh	r2, [r5, #62]	; 0x3e
    xlayer->config.destination_address = wps_mac->current_timeslot->connection_main->destination_address;
 800945e:	885a      	ldrh	r2, [r3, #2]
 8009460:	806a      	strh	r2, [r5, #2]
    xlayer->config.source_address      = wps_mac->current_timeslot->connection_main->source_address;
 8009462:	881a      	ldrh	r2, [r3, #0]
    xlayer->config.expect_ack          = wps_mac->current_timeslot->connection_main->ack_enable;
 8009464:	7a1b      	ldrb	r3, [r3, #8]
 8009466:	712b      	strb	r3, [r5, #4]
    xlayer->config.source_address      = wps_mac->current_timeslot->connection_main->source_address;
 8009468:	802a      	strh	r2, [r5, #0]
    current_xlayer->config.power_up_delay = link_tdma_sync_get_pwr_up(&wps_mac->tdma_sync);
 800946a:	4630      	mov	r0, r6
 800946c:	f7fc f84a 	bl	8005504 <link_tdma_sync_get_pwr_up>
 8009470:	8328      	strh	r0, [r5, #24]
    current_xlayer->config.rx_timeout     = link_tdma_sync_get_timeout(&wps_mac->tdma_sync);
 8009472:	4630      	mov	r0, r6
 8009474:	f7fc f844 	bl	8005500 <link_tdma_sync_get_timeout>
 8009478:	8368      	strh	r0, [r5, #26]
    current_xlayer->config.sleep_time     = link_tdma_sync_get_sleep_cycles(&wps_mac->tdma_sync);
 800947a:	4630      	mov	r0, r6
 800947c:	f7fc f83e 	bl	80054fc <link_tdma_sync_get_sleep_cycles>
    current_xlayer->config.fec        = wps_mac->current_timeslot->connection_main->frame_cfg.fec;
 8009480:	6b62      	ldr	r2, [r4, #52]	; 0x34
    update_xlayer_modem_feat(wps_mac, wps_mac->main_xlayer);
 8009482:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    current_xlayer->config.fec        = wps_mac->current_timeslot->connection_main->frame_cfg.fec;
 8009486:	6812      	ldr	r2, [r2, #0]
    current_xlayer->config.sleep_time     = link_tdma_sync_get_sleep_cycles(&wps_mac->tdma_sync);
 8009488:	61e8      	str	r0, [r5, #28]
    current_xlayer->config.fec        = wps_mac->current_timeslot->connection_main->frame_cfg.fec;
 800948a:	f8b2 1322 	ldrh.w	r1, [r2, #802]	; 0x322
    current_xlayer->config.modulation = wps_mac->current_timeslot->connection_main->frame_cfg.modulation;
 800948e:	f8b2 2320 	ldrh.w	r2, [r2, #800]	; 0x320
 8009492:	80da      	strh	r2, [r3, #6]
    current_xlayer->config.fec        = wps_mac->current_timeslot->connection_main->frame_cfg.fec;
 8009494:	8119      	strh	r1, [r3, #8]
}
 8009496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((!link_tdma_sync_is_slave_synced(&wps_mac->tdma_sync)) &&
 8009498:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800949c:	2b01      	cmp	r3, #1
 800949e:	d19e      	bne.n	80093de <state_setup_primary_link+0x5e>
             wps_mac->current_timeslot->connection_main->source_address == wps_mac->syncing_address &&
 80094a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094a2:	6818      	ldr	r0, [r3, #0]
            (wps_mac->node_role == NETWORK_NODE) &&
 80094a4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80094a8:	8802      	ldrh	r2, [r0, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d01d      	beq.n	80094ea <state_setup_primary_link+0x16a>
    uint8_t payload_size = wps_mac->main_xlayer->frame.payload_end_it - wps_mac->main_xlayer->frame.payload_begin_it;
 80094ae:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
 80094b2:	e798      	b.n	80093e6 <state_setup_primary_link+0x66>
                                 link_scheduler_get_sleep_time(&wps_mac->scheduler) + rdo_value,
 80094b4:	f7fb fe2a 	bl	800510c <link_scheduler_get_sleep_time>
                                &wps_mac->current_timeslot->connection_main->cca);
 80094b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
        link_tdma_sync_update_tx(&wps_mac->tdma_sync,
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	f104 0664 	add.w	r6, r4, #100	; 0x64
 80094c0:	1839      	adds	r1, r7, r0
 80094c2:	32f8      	adds	r2, #248	; 0xf8
 80094c4:	4630      	mov	r0, r6
 80094c6:	f7fb fecb 	bl	8005260 <link_tdma_sync_update_tx>
        wps_mac->main_xlayer = get_xlayer_for_tx(wps_mac, wps_mac->current_timeslot->connection_main);
 80094ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094cc:	4620      	mov	r0, r4
 80094ce:	6819      	ldr	r1, [r3, #0]
 80094d0:	f7ff fd9e 	bl	8009010 <get_xlayer_for_tx>
        wps_mac->auto_xlayer = NULL;
 80094d4:	2200      	movs	r2, #0
 80094d6:	e9c4 0264 	strd	r0, r2, [r4, #400]	; 0x190
        wps_mac->output_signal.main_signal = MAC_SIGNAL_WPS_PREPARE_DONE;
 80094da:	2207      	movs	r2, #7
 80094dc:	8062      	strh	r2, [r4, #2]
    uint8_t fallback_index = link_fallback_get_channel_index(&wps_mac->current_timeslot->connection_main->link_fallback, payload_size);
 80094de:	6b62      	ldr	r2, [r4, #52]	; 0x34
        wps_mac->current_xlayer = wps_mac->main_xlayer;
 80094e0:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
        wps_mac->main_xlayer = get_xlayer_for_tx(wps_mac, wps_mac->current_timeslot->connection_main);
 80094e4:	4603      	mov	r3, r0
    uint8_t fallback_index = link_fallback_get_channel_index(&wps_mac->current_timeslot->connection_main->link_fallback, payload_size);
 80094e6:	6810      	ldr	r0, [r2, #0]
 80094e8:	e77d      	b.n	80093e6 <state_setup_primary_link+0x66>
             wps_mac->current_timeslot->connection_main->source_address == wps_mac->syncing_address &&
 80094ea:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d0dd      	beq.n	80094ae <state_setup_primary_link+0x12e>
            link_gain_loop_reset_gain_index(wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index]);
 80094f2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80094f6:	2203      	movs	r2, #3
 80094f8:	fb02 0003 	mla	r0, r2, r3, r0
 80094fc:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
 8009500:	f7fb fe56 	bl	80051b0 <link_gain_loop_reset_gain_index>
            wps_mac->output_signal.main_signal = MAC_SIGNAL_SYNCING;
 8009504:	2308      	movs	r3, #8
    uint8_t fallback_index = link_fallback_get_channel_index(&wps_mac->current_timeslot->connection_main->link_fallback, payload_size);
 8009506:	6b62      	ldr	r2, [r4, #52]	; 0x34
            wps_mac->output_signal.main_signal = MAC_SIGNAL_SYNCING;
 8009508:	70a3      	strb	r3, [r4, #2]
    uint8_t fallback_index = link_fallback_get_channel_index(&wps_mac->current_timeslot->connection_main->link_fallback, payload_size);
 800950a:	6810      	ldr	r0, [r2, #0]
    uint8_t payload_size = wps_mac->main_xlayer->frame.payload_end_it - wps_mac->main_xlayer->frame.payload_begin_it;
 800950c:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
 8009510:	e769      	b.n	80093e6 <state_setup_primary_link+0x66>
 8009512:	bf00      	nop

08009514 <link_lqi_update.constprop.0>:
 *  @param[in] rnsi           Receiver noise strength indicator.
 *  @param[in] gain_index     Gain index.
 *  @param[in] lqi            LQI object.
 *  @return None.
 */
static inline void link_lqi_update(lqi_t *lqi, uint8_t gain_index, frame_outcome_t frame_outcome, uint8_t rssi, uint8_t rnsi, uint8_t *phase_offset)
 8009514:	b5f0      	push	{r4, r5, r6, r7, lr}
{
    (void)phase_offset;
    switch (lqi->mode) {
 8009516:	f890 e000 	ldrb.w	lr, [r0]
static inline void link_lqi_update(lqi_t *lqi, uint8_t gain_index, frame_outcome_t frame_outcome, uint8_t rssi, uint8_t rnsi, uint8_t *phase_offset)
 800951a:	b083      	sub	sp, #12
    switch (lqi->mode) {
 800951c:	f1be 0f01 	cmp.w	lr, #1
static inline void link_lqi_update(lqi_t *lqi, uint8_t gain_index, frame_outcome_t frame_outcome, uint8_t rssi, uint8_t rnsi, uint8_t *phase_offset)
 8009520:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8009524:	4604      	mov	r4, r0
    switch (lqi->mode) {
 8009526:	d006      	beq.n	8009536 <link_lqi_update.constprop.0+0x22>
    case LQI_MODE_0:
        link_lqi_update_mode_0(lqi, gain_index, frame_outcome, rssi, rnsi);
 8009528:	9700      	str	r7, [sp, #0]
 800952a:	f7ff fcdb 	bl	8008ee4 <link_lqi_update_mode_0>
    default:
        link_lqi_update_mode_0(lqi, gain_index, frame_outcome, rssi, rnsi);
    }

    /* Total count overflow */
    if (!lqi->total_count) {
 800952e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009530:	b183      	cbz	r3, 8009554 <link_lqi_update.constprop.0+0x40>
        link_lqi_reset(lqi);
    }
}
 8009532:	b003      	add	sp, #12
 8009534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009536:	461d      	mov	r5, r3
    lqi->total_count++;
 8009538:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800953a:	4694      	mov	ip, r2
 800953c:	3301      	adds	r3, #1
 800953e:	460e      	mov	r6, r1
 8009540:	6303      	str	r3, [r0, #48]	; 0x30
    switch (frame_outcome) {
 8009542:	f1bc 0f06 	cmp.w	ip, #6
 8009546:	d8f3      	bhi.n	8009530 <link_lqi_update.constprop.0+0x1c>
 8009548:	e8df f00c 	tbb	[pc, ip]
 800954c:	4a464217 	.word	0x4a464217
 8009550:	0c0c      	.short	0x0c0c
 8009552:	13          	.byte	0x13
 8009553:	00          	.byte	0x00
    memset(lqi, 0, sizeof(lqi_t));
 8009554:	2240      	movs	r2, #64	; 0x40
 8009556:	4619      	mov	r1, r3
 8009558:	4620      	mov	r0, r4
}
 800955a:	b003      	add	sp, #12
 800955c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    memset(lqi, 0, sizeof(lqi_t));
 8009560:	f008 bc2c 	b.w	8011dbc <memset>
        lqi->sent_count++;
 8009564:	6981      	ldr	r1, [r0, #24]
        lqi->nack_count++;
 8009566:	6a02      	ldr	r2, [r0, #32]
        lqi->sent_count++;
 8009568:	3101      	adds	r1, #1
        lqi->nack_count++;
 800956a:	3201      	adds	r2, #1
        lqi->sent_count++;
 800956c:	6181      	str	r1, [r0, #24]
        lqi->nack_count++;
 800956e:	6202      	str	r2, [r0, #32]
        break;
 8009570:	e7de      	b.n	8009530 <link_lqi_update.constprop.0+0x1c>
        lqi->sent_count++;
 8009572:	6982      	ldr	r2, [r0, #24]
 8009574:	3201      	adds	r2, #1
 8009576:	6182      	str	r2, [r0, #24]
 8009578:	e7da      	b.n	8009530 <link_lqi_update.constprop.0+0x1c>
        lqi->received_count++;
 800957a:	6a43      	ldr	r3, [r0, #36]	; 0x24
        lqi->inst_rnsi = rnsi;
 800957c:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
        lqi->received_count++;
 8009580:	3301      	adds	r3, #1
 8009582:	6243      	str	r3, [r0, #36]	; 0x24
        lqi->inst_rssi = rssi;
 8009584:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        lqi->inst_rnsi_tenth_db = calculate_normalized_gain(link_gain_loop_get_min_tenth_db(gain_index), rnsi);
 8009588:	4608      	mov	r0, r1
 800958a:	f7fb fe21 	bl	80051d0 <link_gain_loop_get_min_tenth_db>
 800958e:	f1c7 072f 	rsb	r7, r7, #47	; 0x2f
 8009592:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8009596:	4407      	add	r7, r0
 8009598:	8727      	strh	r7, [r4, #56]	; 0x38
        lqi->inst_rssi_tenth_db = calculate_normalized_gain(link_gain_loop_get_min_tenth_db(gain_index), rssi);
 800959a:	4630      	mov	r0, r6
 800959c:	f7fb fe18 	bl	80051d0 <link_gain_loop_get_min_tenth_db>
 80095a0:	f1c5 052f 	rsb	r5, r5, #47	; 0x2f
 80095a4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80095a8:	4428      	add	r0, r5
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 80095aa:	68a1      	ldr	r1, [r4, #8]
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 80095ac:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 80095b0:	b282      	uxth	r2, r0
 80095b2:	8f20      	ldrh	r0, [r4, #56]	; 0x38
        lqi->inst_rssi_tenth_db = calculate_normalized_gain(link_gain_loop_get_min_tenth_db(gain_index), rssi);
 80095b4:	86e2      	strh	r2, [r4, #54]	; 0x36
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 80095b6:	1889      	adds	r1, r1, r2
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 80095b8:	6962      	ldr	r2, [r4, #20]
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 80095ba:	60a1      	str	r1, [r4, #8]
 80095bc:	f145 0500 	adc.w	r5, r5, #0
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 80095c0:	181b      	adds	r3, r3, r0
 80095c2:	f142 0200 	adc.w	r2, r2, #0
 80095c6:	6123      	str	r3, [r4, #16]
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 80095c8:	60e5      	str	r5, [r4, #12]
    if (!lqi->total_count) {
 80095ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 80095cc:	6162      	str	r2, [r4, #20]
        break;
 80095ce:	e7af      	b.n	8009530 <link_lqi_update.constprop.0+0x1c>
        lqi->lost_count++;
 80095d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80095d2:	3201      	adds	r2, #1
 80095d4:	62c2      	str	r2, [r0, #44]	; 0x2c
        break;
 80095d6:	e7ab      	b.n	8009530 <link_lqi_update.constprop.0+0x1c>
        lqi->rejected_count++;
 80095d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80095da:	3201      	adds	r2, #1
 80095dc:	6282      	str	r2, [r0, #40]	; 0x28
        break;
 80095de:	e7a7      	b.n	8009530 <link_lqi_update.constprop.0+0x1c>
        lqi->sent_count++;
 80095e0:	6983      	ldr	r3, [r0, #24]
        lqi->inst_rnsi = rnsi;
 80095e2:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
        lqi->sent_count++;
 80095e6:	3301      	adds	r3, #1
 80095e8:	6183      	str	r3, [r0, #24]
        lqi->ack_count++;
 80095ea:	69c3      	ldr	r3, [r0, #28]
        lqi->inst_rssi = rssi;
 80095ec:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        lqi->ack_count++;
 80095f0:	3301      	adds	r3, #1
 80095f2:	61c3      	str	r3, [r0, #28]
        lqi->inst_rnsi_tenth_db = calculate_normalized_gain(link_gain_loop_get_min_tenth_db(gain_index), rnsi);
 80095f4:	4608      	mov	r0, r1
 80095f6:	f7fb fdeb 	bl	80051d0 <link_gain_loop_get_min_tenth_db>
 80095fa:	f1c7 072f 	rsb	r7, r7, #47	; 0x2f
 80095fe:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8009602:	4407      	add	r7, r0
 8009604:	8727      	strh	r7, [r4, #56]	; 0x38
        lqi->inst_rssi_tenth_db = calculate_normalized_gain(link_gain_loop_get_min_tenth_db(gain_index), rssi);
 8009606:	4630      	mov	r0, r6
 8009608:	f7fb fde2 	bl	80051d0 <link_gain_loop_get_min_tenth_db>
 800960c:	f1c5 052f 	rsb	r5, r5, #47	; 0x2f
 8009610:	eb05 0585 	add.w	r5, r5, r5, lsl #2
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 8009614:	68a3      	ldr	r3, [r4, #8]
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 8009616:	8f26      	ldrh	r6, [r4, #56]	; 0x38
 8009618:	4405      	add	r5, r0
 800961a:	b2ad      	uxth	r5, r5
 800961c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 8009620:	195a      	adds	r2, r3, r5
 8009622:	60a2      	str	r2, [r4, #8]
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 8009624:	6962      	ldr	r2, [r4, #20]
    if (!lqi->total_count) {
 8009626:	6b23      	ldr	r3, [r4, #48]	; 0x30
        lqi->inst_rssi_tenth_db = calculate_normalized_gain(link_gain_loop_get_min_tenth_db(gain_index), rssi);
 8009628:	86e5      	strh	r5, [r4, #54]	; 0x36
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 800962a:	f140 0000 	adc.w	r0, r0, #0
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 800962e:	1989      	adds	r1, r1, r6
 8009630:	f142 0200 	adc.w	r2, r2, #0
 8009634:	6121      	str	r1, [r4, #16]
        lqi->rssi_total_tenth_db += lqi->inst_rssi_tenth_db;
 8009636:	60e0      	str	r0, [r4, #12]
        lqi->rnsi_total_tenth_db += lqi->inst_rnsi_tenth_db;
 8009638:	6162      	str	r2, [r4, #20]
        break;
 800963a:	e779      	b.n	8009530 <link_lqi_update.constprop.0+0x1c>

0800963c <state_post_tx>:
{
 800963c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    frame_outcome_t  xlayer_outcome     = wps_mac->current_xlayer->frame.frame_outcome;
 8009640:	f8d0 518c 	ldr.w	r5, [r0, #396]	; 0x18c
    if (wps_mac->current_xlayer != &wps_mac->empty_frame_tx) {
 8009644:	f100 0198 	add.w	r1, r0, #152	; 0x98
 8009648:	428d      	cmp	r5, r1
    uint32_t         ack_rnsi           = wps_mac->current_xlayer->config.rnsi_raw;
 800964a:	e9d5 370b 	ldrd	r3, r7, [r5, #44]	; 0x2c
    frame_outcome_t  xlayer_outcome     = wps_mac->current_xlayer->frame.frame_outcome;
 800964e:	f895 8074 	ldrb.w	r8, [r5, #116]	; 0x74
{
 8009652:	b085      	sub	sp, #20
    if (wps_mac->current_xlayer != &wps_mac->empty_frame_tx) {
 8009654:	d05c      	beq.n	8009710 <state_post_tx+0xd4>
    return (wps_mac->current_input == MAC_SIGNAL_TX_SENT_ACK);
 8009656:	f890 2188 	ldrb.w	r2, [r0, #392]	; 0x188
        if (outcome_is_tx_sent_ack(wps_mac)) {
 800965a:	2a02      	cmp	r2, #2
 800965c:	d038      	beq.n	80096d0 <state_post_tx+0x94>
    return (wps_mac->current_timeslot->connection_main->source_address == wps_mac->local_address);
 800965e:	6b41      	ldr	r1, [r0, #52]	; 0x34
            if (is_current_timeslot_tx(wps_mac)) {
 8009660:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
    return (wps_mac->current_timeslot->connection_main->source_address == wps_mac->local_address);
 8009664:	680e      	ldr	r6, [r1, #0]
            if (is_current_timeslot_tx(wps_mac)) {
 8009666:	f8b6 c000 	ldrh.w	ip, [r6]
 800966a:	45a4      	cmp	ip, r4
 800966c:	d074      	beq.n	8009758 <state_post_tx+0x11c>
                xlayer_outcome                             = outcome_is_tx_not_sent(wps_mac) ? FRAME_WAIT : FRAME_SENT_ACK_LOST;
 800966e:	2a04      	cmp	r2, #4
 8009670:	f000 8087 	beq.w	8009782 <state_post_tx+0x146>
                current_connection                         = wps_mac->current_timeslot->connection_auto_reply;
 8009674:	684e      	ldr	r6, [r1, #4]
                current_gain_loop                          = wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 8009676:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
                    wps_mac->current_output = MAC_SIGNAL_WPS_TX_SUCCESS;
 800967a:	f04f 0804 	mov.w	r8, #4
 800967e:	f880 8189 	strb.w	r8, [r0, #393]	; 0x189
                current_gain_loop                          = wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 8009682:	2203      	movs	r2, #3
 8009684:	fb02 6404 	mla	r4, r2, r4, r6
                    wps_mac->current_xlayer->config.callback   = wps_mac->current_timeslot->connection_auto_reply->tx_success_callback_t;
 8009688:	f8d6 2330 	ldr.w	r2, [r6, #816]	; 0x330
 800968c:	642a      	str	r2, [r5, #64]	; 0x40
                    wps_mac->current_xlayer->config.parg_callback   = wps_mac->current_timeslot->connection_auto_reply->tx_success_parg_callback_t;
 800968e:	f8d6 2344 	ldr.w	r2, [r6, #836]	; 0x344
 8009692:	646a      	str	r2, [r5, #68]	; 0x44
                current_gain_loop                          = wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 8009694:	f504 743d 	add.w	r4, r4, #756	; 0x2f4
                current_lqi                                = &wps_mac->current_timeslot->connection_auto_reply->lqi;
 8009698:	f506 7984 	add.w	r9, r6, #264	; 0x108
        gain_index = link_gain_loop_get_gain_index(current_gain_loop);
 800969c:	4620      	mov	r0, r4
        link_lqi_update(&current_connection->used_frame_lqi, gain_index, xlayer_outcome, ack_rssi, ack_rnsi, ack_phase_offset);
 800969e:	b2fd      	uxtb	r5, r7
 80096a0:	b2df      	uxtb	r7, r3
        gain_index = link_gain_loop_get_gain_index(current_gain_loop);
 80096a2:	f7fb fd83 	bl	80051ac <link_gain_loop_get_gain_index>
        link_lqi_update(&current_connection->used_frame_lqi, gain_index, xlayer_outcome, ack_rssi, ack_rnsi, ack_phase_offset);
 80096a6:	9700      	str	r7, [sp, #0]
        gain_index = link_gain_loop_get_gain_index(current_gain_loop);
 80096a8:	4601      	mov	r1, r0
        link_lqi_update(&current_connection->used_frame_lqi, gain_index, xlayer_outcome, ack_rssi, ack_rnsi, ack_phase_offset);
 80096aa:	462b      	mov	r3, r5
 80096ac:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80096b0:	4642      	mov	r2, r8
 80096b2:	f7ff ff2f 	bl	8009514 <link_lqi_update.constprop.0>
    gain_index = link_gain_loop_get_gain_index(current_gain_loop);
 80096b6:	4620      	mov	r0, r4
 80096b8:	f7fb fd78 	bl	80051ac <link_gain_loop_get_gain_index>
    link_lqi_update(current_lqi, gain_index, xlayer_outcome, ack_rssi, ack_rnsi, ack_phase_offset);
 80096bc:	9700      	str	r7, [sp, #0]
    gain_index = link_gain_loop_get_gain_index(current_gain_loop);
 80096be:	4601      	mov	r1, r0
    link_lqi_update(current_lqi, gain_index, xlayer_outcome, ack_rssi, ack_rnsi, ack_phase_offset);
 80096c0:	462b      	mov	r3, r5
 80096c2:	4642      	mov	r2, r8
 80096c4:	4648      	mov	r0, r9
 80096c6:	f7ff ff25 	bl	8009514 <link_lqi_update.constprop.0>
}
 80096ca:	b005      	add	sp, #20
 80096cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            current_connection                            = wps_mac->current_timeslot->connection_main;
 80096d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
            if (is_current_timeslot_tx(wps_mac)) {
 80096d2:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
            current_connection                            = wps_mac->current_timeslot->connection_main;
 80096d6:	6816      	ldr	r6, [r2, #0]
            wps_mac->current_output                       = MAC_SIGNAL_WPS_TX_SUCCESS;
 80096d8:	2204      	movs	r2, #4
 80096da:	f880 2189 	strb.w	r2, [r0, #393]	; 0x189
            wps_mac->current_xlayer->config.callback      = wps_mac->current_timeslot->connection_main->tx_success_callback_t;
 80096de:	f8d6 2330 	ldr.w	r2, [r6, #816]	; 0x330
 80096e2:	642a      	str	r2, [r5, #64]	; 0x40
            wps_mac->current_xlayer->config.parg_callback = wps_mac->current_timeslot->connection_main->tx_success_parg_callback_t;
 80096e4:	f8d6 2344 	ldr.w	r2, [r6, #836]	; 0x344
 80096e8:	646a      	str	r2, [r5, #68]	; 0x44
            current_gain_loop                             = wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index];
 80096ea:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 80096ee:	2203      	movs	r2, #3
 80096f0:	fb02 6404 	mla	r4, r2, r4, r6
            if (is_current_timeslot_tx(wps_mac)) {
 80096f4:	8832      	ldrh	r2, [r6, #0]
 80096f6:	4291      	cmp	r1, r2
            current_gain_loop                             = wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index];
 80096f8:	f504 743d 	add.w	r4, r4, #756	; 0x2f4
            current_lqi                                   = &wps_mac->current_timeslot->connection_main->lqi;
 80096fc:	f506 7984 	add.w	r9, r6, #264	; 0x108
            if (is_current_timeslot_tx(wps_mac)) {
 8009700:	d1cc      	bne.n	800969c <state_post_tx+0x60>
                link_saw_arq_inc_seq_num(&wps_mac->current_timeslot->connection_main->stop_and_wait_arq);
 8009702:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
 8009706:	9303      	str	r3, [sp, #12]
 8009708:	f7fb fc7e 	bl	8005008 <link_saw_arq_inc_seq_num>
 800970c:	9b03      	ldr	r3, [sp, #12]
 800970e:	e7c5      	b.n	800969c <state_post_tx+0x60>
        wps_mac->current_output = MAC_SIGNAL_WPS_EMPTY;
 8009710:	2200      	movs	r2, #0
 8009712:	f880 2189 	strb.w	r2, [r0, #393]	; 0x189
        if (wps_mac->current_ts_prime_tx) {
 8009716:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800971a:	b17a      	cbz	r2, 800973c <state_post_tx+0x100>
            current_lqi            = &wps_mac->current_timeslot->connection_auto_reply->lqi;
 800971c:	6b41      	ldr	r1, [r0, #52]	; 0x34
            current_gain_loop = wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 800971e:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
            current_lqi            = &wps_mac->current_timeslot->connection_auto_reply->lqi;
 8009722:	684c      	ldr	r4, [r1, #4]
        link_lqi_update(&current_connection->used_frame_lqi, gain_index, xlayer_outcome, ack_rssi, ack_rnsi, ack_phase_offset);
 8009724:	b2fd      	uxtb	r5, r7
 8009726:	b2df      	uxtb	r7, r3
            current_gain_loop = wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 8009728:	2303      	movs	r3, #3
            current_lqi            = &wps_mac->current_timeslot->connection_auto_reply->lqi;
 800972a:	f504 7984 	add.w	r9, r4, #264	; 0x108
            current_gain_loop = wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 800972e:	fb03 4402 	mla	r4, r3, r2, r4
 8009732:	f504 743d 	add.w	r4, r4, #756	; 0x2f4
            xlayer_outcome         = FRAME_SENT_ACK_LOST;
 8009736:	f04f 0804 	mov.w	r8, #4
 800973a:	e7bc      	b.n	80096b6 <state_post_tx+0x7a>
            current_lqi            = &wps_mac->current_timeslot->connection_main->lqi;
 800973c:	6b42      	ldr	r2, [r0, #52]	; 0x34
                current_gain_loop = wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index];
 800973e:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
            current_lqi            = &wps_mac->current_timeslot->connection_main->lqi;
 8009742:	6812      	ldr	r2, [r2, #0]
        link_lqi_update(&current_connection->used_frame_lqi, gain_index, xlayer_outcome, ack_rssi, ack_rnsi, ack_phase_offset);
 8009744:	b2fd      	uxtb	r5, r7
 8009746:	b2df      	uxtb	r7, r3
                current_gain_loop = wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index];
 8009748:	2303      	movs	r3, #3
 800974a:	fb03 2404 	mla	r4, r3, r4, r2
            current_lqi            = &wps_mac->current_timeslot->connection_main->lqi;
 800974e:	f502 7984 	add.w	r9, r2, #264	; 0x108
                current_gain_loop = wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index];
 8009752:	f504 743d 	add.w	r4, r4, #756	; 0x2f4
 8009756:	e7ae      	b.n	80096b6 <state_post_tx+0x7a>
                if (!wps_mac->current_timeslot->connection_main->ack_enable) {
 8009758:	7a32      	ldrb	r2, [r6, #8]
 800975a:	bb42      	cbnz	r2, 80097ae <state_post_tx+0x172>
                    wps_mac->current_output = MAC_SIGNAL_WPS_TX_SUCCESS;
 800975c:	2204      	movs	r2, #4
 800975e:	f880 2189 	strb.w	r2, [r0, #393]	; 0x189
                    wps_mac->current_xlayer->config.callback = wps_mac->current_timeslot->connection_main->tx_success_callback_t;
 8009762:	f8d6 2330 	ldr.w	r2, [r6, #816]	; 0x330
 8009766:	642a      	str	r2, [r5, #64]	; 0x40
                    wps_mac->current_xlayer->config.parg_callback = wps_mac->current_timeslot->connection_main->tx_success_parg_callback_t;
 8009768:	f8d6 2344 	ldr.w	r2, [r6, #836]	; 0x344
 800976c:	646a      	str	r2, [r5, #68]	; 0x44
                current_gain_loop   = wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index];
 800976e:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8009772:	2203      	movs	r2, #3
 8009774:	fb02 6404 	mla	r4, r2, r4, r6
 8009778:	f504 743d 	add.w	r4, r4, #756	; 0x2f4
                current_lqi         = &wps_mac->current_timeslot->connection_main->lqi;
 800977c:	f506 7984 	add.w	r9, r6, #264	; 0x108
                current_channel_lqi = &wps_mac->current_timeslot->connection_main->channel_lqi[wps_mac->current_channel_index];
 8009780:	e78c      	b.n	800969c <state_post_tx+0x60>
                current_connection                         = wps_mac->current_timeslot->connection_auto_reply;
 8009782:	684e      	ldr	r6, [r1, #4]
                current_gain_loop                          = wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 8009784:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
                    wps_mac->current_output = MAC_SIGNAL_WPS_TX_FAIL;
 8009788:	2205      	movs	r2, #5
 800978a:	f880 2189 	strb.w	r2, [r0, #393]	; 0x189
                current_gain_loop                          = wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 800978e:	2203      	movs	r2, #3
 8009790:	fb02 6404 	mla	r4, r2, r4, r6
                    wps_mac->current_xlayer->config.callback   = wps_mac->current_timeslot->connection_auto_reply->tx_fail_callback_t;
 8009794:	f8d6 2334 	ldr.w	r2, [r6, #820]	; 0x334
 8009798:	642a      	str	r2, [r5, #64]	; 0x40
                    wps_mac->current_xlayer->config.parg_callback   = wps_mac->current_timeslot->connection_auto_reply->tx_fail_parg_callback_t;
 800979a:	f8d6 2348 	ldr.w	r2, [r6, #840]	; 0x348
 800979e:	646a      	str	r2, [r5, #68]	; 0x44
                current_gain_loop                          = wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 80097a0:	f504 743d 	add.w	r4, r4, #756	; 0x2f4
                xlayer_outcome                             = outcome_is_tx_not_sent(wps_mac) ? FRAME_WAIT : FRAME_SENT_ACK_LOST;
 80097a4:	f04f 0806 	mov.w	r8, #6
                current_lqi                                = &wps_mac->current_timeslot->connection_auto_reply->lqi;
 80097a8:	f506 7984 	add.w	r9, r6, #264	; 0x108
                    wps_mac->current_xlayer->config.parg_callback   = wps_mac->current_timeslot->connection_auto_reply->tx_fail_parg_callback_t;
 80097ac:	e776      	b.n	800969c <state_post_tx+0x60>
                    wps_mac->current_output = MAC_SIGNAL_WPS_TX_FAIL;
 80097ae:	2205      	movs	r2, #5
 80097b0:	f880 2189 	strb.w	r2, [r0, #393]	; 0x189
                    wps_mac->current_xlayer->config.callback   = wps_mac->current_timeslot->connection_main->tx_fail_callback_t;
 80097b4:	f8d6 2334 	ldr.w	r2, [r6, #820]	; 0x334
 80097b8:	642a      	str	r2, [r5, #64]	; 0x40
                    wps_mac->current_xlayer->config.parg_callback   = wps_mac->current_timeslot->connection_main->tx_fail_parg_callback_t;
 80097ba:	f8d6 2348 	ldr.w	r2, [r6, #840]	; 0x348
 80097be:	646a      	str	r2, [r5, #68]	; 0x44
 80097c0:	e7d5      	b.n	800976e <state_post_tx+0x132>
 80097c2:	bf00      	nop

080097c4 <state_link_quality>:
{
 80097c4:	b530      	push	{r4, r5, lr}
    return (wps_mac->current_ts_prime && !wps_mac->current_ts_prime_tx);
 80097c6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 80097ca:	b083      	sub	sp, #12
 80097cc:	4604      	mov	r4, r0
    return (wps_mac->current_ts_prime && !wps_mac->current_ts_prime_tx);
 80097ce:	b113      	cbz	r3, 80097d6 <state_link_quality+0x12>
 80097d0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80097d4:	b1db      	cbz	r3, 800980e <state_link_quality+0x4a>
        current_lqi         = &wps_mac->current_timeslot->connection_main->lqi;
 80097d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
        current_gain_loop   =  wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index];
 80097d8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
        current_lqi         = &wps_mac->current_timeslot->connection_main->lqi;
 80097dc:	6815      	ldr	r5, [r2, #0]
        current_gain_loop   =  wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index];
 80097de:	2003      	movs	r0, #3
 80097e0:	fb00 5303 	mla	r3, r0, r3, r5
 80097e4:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
        current_lqi         = &wps_mac->current_timeslot->connection_main->lqi;
 80097e8:	f505 7584 	add.w	r5, r5, #264	; 0x108
    gain_index = link_gain_loop_get_gain_index(current_gain_loop);
 80097ec:	f7fb fcde 	bl	80051ac <link_gain_loop_get_gain_index>
                    wps_mac->current_xlayer->frame.frame_outcome,
 80097f0:	f8d4 418c 	ldr.w	r4, [r4, #396]	; 0x18c
    gain_index = link_gain_loop_get_gain_index(current_gain_loop);
 80097f4:	4601      	mov	r1, r0
    link_lqi_update(current_lqi,
 80097f6:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80097fa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80097fe:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 8009802:	9000      	str	r0, [sp, #0]
 8009804:	4628      	mov	r0, r5
 8009806:	f7ff fe85 	bl	8009514 <link_lqi_update.constprop.0>
}
 800980a:	b003      	add	sp, #12
 800980c:	bd30      	pop	{r4, r5, pc}
        current_lqi         = &wps_mac->current_timeslot->connection_auto_reply->lqi;
 800980e:	6b42      	ldr	r2, [r0, #52]	; 0x34
        current_gain_loop   =  wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 8009810:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
        current_lqi         = &wps_mac->current_timeslot->connection_auto_reply->lqi;
 8009814:	6855      	ldr	r5, [r2, #4]
        current_gain_loop   =  wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 8009816:	2003      	movs	r0, #3
 8009818:	fb00 5303 	mla	r3, r0, r3, r5
 800981c:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
        current_lqi         = &wps_mac->current_timeslot->connection_auto_reply->lqi;
 8009820:	f505 7584 	add.w	r5, r5, #264	; 0x108
        current_gain_loop   =  wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 8009824:	e7e2      	b.n	80097ec <state_link_quality+0x28>
 8009826:	bf00      	nop

08009828 <state_post_rx>:
{
 8009828:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (outcome_is_frame_received(wps_mac)) {
 800982a:	f890 3188 	ldrb.w	r3, [r0, #392]	; 0x188
{
 800982e:	b083      	sub	sp, #12
 8009830:	4604      	mov	r4, r0
    if (outcome_is_frame_received(wps_mac)) {
 8009832:	2b00      	cmp	r3, #0
 8009834:	d17c      	bne.n	8009930 <state_post_rx+0x108>
        if (no_payload_received(wps_mac->current_xlayer)) {
 8009836:	f8d0 518c 	ldr.w	r5, [r0, #396]	; 0x18c
 800983a:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800983c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800983e:	4291      	cmp	r1, r2
 8009840:	d066      	beq.n	8009910 <state_post_rx+0xe8>
            wps_mac->current_output = MAC_SIGNAL_WPS_FRAME_RX_SUCCESS;
 8009842:	2301      	movs	r3, #1
 8009844:	f880 3189 	strb.w	r3, [r0, #393]	; 0x189
    current_queue->frame.header_begin_it = current_queue->frame.header_memory;
 8009848:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800984a:	6529      	str	r1, [r5, #80]	; 0x50
    if (current_queue->frame.header_begin_it != NULL) {
 800984c:	2900      	cmp	r1, #0
 800984e:	d073      	beq.n	8009938 <state_post_rx+0x110>
        if(wps_mac->current_ts_prime && !wps_mac->current_ts_prime_tx) {
 8009850:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
        current_queue->frame.header_begin_it++;
 8009854:	3101      	adds	r1, #1
 8009856:	6529      	str	r1, [r5, #80]	; 0x50
        if(wps_mac->current_ts_prime && !wps_mac->current_ts_prime_tx) {
 8009858:	b11b      	cbz	r3, 8009862 <state_post_rx+0x3a>
 800985a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800985e:	2b00      	cmp	r3, #0
 8009860:	d07e      	beq.n	8009960 <state_post_rx+0x138>
            link_protocol_receive_buffer(&wps_mac->current_timeslot->connection_main->link_protocol,
 8009862:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009864:	6818      	ldr	r0, [r3, #0]
 8009866:	7a82      	ldrb	r2, [r0, #10]
 8009868:	300c      	adds	r0, #12
 800986a:	f7fb fb39 	bl	8004ee0 <link_protocol_receive_buffer>
            wps_mac->current_xlayer->frame.header_begin_it += wps_mac->current_timeslot->connection_main->header_size;
 800986e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009870:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	7a91      	ldrb	r1, [r2, #10]
 8009878:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800987a:	4411      	add	r1, r2
 800987c:	6539      	str	r1, [r7, #80]	; 0x50
        current_queue->frame.payload_begin_it = current_queue->frame.header_begin_it;
 800987e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8009880:	66ea      	str	r2, [r5, #108]	; 0x6c
    return (current_queue->frame.header_begin_it == current_queue->frame.payload_end_it);
 8009882:	6f3a      	ldr	r2, [r7, #112]	; 0x70
            if (no_payload_received(wps_mac->current_xlayer)) {
 8009884:	428a      	cmp	r2, r1
                wps_mac->current_output = MAC_SIGNAL_WPS_EMPTY;
 8009886:	bf04      	itt	eq
 8009888:	2000      	moveq	r0, #0
 800988a:	f884 0189 	strbeq.w	r0, [r4, #393]	; 0x189
    return (wps_mac->current_ts_prime && !wps_mac->current_ts_prime_tx);
 800988e:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 8009892:	2800      	cmp	r0, #0
 8009894:	d053      	beq.n	800993e <state_post_rx+0x116>
 8009896:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 800989a:	2800      	cmp	r0, #0
 800989c:	d14f      	bne.n	800993e <state_post_rx+0x116>
                current_wps_lqi   = &wps_mac->current_timeslot->connection_auto_reply->used_frame_lqi;
 800989e:	685e      	ldr	r6, [r3, #4]
                current_gain_loop = wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 80098a0:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 80098a4:	2303      	movs	r3, #3
 80098a6:	fb03 6000 	mla	r0, r3, r0, r6
                wps_mac->current_xlayer->config.callback = wps_mac->current_timeslot->connection_auto_reply->rx_success_callback_t;
 80098aa:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 80098ae:	643b      	str	r3, [r7, #64]	; 0x40
                if (!no_payload_received(wps_mac->current_xlayer)) {
 80098b0:	428a      	cmp	r2, r1
                wps_mac->current_xlayer->config.parg_callback = wps_mac->current_timeslot->connection_auto_reply->rx_success_parg_callback_t;
 80098b2:	f8d6 3350 	ldr.w	r3, [r6, #848]	; 0x350
 80098b6:	647b      	str	r3, [r7, #68]	; 0x44
                current_gain_loop = wps_mac->current_timeslot->connection_auto_reply->gain_loop[wps_mac->current_channel_index];
 80098b8:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
                current_wps_lqi   = &wps_mac->current_timeslot->connection_auto_reply->used_frame_lqi;
 80098bc:	f506 76a4 	add.w	r6, r6, #328	; 0x148
                if (!no_payload_received(wps_mac->current_xlayer)) {
 80098c0:	d001      	beq.n	80098c6 <state_post_rx+0x9e>
                    wps_mac->output_signal.auto_signal = MAC_SIGNAL_WPS_FRAME_RX_SUCCESS;
 80098c2:	2301      	movs	r3, #1
 80098c4:	70e3      	strb	r3, [r4, #3]
            gain_index = link_gain_loop_get_gain_index(current_gain_loop);
 80098c6:	f7fb fc71 	bl	80051ac <link_gain_loop_get_gain_index>
            if (!no_payload_received(wps_mac->current_xlayer)) {
 80098ca:	f8d4 518c 	ldr.w	r5, [r4, #396]	; 0x18c
 80098ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80098d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80098d2:	429a      	cmp	r2, r3
            gain_index = link_gain_loop_get_gain_index(current_gain_loop);
 80098d4:	4601      	mov	r1, r0
            if (!no_payload_received(wps_mac->current_xlayer)) {
 80098d6:	d01d      	beq.n	8009914 <state_post_rx+0xec>
                link_lqi_update(current_wps_lqi,
 80098d8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80098dc:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
 80098e0:	f895 502c 	ldrb.w	r5, [r5, #44]	; 0x2c
 80098e4:	9500      	str	r5, [sp, #0]
 80098e6:	4630      	mov	r0, r6
 80098e8:	f7ff fe14 	bl	8009514 <link_lqi_update.constprop.0>
    return (wps_mac->current_xlayer == &wps_mac->empty_frame_rx);
 80098ec:	f8d4 518c 	ldr.w	r5, [r4, #396]	; 0x18c
 80098f0:	f504 7388 	add.w	r3, r4, #272	; 0x110
        if (no_space_available_for_rx(wps_mac)) {
 80098f4:	429d      	cmp	r5, r3
 80098f6:	d111      	bne.n	800991c <state_post_rx+0xf4>
            wps_mac->current_xlayer->config.callback = wps_mac->current_timeslot->connection_main->evt_callback_t;
 80098f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
            wps_mac->current_xlayer->config.parg_callback = wps_mac->current_timeslot->connection_main->evt_parg_callback_t;
 8009900:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
            wps_mac->current_output                  = MAC_SIGNAL_WPS_FRAME_RX_OVERRUN;
 8009904:	2203      	movs	r2, #3
            wps_mac->current_xlayer->config.parg_callback = wps_mac->current_timeslot->connection_main->evt_parg_callback_t;
 8009906:	e9c5 1310 	strd	r1, r3, [r5, #64]	; 0x40
            wps_mac->current_output                  = MAC_SIGNAL_WPS_FRAME_RX_OVERRUN;
 800990a:	f884 2189 	strb.w	r2, [r4, #393]	; 0x189
 800990e:	e005      	b.n	800991c <state_post_rx+0xf4>
            wps_mac->current_output = MAC_SIGNAL_WPS_EMPTY;
 8009910:	f880 3189 	strb.w	r3, [r0, #393]	; 0x189
    return (wps_mac->current_xlayer == &wps_mac->empty_frame_rx);
 8009914:	f504 7388 	add.w	r3, r4, #272	; 0x110
        if (no_space_available_for_rx(wps_mac)) {
 8009918:	429d      	cmp	r5, r3
 800991a:	d0ed      	beq.n	80098f8 <state_post_rx+0xd0>
    if (link_scheduler_get_mismatch(&wps_mac->scheduler)) {
 800991c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8009920:	f7fb fc06 	bl	8005130 <link_scheduler_get_mismatch>
 8009924:	b110      	cbz	r0, 800992c <state_post_rx+0x104>
        wps_mac->current_output = MAC_SIGNAL_WPS_EMPTY;
 8009926:	2300      	movs	r3, #0
 8009928:	f884 3189 	strb.w	r3, [r4, #393]	; 0x189
}
 800992c:	b003      	add	sp, #12
 800992e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        wps_mac->current_output = MAC_SIGNAL_WPS_FRAME_RX_FAIL;
 8009930:	2302      	movs	r3, #2
 8009932:	f880 3189 	strb.w	r3, [r0, #393]	; 0x189
 8009936:	e7f1      	b.n	800991c <state_post_rx+0xf4>
                current_wps_lqi   = &wps_mac->current_timeslot->connection_auto_reply->used_frame_lqi;
 8009938:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800993a:	462f      	mov	r7, r5
 800993c:	e7a1      	b.n	8009882 <state_post_rx+0x5a>
                current_wps_lqi                         = &wps_mac->current_timeslot->connection_main->used_frame_lqi;
 800993e:	681b      	ldr	r3, [r3, #0]
                current_gain_loop                       = wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index];
 8009940:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8009944:	2203      	movs	r2, #3
 8009946:	fb02 3000 	mla	r0, r2, r0, r3
                current_wps_lqi                         = &wps_mac->current_timeslot->connection_main->used_frame_lqi;
 800994a:	f503 76a4 	add.w	r6, r3, #328	; 0x148
                wps_mac->current_xlayer->config.callback = wps_mac->current_timeslot->connection_main->rx_success_callback_t;
 800994e:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
                wps_mac->current_xlayer->config.parg_callback = wps_mac->current_timeslot->connection_main->rx_success_parg_callback_t;
 8009952:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
                wps_mac->current_xlayer->config.callback = wps_mac->current_timeslot->connection_main->rx_success_callback_t;
 8009956:	643a      	str	r2, [r7, #64]	; 0x40
                current_gain_loop                       = wps_mac->current_timeslot->connection_main->gain_loop[wps_mac->current_channel_index];
 8009958:	f500 703d 	add.w	r0, r0, #756	; 0x2f4
                wps_mac->current_xlayer->config.parg_callback = wps_mac->current_timeslot->connection_main->rx_success_parg_callback_t;
 800995c:	647b      	str	r3, [r7, #68]	; 0x44
 800995e:	e7b2      	b.n	80098c6 <state_post_rx+0x9e>
            link_protocol_receive_buffer(&wps_mac->current_timeslot->connection_auto_reply->link_protocol,
 8009960:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009962:	6858      	ldr	r0, [r3, #4]
 8009964:	7a82      	ldrb	r2, [r0, #10]
 8009966:	300c      	adds	r0, #12
 8009968:	f7fb faba 	bl	8004ee0 <link_protocol_receive_buffer>
            wps_mac->current_xlayer->frame.header_begin_it += wps_mac->current_timeslot->connection_auto_reply->header_size;
 800996c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800996e:	f8d4 718c 	ldr.w	r7, [r4, #396]	; 0x18c
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009976:	7a92      	ldrb	r2, [r2, #10]
 8009978:	4411      	add	r1, r2
 800997a:	6539      	str	r1, [r7, #80]	; 0x50
 800997c:	e77f      	b.n	800987e <state_post_rx+0x56>
 800997e:	bf00      	nop

08009980 <state_mac_prepare_frame>:
    return (wps_mac->current_timeslot->connection_main->source_address == wps_mac->local_address);
 8009980:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (is_current_timeslot_tx(wps_mac) || wps_mac->current_ts_prime) {
 8009982:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
{
 8009986:	b530      	push	{r4, r5, lr}
    return (wps_mac->current_timeslot->connection_main->source_address == wps_mac->local_address);
 8009988:	6815      	ldr	r5, [r2, #0]
    if (is_current_timeslot_tx(wps_mac) || wps_mac->current_ts_prime) {
 800998a:	8829      	ldrh	r1, [r5, #0]
 800998c:	4299      	cmp	r1, r3
{
 800998e:	b083      	sub	sp, #12
    if (is_current_timeslot_tx(wps_mac) || wps_mac->current_ts_prime) {
 8009990:	d002      	beq.n	8009998 <state_mac_prepare_frame+0x18>
 8009992:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009996:	b1bb      	cbz	r3, 80099c8 <state_mac_prepare_frame+0x48>
        if (header_space_available(wps_mac->current_xlayer)) {
 8009998:	f8d0 418c 	ldr.w	r4, [r0, #396]	; 0x18c
    int8_t header_space_available = current_queue->frame.header_begin_it - current_queue->frame.header_memory;
 800999c:	6d21      	ldr	r1, [r4, #80]	; 0x50
    return (current_queue->frame.header_begin_it != NULL && (header_space_available >= current_queue->frame.header_memory_size));
 800999e:	b199      	cbz	r1, 80099c8 <state_mac_prepare_frame+0x48>
    int8_t header_space_available = current_queue->frame.header_begin_it - current_queue->frame.header_memory;
 80099a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    return (current_queue->frame.header_begin_it != NULL && (header_space_available >= current_queue->frame.header_memory_size));
 80099a2:	f894 c04c 	ldrb.w	ip, [r4, #76]	; 0x4c
    int8_t header_space_available = current_queue->frame.header_begin_it - current_queue->frame.header_memory;
 80099a6:	1acb      	subs	r3, r1, r3
    return (current_queue->frame.header_begin_it != NULL && (header_space_available >= current_queue->frame.header_memory_size));
 80099a8:	b25b      	sxtb	r3, r3
 80099aa:	4563      	cmp	r3, ip
 80099ac:	db0c      	blt.n	80099c8 <state_mac_prepare_frame+0x48>
            fill_header(wps_mac, wps_mac->current_xlayer);
 80099ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
    uint32_t size = 0;
 80099b2:	2000      	movs	r0, #0
 80099b4:	9001      	str	r0, [sp, #4]
    if(wps_mac->current_ts_prime_tx) {
 80099b6:	b14b      	cbz	r3, 80099cc <state_mac_prepare_frame+0x4c>
        current_queue->frame.header_begin_it -= wps_mac->current_timeslot->connection_auto_reply->header_size;
 80099b8:	6850      	ldr	r0, [r2, #4]
 80099ba:	7a83      	ldrb	r3, [r0, #10]
 80099bc:	1ac9      	subs	r1, r1, r3
        link_protocol_send_buffer(&wps_mac->current_timeslot->connection_auto_reply->link_protocol, current_queue->frame.header_begin_it, &size);
 80099be:	aa01      	add	r2, sp, #4
 80099c0:	300c      	adds	r0, #12
        current_queue->frame.header_begin_it -= wps_mac->current_timeslot->connection_auto_reply->header_size;
 80099c2:	6521      	str	r1, [r4, #80]	; 0x50
        link_protocol_send_buffer(&wps_mac->current_timeslot->connection_auto_reply->link_protocol, current_queue->frame.header_begin_it, &size);
 80099c4:	f7fb fa6e 	bl	8004ea4 <link_protocol_send_buffer>
}
 80099c8:	b003      	add	sp, #12
 80099ca:	bd30      	pop	{r4, r5, pc}
        current_queue->frame.header_begin_it -= wps_mac->current_timeslot->connection_main->header_size;
 80099cc:	7aab      	ldrb	r3, [r5, #10]
 80099ce:	1ac9      	subs	r1, r1, r3
        link_protocol_send_buffer(&wps_mac->current_timeslot->connection_main->link_protocol, current_queue->frame.header_begin_it, &size);
 80099d0:	aa01      	add	r2, sp, #4
        current_queue->frame.header_begin_it -= wps_mac->current_timeslot->connection_main->header_size;
 80099d2:	6521      	str	r1, [r4, #80]	; 0x50
        link_protocol_send_buffer(&wps_mac->current_timeslot->connection_main->link_protocol, current_queue->frame.header_begin_it, &size);
 80099d4:	f105 000c 	add.w	r0, r5, #12
 80099d8:	f7fb fa64 	bl	8004ea4 <link_protocol_send_buffer>
}
 80099dc:	b003      	add	sp, #12
 80099de:	bd30      	pop	{r4, r5, pc}

080099e0 <end>:
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop

080099e4 <state_setup_ack_link>:
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop

080099e8 <wps_mac_init>:
{
 80099e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ea:	b089      	sub	sp, #36	; 0x24
 80099ec:	4604      	mov	r4, r0
 80099ee:	461f      	mov	r7, r3
 80099f0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    wps_mac->callback_queue                   = callback_queue;
 80099f4:	f8c0 1198 	str.w	r1, [r0, #408]	; 0x198
    wps_mac->node_role                        = node_role;
 80099f8:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
{
 80099fc:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    wps_mac->random_channel_sequence_enabled = random_channel_sequence_enabled;
 8009a00:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
{
 8009a04:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    wps_mac->network_id          = network_id;
 8009a08:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    wps_mac->state_process_idx                = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    wps_mac->current_ts_prime                 = false;
 8009a12:	8723      	strh	r3, [r4, #56]	; 0x38
    wps_mac->state_machine[MAC_SIGNAL_RX_FRAME]               = rx_frame_sm;
 8009a14:	4b24      	ldr	r3, [pc, #144]	; (8009aa8 <wps_mac_init+0xc0>)
 8009a16:	6063      	str	r3, [r4, #4]
    wps_mac->state_machine[MAC_SIGNAL_RX_FRAME_MISS]          = rx_frame_miss_sm;
 8009a18:	4b24      	ldr	r3, [pc, #144]	; (8009aac <wps_mac_init+0xc4>)
 8009a1a:	60a3      	str	r3, [r4, #8]
    wps_mac->state_machine[MAC_SIGNAL_PREPARE_FRAME]          = prepare_frame_sm;
 8009a1c:	4b24      	ldr	r3, [pc, #144]	; (8009ab0 <wps_mac_init+0xc8>)
 8009a1e:	61e3      	str	r3, [r4, #28]
    wps_mac->state_machine[MAC_SIGNAL_SETUP_LINK]             = setup_link_sm;
 8009a20:	4b24      	ldr	r3, [pc, #144]	; (8009ab4 <wps_mac_init+0xcc>)
    wps_mac->state_machine[MAC_SIGNAL_TX_SENT_ACK]            = tx_sm;
 8009a22:	4e25      	ldr	r6, [pc, #148]	; (8009ab8 <wps_mac_init+0xd0>)
    wps_mac->state_machine[MAC_SIGNAL_SETUP_LINK]             = setup_link_sm;
 8009a24:	6223      	str	r3, [r4, #32]
    wps_mac->state_machine[MAC_SIGNAL_SCHEDULE]               = schedule_sm;
 8009a26:	4b25      	ldr	r3, [pc, #148]	; (8009abc <wps_mac_init+0xd4>)
 8009a28:	6263      	str	r3, [r4, #36]	; 0x24
    link_scheduler_init(&wps_mac->scheduler, schedule, wps_mac->local_address);
 8009a2a:	4611      	mov	r1, r2
    wps_mac->state_machine[MAC_SIGNAL_EMPTY]                  = empty_sm;
 8009a2c:	4b24      	ldr	r3, [pc, #144]	; (8009ac0 <wps_mac_init+0xd8>)
{
 8009a2e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    wps_mac->local_address                    = local_address;
 8009a32:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    link_scheduler_init(&wps_mac->scheduler, schedule, wps_mac->local_address);
 8009a36:	303c      	adds	r0, #60	; 0x3c
    wps_mac->state_machine[MAC_SIGNAL_EMPTY]                  = empty_sm;
 8009a38:	62a3      	str	r3, [r4, #40]	; 0x28
    wps_mac->state_machine[MAC_SIGNAL_TX_SENT_NACK]           = tx_sm;
 8009a3a:	e9c4 6603 	strd	r6, r6, [r4, #12]
    wps_mac->state_machine[MAC_SIGNAL_TX]                     = tx_sm;
 8009a3e:	e9c4 6605 	strd	r6, r6, [r4, #20]
{
 8009a42:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    link_scheduler_init(&wps_mac->scheduler, schedule, wps_mac->local_address);
 8009a44:	9007      	str	r0, [sp, #28]
 8009a46:	f7fb faf7 	bl	8005038 <link_scheduler_init>
    wps_mac->scheduler.total_time_slot_count = wps_mac->scheduler.schedule->size;
 8009a4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    link_scheduler_set_first_time_slot(&wps_mac->scheduler);
 8009a4c:	9807      	ldr	r0, [sp, #28]
    wps_mac->scheduler.total_time_slot_count = wps_mac->scheduler.schedule->size;
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    link_scheduler_set_first_time_slot(&wps_mac->scheduler);
 8009a54:	f7fb fb5c 	bl	8005110 <link_scheduler_set_first_time_slot>
    link_scheduler_enable_tx(&wps_mac->scheduler);
 8009a58:	9807      	ldr	r0, [sp, #28]
 8009a5a:	f7fb fb49 	bl	80050f0 <link_scheduler_enable_tx>
    link_channel_hopping_init(&wps_mac->channel_hopping, channel_sequence, wps_mac->random_channel_sequence_enabled, wps_mac->network_id);
 8009a5e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8009a62:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8009a66:	4639      	mov	r1, r7
 8009a68:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8009a6c:	f7fb f934 	bl	8004cd8 <link_channel_hopping_init>
    link_tdma_sync_init(&wps_mac->tdma_sync,
 8009a70:	f894 105f 	ldrb.w	r1, [r4, #95]	; 0x5f
                        SYNC_RX_SETUP_PLL_CYCLES * (sync_cfg->isi_mitig_pauses + 1),
 8009a74:	7bab      	ldrb	r3, [r5, #14]
    link_tdma_sync_init(&wps_mac->tdma_sync,
 8009a76:	9105      	str	r1, [sp, #20]
 8009a78:	89a9      	ldrh	r1, [r5, #12]
 8009a7a:	e9cd 1303 	strd	r1, r3, [sp, #12]
                        SYNC_RX_SETUP_PLL_CYCLES * (sync_cfg->isi_mitig_pauses + 1),
 8009a7e:	1c5a      	adds	r2, r3, #1
    link_tdma_sync_init(&wps_mac->tdma_sync,
 8009a80:	88a8      	ldrh	r0, [r5, #4]
 8009a82:	7a2b      	ldrb	r3, [r5, #8]
 8009a84:	2160      	movs	r1, #96	; 0x60
 8009a86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009a8a:	9102      	str	r1, [sp, #8]
 8009a8c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009a90:	8829      	ldrh	r1, [r5, #0]
 8009a92:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009a96:	e9cd 3000 	strd	r3, r0, [sp]
 8009a9a:	2364      	movs	r3, #100	; 0x64
 8009a9c:	b292      	uxth	r2, r2
 8009a9e:	18e0      	adds	r0, r4, r3
 8009aa0:	f7fb fba6 	bl	80051f0 <link_tdma_sync_init>
}
 8009aa4:	b009      	add	sp, #36	; 0x24
 8009aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aa8:	2000056c 	.word	0x2000056c
 8009aac:	2000055c 	.word	0x2000055c
 8009ab0:	20000554 	.word	0x20000554
 8009ab4:	20000584 	.word	0x20000584
 8009ab8:	20000594 	.word	0x20000594
 8009abc:	2000057c 	.word	0x2000057c
 8009ac0:	20000550 	.word	0x20000550

08009ac4 <wps_mac_reset>:
    wps_mac->tdma_sync.frame_lost_count  = 0;
 8009ac4:	2300      	movs	r3, #0
    wps_mac->current_input  = MAC_SIGNAL_EMPTY;
 8009ac6:	2209      	movs	r2, #9
    wps_mac->tdma_sync.frame_lost_count  = 0;
 8009ac8:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    wps_mac->tdma_sync.sync_slave_offset = 0;
 8009acc:	6783      	str	r3, [r0, #120]	; 0x78
    wps_mac->tdma_sync.slave_sync_state  = STATE_SYNCING;
 8009ace:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    wps_mac->current_input  = MAC_SIGNAL_EMPTY;
 8009ad2:	f8a0 2188 	strh.w	r2, [r0, #392]	; 0x188
}
 8009ad6:	4770      	bx	lr

08009ad8 <wps_mac_process>:
{
 8009ad8:	b538      	push	{r3, r4, r5, lr}
    wps_mac->current_input     = wps_mac->input_signal.main_signal;
 8009ada:	7802      	ldrb	r2, [r0, #0]
 8009adc:	f880 2188 	strb.w	r2, [r0, #392]	; 0x188
    wps_mac->state_process_idx = 0;
 8009ae0:	2300      	movs	r3, #0
    if (scheduling_needed(wps_mac)) {
 8009ae2:	2a08      	cmp	r2, #8
{
 8009ae4:	4604      	mov	r4, r0
    wps_mac->state_process_idx = 0;
 8009ae6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    wps_mac->current_output    = MAC_SIGNAL_WPS_EMPTY;
 8009aea:	f880 3189 	strb.w	r3, [r0, #393]	; 0x189
    if (scheduling_needed(wps_mac)) {
 8009aee:	d04b      	beq.n	8009b88 <wps_mac_process+0xb0>
        wps_mac->state_machine[wps_mac->current_input][wps_mac->state_process_idx++](wps_mac);
 8009af0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    wps_mac->current_xlayer = wps_mac->main_xlayer;
 8009af4:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
 8009af8:	4d31      	ldr	r5, [pc, #196]	; (8009bc0 <wps_mac_process+0xe8>)
        wps_mac->state_machine[wps_mac->current_input][wps_mac->state_process_idx++](wps_mac);
 8009afa:	6852      	ldr	r2, [r2, #4]
    wps_mac->current_xlayer = wps_mac->main_xlayer;
 8009afc:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
 8009b00:	4619      	mov	r1, r3
        wps_mac->state_machine[wps_mac->current_input][wps_mac->state_process_idx++](wps_mac);
 8009b02:	3301      	adds	r3, #1
 8009b04:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8009b08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	4798      	blx	r3
    } while (wps_mac->state_machine[wps_mac->current_input][wps_mac->state_process_idx] != end);
 8009b10:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
 8009b14:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009b18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009b1c:	b219      	sxth	r1, r3
 8009b1e:	6852      	ldr	r2, [r2, #4]
 8009b20:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8009b24:	42a8      	cmp	r0, r5
 8009b26:	d1ec      	bne.n	8009b02 <wps_mac_process+0x2a>
    if (wps_mac->auto_xlayer != NULL) {
 8009b28:	f8d4 1194 	ldr.w	r1, [r4, #404]	; 0x194
    wps_mac->output_signal.main_signal  = wps_mac->current_output;
 8009b2c:	f894 2189 	ldrb.w	r2, [r4, #393]	; 0x189
 8009b30:	70a2      	strb	r2, [r4, #2]
    wps_mac->state_process_idx = 0;
 8009b32:	2300      	movs	r3, #0
 8009b34:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    wps_mac->current_output = MAC_SIGNAL_WPS_EMPTY;
 8009b38:	f884 3189 	strb.w	r3, [r4, #393]	; 0x189
    if (wps_mac->auto_xlayer != NULL) {
 8009b3c:	b311      	cbz	r1, 8009b84 <wps_mac_process+0xac>
        wps_mac->current_input  = wps_mac->input_signal.auto_signal;
 8009b3e:	7862      	ldrb	r2, [r4, #1]
 8009b40:	f884 2188 	strb.w	r2, [r4, #392]	; 0x188
        while (wps_mac->state_machine[wps_mac->current_input][wps_mac->state_process_idx] != end) {
 8009b44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        wps_mac->current_xlayer = wps_mac->auto_xlayer;
 8009b48:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
        while (wps_mac->state_machine[wps_mac->current_input][wps_mac->state_process_idx] != end) {
 8009b4c:	6852      	ldr	r2, [r2, #4]
 8009b4e:	6812      	ldr	r2, [r2, #0]
 8009b50:	42aa      	cmp	r2, r5
 8009b52:	d017      	beq.n	8009b84 <wps_mac_process+0xac>
            wps_mac->state_machine[wps_mac->current_input][wps_mac->state_process_idx++](wps_mac);
 8009b54:	3301      	adds	r3, #1
 8009b56:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	4790      	blx	r2
        while (wps_mac->state_machine[wps_mac->current_input][wps_mac->state_process_idx] != end) {
 8009b5e:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
 8009b62:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009b66:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009b6a:	6852      	ldr	r2, [r2, #4]
 8009b6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009b70:	42aa      	cmp	r2, r5
 8009b72:	d1ef      	bne.n	8009b54 <wps_mac_process+0x7c>
    wps_mac->output_signal.auto_signal = wps_mac->current_output;
 8009b74:	f894 3189 	ldrb.w	r3, [r4, #393]	; 0x189
 8009b78:	70e3      	strb	r3, [r4, #3]
    update_wps_stats(wps_mac);
 8009b7a:	4620      	mov	r0, r4
}
 8009b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    update_wps_stats(wps_mac);
 8009b80:	f7ff b908 	b.w	8008d94 <update_wps_stats>
        while (wps_mac->state_machine[wps_mac->current_input][wps_mac->state_process_idx] != end) {
 8009b84:	2300      	movs	r3, #0
 8009b86:	e7f7      	b.n	8009b78 <wps_mac_process+0xa0>
        wps_mac->state_machine[wps_mac->current_input][wps_mac->state_process_idx++](wps_mac);
 8009b88:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009b8a:	4d0d      	ldr	r5, [pc, #52]	; (8009bc0 <wps_mac_process+0xe8>)
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	3301      	adds	r3, #1
 8009b90:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8009b94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b98:	4620      	mov	r0, r4
 8009b9a:	4798      	blx	r3
    } while (wps_mac->state_machine[wps_mac->current_input][wps_mac->state_process_idx] != end);
 8009b9c:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
 8009ba0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009ba4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ba8:	b219      	sxth	r1, r3
 8009baa:	6852      	ldr	r2, [r2, #4]
 8009bac:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8009bb0:	42a8      	cmp	r0, r5
 8009bb2:	d1ec      	bne.n	8009b8e <wps_mac_process+0xb6>
    update_wps_stats(wps_mac);
 8009bb4:	4620      	mov	r0, r4
}
 8009bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    update_wps_stats(wps_mac);
 8009bba:	f7ff b8eb 	b.w	8008d94 <update_wps_stats>
 8009bbe:	bf00      	nop
 8009bc0:	080099e1 	.word	0x080099e1

08009bc4 <wps_mac_enable_fast_sync>:
    wps_mac->fast_sync_enabled = true;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
}
 8009bca:	4770      	bx	lr

08009bcc <wps_mac_disable_fast_sync>:
    wps_mac->fast_sync_enabled = false;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
}
 8009bd2:	4770      	bx	lr

08009bd4 <wps_mac_send_channel_index>:
{
 8009bd4:	b510      	push	{r4, lr}
    *index = link_channel_hopping_get_seq_index(&mac->channel_hopping);
 8009bd6:	304c      	adds	r0, #76	; 0x4c
{
 8009bd8:	460c      	mov	r4, r1
    *index = link_channel_hopping_get_seq_index(&mac->channel_hopping);
 8009bda:	f7fb f907 	bl	8004dec <link_channel_hopping_get_seq_index>
 8009bde:	7020      	strb	r0, [r4, #0]
}
 8009be0:	bd10      	pop	{r4, pc}
 8009be2:	bf00      	nop

08009be4 <wps_mac_receive_channel_index>:
    if (mac->node_role == NETWORK_NODE) {
 8009be4:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d000      	beq.n	8009bee <wps_mac_receive_channel_index+0xa>
}
 8009bec:	4770      	bx	lr
        link_channel_hopping_set_seq_index(&mac->channel_hopping, *index);
 8009bee:	7809      	ldrb	r1, [r1, #0]
 8009bf0:	304c      	adds	r0, #76	; 0x4c
 8009bf2:	f7fb b8f9 	b.w	8004de8 <link_channel_hopping_set_seq_index>
 8009bf6:	bf00      	nop

08009bf8 <wps_mac_get_channel_index_proto_size>:
}
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	4770      	bx	lr

08009bfc <wps_mac_send_timeslot_id_saw>:
{
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4604      	mov	r4, r0
    uint16_t  index = link_scheduler_get_next_timeslot_index(&mac->scheduler);
 8009c00:	303c      	adds	r0, #60	; 0x3c
{
 8009c02:	460d      	mov	r5, r1
    uint16_t  index = link_scheduler_get_next_timeslot_index(&mac->scheduler);
 8009c04:	f7fb fa80 	bl	8005108 <link_scheduler_get_next_timeslot_index>
                        MOV2MASK(link_saw_arq_get_seq_num(&mac->current_timeslot->connection_main->stop_and_wait_arq),
 8009c08:	6b63      	ldr	r3, [r4, #52]	; 0x34
    uint16_t  index = link_scheduler_get_next_timeslot_index(&mac->scheduler);
 8009c0a:	4604      	mov	r4, r0
                        MOV2MASK(link_saw_arq_get_seq_num(&mac->current_timeslot->connection_main->stop_and_wait_arq),
 8009c0c:	6818      	ldr	r0, [r3, #0]
 8009c0e:	30e0      	adds	r0, #224	; 0xe0
 8009c10:	f7fb f9f8 	bl	8005004 <link_saw_arq_get_seq_num>
    *timeslot_id_saw  = MASK2VAL(index, HEADER_BYTE0_TIME_SLOT_ID_MASK) |
 8009c14:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8009c18:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
 8009c1c:	702c      	strb	r4, [r5, #0]
}
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}

08009c20 <wps_mac_receive_timeslot_id_saw>:
{
 8009c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (is_network_node(mac)) {
 8009c22:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 8009c26:	2b01      	cmp	r3, #1
{
 8009c28:	4604      	mov	r4, r0
 8009c2a:	460d      	mov	r5, r1
    if (is_network_node(mac)) {
 8009c2c:	d017      	beq.n	8009c5e <wps_mac_receive_timeslot_id_saw+0x3e>
    if (mac->current_xlayer->frame.header_begin_it + 2 != mac->current_xlayer->frame.payload_end_it) {
 8009c2e:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8009c32:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009c34:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009c36:	3302      	adds	r3, #2
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d00f      	beq.n	8009c5c <wps_mac_receive_timeslot_id_saw+0x3c>
        link_saw_arq_update_rx_seq_num(&mac->current_timeslot->connection_main->stop_and_wait_arq,
 8009c3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c3e:	7829      	ldrb	r1, [r5, #0]
 8009c40:	6818      	ldr	r0, [r3, #0]
 8009c42:	09c9      	lsrs	r1, r1, #7
 8009c44:	30e0      	adds	r0, #224	; 0xe0
 8009c46:	f7fb f9e5 	bl	8005014 <link_saw_arq_update_rx_seq_num>
        if (link_saw_arq_is_rx_frame_duplicate(&mac->current_timeslot->connection_main->stop_and_wait_arq)) {
 8009c4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	30e0      	adds	r0, #224	; 0xe0
 8009c50:	f7fb f9e8 	bl	8005024 <link_saw_arq_is_rx_frame_duplicate>
 8009c54:	b110      	cbz	r0, 8009c5c <wps_mac_receive_timeslot_id_saw+0x3c>
            mac->current_output = MAC_SIGNAL_WPS_EMPTY;
 8009c56:	2300      	movs	r3, #0
 8009c58:	f884 3189 	strb.w	r3, [r4, #393]	; 0x189
}
 8009c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (time_slot_id < mac->scheduler.schedule->size) {
 8009c5e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
        time_slot_id = MASK2VAL(*timeslot_id_saw, HEADER_BYTE0_TIME_SLOT_ID_MASK);
 8009c60:	780e      	ldrb	r6, [r1, #0]
        if (time_slot_id < mac->scheduler.schedule->size) {
 8009c62:	685b      	ldr	r3, [r3, #4]
        time_slot_id = MASK2VAL(*timeslot_id_saw, HEADER_BYTE0_TIME_SLOT_ID_MASK);
 8009c64:	f006 067f 	and.w	r6, r6, #127	; 0x7f
        if (time_slot_id < mac->scheduler.schedule->size) {
 8009c68:	429e      	cmp	r6, r3
 8009c6a:	d2e0      	bcs.n	8009c2e <wps_mac_receive_timeslot_id_saw+0xe>
            if (link_scheduler_get_next_timeslot_index(&mac->scheduler) != time_slot_id) {
 8009c6c:	f100 073c 	add.w	r7, r0, #60	; 0x3c
 8009c70:	4638      	mov	r0, r7
 8009c72:	f7fb fa49 	bl	8005108 <link_scheduler_get_next_timeslot_index>
 8009c76:	42b0      	cmp	r0, r6
 8009c78:	d002      	beq.n	8009c80 <wps_mac_receive_timeslot_id_saw+0x60>
                link_scheduler_set_mismatch(&mac->scheduler);
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	f7fb fa54 	bl	8005128 <link_scheduler_set_mismatch>
            link_scheduler_set_time_slot_i(&mac->scheduler, time_slot_id);
 8009c80:	4631      	mov	r1, r6
 8009c82:	4638      	mov	r0, r7
 8009c84:	f7fb fa32 	bl	80050ec <link_scheduler_set_time_slot_i>
 8009c88:	e7d1      	b.n	8009c2e <wps_mac_receive_timeslot_id_saw+0xe>
 8009c8a:	bf00      	nop

08009c8c <wps_mac_get_timeslot_id_saw_proto_size>:
 8009c8c:	2001      	movs	r0, #1
 8009c8e:	4770      	bx	lr

08009c90 <wps_mac_send_rdo>:
    link_rdo_send_offset(&mac->link_rdo, rdo);
 8009c90:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
 8009c94:	f7fb b94c 	b.w	8004f30 <link_rdo_send_offset>

08009c98 <wps_mac_receive_rdo>:
    link_rdo_set_offset(&mac->link_rdo, rdo);
 8009c98:	f500 70ce 	add.w	r0, r0, #412	; 0x19c
 8009c9c:	f7fb b956 	b.w	8004f4c <link_rdo_set_offset>

08009ca0 <wps_mac_get_rdo_proto_size>:
}
 8009ca0:	2002      	movs	r0, #2
 8009ca2:	4770      	bx	lr

08009ca4 <wps_mac_send_ranging_phases>:
    *phases = mac->phase_data.local_phases_count;
 8009ca4:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
 8009ca8:	700b      	strb	r3, [r1, #0]
    *phases = mac->phase_data.local_phases_info.phase1;
 8009caa:	f890 31b2 	ldrb.w	r3, [r0, #434]	; 0x1b2
 8009cae:	704b      	strb	r3, [r1, #1]
    *phases = mac->phase_data.local_phases_info.phase2;
 8009cb0:	f890 31b3 	ldrb.w	r3, [r0, #435]	; 0x1b3
 8009cb4:	708b      	strb	r3, [r1, #2]
    *phases = mac->phase_data.local_phases_info.phase3;
 8009cb6:	f890 31b4 	ldrb.w	r3, [r0, #436]	; 0x1b4
 8009cba:	70cb      	strb	r3, [r1, #3]
    *phases = mac->phase_data.local_phases_info.phase4;
 8009cbc:	f890 31b5 	ldrb.w	r3, [r0, #437]	; 0x1b5
 8009cc0:	710b      	strb	r3, [r1, #4]
}
 8009cc2:	4770      	bx	lr

08009cc4 <wps_mac_receive_ranging_phases>:
    mac->phase_data.remote_phases_count = *phases;
 8009cc4:	780b      	ldrb	r3, [r1, #0]
 8009cc6:	f880 31bf 	strb.w	r3, [r0, #447]	; 0x1bf
    mac->phase_data.remote_phases_info.phase1 = *phases;
 8009cca:	784a      	ldrb	r2, [r1, #1]
 8009ccc:	f880 21b8 	strb.w	r2, [r0, #440]	; 0x1b8
    mac->phase_data.remote_phases_info.phase2 = *phases;
 8009cd0:	788a      	ldrb	r2, [r1, #2]
 8009cd2:	f880 21b9 	strb.w	r2, [r0, #441]	; 0x1b9
    mac->phase_data.remote_phases_info.phase3 = *phases;
 8009cd6:	78ca      	ldrb	r2, [r1, #3]
 8009cd8:	f880 21ba 	strb.w	r2, [r0, #442]	; 0x1ba
    mac->phase_data.remote_phases_info.phase4 = *phases;
 8009cdc:	790a      	ldrb	r2, [r1, #4]
    return (wps_mac->current_timeslot->connection_auto_reply != NULL);
 8009cde:	6b41      	ldr	r1, [r0, #52]	; 0x34
    mac->phase_data.remote_phases_info.phase4 = *phases;
 8009ce0:	f880 21bb 	strb.w	r2, [r0, #443]	; 0x1bb
    return (wps_mac->current_timeslot->connection_auto_reply != NULL);
 8009ce4:	684a      	ldr	r2, [r1, #4]
    if (is_current_timeslot_prime(wps_mac) &&
 8009ce6:	b362      	cbz	r2, 8009d42 <wps_mac_receive_ranging_phases+0x7e>
{
 8009ce8:	b510      	push	{r4, lr}
 8009cea:	4604      	mov	r4, r0
    if (is_current_timeslot_prime(wps_mac) &&
 8009cec:	8810      	ldrh	r0, [r2, #0]
 8009cee:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8009cf2:	4290      	cmp	r0, r2
 8009cf4:	d024      	beq.n	8009d40 <wps_mac_receive_ranging_phases+0x7c>
        wps_mac->current_timeslot->connection_main->phases_exchange) {
 8009cf6:	680a      	ldr	r2, [r1, #0]
        !is_current_prime_timeslot_tx(wps_mac) &&
 8009cf8:	79d2      	ldrb	r2, [r2, #7]
 8009cfa:	b30a      	cbz	r2, 8009d40 <wps_mac_receive_ranging_phases+0x7c>
    return (((uint8_t)(phase_data->remote_phases_count + 1)) == phase_data->local_phases_count);
 8009cfc:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
 8009d00:	3301      	adds	r3, #1
        if (is_phase_data_valid(&mac->phase_data) && !mac->phase_intf.is_busy()) {
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d01d      	beq.n	8009d44 <wps_mac_receive_ranging_phases+0x80>
        update_phases_data(&mac->phase_data, mac->main_xlayer->config.rx_wait_time);
 8009d08:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    phase_data->last_local_phases_info.phase2 = phase_data->local_phases_info.phase2;
 8009d0c:	f894 11b3 	ldrb.w	r1, [r4, #435]	; 0x1b3
        update_phases_data(&mac->phase_data, mac->main_xlayer->config.rx_wait_time);
 8009d10:	8c1b      	ldrh	r3, [r3, #32]
    phase_data->last_local_phases_info.phase1 = phase_data->local_phases_info.phase1;
 8009d12:	f894 01b2 	ldrb.w	r0, [r4, #434]	; 0x1b2
    phase_data->last_local_phases_info.phase2 = phase_data->local_phases_info.phase2;
 8009d16:	f884 11ad 	strb.w	r1, [r4, #429]	; 0x1ad
    phase_data->last_local_phases_info.phase4 = phase_data->local_phases_info.phase4;
 8009d1a:	f894 11b5 	ldrb.w	r1, [r4, #437]	; 0x1b5
    phase_data->last_local_phases_info.phase1 = phase_data->local_phases_info.phase1;
 8009d1e:	f884 01ac 	strb.w	r0, [r4, #428]	; 0x1ac
    phase_data->local_phases_count++;
 8009d22:	3201      	adds	r2, #1
    phase_data->last_local_phases_info.phase3 = phase_data->local_phases_info.phase3;
 8009d24:	f894 01b4 	ldrb.w	r0, [r4, #436]	; 0x1b4
    phase_data->last_local_phases_info.phase4 = phase_data->local_phases_info.phase4;
 8009d28:	f884 11af 	strb.w	r1, [r4, #431]	; 0x1af
    phase_data->last_local_phases_info.rx_waited1 = (rx_wait_time & 0x7f00) >> 8;
 8009d2c:	f3c3 2106 	ubfx	r1, r3, #8, #7
    phase_data->last_local_phases_info.phase3 = phase_data->local_phases_info.phase3;
 8009d30:	f884 01ae 	strb.w	r0, [r4, #430]	; 0x1ae
    phase_data->last_local_phases_info.rx_waited0 = rx_wait_time & 0x00ff;
 8009d34:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
    phase_data->last_local_phases_info.rx_waited1 = (rx_wait_time & 0x7f00) >> 8;
 8009d38:	f884 11b0 	strb.w	r1, [r4, #432]	; 0x1b0
    phase_data->local_phases_count++;
 8009d3c:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
}
 8009d40:	bd10      	pop	{r4, pc}
 8009d42:	4770      	bx	lr
        if (is_phase_data_valid(&mac->phase_data) && !mac->phase_intf.is_busy()) {
 8009d44:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
 8009d48:	4798      	blx	r3
 8009d4a:	b930      	cbnz	r0, 8009d5a <wps_mac_receive_ranging_phases+0x96>
            mac->phase_intf.supply(&mac->phase_data.last_local_phases_info, &mac->phase_data.remote_phases_info);
 8009d4c:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8009d50:	f504 71dc 	add.w	r1, r4, #440	; 0x1b8
 8009d54:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
 8009d58:	4798      	blx	r3
    phase_data->local_phases_count++;
 8009d5a:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
 8009d5e:	e7d3      	b.n	8009d08 <wps_mac_receive_ranging_phases+0x44>

08009d60 <wps_mac_get_ranging_phases_proto_size>:
}
 8009d60:	2005      	movs	r0, #5
 8009d62:	4770      	bx	lr

08009d64 <wps_mac_send_ranging_phase_count>:
    *phase_count = mac->phase_data.local_phases_count;
 8009d64:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
 8009d68:	700b      	strb	r3, [r1, #0]
}
 8009d6a:	4770      	bx	lr

08009d6c <wps_mac_receive_ranging_phase_count>:
    mac->phase_data.local_phases_count = *phase_count;
 8009d6c:	780b      	ldrb	r3, [r1, #0]
 8009d6e:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
}
 8009d72:	4770      	bx	lr

08009d74 <wps_mac_get_ranging_phase_count_proto_size>:
 8009d74:	2001      	movs	r0, #1
 8009d76:	4770      	bx	lr

08009d78 <end_state>:
/** @brief State : End of a state machine sequence.
 *
 *   @param[in] wps  WPS instance struct.
 */
static void end_state(wps_t *wps)
{
 8009d78:	b538      	push	{r3, r4, r5, lr}
    wps_process_state_t *dequeue_state;

    wps->state_step    = 0;
    dequeue_state     = (wps_process_state_t *)circular_queue_front_raw(&wps->next_states);
 8009d7a:	f500 7548 	add.w	r5, r0, #800	; 0x320
    wps->state_step    = 0;
 8009d7e:	2300      	movs	r3, #0
{
 8009d80:	4604      	mov	r4, r0
    wps->state_step    = 0;
 8009d82:	f880 3364 	strb.w	r3, [r0, #868]	; 0x364
    dequeue_state     = (wps_process_state_t *)circular_queue_front_raw(&wps->next_states);
 8009d86:	4628      	mov	r0, r5
 8009d88:	f001 f8d2 	bl	800af30 <circular_queue_front_raw>
 8009d8c:	4603      	mov	r3, r0
    wps->current_state = *dequeue_state;
    circular_queue_dequeue_raw(&wps->next_states);
 8009d8e:	4628      	mov	r0, r5
    wps->current_state = *dequeue_state;
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
}
 8009d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    circular_queue_dequeue_raw(&wps->next_states);
 8009d9a:	f001 b91b 	b.w	800afd4 <circular_queue_dequeue_raw>
 8009d9e:	bf00      	nop

08009da0 <idle>:
{
 8009da0:	b538      	push	{r3, r4, r5, lr}
    if (wps->signal == WPS_CONNECT) {
 8009da2:	f890 337c 	ldrb.w	r3, [r0, #892]	; 0x37c
 8009da6:	2b03      	cmp	r3, #3
{
 8009da8:	4604      	mov	r4, r0
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 8009daa:	f500 7548 	add.w	r5, r0, #800	; 0x320
    if (wps->signal == WPS_CONNECT) {
 8009dae:	d00e      	beq.n	8009dce <idle+0x2e>
    wps->state_step    = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	f884 3364 	strb.w	r3, [r4, #868]	; 0x364
    dequeue_state     = (wps_process_state_t *)circular_queue_front_raw(&wps->next_states);
 8009db6:	4628      	mov	r0, r5
 8009db8:	f001 f8ba 	bl	800af30 <circular_queue_front_raw>
 8009dbc:	4603      	mov	r3, r0
    circular_queue_dequeue_raw(&wps->next_states);
 8009dbe:	4628      	mov	r0, r5
    wps->current_state = *dequeue_state;
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
}
 8009dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    circular_queue_dequeue_raw(&wps->next_states);
 8009dca:	f001 b903 	b.w	800afd4 <circular_queue_dequeue_raw>
        wps->process_signal = PROCESS_SIGNAL_EXECUTE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f880 3314 	strb.w	r3, [r0, #788]	; 0x314
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f001 f8bb 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8009dda:	4b03      	ldr	r3, [pc, #12]	; (8009de8 <idle+0x48>)
 8009ddc:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps->next_states);
 8009dde:	4628      	mov	r0, r5
 8009de0:	f001 f8c6 	bl	800af70 <circular_queue_enqueue_raw>
}
 8009de4:	e7e4      	b.n	8009db0 <idle+0x10>
 8009de6:	bf00      	nop
 8009de8:	08009e61 	.word	0x08009e61

08009dec <error>:
{
 8009dec:	b570      	push	{r4, r5, r6, lr}
    wps->mac.input_signal.main_signal = MAC_SIGNAL_SCHEDULE;
 8009dee:	2308      	movs	r3, #8
{
 8009df0:	4604      	mov	r4, r0
    wps_phy_disconnect(wps->phy);
 8009df2:	f504 7504 	add.w	r5, r4, #528	; 0x210
    wps->mac.input_signal.main_signal = MAC_SIGNAL_SCHEDULE;
 8009df6:	f800 3f50 	strb.w	r3, [r0, #80]!
    wps_mac_reset(&wps->mac);
 8009dfa:	f7ff fe63 	bl	8009ac4 <wps_mac_reset>
    wps_phy_disconnect(wps->phy);
 8009dfe:	4628      	mov	r0, r5
 8009e00:	f7fc faf0 	bl	80063e4 <wps_phy_disconnect>
    wps_phy_connect(wps->phy);
 8009e04:	4628      	mov	r0, r5
 8009e06:	f7fc fa95 	bl	8006334 <wps_phy_connect>
    wps->mac.current_timeslot->connection_main->wps_error = WPS_PHY_CRITICAL_ERROR;
 8009e0a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2202      	movs	r2, #2
 8009e12:	719a      	strb	r2, [r3, #6]
    wps->mac.main_xlayer->config.callback = wps->mac.current_timeslot->connection_main->evt_callback_t;
 8009e14:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
    wps->mac.main_xlayer->config.callback = wps->mac.current_timeslot->connection_main->evt_parg_callback_t;
 8009e18:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8009e1c:	640b      	str	r3, [r1, #64]	; 0x40
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 8009e1e:	f504 7548 	add.w	r5, r4, #800	; 0x320
    wps_callback_enqueue(&wps->l7.callback_queue, wps->mac.main_xlayer);
 8009e22:	f104 0018 	add.w	r0, r4, #24
    wps->process_signal = PROCESS_SIGNAL_EXECUTE;
 8009e26:	2600      	movs	r6, #0
    wps_callback_enqueue(&wps->l7.callback_queue, wps->mac.main_xlayer);
 8009e28:	f7fe ffa2 	bl	8008d70 <wps_callback_enqueue>
    wps->process_signal = PROCESS_SIGNAL_EXECUTE;
 8009e2c:	f884 6314 	strb.w	r6, [r4, #788]	; 0x314
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 8009e30:	4628      	mov	r0, r5
 8009e32:	f001 f88d 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8009e36:	4b09      	ldr	r3, [pc, #36]	; (8009e5c <error+0x70>)
 8009e38:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps->next_states);
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	f001 f898 	bl	800af70 <circular_queue_enqueue_raw>
    wps->state_step    = 0;
 8009e40:	f884 6364 	strb.w	r6, [r4, #868]	; 0x364
    dequeue_state     = (wps_process_state_t *)circular_queue_front_raw(&wps->next_states);
 8009e44:	4628      	mov	r0, r5
 8009e46:	f001 f873 	bl	800af30 <circular_queue_front_raw>
 8009e4a:	4603      	mov	r3, r0
    circular_queue_dequeue_raw(&wps->next_states);
 8009e4c:	4628      	mov	r0, r5
    wps->current_state = *dequeue_state;
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
}
 8009e54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    circular_queue_dequeue_raw(&wps->next_states);
 8009e58:	f001 b8bc 	b.w	800afd4 <circular_queue_dequeue_raw>
 8009e5c:	08009e61 	.word	0x08009e61

08009e60 <mac_pre>:
{
 8009e60:	b570      	push	{r4, r5, r6, lr}
    wps->mac.input_signal.main_signal = MAC_SIGNAL_SCHEDULE;
 8009e62:	2308      	movs	r3, #8
{
 8009e64:	4604      	mov	r4, r0
    wps->mac.input_signal.main_signal = MAC_SIGNAL_SCHEDULE;
 8009e66:	f800 3f50 	strb.w	r3, [r0, #80]!
    wps_mac_process(&wps->mac);
 8009e6a:	f7ff fe35 	bl	8009ad8 <wps_mac_process>
 *  @param[in] mac MAC layer instance.
 *  @param[in] phy PHY layer instance.
 */
static void set_signal_mac_to_phy(wps_mac_t *mac, wps_phy_t *phy)
{
    switch (mac->output_signal.main_signal) {
 8009e6e:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
    wps_phy_set_main_xlayer(wps->phy, wps->mac.main_xlayer);
 8009e72:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
    wps_phy->input_signal = signal;
 8009e76:	2b08      	cmp	r3, #8
 8009e78:	bf0c      	ite	eq
 8009e7a:	2303      	moveq	r3, #3
 8009e7c:	2302      	movne	r3, #2
    set_signal_mac_to_phy(&wps->mac, wps->phy);
 8009e7e:	f504 7504 	add.w	r5, r4, #528	; 0x210
    switch (mac->output_signal.main_signal) {
 8009e82:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
    wps_phy_set_main_xlayer(wps->phy, wps->mac.main_xlayer);
 8009e86:	4628      	mov	r0, r5
 8009e88:	f7fc fab2 	bl	80063f0 <wps_phy_set_main_xlayer>
    wps_phy_set_auto_xlayer(wps->phy, wps->mac.auto_xlayer);
 8009e8c:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
 8009e90:	4628      	mov	r0, r5
 8009e92:	f7fc fabb 	bl	800640c <wps_phy_set_auto_xlayer>
    wps_phy->signal_main = PHY_SIGNAL_PROCESSING;
 8009e96:	2301      	movs	r3, #1
 8009e98:	f884 3211 	strb.w	r3, [r4, #529]	; 0x211
        wps_phy->current_state[wps_phy->state_step++](wps_phy);
 8009e9c:	f894 3270 	ldrb.w	r3, [r4, #624]	; 0x270
 8009ea0:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8009ea4:	1c59      	adds	r1, r3, #1
 8009ea6:	f884 1270 	strb.w	r1, [r4, #624]	; 0x270
 8009eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eae:	4628      	mov	r0, r5
 8009eb0:	4798      	blx	r3
    } while (wps_phy->signal_main == PHY_SIGNAL_PROCESSING);
 8009eb2:	f894 3211 	ldrb.w	r3, [r4, #529]	; 0x211
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d0f0      	beq.n	8009e9c <mac_pre+0x3c>
    if (wps_phy->current_state[wps_phy->state_step] == wps_phy->end_state) {
 8009eba:	e9d4 3289 	ldrd	r3, r2, [r4, #548]	; 0x224
 8009ebe:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
 8009ec2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d01a      	beq.n	8009f00 <mac_pre+0xa0>
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 8009eca:	f504 7548 	add.w	r5, r4, #800	; 0x320
    wps->process_signal = PROCESS_SIGNAL_EXECUTE;
 8009ece:	2600      	movs	r6, #0
 8009ed0:	f884 6314 	strb.w	r6, [r4, #788]	; 0x314
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	f001 f83b 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 8009eda:	4b0b      	ldr	r3, [pc, #44]	; (8009f08 <mac_pre+0xa8>)
 8009edc:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps->next_states);
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f001 f846 	bl	800af70 <circular_queue_enqueue_raw>
    wps->state_step    = 0;
 8009ee4:	f884 6364 	strb.w	r6, [r4, #868]	; 0x364
    dequeue_state     = (wps_process_state_t *)circular_queue_front_raw(&wps->next_states);
 8009ee8:	4628      	mov	r0, r5
 8009eea:	f001 f821 	bl	800af30 <circular_queue_front_raw>
 8009eee:	4603      	mov	r3, r0
    circular_queue_dequeue_raw(&wps->next_states);
 8009ef0:	4628      	mov	r0, r5
    wps->current_state = *dequeue_state;
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
}
 8009ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    circular_queue_dequeue_raw(&wps->next_states);
 8009efc:	f001 b86a 	b.w	800afd4 <circular_queue_dequeue_raw>
        wps_phy->current_state[wps_phy->state_step](wps_phy);
 8009f00:	4628      	mov	r0, r5
 8009f02:	4798      	blx	r3
 8009f04:	e7e1      	b.n	8009eca <mac_pre+0x6a>
 8009f06:	bf00      	nop
 8009f08:	0800a0e9 	.word	0x0800a0e9

08009f0c <yield>:
{
 8009f0c:	b570      	push	{r4, r5, r6, lr}
    wps->callback_context_switch();
 8009f0e:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
    request = circular_queue_front(&wps->l7.request_queue);
 8009f12:	f100 0534 	add.w	r5, r0, #52	; 0x34
{
 8009f16:	4604      	mov	r4, r0
    wps->callback_context_switch();
 8009f18:	4798      	blx	r3
    request = circular_queue_front(&wps->l7.request_queue);
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	f001 f80a 	bl	800af34 <circular_queue_front>
    if (request != NULL) {
 8009f20:	b148      	cbz	r0, 8009f36 <yield+0x2a>
 *
 *  @param[in] request  WPS request info structure.
 */
static void process_pending_request(wps_t *wps, wps_request_info_t *request)
{
    switch (request->type) {
 8009f22:	7903      	ldrb	r3, [r0, #4]
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d049      	beq.n	8009fbc <yield+0xb0>
 8009f28:	2b03      	cmp	r3, #3
 8009f2a:	d03a      	beq.n	8009fa2 <yield+0x96>
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d01f      	beq.n	8009f70 <yield+0x64>
        circular_queue_dequeue(&wps->l7.request_queue);
 8009f30:	4628      	mov	r0, r5
 8009f32:	f001 f861 	bl	800aff8 <circular_queue_dequeue>
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 8009f36:	f504 7548 	add.w	r5, r4, #800	; 0x320
    wps->process_signal = PROCESS_SIGNAL_YIELD;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	f884 3314 	strb.w	r3, [r4, #788]	; 0x314
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 8009f40:	4628      	mov	r0, r5
 8009f42:	f001 f805 	bl	800af50 <circular_queue_get_free_slot_raw>
 8009f46:	4603      	mov	r3, r0
    *enqueue_states = state;
 8009f48:	4a22      	ldr	r2, [pc, #136]	; (8009fd4 <yield+0xc8>)
 8009f4a:	601a      	str	r2, [r3, #0]
    circular_queue_enqueue_raw(&wps->next_states);
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f001 f80f 	bl	800af70 <circular_queue_enqueue_raw>
    wps->state_step    = 0;
 8009f52:	2300      	movs	r3, #0
 8009f54:	f884 3364 	strb.w	r3, [r4, #868]	; 0x364
    dequeue_state     = (wps_process_state_t *)circular_queue_front_raw(&wps->next_states);
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f000 ffe9 	bl	800af30 <circular_queue_front_raw>
 8009f5e:	4603      	mov	r3, r0
    circular_queue_dequeue_raw(&wps->next_states);
 8009f60:	4628      	mov	r0, r5
    wps->current_state = *dequeue_state;
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
}
 8009f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    circular_queue_dequeue_raw(&wps->next_states);
 8009f6c:	f001 b832 	b.w	800afd4 <circular_queue_dequeue_raw>
    case REQUEST_MAC_CHANGE_SCHEDULE_RATIO: {
        process_schedule_request(request);
 8009f70:	6806      	ldr	r6, [r0, #0]
 *  @param[in] request  WPS request info structure.
 */
static void process_schedule_request(wps_request_info_t *request)
{
    wps_schedule_ratio_cfg_t *request_cfg = (wps_schedule_ratio_cfg_t *)request->config;
    bool *pattern = circular_queue_front(request_cfg->pattern_queue);
 8009f72:	68b0      	ldr	r0, [r6, #8]
 8009f74:	f000 ffde 	bl	800af34 <circular_queue_front>

    if (pattern != NULL) {
 8009f78:	4601      	mov	r1, r0
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d0d8      	beq.n	8009f30 <yield+0x24>
        request_cfg->target_conn->active_ratio        = request_cfg->active_ratio;
 8009f7e:	6873      	ldr	r3, [r6, #4]
 8009f80:	7832      	ldrb	r2, [r6, #0]
 8009f82:	f883 22ed 	strb.w	r2, [r3, #749]	; 0x2ed
        request_cfg->target_conn->pattern_total_count = request_cfg->pattern_total_count;
 8009f86:	7872      	ldrb	r2, [r6, #1]
 8009f88:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
        request_cfg->target_conn->pattern_count       = request_cfg->pattern_current_count;
 8009f8c:	78b0      	ldrb	r0, [r6, #2]
 8009f8e:	f883 02ec 	strb.w	r0, [r3, #748]	; 0x2ec
        memcpy(request_cfg->target_conn->pattern, pattern, request_cfg->pattern_total_count);
 8009f92:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009f96:	f007 fee9 	bl	8011d6c <memcpy>
        circular_queue_dequeue(request_cfg->pattern_queue);
 8009f9a:	68b0      	ldr	r0, [r6, #8]
 8009f9c:	f001 f82c 	bl	800aff8 <circular_queue_dequeue>
 8009fa0:	e7c6      	b.n	8009f30 <yield+0x24>
            process_read_request(wps, request);
 8009fa2:	6801      	ldr	r1, [r0, #0]
 */
static void process_read_request(wps_t *wps, wps_request_info_t *request)
{
    wps_read_request_info_t *read_request = (wps_read_request_info_t *)request->config;

    wps_phy_read_register(wps->phy, read_request->target_register, read_request->rx_buffer, read_request->xfer_cmplt);
 8009fa4:	f504 7004 	add.w	r0, r4, #528	; 0x210
 8009fa8:	68cb      	ldr	r3, [r1, #12]
 8009faa:	684a      	ldr	r2, [r1, #4]
 8009fac:	7809      	ldrb	r1, [r1, #0]
 8009fae:	f7fc fa47 	bl	8006440 <wps_phy_read_register>

    circular_queue_dequeue(wps->read_request_queue);
 8009fb2:	f8d4 0378 	ldr.w	r0, [r4, #888]	; 0x378
 8009fb6:	f001 f81f 	bl	800aff8 <circular_queue_dequeue>
}
 8009fba:	e7b9      	b.n	8009f30 <yield+0x24>
            process_write_request(wps, request);
 8009fbc:	6803      	ldr	r3, [r0, #0]
    wps_phy_write_register(wps->phy, write_request->target_register, write_request->data);
 8009fbe:	f504 7004 	add.w	r0, r4, #528	; 0x210
 8009fc2:	785a      	ldrb	r2, [r3, #1]
 8009fc4:	7819      	ldrb	r1, [r3, #0]
 8009fc6:	f7fc fa39 	bl	800643c <wps_phy_write_register>
    circular_queue_dequeue(wps->write_request_queue);
 8009fca:	f8d4 0374 	ldr.w	r0, [r4, #884]	; 0x374
 8009fce:	f001 f813 	bl	800aff8 <circular_queue_dequeue>
}
 8009fd2:	e7ad      	b.n	8009f30 <yield+0x24>
 8009fd4:	0800a0e9 	.word	0x0800a0e9

08009fd8 <mac_post>:
{
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	4604      	mov	r4, r0
    wps_mac_process(&wps->mac);
 8009fdc:	3050      	adds	r0, #80	; 0x50
 8009fde:	f7ff fd7b 	bl	8009ad8 <wps_mac_process>
    switch (mac->output_signal.main_signal) {
 8009fe2:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	2b04      	cmp	r3, #4
 8009fea:	d80a      	bhi.n	800a002 <mac_post+0x2a>
 8009fec:	e8df f003 	tbb	[pc, r3]
 8009ff0:	2c4b0957 	.word	0x2c4b0957
 8009ff4:	03          	.byte	0x03
 8009ff5:	00          	.byte	0x00
        wps_callback_enqueue(&wps->l7.callback_queue, mac->main_xlayer);
 8009ff6:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
 8009ffa:	f104 0018 	add.w	r0, r4, #24
 8009ffe:	f7fe feb7 	bl	8008d70 <wps_callback_enqueue>
    switch (mac->output_signal.auto_signal) {
 800a002:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800a006:	2b04      	cmp	r3, #4
 800a008:	d02f      	beq.n	800a06a <mac_post+0x92>
 800a00a:	2b05      	cmp	r3, #5
 800a00c:	d063      	beq.n	800a0d6 <mac_post+0xfe>
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d053      	beq.n	800a0ba <mac_post+0xe2>
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 800a012:	f504 7548 	add.w	r5, r4, #800	; 0x320
    wps->process_signal = PROCESS_SIGNAL_EXECUTE;
 800a016:	2600      	movs	r6, #0
 800a018:	f884 6314 	strb.w	r6, [r4, #788]	; 0x314
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 800a01c:	4628      	mov	r0, r5
 800a01e:	f000 ff97 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 800a022:	4b30      	ldr	r3, [pc, #192]	; (800a0e4 <mac_post+0x10c>)
 800a024:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps->next_states);
 800a026:	4628      	mov	r0, r5
 800a028:	f000 ffa2 	bl	800af70 <circular_queue_enqueue_raw>
    wps->state_step    = 0;
 800a02c:	f884 6364 	strb.w	r6, [r4, #868]	; 0x364
    dequeue_state     = (wps_process_state_t *)circular_queue_front_raw(&wps->next_states);
 800a030:	4628      	mov	r0, r5
 800a032:	f000 ff7d 	bl	800af30 <circular_queue_front_raw>
 800a036:	4603      	mov	r3, r0
    circular_queue_dequeue_raw(&wps->next_states);
 800a038:	4628      	mov	r0, r5
    wps->current_state = *dequeue_state;
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
}
 800a040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    circular_queue_dequeue_raw(&wps->next_states);
 800a044:	f000 bfc6 	b.w	800afd4 <circular_queue_dequeue_raw>
        wps_callback_enqueue(&wps->l7.callback_queue, mac->main_xlayer);
 800a048:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
 800a04c:	f104 0018 	add.w	r0, r4, #24
 800a050:	f7fe fe8e 	bl	8008d70 <wps_callback_enqueue>
        send_done(mac->current_timeslot->connection_main);
 800a054:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    return circular_queue_dequeue(&connection->xlayer_queue);
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f500 7041 	add.w	r0, r0, #772	; 0x304
 800a05e:	f000 ffcb 	bl	800aff8 <circular_queue_dequeue>
    switch (mac->output_signal.auto_signal) {
 800a062:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800a066:	2b04      	cmp	r3, #4
 800a068:	d1cf      	bne.n	800a00a <mac_post+0x32>
        wps_callback_enqueue(&wps->l7.callback_queue, mac->auto_xlayer);
 800a06a:	f104 0018 	add.w	r0, r4, #24
 800a06e:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
 800a072:	f7fe fe7d 	bl	8008d70 <wps_callback_enqueue>
        send_done(mac->current_timeslot->connection_auto_reply);
 800a076:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    return circular_queue_dequeue(&connection->xlayer_queue);
 800a07a:	6858      	ldr	r0, [r3, #4]
 800a07c:	f500 7041 	add.w	r0, r0, #772	; 0x304
 800a080:	f000 ffba 	bl	800aff8 <circular_queue_dequeue>
 800a084:	e7c5      	b.n	800a012 <mac_post+0x3a>
        mac->current_timeslot->connection_main->wps_error = WPS_RX_OVERRUN_ERROR;
 800a086:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2201      	movs	r2, #1
 800a08e:	719a      	strb	r2, [r3, #6]
        wps_callback_enqueue(&wps->l7.callback_queue, mac->main_xlayer);
 800a090:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
 800a094:	f104 0018 	add.w	r0, r4, #24
 800a098:	f7fe fe6a 	bl	8008d70 <wps_callback_enqueue>
        break;
 800a09c:	e7b1      	b.n	800a002 <mac_post+0x2a>
        enqueue_rx_frame(mac->current_timeslot->connection_main);
 800a09e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    return circular_queue_enqueue(&connection->xlayer_queue);
 800a0a2:	6818      	ldr	r0, [r3, #0]
 800a0a4:	f500 7041 	add.w	r0, r0, #772	; 0x304
 800a0a8:	f000 ff74 	bl	800af94 <circular_queue_enqueue>
        wps_callback_enqueue(&wps->l7.callback_queue, mac->main_xlayer);
 800a0ac:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
 800a0b0:	f104 0018 	add.w	r0, r4, #24
 800a0b4:	f7fe fe5c 	bl	8008d70 <wps_callback_enqueue>
        break;
 800a0b8:	e7a3      	b.n	800a002 <mac_post+0x2a>
        enqueue_rx_frame(mac->current_timeslot->connection_auto_reply);
 800a0ba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    return circular_queue_enqueue(&connection->xlayer_queue);
 800a0be:	6858      	ldr	r0, [r3, #4]
 800a0c0:	f500 7041 	add.w	r0, r0, #772	; 0x304
 800a0c4:	f000 ff66 	bl	800af94 <circular_queue_enqueue>
        wps_callback_enqueue(&wps->l7.callback_queue, mac->auto_xlayer);
 800a0c8:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
 800a0cc:	f104 0018 	add.w	r0, r4, #24
 800a0d0:	f7fe fe4e 	bl	8008d70 <wps_callback_enqueue>
        break;
 800a0d4:	e79d      	b.n	800a012 <mac_post+0x3a>
        wps_callback_enqueue(&wps->l7.callback_queue, mac->auto_xlayer);
 800a0d6:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
 800a0da:	f104 0018 	add.w	r0, r4, #24
 800a0de:	f7fe fe47 	bl	8008d70 <wps_callback_enqueue>
        break;
 800a0e2:	e796      	b.n	800a012 <mac_post+0x3a>
 800a0e4:	08009e61 	.word	0x08009e61

0800a0e8 <phy_handle>:
{
 800a0e8:	b570      	push	{r4, r5, r6, lr}
    switch (wps_phy_get_main_signal(wps->phy)) {
 800a0ea:	f500 7504 	add.w	r5, r0, #528	; 0x210
{
 800a0ee:	4604      	mov	r4, r0
    switch (wps_phy_get_main_signal(wps->phy)) {
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f7fc f979 	bl	80063e8 <wps_phy_get_main_signal>
 800a0f6:	3802      	subs	r0, #2
 800a0f8:	2807      	cmp	r0, #7
 800a0fa:	d83c      	bhi.n	800a176 <phy_handle+0x8e>
 800a0fc:	e8df f000 	tbb	[pc, r0]
 800a100:	04041338 	.word	0x04041338
 800a104:	2e040404 	.word	0x2e040404
        wps->process_signal = PROCESS_SIGNAL_EXECUTE;
 800a108:	2300      	movs	r3, #0
 800a10a:	f884 3314 	strb.w	r3, [r4, #788]	; 0x314
    switch (wps_phy_get_main_signal(phy)) {
 800a10e:	4628      	mov	r0, r5
 800a110:	f7fc f96a 	bl	80063e8 <wps_phy_get_main_signal>
 800a114:	2808      	cmp	r0, #8
 800a116:	d832      	bhi.n	800a17e <phy_handle+0x96>
 800a118:	e8df f000 	tbb	[pc, r0]
 800a11c:	3131312e 	.word	0x3131312e
 800a120:	69316561 	.word	0x69316561
 800a124:	5d          	.byte	0x5d
 800a125:	00          	.byte	0x00
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 800a126:	f504 7548 	add.w	r5, r4, #800	; 0x320
        wps->process_signal = PROCESS_SIGNAL_EXECUTE;
 800a12a:	2600      	movs	r6, #0
 800a12c:	f884 6314 	strb.w	r6, [r4, #788]	; 0x314
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 800a130:	4628      	mov	r0, r5
 800a132:	f000 ff0d 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 800a136:	4b3a      	ldr	r3, [pc, #232]	; (800a220 <phy_handle+0x138>)
 800a138:	6003      	str	r3, [r0, #0]
    circular_queue_enqueue_raw(&wps->next_states);
 800a13a:	4628      	mov	r0, r5
 800a13c:	f000 ff18 	bl	800af70 <circular_queue_enqueue_raw>
    wps->state_step    = 0;
 800a140:	f884 6364 	strb.w	r6, [r4, #868]	; 0x364
    dequeue_state     = (wps_process_state_t *)circular_queue_front_raw(&wps->next_states);
 800a144:	4628      	mov	r0, r5
 800a146:	f000 fef3 	bl	800af30 <circular_queue_front_raw>
 800a14a:	4603      	mov	r3, r0
    circular_queue_dequeue_raw(&wps->next_states);
 800a14c:	4628      	mov	r0, r5
    wps->current_state = *dequeue_state;
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
}
 800a154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    circular_queue_dequeue_raw(&wps->next_states);
 800a158:	f000 bf3c 	b.w	800afd4 <circular_queue_dequeue_raw>
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 800a15c:	f504 7548 	add.w	r5, r4, #800	; 0x320
        wps->process_signal = PROCESS_SIGNAL_EXECUTE;
 800a160:	2600      	movs	r6, #0
 800a162:	f884 6314 	strb.w	r6, [r4, #788]	; 0x314
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 800a166:	4628      	mov	r0, r5
 800a168:	f000 fef2 	bl	800af50 <circular_queue_get_free_slot_raw>
    *enqueue_states = state;
 800a16c:	4b2d      	ldr	r3, [pc, #180]	; (800a224 <phy_handle+0x13c>)
 800a16e:	e7e3      	b.n	800a138 <phy_handle+0x50>
        wps->process_signal = PROCESS_SIGNAL_YIELD;
 800a170:	2301      	movs	r3, #1
 800a172:	f884 3314 	strb.w	r3, [r4, #788]	; 0x314
}
 800a176:	bd70      	pop	{r4, r5, r6, pc}
        mac->input_signal.main_signal = MAC_SIGNAL_EMPTY;
 800a178:	2309      	movs	r3, #9
 800a17a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    switch (wps_phy_get_auto_signal(phy)) {
 800a17e:	4628      	mov	r0, r5
 800a180:	f7fc f934 	bl	80063ec <wps_phy_get_auto_signal>
 800a184:	2808      	cmp	r0, #8
 800a186:	d809      	bhi.n	800a19c <phy_handle+0xb4>
 800a188:	e8df f000 	tbb	[pc, r0]
 800a18c:	08080805 	.word	0x08080805
 800a190:	413d3935 	.word	0x413d3935
 800a194:	45          	.byte	0x45
 800a195:	00          	.byte	0x00
        mac->input_signal.auto_signal = MAC_SIGNAL_EMPTY;
 800a196:	2309      	movs	r3, #9
 800a198:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 800a19c:	f504 7648 	add.w	r6, r4, #800	; 0x320
        wps_phy_end_process(wps->phy);
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f7fc f943 	bl	800642c <wps_phy_end_process>
    enqueue_states  = (wps_process_state_t *)circular_queue_get_free_slot_raw(&wps->next_states);
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f000 fed2 	bl	800af50 <circular_queue_get_free_slot_raw>
 800a1ac:	4603      	mov	r3, r0
    *enqueue_states = state;
 800a1ae:	4a1e      	ldr	r2, [pc, #120]	; (800a228 <phy_handle+0x140>)
 800a1b0:	601a      	str	r2, [r3, #0]
    circular_queue_enqueue_raw(&wps->next_states);
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f000 fedc 	bl	800af70 <circular_queue_enqueue_raw>
    wps->state_step    = 0;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	f884 3364 	strb.w	r3, [r4, #868]	; 0x364
    dequeue_state     = (wps_process_state_t *)circular_queue_front_raw(&wps->next_states);
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f000 feb6 	bl	800af30 <circular_queue_front_raw>
 800a1c4:	4603      	mov	r3, r0
    circular_queue_dequeue_raw(&wps->next_states);
 800a1c6:	4630      	mov	r0, r6
    wps->current_state = *dequeue_state;
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
}
 800a1ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    circular_queue_dequeue_raw(&wps->next_states);
 800a1d2:	f000 beff 	b.w	800afd4 <circular_queue_dequeue_raw>
        mac->input_signal.main_signal = MAC_SIGNAL_RX_FRAME_MISS;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        break;
 800a1dc:	e7cf      	b.n	800a17e <phy_handle+0x96>
        mac->input_signal.main_signal = MAC_SIGNAL_TX_SENT_ACK;
 800a1de:	2302      	movs	r3, #2
 800a1e0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        break;
 800a1e4:	e7cb      	b.n	800a17e <phy_handle+0x96>
        mac->input_signal.main_signal = MAC_SIGNAL_TX_SENT_NACK;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        break;
 800a1ec:	e7c7      	b.n	800a17e <phy_handle+0x96>
        mac->input_signal.main_signal = MAC_SIGNAL_RX_FRAME;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        break;
 800a1f4:	e7c3      	b.n	800a17e <phy_handle+0x96>
        mac->input_signal.auto_signal = MAC_SIGNAL_TX_SENT_ACK;
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        break;
 800a1fc:	e7ce      	b.n	800a19c <phy_handle+0xb4>
        mac->input_signal.auto_signal = MAC_SIGNAL_TX_SENT_NACK;
 800a1fe:	2303      	movs	r3, #3
 800a200:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        break;
 800a204:	e7ca      	b.n	800a19c <phy_handle+0xb4>
        mac->input_signal.auto_signal = MAC_SIGNAL_TX_NOT_SENT;
 800a206:	2304      	movs	r3, #4
 800a208:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        break;
 800a20c:	e7c6      	b.n	800a19c <phy_handle+0xb4>
        mac->input_signal.auto_signal = MAC_SIGNAL_RX_FRAME;
 800a20e:	2300      	movs	r3, #0
 800a210:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        break;
 800a214:	e7c2      	b.n	800a19c <phy_handle+0xb4>
        mac->input_signal.auto_signal = MAC_SIGNAL_RX_FRAME_MISS;
 800a216:	2301      	movs	r3, #1
 800a218:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        break;
 800a21c:	e7be      	b.n	800a19c <phy_handle+0xb4>
 800a21e:	bf00      	nop
 800a220:	08009f0d 	.word	0x08009f0d
 800a224:	08009ded 	.word	0x08009ded
 800a228:	08009fd9 	.word	0x08009fd9

0800a22c <wps_process_init>:
    wps->current_state  = idle;
 800a22c:	4a07      	ldr	r2, [pc, #28]	; (800a24c <wps_process_init+0x20>)
    wps->end_state      = end_state;
 800a22e:	4b08      	ldr	r3, [pc, #32]	; (800a250 <wps_process_init+0x24>)
    wps->state_step     = 0;
 800a230:	2100      	movs	r1, #0
    wps->end_state      = end_state;
 800a232:	e9c0 23c6 	strd	r2, r3, [r0, #792]	; 0x318
    wps->state_step     = 0;
 800a236:	f880 1364 	strb.w	r1, [r0, #868]	; 0x364
    circular_queue_init(&wps->next_states, wps->next_state_pool, PROCESS_STATE_Q_SIZE, sizeof(wps_phy_state_t **));
 800a23a:	2304      	movs	r3, #4
 800a23c:	f500 714f 	add.w	r1, r0, #828	; 0x33c
 800a240:	220a      	movs	r2, #10
 800a242:	f500 7048 	add.w	r0, r0, #800	; 0x320
 800a246:	f000 be65 	b.w	800af14 <circular_queue_init>
 800a24a:	bf00      	nop
 800a24c:	08009da1 	.word	0x08009da1
 800a250:	08009d79 	.word	0x08009d79

0800a254 <wps_process_callback>:
{
 800a254:	b510      	push	{r4, lr}
    while (circular_queue_is_empty(&wps->l7.callback_queue) == false) {
 800a256:	f100 0418 	add.w	r4, r0, #24
 800a25a:	e009      	b.n	800a270 <wps_process_callback+0x1c>
        callback = circular_queue_front(&wps->l7.callback_queue);
 800a25c:	f000 fe6a 	bl	800af34 <circular_queue_front>
        if (callback != NULL && callback->func != NULL) {
 800a260:	b118      	cbz	r0, 800a26a <wps_process_callback+0x16>
 800a262:	6803      	ldr	r3, [r0, #0]
 800a264:	b10b      	cbz	r3, 800a26a <wps_process_callback+0x16>
            callback->func(callback->parg);
 800a266:	6840      	ldr	r0, [r0, #4]
 800a268:	4798      	blx	r3
        circular_queue_dequeue(&wps->l7.callback_queue);
 800a26a:	4620      	mov	r0, r4
 800a26c:	f000 fec4 	bl	800aff8 <circular_queue_dequeue>
    while (circular_queue_is_empty(&wps->l7.callback_queue) == false) {
 800a270:	4620      	mov	r0, r4
 800a272:	f000 fee3 	bl	800b03c <circular_queue_is_empty>
 800a276:	4603      	mov	r3, r0
        callback = circular_queue_front(&wps->l7.callback_queue);
 800a278:	4620      	mov	r0, r4
    while (circular_queue_is_empty(&wps->l7.callback_queue) == false) {
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0ee      	beq.n	800a25c <wps_process_callback+0x8>
}
 800a27e:	bd10      	pop	{r4, pc}

0800a280 <configure_biquad_coefficients.constprop.0>:

/** @brief Configure BiQuad Coefficients in the codec.
 *
 *  @param[in] i2c_hal  Hardware Abstraction Layer structure i2c_hal.
 */
static void configure_biquad_coefficients(max98091_i2c_hal_t *i2c_hal, max98091_biq_t *biquad)
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	4604      	mov	r4, r0
{
    /* BAND 1 */
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_B0_23_16, biquad->band1.coef_b0.bit.msb16_23);
 800a284:	4d9d      	ldr	r5, [pc, #628]	; (800a4fc <configure_biquad_coefficients.constprop.0+0x27c>)
 800a286:	6863      	ldr	r3, [r4, #4]
 800a288:	78aa      	ldrb	r2, [r5, #2]
 800a28a:	7800      	ldrb	r0, [r0, #0]
 800a28c:	2146      	movs	r1, #70	; 0x46
 800a28e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_B0_15_08, biquad->band1.coef_b0.bit.lsb8_15);
 800a290:	786a      	ldrb	r2, [r5, #1]
 800a292:	7820      	ldrb	r0, [r4, #0]
 800a294:	6863      	ldr	r3, [r4, #4]
 800a296:	2147      	movs	r1, #71	; 0x47
 800a298:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_B0_07_00, biquad->band1.coef_b0.bit.lsb0_7);
 800a29a:	782a      	ldrb	r2, [r5, #0]
 800a29c:	7820      	ldrb	r0, [r4, #0]
 800a29e:	6863      	ldr	r3, [r4, #4]
 800a2a0:	2148      	movs	r1, #72	; 0x48
 800a2a2:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_B1_23_16, biquad->band1.coef_b1.bit.msb16_23);
 800a2a4:	79aa      	ldrb	r2, [r5, #6]
 800a2a6:	7820      	ldrb	r0, [r4, #0]
 800a2a8:	6863      	ldr	r3, [r4, #4]
 800a2aa:	2149      	movs	r1, #73	; 0x49
 800a2ac:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_B1_15_08, biquad->band1.coef_b1.bit.lsb8_15);
 800a2ae:	796a      	ldrb	r2, [r5, #5]
 800a2b0:	7820      	ldrb	r0, [r4, #0]
 800a2b2:	6863      	ldr	r3, [r4, #4]
 800a2b4:	214a      	movs	r1, #74	; 0x4a
 800a2b6:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_B1_07_00, biquad->band1.coef_b1.bit.lsb0_7);
 800a2b8:	792a      	ldrb	r2, [r5, #4]
 800a2ba:	7820      	ldrb	r0, [r4, #0]
 800a2bc:	6863      	ldr	r3, [r4, #4]
 800a2be:	214b      	movs	r1, #75	; 0x4b
 800a2c0:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_B2_23_16, biquad->band1.coef_b2.bit.msb16_23);
 800a2c2:	7aaa      	ldrb	r2, [r5, #10]
 800a2c4:	7820      	ldrb	r0, [r4, #0]
 800a2c6:	6863      	ldr	r3, [r4, #4]
 800a2c8:	214c      	movs	r1, #76	; 0x4c
 800a2ca:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_B2_15_08, biquad->band1.coef_b2.bit.lsb8_15);
 800a2cc:	7a6a      	ldrb	r2, [r5, #9]
 800a2ce:	7820      	ldrb	r0, [r4, #0]
 800a2d0:	6863      	ldr	r3, [r4, #4]
 800a2d2:	214d      	movs	r1, #77	; 0x4d
 800a2d4:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_B2_07_00, biquad->band1.coef_b2.bit.lsb0_7);
 800a2d6:	7a2a      	ldrb	r2, [r5, #8]
 800a2d8:	7820      	ldrb	r0, [r4, #0]
 800a2da:	6863      	ldr	r3, [r4, #4]
 800a2dc:	214e      	movs	r1, #78	; 0x4e
 800a2de:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_A1_23_16, biquad->band1.coef_a1.bit.msb16_23);
 800a2e0:	7baa      	ldrb	r2, [r5, #14]
 800a2e2:	7820      	ldrb	r0, [r4, #0]
 800a2e4:	6863      	ldr	r3, [r4, #4]
 800a2e6:	214f      	movs	r1, #79	; 0x4f
 800a2e8:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_A1_15_08, biquad->band1.coef_a1.bit.lsb8_15);
 800a2ea:	7b6a      	ldrb	r2, [r5, #13]
 800a2ec:	7820      	ldrb	r0, [r4, #0]
 800a2ee:	6863      	ldr	r3, [r4, #4]
 800a2f0:	2150      	movs	r1, #80	; 0x50
 800a2f2:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_A1_07_00, biquad->band1.coef_a1.bit.lsb0_7);
 800a2f4:	7b2a      	ldrb	r2, [r5, #12]
 800a2f6:	7820      	ldrb	r0, [r4, #0]
 800a2f8:	6863      	ldr	r3, [r4, #4]
 800a2fa:	2151      	movs	r1, #81	; 0x51
 800a2fc:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_A2_23_16, biquad->band1.coef_a2.bit.msb16_23);
 800a2fe:	7caa      	ldrb	r2, [r5, #18]
 800a300:	7820      	ldrb	r0, [r4, #0]
 800a302:	6863      	ldr	r3, [r4, #4]
 800a304:	2152      	movs	r1, #82	; 0x52
 800a306:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_A2_15_08, biquad->band1.coef_a2.bit.lsb8_15);
 800a308:	7c6a      	ldrb	r2, [r5, #17]
 800a30a:	7820      	ldrb	r0, [r4, #0]
 800a30c:	6863      	ldr	r3, [r4, #4]
 800a30e:	2153      	movs	r1, #83	; 0x53
 800a310:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND1_A2_07_00, biquad->band1.coef_a2.bit.lsb0_7);
 800a312:	7c2a      	ldrb	r2, [r5, #16]
 800a314:	7820      	ldrb	r0, [r4, #0]
 800a316:	6863      	ldr	r3, [r4, #4]
 800a318:	2154      	movs	r1, #84	; 0x54
 800a31a:	4798      	blx	r3

    /* BAND 2 */
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_B0_23_16, biquad->band2.coef_b0.bit.msb16_23);
 800a31c:	7daa      	ldrb	r2, [r5, #22]
 800a31e:	7820      	ldrb	r0, [r4, #0]
 800a320:	6863      	ldr	r3, [r4, #4]
 800a322:	2155      	movs	r1, #85	; 0x55
 800a324:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_B0_15_08, biquad->band2.coef_b0.bit.lsb8_15);
 800a326:	7d6a      	ldrb	r2, [r5, #21]
 800a328:	7820      	ldrb	r0, [r4, #0]
 800a32a:	6863      	ldr	r3, [r4, #4]
 800a32c:	2156      	movs	r1, #86	; 0x56
 800a32e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_B0_07_00, biquad->band2.coef_b0.bit.lsb0_7);
 800a330:	7d2a      	ldrb	r2, [r5, #20]
 800a332:	7820      	ldrb	r0, [r4, #0]
 800a334:	6863      	ldr	r3, [r4, #4]
 800a336:	2157      	movs	r1, #87	; 0x57
 800a338:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_B1_23_16, biquad->band2.coef_b1.bit.msb16_23);
 800a33a:	7eaa      	ldrb	r2, [r5, #26]
 800a33c:	7820      	ldrb	r0, [r4, #0]
 800a33e:	6863      	ldr	r3, [r4, #4]
 800a340:	2158      	movs	r1, #88	; 0x58
 800a342:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_B1_15_08, biquad->band2.coef_b1.bit.lsb8_15);
 800a344:	7e6a      	ldrb	r2, [r5, #25]
 800a346:	7820      	ldrb	r0, [r4, #0]
 800a348:	6863      	ldr	r3, [r4, #4]
 800a34a:	2159      	movs	r1, #89	; 0x59
 800a34c:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_B1_07_00, biquad->band2.coef_b1.bit.lsb0_7);
 800a34e:	7e2a      	ldrb	r2, [r5, #24]
 800a350:	7820      	ldrb	r0, [r4, #0]
 800a352:	6863      	ldr	r3, [r4, #4]
 800a354:	215a      	movs	r1, #90	; 0x5a
 800a356:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_B2_23_16, biquad->band2.coef_b2.bit.msb16_23);
 800a358:	7faa      	ldrb	r2, [r5, #30]
 800a35a:	7820      	ldrb	r0, [r4, #0]
 800a35c:	6863      	ldr	r3, [r4, #4]
 800a35e:	215b      	movs	r1, #91	; 0x5b
 800a360:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_B2_15_08, biquad->band2.coef_b2.bit.lsb8_15);
 800a362:	7f6a      	ldrb	r2, [r5, #29]
 800a364:	7820      	ldrb	r0, [r4, #0]
 800a366:	6863      	ldr	r3, [r4, #4]
 800a368:	215c      	movs	r1, #92	; 0x5c
 800a36a:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_B2_07_00, biquad->band2.coef_b2.bit.lsb0_7);
 800a36c:	7f2a      	ldrb	r2, [r5, #28]
 800a36e:	7820      	ldrb	r0, [r4, #0]
 800a370:	6863      	ldr	r3, [r4, #4]
 800a372:	215d      	movs	r1, #93	; 0x5d
 800a374:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_A1_23_16, biquad->band2.coef_a1.bit.msb16_23);
 800a376:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800a37a:	7820      	ldrb	r0, [r4, #0]
 800a37c:	6863      	ldr	r3, [r4, #4]
 800a37e:	215e      	movs	r1, #94	; 0x5e
 800a380:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_A1_15_08, biquad->band2.coef_a1.bit.lsb8_15);
 800a382:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 800a386:	7820      	ldrb	r0, [r4, #0]
 800a388:	6863      	ldr	r3, [r4, #4]
 800a38a:	215f      	movs	r1, #95	; 0x5f
 800a38c:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_A1_07_00, biquad->band2.coef_a1.bit.lsb0_7);
 800a38e:	f895 2020 	ldrb.w	r2, [r5, #32]
 800a392:	7820      	ldrb	r0, [r4, #0]
 800a394:	6863      	ldr	r3, [r4, #4]
 800a396:	2160      	movs	r1, #96	; 0x60
 800a398:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_A2_23_16, biquad->band2.coef_a2.bit.msb16_23);
 800a39a:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
 800a39e:	7820      	ldrb	r0, [r4, #0]
 800a3a0:	6863      	ldr	r3, [r4, #4]
 800a3a2:	2161      	movs	r1, #97	; 0x61
 800a3a4:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_A2_15_08, biquad->band2.coef_a2.bit.lsb8_15);
 800a3a6:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 800a3aa:	7820      	ldrb	r0, [r4, #0]
 800a3ac:	6863      	ldr	r3, [r4, #4]
 800a3ae:	2162      	movs	r1, #98	; 0x62
 800a3b0:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND2_A2_07_00, biquad->band2.coef_a2.bit.lsb0_7);
 800a3b2:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800a3b6:	7820      	ldrb	r0, [r4, #0]
 800a3b8:	6863      	ldr	r3, [r4, #4]
 800a3ba:	2163      	movs	r1, #99	; 0x63
 800a3bc:	4798      	blx	r3

    /* BAND 3 */
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_B0_23_16, biquad->band3.coef_b0.bit.msb16_23);
 800a3be:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
 800a3c2:	7820      	ldrb	r0, [r4, #0]
 800a3c4:	6863      	ldr	r3, [r4, #4]
 800a3c6:	2164      	movs	r1, #100	; 0x64
 800a3c8:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_B0_15_08, biquad->band3.coef_b0.bit.lsb8_15);
 800a3ca:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800a3ce:	7820      	ldrb	r0, [r4, #0]
 800a3d0:	6863      	ldr	r3, [r4, #4]
 800a3d2:	2165      	movs	r1, #101	; 0x65
 800a3d4:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_B0_07_00, biquad->band3.coef_b0.bit.lsb0_7);
 800a3d6:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800a3da:	7820      	ldrb	r0, [r4, #0]
 800a3dc:	6863      	ldr	r3, [r4, #4]
 800a3de:	2166      	movs	r1, #102	; 0x66
 800a3e0:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_B1_23_16, biquad->band3.coef_b1.bit.msb16_23);
 800a3e2:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
 800a3e6:	7820      	ldrb	r0, [r4, #0]
 800a3e8:	6863      	ldr	r3, [r4, #4]
 800a3ea:	2167      	movs	r1, #103	; 0x67
 800a3ec:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_B1_15_08, biquad->band3.coef_b1.bit.lsb8_15);
 800a3ee:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 800a3f2:	7820      	ldrb	r0, [r4, #0]
 800a3f4:	6863      	ldr	r3, [r4, #4]
 800a3f6:	2168      	movs	r1, #104	; 0x68
 800a3f8:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_B1_07_00, biquad->band3.coef_b1.bit.lsb0_7);
 800a3fa:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800a3fe:	7820      	ldrb	r0, [r4, #0]
 800a400:	6863      	ldr	r3, [r4, #4]
 800a402:	2169      	movs	r1, #105	; 0x69
 800a404:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_B2_23_16, biquad->band3.coef_b2.bit.msb16_23);
 800a406:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
 800a40a:	7820      	ldrb	r0, [r4, #0]
 800a40c:	6863      	ldr	r3, [r4, #4]
 800a40e:	216a      	movs	r1, #106	; 0x6a
 800a410:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_B2_15_08, biquad->band3.coef_b2.bit.lsb8_15);
 800a412:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
 800a416:	7820      	ldrb	r0, [r4, #0]
 800a418:	6863      	ldr	r3, [r4, #4]
 800a41a:	216b      	movs	r1, #107	; 0x6b
 800a41c:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_B2_07_00, biquad->band3.coef_b2.bit.lsb0_7);
 800a41e:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 800a422:	7820      	ldrb	r0, [r4, #0]
 800a424:	6863      	ldr	r3, [r4, #4]
 800a426:	216c      	movs	r1, #108	; 0x6c
 800a428:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_A1_23_16, biquad->band3.coef_a1.bit.msb16_23);
 800a42a:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
 800a42e:	7820      	ldrb	r0, [r4, #0]
 800a430:	6863      	ldr	r3, [r4, #4]
 800a432:	216d      	movs	r1, #109	; 0x6d
 800a434:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_A1_15_08, biquad->band3.coef_a1.bit.lsb8_15);
 800a436:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
 800a43a:	7820      	ldrb	r0, [r4, #0]
 800a43c:	6863      	ldr	r3, [r4, #4]
 800a43e:	216e      	movs	r1, #110	; 0x6e
 800a440:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_A1_07_00, biquad->band3.coef_a1.bit.lsb0_7);
 800a442:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 800a446:	7820      	ldrb	r0, [r4, #0]
 800a448:	6863      	ldr	r3, [r4, #4]
 800a44a:	216f      	movs	r1, #111	; 0x6f
 800a44c:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_A2_23_16, biquad->band3.coef_a2.bit.msb16_23);
 800a44e:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
 800a452:	7820      	ldrb	r0, [r4, #0]
 800a454:	6863      	ldr	r3, [r4, #4]
 800a456:	2170      	movs	r1, #112	; 0x70
 800a458:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_A2_15_08, biquad->band3.coef_a2.bit.lsb8_15);
 800a45a:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
 800a45e:	7820      	ldrb	r0, [r4, #0]
 800a460:	6863      	ldr	r3, [r4, #4]
 800a462:	2171      	movs	r1, #113	; 0x71
 800a464:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND3_A2_07_00, biquad->band3.coef_a2.bit.lsb0_7);
 800a466:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
 800a46a:	7820      	ldrb	r0, [r4, #0]
 800a46c:	6863      	ldr	r3, [r4, #4]
 800a46e:	2172      	movs	r1, #114	; 0x72
 800a470:	4798      	blx	r3

    /*BAND 4*/
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_B0_23_16, biquad->band4.coef_b0.bit.msb16_23);
 800a472:	f895 203e 	ldrb.w	r2, [r5, #62]	; 0x3e
 800a476:	7820      	ldrb	r0, [r4, #0]
 800a478:	6863      	ldr	r3, [r4, #4]
 800a47a:	2173      	movs	r1, #115	; 0x73
 800a47c:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_B0_15_08, biquad->band4.coef_b0.bit.lsb8_15);
 800a47e:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
 800a482:	7820      	ldrb	r0, [r4, #0]
 800a484:	6863      	ldr	r3, [r4, #4]
 800a486:	2174      	movs	r1, #116	; 0x74
 800a488:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_B0_07_00, biquad->band4.coef_b0.bit.lsb0_7);
 800a48a:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 800a48e:	7820      	ldrb	r0, [r4, #0]
 800a490:	6863      	ldr	r3, [r4, #4]
 800a492:	2175      	movs	r1, #117	; 0x75
 800a494:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_B1_23_16, biquad->band4.coef_b1.bit.msb16_23);
 800a496:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
 800a49a:	7820      	ldrb	r0, [r4, #0]
 800a49c:	6863      	ldr	r3, [r4, #4]
 800a49e:	2176      	movs	r1, #118	; 0x76
 800a4a0:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_B1_15_08, biquad->band4.coef_b1.bit.lsb8_15);
 800a4a2:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
 800a4a6:	7820      	ldrb	r0, [r4, #0]
 800a4a8:	6863      	ldr	r3, [r4, #4]
 800a4aa:	2177      	movs	r1, #119	; 0x77
 800a4ac:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_B1_07_00, biquad->band4.coef_b1.bit.lsb0_7);
 800a4ae:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 800a4b2:	7820      	ldrb	r0, [r4, #0]
 800a4b4:	6863      	ldr	r3, [r4, #4]
 800a4b6:	2178      	movs	r1, #120	; 0x78
 800a4b8:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_B2_23_16, biquad->band4.coef_b2.bit.msb16_23);
 800a4ba:	f895 2046 	ldrb.w	r2, [r5, #70]	; 0x46
 800a4be:	7820      	ldrb	r0, [r4, #0]
 800a4c0:	6863      	ldr	r3, [r4, #4]
 800a4c2:	2179      	movs	r1, #121	; 0x79
 800a4c4:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_B2_15_08, biquad->band4.coef_b2.bit.lsb8_15);
 800a4c6:	f895 2045 	ldrb.w	r2, [r5, #69]	; 0x45
 800a4ca:	7820      	ldrb	r0, [r4, #0]
 800a4cc:	6863      	ldr	r3, [r4, #4]
 800a4ce:	217a      	movs	r1, #122	; 0x7a
 800a4d0:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_B2_07_00, biquad->band4.coef_b2.bit.lsb0_7);
 800a4d2:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
 800a4d6:	7820      	ldrb	r0, [r4, #0]
 800a4d8:	6863      	ldr	r3, [r4, #4]
 800a4da:	217b      	movs	r1, #123	; 0x7b
 800a4dc:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_A1_23_16, biquad->band4.coef_a1.bit.msb16_23);
 800a4de:	f895 204a 	ldrb.w	r2, [r5, #74]	; 0x4a
 800a4e2:	7820      	ldrb	r0, [r4, #0]
 800a4e4:	6863      	ldr	r3, [r4, #4]
 800a4e6:	217c      	movs	r1, #124	; 0x7c
 800a4e8:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_A1_15_08, biquad->band4.coef_a1.bit.lsb8_15);
 800a4ea:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
 800a4ee:	7820      	ldrb	r0, [r4, #0]
 800a4f0:	6863      	ldr	r3, [r4, #4]
 800a4f2:	217d      	movs	r1, #125	; 0x7d
 800a4f4:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_A1_07_00, biquad->band4.coef_a1.bit.lsb0_7);
 800a4f6:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800a4fa:	e001      	b.n	800a500 <configure_biquad_coefficients.constprop.0+0x280>
 800a4fc:	20005ff8 	.word	0x20005ff8
 800a500:	7820      	ldrb	r0, [r4, #0]
 800a502:	6863      	ldr	r3, [r4, #4]
 800a504:	217e      	movs	r1, #126	; 0x7e
 800a506:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_A2_23_16, biquad->band4.coef_a2.bit.msb16_23);
 800a508:	f895 204e 	ldrb.w	r2, [r5, #78]	; 0x4e
 800a50c:	7820      	ldrb	r0, [r4, #0]
 800a50e:	6863      	ldr	r3, [r4, #4]
 800a510:	217f      	movs	r1, #127	; 0x7f
 800a512:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_A2_15_08, biquad->band4.coef_a2.bit.lsb8_15);
 800a514:	f895 204d 	ldrb.w	r2, [r5, #77]	; 0x4d
 800a518:	7820      	ldrb	r0, [r4, #0]
 800a51a:	6863      	ldr	r3, [r4, #4]
 800a51c:	2180      	movs	r1, #128	; 0x80
 800a51e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND4_A2_07_00, biquad->band4.coef_a2.bit.lsb0_7);
 800a520:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
 800a524:	7820      	ldrb	r0, [r4, #0]
 800a526:	6863      	ldr	r3, [r4, #4]
 800a528:	2181      	movs	r1, #129	; 0x81
 800a52a:	4798      	blx	r3

    /*BAND 5*/
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_B0_23_16, biquad->band5.coef_b0.bit.msb16_23);
 800a52c:	f895 2052 	ldrb.w	r2, [r5, #82]	; 0x52
 800a530:	7820      	ldrb	r0, [r4, #0]
 800a532:	6863      	ldr	r3, [r4, #4]
 800a534:	2182      	movs	r1, #130	; 0x82
 800a536:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_B0_15_08, biquad->band5.coef_b0.bit.lsb8_15);
 800a538:	f895 2051 	ldrb.w	r2, [r5, #81]	; 0x51
 800a53c:	7820      	ldrb	r0, [r4, #0]
 800a53e:	6863      	ldr	r3, [r4, #4]
 800a540:	2183      	movs	r1, #131	; 0x83
 800a542:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_B0_07_00, biquad->band5.coef_b0.bit.lsb0_7);
 800a544:	f895 2050 	ldrb.w	r2, [r5, #80]	; 0x50
 800a548:	7820      	ldrb	r0, [r4, #0]
 800a54a:	6863      	ldr	r3, [r4, #4]
 800a54c:	2184      	movs	r1, #132	; 0x84
 800a54e:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_B1_23_16, biquad->band5.coef_b1.bit.msb16_23);
 800a550:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
 800a554:	7820      	ldrb	r0, [r4, #0]
 800a556:	6863      	ldr	r3, [r4, #4]
 800a558:	2185      	movs	r1, #133	; 0x85
 800a55a:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_B1_15_08, biquad->band5.coef_b1.bit.lsb8_15);
 800a55c:	f895 2055 	ldrb.w	r2, [r5, #85]	; 0x55
 800a560:	7820      	ldrb	r0, [r4, #0]
 800a562:	6863      	ldr	r3, [r4, #4]
 800a564:	2186      	movs	r1, #134	; 0x86
 800a566:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_B1_07_00, biquad->band5.coef_b1.bit.lsb0_7);
 800a568:	f895 2054 	ldrb.w	r2, [r5, #84]	; 0x54
 800a56c:	7820      	ldrb	r0, [r4, #0]
 800a56e:	6863      	ldr	r3, [r4, #4]
 800a570:	2187      	movs	r1, #135	; 0x87
 800a572:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_B2_23_16, biquad->band5.coef_b2.bit.msb16_23);
 800a574:	f895 205a 	ldrb.w	r2, [r5, #90]	; 0x5a
 800a578:	7820      	ldrb	r0, [r4, #0]
 800a57a:	6863      	ldr	r3, [r4, #4]
 800a57c:	2188      	movs	r1, #136	; 0x88
 800a57e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_B2_15_08, biquad->band5.coef_b2.bit.lsb8_15);
 800a580:	f895 2059 	ldrb.w	r2, [r5, #89]	; 0x59
 800a584:	7820      	ldrb	r0, [r4, #0]
 800a586:	6863      	ldr	r3, [r4, #4]
 800a588:	2189      	movs	r1, #137	; 0x89
 800a58a:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_B2_07_00, biquad->band5.coef_b2.bit.lsb0_7);
 800a58c:	f895 2058 	ldrb.w	r2, [r5, #88]	; 0x58
 800a590:	7820      	ldrb	r0, [r4, #0]
 800a592:	6863      	ldr	r3, [r4, #4]
 800a594:	218a      	movs	r1, #138	; 0x8a
 800a596:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_A1_23_16, biquad->band5.coef_a1.bit.msb16_23);
 800a598:	f895 205e 	ldrb.w	r2, [r5, #94]	; 0x5e
 800a59c:	7820      	ldrb	r0, [r4, #0]
 800a59e:	6863      	ldr	r3, [r4, #4]
 800a5a0:	218b      	movs	r1, #139	; 0x8b
 800a5a2:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_A1_15_08, biquad->band5.coef_a1.bit.lsb8_15);
 800a5a4:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
 800a5a8:	7820      	ldrb	r0, [r4, #0]
 800a5aa:	6863      	ldr	r3, [r4, #4]
 800a5ac:	218c      	movs	r1, #140	; 0x8c
 800a5ae:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_A1_07_00, biquad->band5.coef_a1.bit.lsb0_7);
 800a5b0:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
 800a5b4:	7820      	ldrb	r0, [r4, #0]
 800a5b6:	6863      	ldr	r3, [r4, #4]
 800a5b8:	218d      	movs	r1, #141	; 0x8d
 800a5ba:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_A2_23_16, biquad->band5.coef_a2.bit.msb16_23);
 800a5bc:	f895 2062 	ldrb.w	r2, [r5, #98]	; 0x62
 800a5c0:	7820      	ldrb	r0, [r4, #0]
 800a5c2:	6863      	ldr	r3, [r4, #4]
 800a5c4:	218e      	movs	r1, #142	; 0x8e
 800a5c6:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_A2_15_08, biquad->band5.coef_a2.bit.lsb8_15);
 800a5c8:	f895 2061 	ldrb.w	r2, [r5, #97]	; 0x61
 800a5cc:	7820      	ldrb	r0, [r4, #0]
 800a5ce:	6863      	ldr	r3, [r4, #4]
 800a5d0:	218f      	movs	r1, #143	; 0x8f
 800a5d2:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND5_A2_07_00, biquad->band5.coef_a2.bit.lsb0_7);
 800a5d4:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
 800a5d8:	7820      	ldrb	r0, [r4, #0]
 800a5da:	6863      	ldr	r3, [r4, #4]
 800a5dc:	2190      	movs	r1, #144	; 0x90
 800a5de:	4798      	blx	r3

    /* BAND 6 */
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_B0_23_16, biquad->band6.coef_b0.bit.msb16_23);
 800a5e0:	f895 2066 	ldrb.w	r2, [r5, #102]	; 0x66
 800a5e4:	7820      	ldrb	r0, [r4, #0]
 800a5e6:	6863      	ldr	r3, [r4, #4]
 800a5e8:	2191      	movs	r1, #145	; 0x91
 800a5ea:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_B0_15_08, biquad->band6.coef_b0.bit.lsb8_15);
 800a5ec:	f895 2065 	ldrb.w	r2, [r5, #101]	; 0x65
 800a5f0:	7820      	ldrb	r0, [r4, #0]
 800a5f2:	6863      	ldr	r3, [r4, #4]
 800a5f4:	2192      	movs	r1, #146	; 0x92
 800a5f6:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_B0_07_00, biquad->band6.coef_b0.bit.lsb0_7);
 800a5f8:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
 800a5fc:	7820      	ldrb	r0, [r4, #0]
 800a5fe:	6863      	ldr	r3, [r4, #4]
 800a600:	2193      	movs	r1, #147	; 0x93
 800a602:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_B1_23_16, biquad->band6.coef_b1.bit.msb16_23);
 800a604:	f895 206a 	ldrb.w	r2, [r5, #106]	; 0x6a
 800a608:	7820      	ldrb	r0, [r4, #0]
 800a60a:	6863      	ldr	r3, [r4, #4]
 800a60c:	2194      	movs	r1, #148	; 0x94
 800a60e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_B1_15_08, biquad->band6.coef_b1.bit.lsb8_15);
 800a610:	f895 2069 	ldrb.w	r2, [r5, #105]	; 0x69
 800a614:	7820      	ldrb	r0, [r4, #0]
 800a616:	6863      	ldr	r3, [r4, #4]
 800a618:	2195      	movs	r1, #149	; 0x95
 800a61a:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_B1_07_00, biquad->band6.coef_b1.bit.lsb0_7);
 800a61c:	f895 2068 	ldrb.w	r2, [r5, #104]	; 0x68
 800a620:	7820      	ldrb	r0, [r4, #0]
 800a622:	6863      	ldr	r3, [r4, #4]
 800a624:	2196      	movs	r1, #150	; 0x96
 800a626:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_B2_23_16, biquad->band6.coef_b2.bit.msb16_23);
 800a628:	f895 206e 	ldrb.w	r2, [r5, #110]	; 0x6e
 800a62c:	7820      	ldrb	r0, [r4, #0]
 800a62e:	6863      	ldr	r3, [r4, #4]
 800a630:	2197      	movs	r1, #151	; 0x97
 800a632:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_B2_15_08, biquad->band6.coef_b2.bit.lsb8_15);
 800a634:	f895 206d 	ldrb.w	r2, [r5, #109]	; 0x6d
 800a638:	7820      	ldrb	r0, [r4, #0]
 800a63a:	6863      	ldr	r3, [r4, #4]
 800a63c:	2198      	movs	r1, #152	; 0x98
 800a63e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_B2_07_00, biquad->band6.coef_b2.bit.lsb0_7);
 800a640:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
 800a644:	7820      	ldrb	r0, [r4, #0]
 800a646:	6863      	ldr	r3, [r4, #4]
 800a648:	2199      	movs	r1, #153	; 0x99
 800a64a:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_A1_23_16, biquad->band6.coef_a1.bit.msb16_23);
 800a64c:	f895 2072 	ldrb.w	r2, [r5, #114]	; 0x72
 800a650:	7820      	ldrb	r0, [r4, #0]
 800a652:	6863      	ldr	r3, [r4, #4]
 800a654:	219a      	movs	r1, #154	; 0x9a
 800a656:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_A1_15_08, biquad->band6.coef_a1.bit.lsb8_15);
 800a658:	f895 2071 	ldrb.w	r2, [r5, #113]	; 0x71
 800a65c:	7820      	ldrb	r0, [r4, #0]
 800a65e:	6863      	ldr	r3, [r4, #4]
 800a660:	219b      	movs	r1, #155	; 0x9b
 800a662:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_A1_07_00, biquad->band6.coef_a1.bit.lsb0_7);
 800a664:	f895 2070 	ldrb.w	r2, [r5, #112]	; 0x70
 800a668:	7820      	ldrb	r0, [r4, #0]
 800a66a:	6863      	ldr	r3, [r4, #4]
 800a66c:	219c      	movs	r1, #156	; 0x9c
 800a66e:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_A2_23_16, biquad->band6.coef_a2.bit.msb16_23);
 800a670:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
 800a674:	7820      	ldrb	r0, [r4, #0]
 800a676:	6863      	ldr	r3, [r4, #4]
 800a678:	219d      	movs	r1, #157	; 0x9d
 800a67a:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_A2_15_08, biquad->band6.coef_a2.bit.lsb8_15);
 800a67c:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
 800a680:	7820      	ldrb	r0, [r4, #0]
 800a682:	6863      	ldr	r3, [r4, #4]
 800a684:	219e      	movs	r1, #158	; 0x9e
 800a686:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND6_A2_07_00, biquad->band6.coef_a2.bit.lsb0_7);
 800a688:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
 800a68c:	7820      	ldrb	r0, [r4, #0]
 800a68e:	6863      	ldr	r3, [r4, #4]
 800a690:	219f      	movs	r1, #159	; 0x9f
 800a692:	4798      	blx	r3

    /* BAND 7 */
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_B0_23_16, biquad->band7.coef_b0.bit.msb16_23);
 800a694:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
 800a698:	7820      	ldrb	r0, [r4, #0]
 800a69a:	6863      	ldr	r3, [r4, #4]
 800a69c:	21a0      	movs	r1, #160	; 0xa0
 800a69e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_B0_15_08, biquad->band7.coef_b0.bit.lsb8_15);
 800a6a0:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
 800a6a4:	7820      	ldrb	r0, [r4, #0]
 800a6a6:	6863      	ldr	r3, [r4, #4]
 800a6a8:	21a1      	movs	r1, #161	; 0xa1
 800a6aa:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_B0_07_00, biquad->band7.coef_b0.bit.lsb0_7);
 800a6ac:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
 800a6b0:	7820      	ldrb	r0, [r4, #0]
 800a6b2:	6863      	ldr	r3, [r4, #4]
 800a6b4:	21a2      	movs	r1, #162	; 0xa2
 800a6b6:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_B1_23_16, biquad->band7.coef_b1.bit.msb16_23);
 800a6b8:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
 800a6bc:	7820      	ldrb	r0, [r4, #0]
 800a6be:	6863      	ldr	r3, [r4, #4]
 800a6c0:	21a3      	movs	r1, #163	; 0xa3
 800a6c2:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_B1_15_08, biquad->band7.coef_b1.bit.lsb8_15);
 800a6c4:	f895 207d 	ldrb.w	r2, [r5, #125]	; 0x7d
 800a6c8:	7820      	ldrb	r0, [r4, #0]
 800a6ca:	6863      	ldr	r3, [r4, #4]
 800a6cc:	21a4      	movs	r1, #164	; 0xa4
 800a6ce:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_B1_07_00, biquad->band7.coef_b1.bit.lsb0_7);
 800a6d0:	f895 207c 	ldrb.w	r2, [r5, #124]	; 0x7c
 800a6d4:	7820      	ldrb	r0, [r4, #0]
 800a6d6:	6863      	ldr	r3, [r4, #4]
 800a6d8:	21a5      	movs	r1, #165	; 0xa5
 800a6da:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_B2_23_16, biquad->band7.coef_b2.bit.msb16_23);
 800a6dc:	f895 2082 	ldrb.w	r2, [r5, #130]	; 0x82
 800a6e0:	7820      	ldrb	r0, [r4, #0]
 800a6e2:	6863      	ldr	r3, [r4, #4]
 800a6e4:	21a6      	movs	r1, #166	; 0xa6
 800a6e6:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_B2_15_08, biquad->band7.coef_b2.bit.lsb8_15);
 800a6e8:	f895 2081 	ldrb.w	r2, [r5, #129]	; 0x81
 800a6ec:	7820      	ldrb	r0, [r4, #0]
 800a6ee:	6863      	ldr	r3, [r4, #4]
 800a6f0:	21a7      	movs	r1, #167	; 0xa7
 800a6f2:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_B2_07_00, biquad->band7.coef_b2.bit.lsb0_7);
 800a6f4:	f895 2080 	ldrb.w	r2, [r5, #128]	; 0x80
 800a6f8:	7820      	ldrb	r0, [r4, #0]
 800a6fa:	6863      	ldr	r3, [r4, #4]
 800a6fc:	21a8      	movs	r1, #168	; 0xa8
 800a6fe:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_A1_23_16, biquad->band7.coef_a1.bit.msb16_23);
 800a700:	f895 2086 	ldrb.w	r2, [r5, #134]	; 0x86
 800a704:	7820      	ldrb	r0, [r4, #0]
 800a706:	6863      	ldr	r3, [r4, #4]
 800a708:	21a9      	movs	r1, #169	; 0xa9
 800a70a:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_A1_15_08, biquad->band7.coef_a1.bit.lsb8_15);
 800a70c:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
 800a710:	7820      	ldrb	r0, [r4, #0]
 800a712:	6863      	ldr	r3, [r4, #4]
 800a714:	21aa      	movs	r1, #170	; 0xaa
 800a716:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_A1_07_00, biquad->band7.coef_a1.bit.lsb0_7);
 800a718:	f895 2084 	ldrb.w	r2, [r5, #132]	; 0x84
 800a71c:	7820      	ldrb	r0, [r4, #0]
 800a71e:	6863      	ldr	r3, [r4, #4]
 800a720:	21ab      	movs	r1, #171	; 0xab
 800a722:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_A2_23_16, biquad->band7.coef_a2.bit.msb16_23);
 800a724:	f895 208a 	ldrb.w	r2, [r5, #138]	; 0x8a
 800a728:	7820      	ldrb	r0, [r4, #0]
 800a72a:	6863      	ldr	r3, [r4, #4]
 800a72c:	21ac      	movs	r1, #172	; 0xac
 800a72e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_A2_15_08, biquad->band7.coef_a2.bit.lsb8_15);
 800a730:	f895 2089 	ldrb.w	r2, [r5, #137]	; 0x89
 800a734:	7820      	ldrb	r0, [r4, #0]
 800a736:	6863      	ldr	r3, [r4, #4]
 800a738:	21ad      	movs	r1, #173	; 0xad
 800a73a:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_BAND7_A2_07_00, biquad->band7.coef_a2.bit.lsb0_7);
 800a73c:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 800a740:	7820      	ldrb	r0, [r4, #0]
 800a742:	6863      	ldr	r3, [r4, #4]
 800a744:	21ae      	movs	r1, #174	; 0xae
 800a746:	4798      	blx	r3

    /* RECORD */
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_B0_23_16, biquad->record.coef_b0.bit.msb16_23);
 800a748:	f895 208e 	ldrb.w	r2, [r5, #142]	; 0x8e
 800a74c:	7820      	ldrb	r0, [r4, #0]
 800a74e:	6863      	ldr	r3, [r4, #4]
 800a750:	21af      	movs	r1, #175	; 0xaf
 800a752:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_B0_15_08, biquad->record.coef_b0.bit.lsb8_15);
 800a754:	f895 208d 	ldrb.w	r2, [r5, #141]	; 0x8d
 800a758:	7820      	ldrb	r0, [r4, #0]
 800a75a:	6863      	ldr	r3, [r4, #4]
 800a75c:	21b0      	movs	r1, #176	; 0xb0
 800a75e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_B0_07_00, biquad->record.coef_b0.bit.lsb0_7);
 800a760:	f895 208c 	ldrb.w	r2, [r5, #140]	; 0x8c
 800a764:	7820      	ldrb	r0, [r4, #0]
 800a766:	6863      	ldr	r3, [r4, #4]
 800a768:	21b1      	movs	r1, #177	; 0xb1
 800a76a:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_B1_23_16, biquad->record.coef_b1.bit.msb16_23);
 800a76c:	f895 2092 	ldrb.w	r2, [r5, #146]	; 0x92
 800a770:	7820      	ldrb	r0, [r4, #0]
 800a772:	6863      	ldr	r3, [r4, #4]
 800a774:	21b2      	movs	r1, #178	; 0xb2
 800a776:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_B1_15_08, biquad->record.coef_b1.bit.lsb8_15);
 800a778:	f895 2091 	ldrb.w	r2, [r5, #145]	; 0x91
 800a77c:	7820      	ldrb	r0, [r4, #0]
 800a77e:	6863      	ldr	r3, [r4, #4]
 800a780:	21b3      	movs	r1, #179	; 0xb3
 800a782:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_B1_07_00, biquad->record.coef_b1.bit.lsb0_7);
 800a784:	f895 2090 	ldrb.w	r2, [r5, #144]	; 0x90
 800a788:	7820      	ldrb	r0, [r4, #0]
 800a78a:	6863      	ldr	r3, [r4, #4]
 800a78c:	21b4      	movs	r1, #180	; 0xb4
 800a78e:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_B2_23_16, biquad->record.coef_b2.bit.msb16_23);
 800a790:	f895 2096 	ldrb.w	r2, [r5, #150]	; 0x96
 800a794:	7820      	ldrb	r0, [r4, #0]
 800a796:	6863      	ldr	r3, [r4, #4]
 800a798:	21b5      	movs	r1, #181	; 0xb5
 800a79a:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_B2_15_08, biquad->record.coef_b2.bit.lsb8_15);
 800a79c:	f895 2095 	ldrb.w	r2, [r5, #149]	; 0x95
 800a7a0:	7820      	ldrb	r0, [r4, #0]
 800a7a2:	6863      	ldr	r3, [r4, #4]
 800a7a4:	21b6      	movs	r1, #182	; 0xb6
 800a7a6:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_B2_07_00, biquad->record.coef_b2.bit.lsb0_7);
 800a7a8:	f895 2094 	ldrb.w	r2, [r5, #148]	; 0x94
 800a7ac:	7820      	ldrb	r0, [r4, #0]
 800a7ae:	6863      	ldr	r3, [r4, #4]
 800a7b0:	21b7      	movs	r1, #183	; 0xb7
 800a7b2:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_A1_23_16, biquad->record.coef_a1.bit.msb16_23);
 800a7b4:	f895 209a 	ldrb.w	r2, [r5, #154]	; 0x9a
 800a7b8:	7820      	ldrb	r0, [r4, #0]
 800a7ba:	6863      	ldr	r3, [r4, #4]
 800a7bc:	21b8      	movs	r1, #184	; 0xb8
 800a7be:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_A1_15_08, biquad->record.coef_a1.bit.lsb8_15);
 800a7c0:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
 800a7c4:	7820      	ldrb	r0, [r4, #0]
 800a7c6:	6863      	ldr	r3, [r4, #4]
 800a7c8:	21b9      	movs	r1, #185	; 0xb9
 800a7ca:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_A1_07_00, biquad->record.coef_a1.bit.lsb0_7);
 800a7cc:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
 800a7d0:	7820      	ldrb	r0, [r4, #0]
 800a7d2:	6863      	ldr	r3, [r4, #4]
 800a7d4:	21ba      	movs	r1, #186	; 0xba
 800a7d6:	4798      	blx	r3

    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_A2_23_16, biquad->record.coef_a2.bit.msb16_23);
 800a7d8:	f895 209e 	ldrb.w	r2, [r5, #158]	; 0x9e
 800a7dc:	7820      	ldrb	r0, [r4, #0]
 800a7de:	6863      	ldr	r3, [r4, #4]
 800a7e0:	21bb      	movs	r1, #187	; 0xbb
 800a7e2:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_A2_15_08, biquad->record.coef_a2.bit.lsb8_15);
 800a7e4:	f895 209d 	ldrb.w	r2, [r5, #157]	; 0x9d
 800a7e8:	7820      	ldrb	r0, [r4, #0]
 800a7ea:	6863      	ldr	r3, [r4, #4]
 800a7ec:	21bc      	movs	r1, #188	; 0xbc
 800a7ee:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_A2_07_00, biquad->record.coef_a2.bit.lsb0_7);
 800a7f0:	6863      	ldr	r3, [r4, #4]
 800a7f2:	f895 209c 	ldrb.w	r2, [r5, #156]	; 0x9c
 800a7f6:	7820      	ldrb	r0, [r4, #0]
 800a7f8:	21bd      	movs	r1, #189	; 0xbd
}
 800a7fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQ_A2_07_00, biquad->record.coef_a2.bit.lsb0_7);
 800a7fe:	4718      	bx	r3

0800a800 <max98091_init>:
    if ((i2c_hal->write == NULL) || (i2c_hal->read == NULL)) {
 800a800:	6843      	ldr	r3, [r0, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 8335 	beq.w	800ae72 <max98091_init+0x672>
{
 800a808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((i2c_hal->write == NULL) || (i2c_hal->read == NULL)) {
 800a80c:	6882      	ldr	r2, [r0, #8]
{
 800a80e:	b082      	sub	sp, #8
 800a810:	4604      	mov	r4, r0
    if ((i2c_hal->write == NULL) || (i2c_hal->read == NULL)) {
 800a812:	2a00      	cmp	r2, #0
 800a814:	f000 82ed 	beq.w	800adf2 <max98091_init+0x5f2>
    if ((i2c_hal->i2c_addr != MAX98091A_I2C_ADDR) && (i2c_hal->i2c_addr != MAX98091B_I2C_ADDR)) {
 800a818:	7800      	ldrb	r0, [r0, #0]
    reg_map.qs_sys.reg = 0;         /* Disable quick setup... */
 800a81a:	4d68      	ldr	r5, [pc, #416]	; (800a9bc <max98091_init+0x1bc>)
    if ((i2c_hal->i2c_addr != MAX98091A_I2C_ADDR) && (i2c_hal->i2c_addr != MAX98091B_I2C_ADDR)) {
 800a81c:	f000 02fd 	and.w	r2, r0, #253	; 0xfd
 800a820:	2a20      	cmp	r2, #32
        i2c_hal->i2c_addr = MAX98091A_I2C_ADDR;
 800a822:	bf18      	it	ne
 800a824:	2020      	movne	r0, #32
 800a826:	460f      	mov	r7, r1
 800a828:	bf18      	it	ne
 800a82a:	7020      	strbne	r0, [r4, #0]
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_SOFTWARE_RESET, soft_reset.reg);
 800a82c:	2280      	movs	r2, #128	; 0x80
 800a82e:	2100      	movs	r1, #0
 800a830:	4798      	blx	r3
    reg_map.clk_mode.bit.use_mi = 1;      /* Set Mi Manually */
 800a832:	7caa      	ldrb	r2, [r5, #18]
    reg_map.sys_clk.bit.psclk = 0b01;     /* fPCLK = fMCLK */
 800a834:	7c69      	ldrb	r1, [r5, #17]
 800a836:	787b      	ldrb	r3, [r7, #1]
 800a838:	783e      	ldrb	r6, [r7, #0]
    reg_map.clk_mode.bit.use_mi = 1;      /* Set Mi Manually */
 800a83a:	f002 020e 	and.w	r2, r2, #14
 800a83e:	f042 0201 	orr.w	r2, r2, #1
    reg_map.sys_clk.bit.psclk = 0b01;     /* fPCLK = fMCLK */
 800a842:	2001      	movs	r0, #1
    reg_map.clk_mode.bit.use_mi = 1;      /* Set Mi Manually */
 800a844:	74aa      	strb	r2, [r5, #18]
    reg_map.master_mode.bit.mas = 0b1;    /* Master mode */
 800a846:	7dea      	ldrb	r2, [r5, #23]
    reg_map.sys_clk.bit.psclk = 0b01;     /* fPCLK = fMCLK */
 800a848:	f360 1105 	bfi	r1, r0, #4, #2
        reg_map.master_mode.bit.bsel = 0b001; /* Bit clock freq is  32 x Fs (16 bits per frame) */
 800a84c:	2b00      	cmp	r3, #0
    reg_map.sys_clk.bit.psclk = 0b01;     /* fPCLK = fMCLK */
 800a84e:	7469      	strb	r1, [r5, #17]
 800a850:	f062 027f 	orn	r2, r2, #127	; 0x7f
        reg_map.master_mode.bit.bsel = 0b001; /* Bit clock freq is  32 x Fs (16 bits per frame) */
 800a854:	bf0c      	ite	eq
 800a856:	4601      	moveq	r1, r0
 800a858:	2103      	movne	r1, #3
 800a85a:	f361 0202 	bfi	r2, r1, #0, #3
 800a85e:	75ea      	strb	r2, [r5, #23]
    reg_map.qs_sys.reg = 0;         /* Disable quick setup... */
 800a860:	2200      	movs	r2, #0
 800a862:	78b8      	ldrb	r0, [r7, #2]
 800a864:	78f9      	ldrb	r1, [r7, #3]
 800a866:	706a      	strb	r2, [r5, #1]
    reg_map.qs_sample_rate.reg = 0; /* ...configuration       */
 800a868:	70aa      	strb	r2, [r5, #2]
    if (codec_cfg->sampling_rate == MAX98091_AUDIO_96KHZ) {
 800a86a:	2e00      	cmp	r6, #0
 800a86c:	f000 82a8 	beq.w	800adc0 <max98091_init+0x5c0>
        reg_map.filter_config.bit.dhf = 0; /* LRCLK is less than 48kHz. 8x FIR interpolation filter used */
 800a870:	f895 c01c 	ldrb.w	ip, [r5, #28]
 800a874:	f362 1c04 	bfi	ip, r2, #4, #1
        reg_map.adc_ctrl.bit.osr128 = 1; /* 128 x Fs */
 800a878:	f895 20d2 	ldrb.w	r2, [r5, #210]	; 0xd2
        reg_map.filter_config.bit.dhf = 0; /* LRCLK is less than 48kHz. 8x FIR interpolation filter used */
 800a87c:	f885 c01c 	strb.w	ip, [r5, #28]
        reg_map.adc_ctrl.bit.osr128 = 1; /* 128 x Fs */
 800a880:	f042 0204 	orr.w	r2, r2, #4
 800a884:	f885 20d2 	strb.w	r2, [r5, #210]	; 0xd2
    reg_map.interface_format.bit.ws = (codec_cfg->word_size & 0b11); /* Word size */
 800a888:	8b2a      	ldrh	r2, [r5, #24]
    reg_map.gain_set.loutr_ctrl.bit.mixrcvrg = MAX98091_MIXER_GAIN_N12DB;
 800a88a:	f8b5 c0dc 	ldrh.w	ip, [r5, #220]	; 0xdc
    reg_map.interface_format.bit.ws = (codec_cfg->word_size & 0b11); /* Word size */
 800a88e:	f003 0303 	and.w	r3, r3, #3
 800a892:	f422 729f 	bic.w	r2, r2, #318	; 0x13e
 800a896:	f022 0201 	bic.w	r2, r2, #1
 800a89a:	f043 0320 	orr.w	r3, r3, #32
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	832b      	strh	r3, [r5, #24]
    uint16_t mi = mi_arr[codec_cfg->sampling_rate];
 800a8a2:	4b47      	ldr	r3, [pc, #284]	; (800a9c0 <max98091_init+0x1c0>)
 800a8a4:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    reg_map.clk_ratio_mi_lsb.bit.mi = (mi) & 0xFF;
 800a8a8:	75aa      	strb	r2, [r5, #22]
    reg_map.clk_ratio_mi_msb.bit.mi = (mi >> 8) & 0xFF;
 800a8aa:	0a12      	lsrs	r2, r2, #8
    reg_map.gain_set.hp_ctrl.bit.mixhplg = MAX98091_MIXER_GAIN_N12DB;
 800a8ac:	4e45      	ldr	r6, [pc, #276]	; (800a9c4 <max98091_init+0x1c4>)
    reg_map.clk_ratio_mi_msb.bit.mi = (mi >> 8) & 0xFF;
 800a8ae:	756a      	strb	r2, [r5, #21]
    reg_map.gain_set.hp_ctrl.bit.mixhplg = MAX98091_MIXER_GAIN_N12DB;
 800a8b0:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
    reg_map.gain_set.left_spk_volume.bit.spvoll = MAX98091_SPK_MIN_VOLUME;
 800a8b4:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
    reg_map.gain_set.hp_ctrl.bit.mixhplg = MAX98091_MIXER_GAIN_N12DB;
 800a8b8:	4016      	ands	r6, r2
    reg_map.gain_set.left_spk_volume.bit.spvoll = MAX98091_SPK_MIN_VOLUME;
 800a8ba:	4a43      	ldr	r2, [pc, #268]	; (800a9c8 <max98091_init+0x1c8>)
 800a8bc:	401a      	ands	r2, r3
    reg_map.gain_set.loutr_ctrl.bit.mixrcvrg = MAX98091_MIXER_GAIN_N12DB;
 800a8be:	f246 03fc 	movw	r3, #24828	; 0x60fc
 800a8c2:	ea03 030c 	and.w	r3, r3, ip
 800a8c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8ca:	f043 0303 	orr.w	r3, r3, #3
 800a8ce:	f8a5 30dc 	strh.w	r3, [r5, #220]	; 0xdc
    reg_map.clk_ratio_ni_msb.bit.ni = (ni >> 8) & 0xFF;
 800a8d2:	7ceb      	ldrb	r3, [r5, #19]
 800a8d4:	f36f 0306 	bfc	r3, #0, #7
 800a8d8:	74eb      	strb	r3, [r5, #19]
    reg_map.gain_set.hp_ctrl.bit.mixhplg = MAX98091_MIXER_GAIN_N12DB;
 800a8da:	4b3c      	ldr	r3, [pc, #240]	; (800a9cc <max98091_init+0x1cc>)
 800a8dc:	4333      	orrs	r3, r6
 800a8de:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
    reg_map.gain_set.left_spk_volume.bit.spvoll = MAX98091_SPK_MIN_VOLUME;
 800a8e2:	4b3b      	ldr	r3, [pc, #236]	; (800a9d0 <max98091_init+0x1d0>)
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
    reg_map.clk_ratio_ni_lsb.bit.ni = (ni) & 0xFF;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	752b      	strb	r3, [r5, #20]
    reg_map.interrupt_mask.reg = 0x04; /* Jack detection flag */
 800a8ee:	2304      	movs	r3, #4
 800a8f0:	702b      	strb	r3, [r5, #0]
    if (codec_cfg->record_enabled) {
 800a8f2:	b1d8      	cbz	r0, 800a92c <max98091_init+0x12c>
        reg_map.io_config.bit.sdoen = 0b1; /* enable serial data out */
 800a8f4:	7eeb      	ldrb	r3, [r5, #27]
        reg_map.mic_bias_voltage.reg = 0b11; /* 00: 2.2V, 01: 2.4V, 10: 2.55V, 11: 2.8V */
 800a8f6:	4a37      	ldr	r2, [pc, #220]	; (800a9d4 <max98091_init+0x1d4>)
        reg_map.io_config.bit.sdoen = 0b1; /* enable serial data out */
 800a8f8:	f043 0302 	orr.w	r3, r3, #2
 800a8fc:	76eb      	strb	r3, [r5, #27]
        reg_map.input_en.bit.adlen = 0b1; /* Enable left ADC */
 800a8fe:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800a902:	f023 031f 	bic.w	r3, r3, #31
 800a906:	f043 031f 	orr.w	r3, r3, #31
 800a90a:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
        reg_map.line_in_config.bit.in4seen = 0b1; /* IN4 single ended on LINE B */
 800a90e:	78eb      	ldrb	r3, [r5, #3]
 800a910:	f023 030c 	bic.w	r3, r3, #12
 800a914:	f043 030c 	orr.w	r3, r3, #12
 800a918:	70eb      	strb	r3, [r5, #3]
        reg_map.line_in_lvl.reg = 0x3F; /* -6dB */
 800a91a:	4b2f      	ldr	r3, [pc, #188]	; (800a9d8 <max98091_init+0x1d8>)
 800a91c:	606b      	str	r3, [r5, #4]
        reg_map.mic_bias_voltage.reg = 0b11; /* 00: 2.2V, 01: 2.4V, 10: 2.55V, 11: 2.8V */
 800a91e:	68ab      	ldr	r3, [r5, #8]
 800a920:	401a      	ands	r2, r3
 800a922:	4b2e      	ldr	r3, [pc, #184]	; (800a9dc <max98091_init+0x1dc>)
 800a924:	4313      	orrs	r3, r2
 800a926:	60ab      	str	r3, [r5, #8]
        reg_map.right_adc_mixer.reg = 0b00010000; /* Right ADC mix on LINE B */
 800a928:	2310      	movs	r3, #16
 800a92a:	732b      	strb	r3, [r5, #12]
    if (codec_cfg->playback_enabled) {
 800a92c:	2900      	cmp	r1, #0
 800a92e:	d057      	beq.n	800a9e0 <max98091_init+0x1e0>
        reg_map.io_config.bit.sdien = 0b1; /* enable serial data in */
 800a930:	7eeb      	ldrb	r3, [r5, #27]
        reg_map.gain_set.hp_ctrl.bit.mixhplg = MAX98091_MIXER_GAIN_0DB;
 800a932:	f8b5 20d4 	ldrh.w	r2, [r5, #212]	; 0xd4
        reg_map.left_hp_mixer.bit.mixhpl = 0b100000; /* left adc to left hp */
 800a936:	7fe9      	ldrb	r1, [r5, #31]
        reg_map.io_config.bit.sdien = 0b1; /* enable serial data in */
 800a938:	f043 0301 	orr.w	r3, r3, #1
 800a93c:	76eb      	strb	r3, [r5, #27]
        reg_map.loutr_mixer.bit.mixrcvr = 2; /* right adc to right line out */
 800a93e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800a942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a946:	f063 037d 	orn	r3, r3, #125	; 0x7d
 800a94a:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
        reg_map.output_en.bit.dalen = 0b1; /* Enable left DAC */
 800a94e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800a952:	f063 0330 	orn	r3, r3, #48	; 0x30
 800a956:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
        reg_map.gain_set.hp_ctrl.bit.mixhplg = MAX98091_MIXER_GAIN_0DB;
 800a95a:	f246 03c0 	movw	r3, #24768	; 0x60c0
 800a95e:	4013      	ands	r3, r2
 800a960:	f443 53d8 	orr.w	r3, r3, #6912	; 0x1b00
 800a964:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
        reg_map.gain_set.right_hp_volume.bit.hpvolr = MAX98091_HP_VOL_1DB;
 800a968:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
        reg_map.gain_set.rcv_loutl_ctrl.bit.mixrcvlg = MAX98091_MIXER_GAIN_0DB;
 800a96c:	f8b5 20da 	ldrh.w	r2, [r5, #218]	; 0xda
        reg_map.gain_set.right_hp_volume.bit.hpvolr = MAX98091_HP_VOL_1DB;
 800a970:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a974:	f043 031b 	orr.w	r3, r3, #27
 800a978:	f885 30d6 	strb.w	r3, [r5, #214]	; 0xd6
        reg_map.gain_set.rcv_loutl_ctrl.bit.mixrcvlg = MAX98091_MIXER_GAIN_0DB;
 800a97c:	f246 03fc 	movw	r3, #24828	; 0x60fc
 800a980:	401a      	ands	r2, r3
 800a982:	f442 6260 	orr.w	r2, r2, #3584	; 0xe00
 800a986:	f8a5 20da 	strh.w	r2, [r5, #218]	; 0xda
        reg_map.gain_set.loutr_ctrl.bit.mixrcvrg = MAX98091_MIXER_GAIN_0DB;
 800a98a:	f8b5 20dc 	ldrh.w	r2, [r5, #220]	; 0xdc
 800a98e:	4013      	ands	r3, r2
        reg_map.right_hp_mixer.bit.mixhpr = 0b100000; /* right adc to right hp */
 800a990:	f895 2020 	ldrb.w	r2, [r5, #32]
        reg_map.gain_set.loutr_ctrl.bit.mixrcvrg = MAX98091_MIXER_GAIN_0DB;
 800a994:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
        reg_map.left_hp_mixer.bit.mixhpl = 0b100000; /* left adc to left hp */
 800a998:	2020      	movs	r0, #32
        reg_map.right_hp_mixer.bit.mixhpr = 0b100000; /* right adc to right hp */
 800a99a:	f360 0205 	bfi	r2, r0, #0, #6
        reg_map.gain_set.loutr_ctrl.bit.mixrcvrg = MAX98091_MIXER_GAIN_0DB;
 800a99e:	f8a5 30dc 	strh.w	r3, [r5, #220]	; 0xdc
        reg_map.rcv_loutl_mixer.bit.mixrcvl = 1; /* left adc to left line out */
 800a9a2:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
        reg_map.right_hp_mixer.bit.mixhpr = 0b100000; /* right adc to right hp */
 800a9a6:	f885 2020 	strb.w	r2, [r5, #32]
        reg_map.rcv_loutl_mixer.bit.mixrcvl = 1; /* left adc to left line out */
 800a9aa:	2201      	movs	r2, #1
        reg_map.left_hp_mixer.bit.mixhpl = 0b100000; /* left adc to left hp */
 800a9ac:	f360 0105 	bfi	r1, r0, #0, #6
        reg_map.rcv_loutl_mixer.bit.mixrcvl = 1; /* left adc to left line out */
 800a9b0:	f362 0305 	bfi	r3, r2, #0, #6
        reg_map.left_hp_mixer.bit.mixhpl = 0b100000; /* left adc to left hp */
 800a9b4:	77e9      	strb	r1, [r5, #31]
        reg_map.rcv_loutl_mixer.bit.mixrcvl = 1; /* left adc to left line out */
 800a9b6:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
 800a9ba:	e011      	b.n	800a9e0 <max98091_init+0x1e0>
 800a9bc:	20006098 	.word	0x20006098
 800a9c0:	08014854 	.word	0x08014854
 800a9c4:	f06060f0 	.word	0xf06060f0
 800a9c8:	60fc4040 	.word	0x60fc4040
 800a9cc:	0f80800f 	.word	0x0f80800f
 800a9d0:	80039898 	.word	0x80039898
 800a9d4:	000c8f00 	.word	0x000c8f00
 800a9d8:	1454003f 	.word	0x1454003f
 800a9dc:	08302003 	.word	0x08302003
    reg_map.filter_config.bit.dhpf = 0; /* Disable the Playback Path DC-Blocking Filter */
 800a9e0:	7f2b      	ldrb	r3, [r5, #28]
    reg_map.drc_timing.bit.drcatk = 0; /* PLAYBACK DRC Attack Time Configuration : 0.125ms */
 800a9e2:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 *
 *  @param[in] i2c_hal  Hardware Abstraction Layer structure i2c_hal.
 */
static void configure_quick_setup_configuration(max98091_i2c_hal_t *i2c_hal)
{
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_QS_SYSTEM_CLOCK, reg_map.qs_sys.reg);
 800a9e6:	7820      	ldrb	r0, [r4, #0]
    reg_map.filter_config.bit.dhpf = 0; /* Disable the Playback Path DC-Blocking Filter */
 800a9e8:	f003 031f 	and.w	r3, r3, #31
 800a9ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a9f0:	772b      	strb	r3, [r5, #28]
    reg_map.drc_timing.bit.drcatk = 0; /* PLAYBACK DRC Attack Time Configuration : 0.125ms */
 800a9f2:	f002 0308 	and.w	r3, r2, #8
 800a9f6:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
    reg_map.lvl_ctrl.bit.not_vsen = 1;  /* Volume changes are smoothed by stepping through intermediate levels */
 800a9fa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800a9fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    reg_map.left_rec_lvl.reg = 0x03; /*0db*/
 800aa00:	f04f 0803 	mov.w	r8, #3
    reg_map.lvl_ctrl.bit.not_vsen = 1;  /* Volume changes are smoothed by stepping through intermediate levels */
 800aa04:	f023 0307 	bic.w	r3, r3, #7
 800aa08:	ea43 0308 	orr.w	r3, r3, r8
 800aa0c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    reg_map.bias_ctrl.bit.bias_mode = 0; /* BIAS derived from resistive division */
 800aa0e:	f8b5 30d0 	ldrh.w	r3, [r5, #208]	; 0xd0
    reg_map.left_rec_lvl.reg = 0x03; /*0db*/
 800aa12:	f885 800d 	strb.w	r8, [r5, #13]
    reg_map.bias_ctrl.bit.bias_mode = 0; /* BIAS derived from resistive division */
 800aa16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa1a:	f023 0301 	bic.w	r3, r3, #1
 800aa1e:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
    reg_map.adc_ctrl.bit.adchp = 0; /* ADC is optimized for low power operation */
 800aa22:	f895 30d2 	ldrb.w	r3, [r5, #210]	; 0xd2
    reg_map.right_rec_lvl.reg = 0x03; /*0db*/
 800aa26:	f885 800e 	strb.w	r8, [r5, #14]
    reg_map.adc_ctrl.bit.adchp = 0; /* ADC is optimized for low power operation */
 800aa2a:	f023 0303 	bic.w	r3, r3, #3
 800aa2e:	f043 0302 	orr.w	r3, r3, #2
 800aa32:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
    reg_map.drc_gain.bit.drcg = 0; /* PLAYBACK DRC Make-Up Gain : 0dB */
 800aa36:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    reg_map.drc_compressor.bit.drcthc = 0; /* PLAYBACK DRC Compression Threshold : 0dB */
 800aa3a:	2600      	movs	r6, #0
    reg_map.drc_gain.bit.drcg = 0; /* PLAYBACK DRC Make-Up Gain : 0dB */
 800aa3c:	f366 0304 	bfi	r3, r6, #0, #5
 800aa40:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
    reg_map.jack_detect.bit.jdeten = 1;
 800aa44:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    reg_map.drc_compressor.bit.drcthc = 0; /* PLAYBACK DRC Compression Threshold : 0dB */
 800aa48:	84ae      	strh	r6, [r5, #36]	; 0x24
    reg_map.jack_detect.bit.jdeten = 1;
 800aa4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa4e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_QS_SYSTEM_CLOCK, reg_map.qs_sys.reg);
 800aa52:	4632      	mov	r2, r6
 800aa54:	6863      	ldr	r3, [r4, #4]
 800aa56:	2104      	movs	r1, #4
 800aa58:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_QS_SAMPLE_RATE, reg_map.qs_sample_rate.reg);
 800aa5a:	78aa      	ldrb	r2, [r5, #2]
 800aa5c:	7820      	ldrb	r0, [r4, #0]
 800aa5e:	6863      	ldr	r3, [r4, #4]
 800aa60:	2105      	movs	r1, #5
 800aa62:	4798      	blx	r3
    reg_map.shutdown.bit.not_shdn = MAX98091_DEV_SHUTDOWN;
 800aa64:	f895 20d3 	ldrb.w	r2, [r5, #211]	; 0xd3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DEVICE_SHUTDOWN, reg_map.shutdown.reg);
 800aa68:	7820      	ldrb	r0, [r4, #0]
 800aa6a:	6863      	ldr	r3, [r4, #4]
    reg_map.shutdown.bit.not_shdn = MAX98091_DEV_SHUTDOWN;
 800aa6c:	f366 12c7 	bfi	r2, r6, #7, #1
 800aa70:	f885 20d3 	strb.w	r2, [r5, #211]	; 0xd3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DEVICE_SHUTDOWN, reg_map.shutdown.reg);
 800aa74:	2145      	movs	r1, #69	; 0x45
 800aa76:	b2d2      	uxtb	r2, r2
 800aa78:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_SYSTEM_CLOCK, reg_map.sys_clk.reg);
 800aa7a:	7c6a      	ldrb	r2, [r5, #17]
 800aa7c:	7820      	ldrb	r0, [r4, #0]
 800aa7e:	6863      	ldr	r3, [r4, #4]
 800aa80:	211b      	movs	r1, #27
 800aa82:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_CLOCK_MODE, reg_map.clk_mode.reg);
 800aa84:	7caa      	ldrb	r2, [r5, #18]
 800aa86:	7820      	ldrb	r0, [r4, #0]
 800aa88:	6863      	ldr	r3, [r4, #4]
 800aa8a:	211c      	movs	r1, #28
 800aa8c:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_CLOCK_RATIO_NI_MSB, reg_map.clk_ratio_ni_msb.reg);
 800aa8e:	7cea      	ldrb	r2, [r5, #19]
 800aa90:	7820      	ldrb	r0, [r4, #0]
 800aa92:	6863      	ldr	r3, [r4, #4]
 800aa94:	211d      	movs	r1, #29
 800aa96:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_CLOCK_RATIO_NI_LSB, reg_map.clk_ratio_ni_lsb.reg);
 800aa98:	7d2a      	ldrb	r2, [r5, #20]
 800aa9a:	7820      	ldrb	r0, [r4, #0]
 800aa9c:	6863      	ldr	r3, [r4, #4]
 800aa9e:	211e      	movs	r1, #30
 800aaa0:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_CLOCK_RATIO_MI_MSB, reg_map.clk_ratio_mi_msb.reg);
 800aaa2:	7d6a      	ldrb	r2, [r5, #21]
 800aaa4:	7820      	ldrb	r0, [r4, #0]
 800aaa6:	6863      	ldr	r3, [r4, #4]
 800aaa8:	211f      	movs	r1, #31
 800aaaa:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_CLOCK_RATIO_MI_LSB, reg_map.clk_ratio_mi_lsb.reg);
 800aaac:	7daa      	ldrb	r2, [r5, #22]
 800aaae:	7820      	ldrb	r0, [r4, #0]
 800aab0:	6863      	ldr	r3, [r4, #4]
 800aab2:	2120      	movs	r1, #32
 800aab4:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_MASTER_MODE, reg_map.master_mode.reg);
 800aab6:	7dea      	ldrb	r2, [r5, #23]
 800aab8:	7820      	ldrb	r0, [r4, #0]
 800aaba:	6863      	ldr	r3, [r4, #4]
 800aabc:	2121      	movs	r1, #33	; 0x21
 800aabe:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_INTERRUPT_MASKS, reg_map.interrupt_mask.reg);
 800aac0:	782a      	ldrb	r2, [r5, #0]
 800aac2:	7820      	ldrb	r0, [r4, #0]
 800aac4:	6863      	ldr	r3, [r4, #4]
 800aac6:	4641      	mov	r1, r8
 800aac8:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_INPUT_MODE, reg_map.in_mode.reg);
 800aaca:	6863      	ldr	r3, [r4, #4]
 800aacc:	796a      	ldrb	r2, [r5, #5]
 800aace:	7820      	ldrb	r0, [r4, #0]
 800aad0:	210f      	movs	r1, #15
 800aad2:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_FILTER_CONFIG, reg_map.filter_config.reg);
 800aad4:	6863      	ldr	r3, [r4, #4]
 800aad6:	7f2a      	ldrb	r2, [r5, #28]
 800aad8:	7820      	ldrb	r0, [r4, #0]
 800aada:	2126      	movs	r1, #38	; 0x26
 800aadc:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DRC_TIMING, reg_map.drc_timing.reg);
 800aade:	6863      	ldr	r3, [r4, #4]
 800aae0:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 800aae4:	7820      	ldrb	r0, [r4, #0]
 800aae6:	2133      	movs	r1, #51	; 0x33
 800aae8:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DRC_COMPRESSOR, reg_map.drc_compressor.reg);
 800aaea:	6863      	ldr	r3, [r4, #4]
 800aaec:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800aaf0:	7820      	ldrb	r0, [r4, #0]
 800aaf2:	2134      	movs	r1, #52	; 0x34
 800aaf4:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DRC_EXPANDER, reg_map.drc_expander.reg);
 800aaf6:	6863      	ldr	r3, [r4, #4]
 800aaf8:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 800aafc:	7820      	ldrb	r0, [r4, #0]
 800aafe:	2135      	movs	r1, #53	; 0x35
 800ab00:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DRC_GAIN, reg_map.drc_gain.reg);
 800ab02:	6863      	ldr	r3, [r4, #4]
 800ab04:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
 800ab08:	7820      	ldrb	r0, [r4, #0]
 800ab0a:	2136      	movs	r1, #54	; 0x36
 800ab0c:	4798      	blx	r3
   i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_BIQUAD_LEVEL, reg_map.rec_biq_lvl.reg);
 800ab0e:	6863      	ldr	r3, [r4, #4]
 800ab10:	7bea      	ldrb	r2, [r5, #15]
 800ab12:	7820      	ldrb	r0, [r4, #0]
 800ab14:	2119      	movs	r1, #25
 800ab16:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_BIAS_CONTROL, reg_map.bias_ctrl.reg);
 800ab18:	6863      	ldr	r3, [r4, #4]
 800ab1a:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
 800ab1e:	7820      	ldrb	r0, [r4, #0]
 800ab20:	2142      	movs	r1, #66	; 0x42
 800ab22:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DAC_CONTROL, reg_map.dac_ctrl.reg);
 800ab24:	6863      	ldr	r3, [r4, #4]
 800ab26:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
 800ab2a:	7820      	ldrb	r0, [r4, #0]
 800ab2c:	2143      	movs	r1, #67	; 0x43
 800ab2e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_ADC_CONTROL, reg_map.adc_ctrl.reg);
 800ab30:	6863      	ldr	r3, [r4, #4]
 800ab32:	f895 20d2 	ldrb.w	r2, [r5, #210]	; 0xd2
 800ab36:	7820      	ldrb	r0, [r4, #0]
 800ab38:	2144      	movs	r1, #68	; 0x44
 800ab3a:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_LINE_INPUT_CONFIG, reg_map.line_in_config.reg);
 800ab3c:	6863      	ldr	r3, [r4, #4]
 800ab3e:	78ea      	ldrb	r2, [r5, #3]
 800ab40:	7820      	ldrb	r0, [r4, #0]
 800ab42:	210d      	movs	r1, #13
 800ab44:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_LEFT_ADC_MIXER, reg_map.left_adc_mixer.reg);
 800ab46:	6863      	ldr	r3, [r4, #4]
 800ab48:	7aea      	ldrb	r2, [r5, #11]
 800ab4a:	7820      	ldrb	r0, [r4, #0]
 800ab4c:	2115      	movs	r1, #21
 800ab4e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_RIGHT_ADC_MIXER, reg_map.right_adc_mixer.reg);
 800ab50:	6863      	ldr	r3, [r4, #4]
 800ab52:	7b2a      	ldrb	r2, [r5, #12]
 800ab54:	7820      	ldrb	r0, [r4, #0]
 800ab56:	2116      	movs	r1, #22
 800ab58:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_LEFT_HP_MIXER, reg_map.left_hp_mixer.reg);
 800ab5a:	6863      	ldr	r3, [r4, #4]
 800ab5c:	7fea      	ldrb	r2, [r5, #31]
 800ab5e:	7820      	ldrb	r0, [r4, #0]
 800ab60:	2129      	movs	r1, #41	; 0x29
 800ab62:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_RIGHT_HP_MIXER, reg_map.right_hp_mixer.reg);
 800ab64:	6863      	ldr	r3, [r4, #4]
 800ab66:	f895 2020 	ldrb.w	r2, [r5, #32]
 800ab6a:	7820      	ldrb	r0, [r4, #0]
 800ab6c:	212a      	movs	r1, #42	; 0x2a
 800ab6e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_RCV_LOUTL_MIXER, reg_map.rcv_loutl_mixer.reg);
 800ab70:	6863      	ldr	r3, [r4, #4]
 800ab72:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
 800ab76:	7820      	ldrb	r0, [r4, #0]
 800ab78:	2137      	movs	r1, #55	; 0x37
 800ab7a:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_LOUTR_MIXER, reg_map.loutr_mixer.reg);
 800ab7c:	6863      	ldr	r3, [r4, #4]
 800ab7e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800ab82:	7820      	ldrb	r0, [r4, #0]
 800ab84:	213a      	movs	r1, #58	; 0x3a
 800ab86:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_EQ_PLAYBACK_LEVEL, reg_map.eq_playback_lvl.reg);
 800ab88:	6863      	ldr	r3, [r4, #4]
 800ab8a:	7faa      	ldrb	r2, [r5, #30]
 800ab8c:	7820      	ldrb	r0, [r4, #0]
 800ab8e:	2128      	movs	r1, #40	; 0x28
 800ab90:	4798      	blx	r3
     i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_MIC_BIAS_VOLTAGE, reg_map.mic_bias_voltage.reg);
 800ab92:	6863      	ldr	r3, [r4, #4]
 800ab94:	7a2a      	ldrb	r2, [r5, #8]
 800ab96:	7820      	ldrb	r0, [r4, #0]
 800ab98:	2112      	movs	r1, #18
 800ab9a:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_HP_CONTROL, reg_map.gain_set.hp_ctrl.reg);
 800ab9c:	6863      	ldr	r3, [r4, #4]
 800ab9e:	f895 20d4 	ldrb.w	r2, [r5, #212]	; 0xd4
 800aba2:	7820      	ldrb	r0, [r4, #0]
 800aba4:	212b      	movs	r1, #43	; 0x2b
 800aba6:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_LEFT_HP_VOLUME, reg_map.gain_set.left_hp_volume.reg);
 800aba8:	6863      	ldr	r3, [r4, #4]
 800abaa:	f895 20d5 	ldrb.w	r2, [r5, #213]	; 0xd5
 800abae:	7820      	ldrb	r0, [r4, #0]
 800abb0:	212c      	movs	r1, #44	; 0x2c
 800abb2:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_RIGHT_HP_VOLUME, reg_map.gain_set.right_hp_volume.reg);
 800abb4:	6863      	ldr	r3, [r4, #4]
 800abb6:	f895 20d6 	ldrb.w	r2, [r5, #214]	; 0xd6
 800abba:	7820      	ldrb	r0, [r4, #0]
 800abbc:	212d      	movs	r1, #45	; 0x2d
 800abbe:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_SPK_CONTROL, reg_map.gain_set.spk_ctrl.reg);
 800abc0:	6863      	ldr	r3, [r4, #4]
 800abc2:	f895 20d7 	ldrb.w	r2, [r5, #215]	; 0xd7
 800abc6:	7820      	ldrb	r0, [r4, #0]
 800abc8:	2130      	movs	r1, #48	; 0x30
 800abca:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_LEFT_SPK_VOLUME, reg_map.gain_set.left_spk_volume.reg);
 800abcc:	6863      	ldr	r3, [r4, #4]
 800abce:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
 800abd2:	7820      	ldrb	r0, [r4, #0]
 800abd4:	2131      	movs	r1, #49	; 0x31
 800abd6:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_RIGHT_SPK_VOLUME, reg_map.gain_set.right_spk_volume.reg);
 800abd8:	6863      	ldr	r3, [r4, #4]
 800abda:	f895 20d9 	ldrb.w	r2, [r5, #217]	; 0xd9
 800abde:	7820      	ldrb	r0, [r4, #0]
 800abe0:	2132      	movs	r1, #50	; 0x32
 800abe2:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_RCV_LOUTL_CONTROL, reg_map.gain_set.rcv_loutl_ctrl.reg);
 800abe4:	6863      	ldr	r3, [r4, #4]
 800abe6:	f895 20da 	ldrb.w	r2, [r5, #218]	; 0xda
 800abea:	7820      	ldrb	r0, [r4, #0]
 800abec:	2138      	movs	r1, #56	; 0x38
 800abee:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_RCV_LOUTL_VOLUME, reg_map.gain_set.rcv_loutl_volume.reg);
 800abf0:	6863      	ldr	r3, [r4, #4]
 800abf2:	f895 20db 	ldrb.w	r2, [r5, #219]	; 0xdb
 800abf6:	7820      	ldrb	r0, [r4, #0]
 800abf8:	2139      	movs	r1, #57	; 0x39
 800abfa:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_LOUTR_CONTROL, reg_map.gain_set.loutr_ctrl.reg);
 800abfc:	6863      	ldr	r3, [r4, #4]
 800abfe:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
 800ac02:	7820      	ldrb	r0, [r4, #0]
 800ac04:	213b      	movs	r1, #59	; 0x3b
 800ac06:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_LOUTR_VOLUME, reg_map.gain_set.loutr_volume.reg);
 800ac08:	6863      	ldr	r3, [r4, #4]
 800ac0a:	f895 20dd 	ldrb.w	r2, [r5, #221]	; 0xdd
 800ac0e:	7820      	ldrb	r0, [r4, #0]
 800ac10:	213c      	movs	r1, #60	; 0x3c
 800ac12:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_LEVEL_CONTROL, reg_map.lvl_ctrl.reg);
 800ac14:	6863      	ldr	r3, [r4, #4]
 800ac16:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800ac1a:	7820      	ldrb	r0, [r4, #0]
 800ac1c:	2140      	movs	r1, #64	; 0x40
 800ac1e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_INTERFACE_FORMAT, reg_map.interface_format.reg);
 800ac20:	6863      	ldr	r3, [r4, #4]
 800ac22:	7e2a      	ldrb	r2, [r5, #24]
 800ac24:	7820      	ldrb	r0, [r4, #0]
 800ac26:	2122      	movs	r1, #34	; 0x22
 800ac28:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_IO_CONFIGURATION, reg_map.io_config.reg);
 800ac2a:	6863      	ldr	r3, [r4, #4]
 800ac2c:	7eea      	ldrb	r2, [r5, #27]
 800ac2e:	7820      	ldrb	r0, [r4, #0]
 800ac30:	2125      	movs	r1, #37	; 0x25
 800ac32:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_TDM_CONTROL, reg_map.tdm_ctrl.reg);
 800ac34:	6863      	ldr	r3, [r4, #4]
 800ac36:	7e6a      	ldrb	r2, [r5, #25]
 800ac38:	7820      	ldrb	r0, [r4, #0]
 800ac3a:	2123      	movs	r1, #35	; 0x23
 800ac3c:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_TDM_FORMAT, reg_map.tdm_format.reg);
 800ac3e:	6863      	ldr	r3, [r4, #4]
 800ac40:	7eaa      	ldrb	r2, [r5, #26]
 800ac42:	7820      	ldrb	r0, [r4, #0]
 800ac44:	2124      	movs	r1, #36	; 0x24
 800ac46:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_LEFT_SPK_MIXER, reg_map.left_spk_mixer.reg);
 800ac48:	6863      	ldr	r3, [r4, #4]
 800ac4a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 800ac4e:	7820      	ldrb	r0, [r4, #0]
 800ac50:	212e      	movs	r1, #46	; 0x2e
 800ac52:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_RIGHT_SPK_MIXER, reg_map.right_spk_mixer.reg);
 800ac54:	6863      	ldr	r3, [r4, #4]
 800ac56:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
 800ac5a:	7820      	ldrb	r0, [r4, #0]
 800ac5c:	212f      	movs	r1, #47	; 0x2f
 800ac5e:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_REC_SIDETONE, reg_map.rec_sidetone.reg);
 800ac60:	6863      	ldr	r3, [r4, #4]
 800ac62:	7c2a      	ldrb	r2, [r5, #16]
 800ac64:	7820      	ldrb	r0, [r4, #0]
 800ac66:	211a      	movs	r1, #26
 800ac68:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_LINE_INPUT_LEVEL, reg_map.line_in_lvl.reg);
 800ac6a:	6863      	ldr	r3, [r4, #4]
 800ac6c:	792a      	ldrb	r2, [r5, #4]
 800ac6e:	7820      	ldrb	r0, [r4, #0]
 800ac70:	210e      	movs	r1, #14
 800ac72:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_MIC1_INPUT_LEVEL, reg_map.mic1_in_lvl.reg);
 800ac74:	6863      	ldr	r3, [r4, #4]
 800ac76:	79aa      	ldrb	r2, [r5, #6]
 800ac78:	7820      	ldrb	r0, [r4, #0]
 800ac7a:	2110      	movs	r1, #16
 800ac7c:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_MIC2_INPUT_LEVEL, reg_map.mic2_in_lvl.reg);
 800ac7e:	6863      	ldr	r3, [r4, #4]
 800ac80:	79ea      	ldrb	r2, [r5, #7]
 800ac82:	7820      	ldrb	r0, [r4, #0]
 800ac84:	2111      	movs	r1, #17
 800ac86:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_LEFT_REC_LEVEL, reg_map.left_rec_lvl.reg);
 800ac88:	6863      	ldr	r3, [r4, #4]
 800ac8a:	7b6a      	ldrb	r2, [r5, #13]
 800ac8c:	7820      	ldrb	r0, [r4, #0]
 800ac8e:	2117      	movs	r1, #23
 800ac90:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_RIGHT_REC_LEVEL, reg_map.right_rec_lvl.reg);
 800ac92:	6863      	ldr	r3, [r4, #4]
 800ac94:	7baa      	ldrb	r2, [r5, #14]
 800ac96:	7820      	ldrb	r0, [r4, #0]
 800ac98:	2118      	movs	r1, #24
 800ac9a:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_OUTPUT_ENABLE, reg_map.output_en.reg);
 800ac9c:	6863      	ldr	r3, [r4, #4]
 800ac9e:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 800aca2:	7820      	ldrb	r0, [r4, #0]
 800aca4:	213f      	movs	r1, #63	; 0x3f
 800aca6:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_INPUT_ENABLE, reg_map.input_en.reg);
 800aca8:	6863      	ldr	r3, [r4, #4]
 800acaa:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
 800acae:	7820      	ldrb	r0, [r4, #0]
 800acb0:	213e      	movs	r1, #62	; 0x3e
 800acb2:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_JACK_DETECT, reg_map.jack_detect.reg);
 800acb4:	6863      	ldr	r3, [r4, #4]
 800acb6:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800acba:	7820      	ldrb	r0, [r4, #0]
 800acbc:	213d      	movs	r1, #61	; 0x3d
 800acbe:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DIGITAL_MIC_CONFIG, reg_map.dig_mic_config.reg);
 800acc0:	6863      	ldr	r3, [r4, #4]
 800acc2:	7aaa      	ldrb	r2, [r5, #10]
 800acc4:	7820      	ldrb	r0, [r4, #0]
 800acc6:	2114      	movs	r1, #20
 800acc8:	4798      	blx	r3
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DIGITAL_MIC_ENABLE, reg_map.dig_mic_en.reg);
 800acca:	6863      	ldr	r3, [r4, #4]
 800accc:	7a6a      	ldrb	r2, [r5, #9]
 800acce:	7820      	ldrb	r0, [r4, #0]
 800acd0:	2113      	movs	r1, #19
 800acd2:	4798      	blx	r3
    if (codec_cfg->playback_filter_enabled) {
 800acd4:	797b      	ldrb	r3, [r7, #5]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d07d      	beq.n	800add6 <max98091_init+0x5d6>
    biquad_bands->band1.coef_b0.reg = LS_172_B0;
 800acda:	4b66      	ldr	r3, [pc, #408]	; (800ae74 <max98091_init+0x674>)
    biquad_bands->band1.coef_b1.reg = LS_172_B1;
 800acdc:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 800ae94 <max98091_init+0x694>
 800ace0:	4965      	ldr	r1, [pc, #404]	; (800ae78 <max98091_init+0x678>)
    biquad_bands->band1.coef_a1.reg = LS_172_A1;
 800ace2:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 800ae98 <max98091_init+0x698>
    biquad_bands->band7.coef_b1.reg = FLAT_B1;
 800ace6:	67de      	str	r6, [r3, #124]	; 0x7c
    biquad_bands->band2.coef_b0.reg = FLAT_B0;
 800ace8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    biquad_bands->band1.coef_b1.reg = LS_172_B1;
 800acec:	e9c3 c100 	strd	ip, r1, [r3]
    biquad_bands->band1.coef_a1.reg = LS_172_A1;
 800acf0:	4962      	ldr	r1, [pc, #392]	; (800ae7c <max98091_init+0x67c>)
    biquad_bands->band2.coef_b0.reg = FLAT_B0;
 800acf2:	615a      	str	r2, [r3, #20]
    biquad_bands->band3.coef_b0.reg = FLAT_B0;
 800acf4:	629a      	str	r2, [r3, #40]	; 0x28
    biquad_bands->band4.coef_b0.reg = FLAT_B0;
 800acf6:	63da      	str	r2, [r3, #60]	; 0x3c
    biquad_bands->band5.coef_b0.reg = FLAT_B0;
 800acf8:	651a      	str	r2, [r3, #80]	; 0x50
    biquad_bands->band6.coef_b0.reg = FLAT_B0;
 800acfa:	665a      	str	r2, [r3, #100]	; 0x64
    biquad_bands->band7.coef_b0.reg = FLAT_B0;
 800acfc:	679a      	str	r2, [r3, #120]	; 0x78
    biquad_bands->record.coef_b0.reg = LP_12k_B0;
 800acfe:	4a60      	ldr	r2, [pc, #384]	; (800ae80 <max98091_init+0x680>)
    biquad_bands->band1.coef_a1.reg = LS_172_A1;
 800ad00:	e9c3 e102 	strd	lr, r1, [r3, #8]
    biquad_bands->band1.coef_a2.reg = LS_172_A2;
 800ad04:	495f      	ldr	r1, [pc, #380]	; (800ae84 <max98091_init+0x684>)
 800ad06:	6119      	str	r1, [r3, #16]
    biquad_bands->band2.coef_b2.reg = FLAT_B2;
 800ad08:	e9c3 6606 	strd	r6, r6, [r3, #24]
    biquad_bands->band2.coef_a2.reg = FLAT_A2;
 800ad0c:	e9c3 6608 	strd	r6, r6, [r3, #32]
    biquad_bands->band3.coef_b2.reg = FLAT_B2;
 800ad10:	e9c3 660b 	strd	r6, r6, [r3, #44]	; 0x2c
    biquad_bands->band3.coef_a2.reg = FLAT_A2;
 800ad14:	e9c3 660d 	strd	r6, r6, [r3, #52]	; 0x34
    biquad_bands->band4.coef_b2.reg = FLAT_B2;
 800ad18:	e9c3 6610 	strd	r6, r6, [r3, #64]	; 0x40
    biquad_bands->band4.coef_a2.reg = FLAT_A2;
 800ad1c:	e9c3 6612 	strd	r6, r6, [r3, #72]	; 0x48
    biquad_bands->band5.coef_b2.reg = FLAT_B2;
 800ad20:	e9c3 6615 	strd	r6, r6, [r3, #84]	; 0x54
    biquad_bands->band5.coef_a2.reg = FLAT_A2;
 800ad24:	e9c3 6617 	strd	r6, r6, [r3, #92]	; 0x5c
    biquad_bands->band6.coef_b2.reg = FLAT_B2;
 800ad28:	e9c3 661a 	strd	r6, r6, [r3, #104]	; 0x68
    biquad_bands->band6.coef_a2.reg = FLAT_A2;
 800ad2c:	e9c3 661c 	strd	r6, r6, [r3, #112]	; 0x70
    biquad_bands->band7.coef_a1.reg = FLAT_A1;
 800ad30:	e9c3 6620 	strd	r6, r6, [r3, #128]	; 0x80
    biquad_bands->record.coef_b0.reg = LP_12k_B0;
 800ad34:	e9c3 6222 	strd	r6, r2, [r3, #136]	; 0x88
    biquad_bands->record.coef_b2.reg = LP_12k_B2;
 800ad38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    biquad_bands->record.coef_b1.reg = LP_12k_B1;
 800ad3c:	4a52      	ldr	r2, [pc, #328]	; (800ae88 <max98091_init+0x688>)
    biquad_bands->record.coef_a2.reg = LP_12k_A2;
 800ad3e:	4953      	ldr	r1, [pc, #332]	; (800ae8c <max98091_init+0x68c>)
    biquad_bands->record.coef_b1.reg = LP_12k_B1;
 800ad40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    biquad_bands->record.coef_a2.reg = LP_12k_A2;
 800ad44:	4a52      	ldr	r2, [pc, #328]	; (800ae90 <max98091_init+0x690>)
        configure_biquad_coefficients(i2c_hal, &biquad_bands);
 800ad46:	4620      	mov	r0, r4
    i2c_hal->read(i2c_hal->i2c_addr, MAX98091_REG_DSP_FILTER_ENABLE, &biquad_enable.reg);
 800ad48:	f10d 0804 	add.w	r8, sp, #4
    biquad_bands->record.coef_a2.reg = LP_12k_A2;
 800ad4c:	e9c3 1226 	strd	r1, r2, [r3, #152]	; 0x98
        configure_biquad_coefficients(i2c_hal, &biquad_bands);
 800ad50:	f7ff fa96 	bl	800a280 <configure_biquad_coefficients.constprop.0>
    i2c_hal->read(i2c_hal->i2c_addr, MAX98091_REG_DSP_FILTER_ENABLE, &biquad_enable.reg);
 800ad54:	4642      	mov	r2, r8
 800ad56:	7820      	ldrb	r0, [r4, #0]
 800ad58:	68a3      	ldr	r3, [r4, #8]
    max98091_reg_dsp_filter_en_t biquad_enable = {0};
 800ad5a:	f88d 6004 	strb.w	r6, [sp, #4]
    i2c_hal->read(i2c_hal->i2c_addr, MAX98091_REG_DSP_FILTER_ENABLE, &biquad_enable.reg);
 800ad5e:	2141      	movs	r1, #65	; 0x41
 800ad60:	4798      	blx	r3
        biquad_enable.bit.eq7banden = 1;
 800ad62:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad66:	f022 0207 	bic.w	r2, r2, #7
 800ad6a:	f042 0201 	orr.w	r2, r2, #1
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DSP_FILTER_ENABLE, biquad_enable.reg);
 800ad6e:	6863      	ldr	r3, [r4, #4]
 800ad70:	7820      	ldrb	r0, [r4, #0]
        biquad_enable.bit.eq7banden = 0;
 800ad72:	f88d 2004 	strb.w	r2, [sp, #4]
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DSP_FILTER_ENABLE, biquad_enable.reg);
 800ad76:	2141      	movs	r1, #65	; 0x41
 800ad78:	4798      	blx	r3
    if (codec_cfg->record_filter_enabled) {
 800ad7a:	793e      	ldrb	r6, [r7, #4]
 800ad7c:	2e00      	cmp	r6, #0
 800ad7e:	d13b      	bne.n	800adf8 <max98091_init+0x5f8>
    max98091_reg_dsp_filter_en_t biquad_enable = {0};
 800ad80:	2300      	movs	r3, #0
    i2c_hal->read(i2c_hal->i2c_addr, MAX98091_REG_DSP_FILTER_ENABLE, &biquad_enable.reg);
 800ad82:	7820      	ldrb	r0, [r4, #0]
    max98091_reg_dsp_filter_en_t biquad_enable = {0};
 800ad84:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_hal->read(i2c_hal->i2c_addr, MAX98091_REG_DSP_FILTER_ENABLE, &biquad_enable.reg);
 800ad88:	4642      	mov	r2, r8
 800ad8a:	68a3      	ldr	r3, [r4, #8]
 800ad8c:	2141      	movs	r1, #65	; 0x41
 800ad8e:	4798      	blx	r3
    if (filter_en) {
 800ad90:	f89d 2004 	ldrb.w	r2, [sp, #4]
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DSP_FILTER_ENABLE, biquad_enable.reg);
 800ad94:	6863      	ldr	r3, [r4, #4]
 800ad96:	7820      	ldrb	r0, [r4, #0]
 800ad98:	f366 02c3 	bfi	r2, r6, #3, #1
 800ad9c:	f88d 2004 	strb.w	r2, [sp, #4]
 800ada0:	2141      	movs	r1, #65	; 0x41
 800ada2:	b2d2      	uxtb	r2, r2
 800ada4:	4798      	blx	r3
    reg_map.shutdown.bit.not_shdn = MAX98091_DEV_PWRUP;
 800ada6:	f895 20d3 	ldrb.w	r2, [r5, #211]	; 0xd3
 800adaa:	6863      	ldr	r3, [r4, #4]
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DEVICE_SHUTDOWN, reg_map.shutdown.reg);
 800adac:	7820      	ldrb	r0, [r4, #0]
    reg_map.shutdown.bit.not_shdn = MAX98091_DEV_PWRUP;
 800adae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DEVICE_SHUTDOWN, reg_map.shutdown.reg);
 800adb2:	2145      	movs	r1, #69	; 0x45
    reg_map.shutdown.bit.not_shdn = MAX98091_DEV_PWRUP;
 800adb4:	f885 20d3 	strb.w	r2, [r5, #211]	; 0xd3
}
 800adb8:	b002      	add	sp, #8
 800adba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    i2c_hal->write(i2c_hal->i2c_addr, MAX98091_REG_DEVICE_SHUTDOWN, reg_map.shutdown.reg);
 800adbe:	4718      	bx	r3
        reg_map.filter_config.bit.dhf = 1; /* LRCLK is more than 48kHz. 4x FIR interpolation filter used */
 800adc0:	7f2a      	ldrb	r2, [r5, #28]
 800adc2:	f042 0210 	orr.w	r2, r2, #16
 800adc6:	772a      	strb	r2, [r5, #28]
        reg_map.adc_ctrl.bit.osr128 = 0; /* 64 x Fs */
 800adc8:	f895 20d2 	ldrb.w	r2, [r5, #210]	; 0xd2
 800adcc:	f366 0282 	bfi	r2, r6, #2, #1
 800add0:	f885 20d2 	strb.w	r2, [r5, #210]	; 0xd2
 800add4:	e558      	b.n	800a888 <max98091_init+0x88>
    i2c_hal->read(i2c_hal->i2c_addr, MAX98091_REG_DSP_FILTER_ENABLE, &biquad_enable.reg);
 800add6:	f10d 0804 	add.w	r8, sp, #4
    max98091_reg_dsp_filter_en_t biquad_enable = {0};
 800adda:	f88d 3004 	strb.w	r3, [sp, #4]
    i2c_hal->read(i2c_hal->i2c_addr, MAX98091_REG_DSP_FILTER_ENABLE, &biquad_enable.reg);
 800adde:	4642      	mov	r2, r8
 800ade0:	7820      	ldrb	r0, [r4, #0]
 800ade2:	68a3      	ldr	r3, [r4, #8]
 800ade4:	2141      	movs	r1, #65	; 0x41
 800ade6:	4798      	blx	r3
        biquad_enable.bit.eq7banden = 0;
 800ade8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800adec:	f022 0207 	bic.w	r2, r2, #7
 800adf0:	e7bd      	b.n	800ad6e <max98091_init+0x56e>
}
 800adf2:	b002      	add	sp, #8
 800adf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    biquad_bands->band1.coef_b0.reg = LS_172_B0;
 800adf8:	4b1e      	ldr	r3, [pc, #120]	; (800ae74 <max98091_init+0x674>)
    biquad_bands->band1.coef_b1.reg = LS_172_B1;
 800adfa:	4e26      	ldr	r6, [pc, #152]	; (800ae94 <max98091_init+0x694>)
 800adfc:	481e      	ldr	r0, [pc, #120]	; (800ae78 <max98091_init+0x678>)
    biquad_bands->band1.coef_a1.reg = LS_172_A1;
 800adfe:	f8df c098 	ldr.w	ip, [pc, #152]	; 800ae98 <max98091_init+0x698>
    biquad_bands->band2.coef_b0.reg = FLAT_B0;
 800ae02:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    biquad_bands->band1.coef_b1.reg = LS_172_B1;
 800ae06:	e9c3 6000 	strd	r6, r0, [r3]
    biquad_bands->band1.coef_a1.reg = LS_172_A1;
 800ae0a:	481c      	ldr	r0, [pc, #112]	; (800ae7c <max98091_init+0x67c>)
    biquad_bands->band2.coef_b0.reg = FLAT_B0;
 800ae0c:	6159      	str	r1, [r3, #20]
    biquad_bands->band3.coef_b0.reg = FLAT_B0;
 800ae0e:	6299      	str	r1, [r3, #40]	; 0x28
    biquad_bands->band4.coef_b0.reg = FLAT_B0;
 800ae10:	63d9      	str	r1, [r3, #60]	; 0x3c
    biquad_bands->band5.coef_b0.reg = FLAT_B0;
 800ae12:	6519      	str	r1, [r3, #80]	; 0x50
    biquad_bands->band6.coef_b0.reg = FLAT_B0;
 800ae14:	6659      	str	r1, [r3, #100]	; 0x64
    biquad_bands->band7.coef_b0.reg = FLAT_B0;
 800ae16:	6799      	str	r1, [r3, #120]	; 0x78
    biquad_bands->record.coef_b0.reg = LP_12k_B0;
 800ae18:	4919      	ldr	r1, [pc, #100]	; (800ae80 <max98091_init+0x680>)
    biquad_bands->band2.coef_b1.reg = FLAT_B1;
 800ae1a:	2200      	movs	r2, #0
    biquad_bands->band1.coef_a1.reg = LS_172_A1;
 800ae1c:	e9c3 c002 	strd	ip, r0, [r3, #8]
    biquad_bands->band1.coef_a2.reg = LS_172_A2;
 800ae20:	4818      	ldr	r0, [pc, #96]	; (800ae84 <max98091_init+0x684>)
    biquad_bands->band7.coef_b1.reg = FLAT_B1;
 800ae22:	67da      	str	r2, [r3, #124]	; 0x7c
    biquad_bands->band2.coef_b2.reg = FLAT_B2;
 800ae24:	e9c3 2206 	strd	r2, r2, [r3, #24]
    biquad_bands->band2.coef_a2.reg = FLAT_A2;
 800ae28:	e9c3 2208 	strd	r2, r2, [r3, #32]
    biquad_bands->band3.coef_b2.reg = FLAT_B2;
 800ae2c:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    biquad_bands->band3.coef_a2.reg = FLAT_A2;
 800ae30:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
    biquad_bands->band4.coef_b2.reg = FLAT_B2;
 800ae34:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
    biquad_bands->band4.coef_a2.reg = FLAT_A2;
 800ae38:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48
    biquad_bands->band5.coef_b2.reg = FLAT_B2;
 800ae3c:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    biquad_bands->band5.coef_a2.reg = FLAT_A2;
 800ae40:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
    biquad_bands->band6.coef_b2.reg = FLAT_B2;
 800ae44:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
    biquad_bands->band6.coef_a2.reg = FLAT_A2;
 800ae48:	e9c3 221c 	strd	r2, r2, [r3, #112]	; 0x70
    biquad_bands->band1.coef_a2.reg = LS_172_A2;
 800ae4c:	6118      	str	r0, [r3, #16]
    biquad_bands->band7.coef_a1.reg = FLAT_A1;
 800ae4e:	e9c3 2220 	strd	r2, r2, [r3, #128]	; 0x80
    biquad_bands->record.coef_b0.reg = LP_12k_B0;
 800ae52:	e9c3 2122 	strd	r2, r1, [r3, #136]	; 0x88
    biquad_bands->record.coef_b1.reg = LP_12k_B1;
 800ae56:	4a0c      	ldr	r2, [pc, #48]	; (800ae88 <max98091_init+0x688>)
    biquad_bands->record.coef_b2.reg = LP_12k_B2;
 800ae58:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    biquad_bands->record.coef_b1.reg = LP_12k_B1;
 800ae5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    biquad_bands->record.coef_a2.reg = LP_12k_A2;
 800ae60:	490a      	ldr	r1, [pc, #40]	; (800ae8c <max98091_init+0x68c>)
 800ae62:	4a0b      	ldr	r2, [pc, #44]	; (800ae90 <max98091_init+0x690>)
        configure_biquad_coefficients(i2c_hal, &biquad_bands);
 800ae64:	4620      	mov	r0, r4
    biquad_bands->record.coef_a2.reg = LP_12k_A2;
 800ae66:	e9c3 1226 	strd	r1, r2, [r3, #152]	; 0x98
        configure_biquad_coefficients(i2c_hal, &biquad_bands);
 800ae6a:	f7ff fa09 	bl	800a280 <configure_biquad_coefficients.constprop.0>
    activate_record_filter(i2c_hal, codec_cfg->record_filter_enabled);
 800ae6e:	793e      	ldrb	r6, [r7, #4]
 800ae70:	e786      	b.n	800ad80 <max98091_init+0x580>
 800ae72:	4770      	bx	lr
 800ae74:	20005ff8 	.word	0x20005ff8
 800ae78:	00e03369 	.word	0x00e03369
 800ae7c:	00e03311 	.word	0x00e03311
 800ae80:	0004cf21 	.word	0x0004cf21
 800ae84:	000fcd41 	.word	0x000fcd41
 800ae88:	00099e42 	.word	0x00099e42
 800ae8c:	00fff2fb 	.word	0x00fff2fb
 800ae90:	0003498a 	.word	0x0003498a
 800ae94:	001014ae 	.word	0x001014ae
 800ae98:	000fb8eb 	.word	0x000fb8eb

0800ae9c <crc4itu>:
};

/* PUBLIC FUNCTIONS ***********************************************************/
uint8_t crc4itu(uint8_t crc, uint8_t *data, uint8_t len)
{
    if (data == NULL) {
 800ae9c:	b171      	cbz	r1, 800aebc <crc4itu+0x20>
        return 0;
    }
    crc &= 0xf;
 800ae9e:	f000 000f 	and.w	r0, r0, #15
    while (len--) {
 800aea2:	b16a      	cbz	r2, 800aec0 <crc4itu+0x24>
{
 800aea4:	b410      	push	{r4}
 800aea6:	4c07      	ldr	r4, [pc, #28]	; (800aec4 <crc4itu+0x28>)
 800aea8:	440a      	add	r2, r1
        crc = table_byte[crc ^ *data++];
 800aeaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeae:	4058      	eors	r0, r3
    while (len--) {
 800aeb0:	428a      	cmp	r2, r1
        crc = table_byte[crc ^ *data++];
 800aeb2:	5c20      	ldrb	r0, [r4, r0]
    while (len--) {
 800aeb4:	d1f9      	bne.n	800aeaa <crc4itu+0xe>
    }
    return crc;
}
 800aeb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeba:	4770      	bx	lr
        return 0;
 800aebc:	4608      	mov	r0, r1
 800aebe:	4770      	bx	lr
}
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	08014864 	.word	0x08014864

0800aec8 <mem_pool_init>:
{
    mem_pool->mem_pool_begin = pool;
    mem_pool->capacity = meme_pool_size;
    mem_pool->free_bytes = mem_pool->capacity;
    mem_pool->mem_pool_it = mem_pool->mem_pool_begin;
    mem_pool->mem_pool_end = mem_pool->mem_pool_begin + mem_pool->capacity;
 800aec8:	188b      	adds	r3, r1, r2
    mem_pool->capacity = meme_pool_size;
 800aeca:	e9c0 1200 	strd	r1, r2, [r0]
    mem_pool->mem_pool_end = mem_pool->mem_pool_begin + mem_pool->capacity;
 800aece:	e9c0 3103 	strd	r3, r1, [r0, #12]
    mem_pool->free_bytes = mem_pool->capacity;
 800aed2:	6082      	str	r2, [r0, #8]
}
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop

0800aed8 <mem_pool_malloc>:

void *mem_pool_malloc(mem_pool_t *mem_pool, size_t wanted_size)
{
 800aed8:	b538      	push	{r3, r4, r5, lr}
    void* ptr_ret = NULL;

    if (wanted_size & (sizeof(void *) - 1)) {
 800aeda:	078b      	lsls	r3, r1, #30
{
 800aedc:	460c      	mov	r4, r1
        wanted_size += (sizeof(uint32_t) - (wanted_size & (sizeof(void *) - 1)));
    }

    if (wanted_size <= mem_pool->free_bytes) {
 800aede:	6883      	ldr	r3, [r0, #8]
        wanted_size += (sizeof(uint32_t) - (wanted_size & (sizeof(void *) - 1)));
 800aee0:	bf1c      	itt	ne
 800aee2:	f021 0403 	bicne.w	r4, r1, #3
 800aee6:	3404      	addne	r4, #4
    if (wanted_size <= mem_pool->free_bytes) {
 800aee8:	42a3      	cmp	r3, r4
{
 800aeea:	4605      	mov	r5, r0
    if (wanted_size <= mem_pool->free_bytes) {
 800aeec:	d30e      	bcc.n	800af0c <mem_pool_malloc+0x34>
        ptr_ret = mem_pool->mem_pool_it;
 800aeee:	6903      	ldr	r3, [r0, #16]
        memset(mem_pool->mem_pool_it, 0, wanted_size);
 800aef0:	4622      	mov	r2, r4
 800aef2:	2100      	movs	r1, #0
 800aef4:	4618      	mov	r0, r3
 800aef6:	f006 ff61 	bl	8011dbc <memset>
        mem_pool->mem_pool_it += wanted_size;
 800aefa:	692a      	ldr	r2, [r5, #16]
        mem_pool->free_bytes -= wanted_size;
 800aefc:	68a9      	ldr	r1, [r5, #8]
        memset(mem_pool->mem_pool_it, 0, wanted_size);
 800aefe:	4603      	mov	r3, r0
        mem_pool->mem_pool_it += wanted_size;
 800af00:	4422      	add	r2, r4
        mem_pool->free_bytes -= wanted_size;
 800af02:	1b09      	subs	r1, r1, r4
        mem_pool->mem_pool_it += wanted_size;
 800af04:	612a      	str	r2, [r5, #16]
        mem_pool->free_bytes -= wanted_size;
 800af06:	60a9      	str	r1, [r5, #8]
    }

    return ptr_ret;
}
 800af08:	4618      	mov	r0, r3
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
    void* ptr_ret = NULL;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	bd38      	pop	{r3, r4, r5, pc}
 800af12:	bf00      	nop

0800af14 <circular_queue_init>:
#include <stddef.h>
#include "circular_queue_critical_section.h"

/* PUBLIC FUNCTIONS ***********************************************************/
void circular_queue_init(circular_queue_t *queue, void *buffer, uint32_t capacity, uint32_t size)
{
 800af14:	b410      	push	{r4}
    queue->buffer_begin = (char *)buffer;
    queue->buffer_end   = (char *)buffer + capacity * size;
 800af16:	fb03 1402 	mla	r4, r3, r2, r1
 800af1a:	e9c0 1402 	strd	r1, r4, [r0, #8]
    queue->enqueue_it   = queue->buffer_begin;
    queue->dequeue_it   = queue->buffer_begin;
 800af1e:	e9c0 1100 	strd	r1, r1, [r0]
    queue->item_size    = size;
    queue->capacity     = capacity;
 800af22:	e9c0 3204 	strd	r3, r2, [r0, #16]
    queue->free_space   = capacity;
}
 800af26:	f85d 4b04 	ldr.w	r4, [sp], #4
    queue->free_space   = capacity;
 800af2a:	6182      	str	r2, [r0, #24]
}
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop

0800af30 <circular_queue_front_raw>:

void * circular_queue_front_raw(circular_queue_t *queue)
{
    return queue->dequeue_it;
}
 800af30:	6840      	ldr	r0, [r0, #4]
 800af32:	4770      	bx	lr

0800af34 <circular_queue_front>:
  __ASM volatile ("cpsid i" : : : "memory");
 800af34:	b672      	cpsid	i

void *circular_queue_front(circular_queue_t *queue)
{
    void *ret;

    CRITICAL_SECTION_ENTER();
 800af36:	4b05      	ldr	r3, [pc, #20]	; (800af4c <circular_queue_front+0x18>)
    if (circular_queue_is_empty((queue))) {
 800af38:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
    CRITICAL_SECTION_ENTER();
 800af3c:	681b      	ldr	r3, [r3, #0]
    if (circular_queue_is_empty((queue))) {
 800af3e:	4291      	cmp	r1, r2
    return queue->dequeue_it;
 800af40:	bf14      	ite	ne
 800af42:	6840      	ldrne	r0, [r0, #4]
        ret = NULL;
 800af44:	2000      	moveq	r0, #0
    } else {
        ret = circular_queue_front_raw(queue);
    }
    CRITICAL_SECTION_EXIT();
 800af46:	b903      	cbnz	r3, 800af4a <circular_queue_front+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 800af48:	b662      	cpsie	i

    return ret;
}
 800af4a:	4770      	bx	lr
 800af4c:	20006178 	.word	0x20006178

0800af50 <circular_queue_get_free_slot_raw>:

void *circular_queue_get_free_slot_raw(circular_queue_t *queue)
{
    return queue->enqueue_it;
}
 800af50:	6800      	ldr	r0, [r0, #0]
 800af52:	4770      	bx	lr

0800af54 <circular_queue_get_free_slot>:
  __ASM volatile ("cpsid i" : : : "memory");
 800af54:	b672      	cpsid	i
void *circular_queue_get_free_slot(circular_queue_t *queue)
{
    void *ret;


    CRITICAL_SECTION_ENTER();
 800af56:	4a05      	ldr	r2, [pc, #20]	; (800af6c <circular_queue_get_free_slot+0x18>)
    if (circular_queue_is_full(queue)) {
 800af58:	6983      	ldr	r3, [r0, #24]
    CRITICAL_SECTION_ENTER();
 800af5a:	6812      	ldr	r2, [r2, #0]
    if (circular_queue_is_full(queue)) {
 800af5c:	b11b      	cbz	r3, 800af66 <circular_queue_get_free_slot+0x12>
    return queue->enqueue_it;
 800af5e:	6800      	ldr	r0, [r0, #0]
        ret = NULL;
    } else {
        ret = circular_queue_get_free_slot_raw(queue);
    }
    CRITICAL_SECTION_EXIT();
 800af60:	b902      	cbnz	r2, 800af64 <circular_queue_get_free_slot+0x10>
  __ASM volatile ("cpsie i" : : : "memory");
 800af62:	b662      	cpsie	i

    return ret;
}
 800af64:	4770      	bx	lr
        ret = NULL;
 800af66:	4618      	mov	r0, r3
 800af68:	e7fa      	b.n	800af60 <circular_queue_get_free_slot+0xc>
 800af6a:	bf00      	nop
 800af6c:	20006178 	.word	0x20006178

0800af70 <circular_queue_enqueue_raw>:

void circular_queue_enqueue_raw(circular_queue_t *queue)
{
    queue->free_space -= 1;
    queue->enqueue_it = (void *)((char *)queue->enqueue_it + queue->item_size);
 800af70:	6803      	ldr	r3, [r0, #0]

    if (queue->enqueue_it >= queue->buffer_end) {
 800af72:	68c1      	ldr	r1, [r0, #12]
    queue->free_space -= 1;
 800af74:	6982      	ldr	r2, [r0, #24]
{
 800af76:	b410      	push	{r4}
    queue->enqueue_it = (void *)((char *)queue->enqueue_it + queue->item_size);
 800af78:	6904      	ldr	r4, [r0, #16]
 800af7a:	4423      	add	r3, r4
    if (queue->enqueue_it >= queue->buffer_end) {
 800af7c:	428b      	cmp	r3, r1
    queue->enqueue_it = (void *)((char *)queue->enqueue_it + queue->item_size);
 800af7e:	6003      	str	r3, [r0, #0]
    queue->free_space -= 1;
 800af80:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
        queue->enqueue_it = queue->buffer_begin;
 800af84:	bf28      	it	cs
 800af86:	6883      	ldrcs	r3, [r0, #8]
    }
}
 800af88:	f85d 4b04 	ldr.w	r4, [sp], #4
    queue->free_space -= 1;
 800af8c:	6182      	str	r2, [r0, #24]
        queue->enqueue_it = queue->buffer_begin;
 800af8e:	bf28      	it	cs
 800af90:	6003      	strcs	r3, [r0, #0]
}
 800af92:	4770      	bx	lr

0800af94 <circular_queue_enqueue>:

bool circular_queue_enqueue(circular_queue_t *queue)
{
 800af94:	b410      	push	{r4}
  __ASM volatile ("cpsid i" : : : "memory");
 800af96:	b672      	cpsid	i
    bool success = true;

    CRITICAL_SECTION_ENTER();
 800af98:	490d      	ldr	r1, [pc, #52]	; (800afd0 <circular_queue_enqueue+0x3c>)
    return (circular_queue_size(queue) == 0 ? true : false);
}

bool circular_queue_is_full(circular_queue_t *queue)
{
    return (queue->free_space == 0 ? true : false);
 800af9a:	6983      	ldr	r3, [r0, #24]
    CRITICAL_SECTION_ENTER();
 800af9c:	680a      	ldr	r2, [r1, #0]
 800af9e:	1c54      	adds	r4, r2, #1
 800afa0:	600c      	str	r4, [r1, #0]
    if (!circular_queue_is_full(queue)) {
 800afa2:	b163      	cbz	r3, 800afbe <circular_queue_enqueue+0x2a>
    queue->free_space -= 1;
 800afa4:	3b01      	subs	r3, #1
    queue->enqueue_it = (void *)((char *)queue->enqueue_it + queue->item_size);
 800afa6:	6804      	ldr	r4, [r0, #0]
    queue->free_space -= 1;
 800afa8:	6183      	str	r3, [r0, #24]
    queue->enqueue_it = (void *)((char *)queue->enqueue_it + queue->item_size);
 800afaa:	6903      	ldr	r3, [r0, #16]
 800afac:	4423      	add	r3, r4
    if (queue->enqueue_it >= queue->buffer_end) {
 800afae:	68c4      	ldr	r4, [r0, #12]
    queue->enqueue_it = (void *)((char *)queue->enqueue_it + queue->item_size);
 800afb0:	6003      	str	r3, [r0, #0]
    if (queue->enqueue_it >= queue->buffer_end) {
 800afb2:	42a3      	cmp	r3, r4
 800afb4:	d30a      	bcc.n	800afcc <circular_queue_enqueue+0x38>
        queue->enqueue_it = queue->buffer_begin;
 800afb6:	6883      	ldr	r3, [r0, #8]
 800afb8:	6003      	str	r3, [r0, #0]
    bool success = true;
 800afba:	2001      	movs	r0, #1
 800afbc:	e000      	b.n	800afc0 <circular_queue_enqueue+0x2c>
        success = false;
 800afbe:	4618      	mov	r0, r3
    CRITICAL_SECTION_EXIT();
 800afc0:	600a      	str	r2, [r1, #0]
 800afc2:	b902      	cbnz	r2, 800afc6 <circular_queue_enqueue+0x32>
  __ASM volatile ("cpsie i" : : : "memory");
 800afc4:	b662      	cpsie	i
}
 800afc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afca:	4770      	bx	lr
    bool success = true;
 800afcc:	2001      	movs	r0, #1
 800afce:	e7f7      	b.n	800afc0 <circular_queue_enqueue+0x2c>
 800afd0:	20006178 	.word	0x20006178

0800afd4 <circular_queue_dequeue_raw>:
{
 800afd4:	b410      	push	{r4}
    queue->dequeue_it = (void *)((char *)queue->dequeue_it + queue->item_size);
 800afd6:	e9d0 1403 	ldrd	r1, r4, [r0, #12]
 800afda:	6843      	ldr	r3, [r0, #4]
    queue->free_space += 1;
 800afdc:	6982      	ldr	r2, [r0, #24]
    queue->dequeue_it = (void *)((char *)queue->dequeue_it + queue->item_size);
 800afde:	4423      	add	r3, r4
    if (queue->dequeue_it >= queue->buffer_end) {
 800afe0:	428b      	cmp	r3, r1
    queue->dequeue_it = (void *)((char *)queue->dequeue_it + queue->item_size);
 800afe2:	6043      	str	r3, [r0, #4]
    queue->free_space += 1;
 800afe4:	f102 0201 	add.w	r2, r2, #1
        queue->dequeue_it = queue->buffer_begin;
 800afe8:	bf28      	it	cs
 800afea:	6883      	ldrcs	r3, [r0, #8]
}
 800afec:	f85d 4b04 	ldr.w	r4, [sp], #4
    queue->free_space += 1;
 800aff0:	6182      	str	r2, [r0, #24]
        queue->dequeue_it = queue->buffer_begin;
 800aff2:	bf28      	it	cs
 800aff4:	6043      	strcs	r3, [r0, #4]
}
 800aff6:	4770      	bx	lr

0800aff8 <circular_queue_dequeue>:
{
 800aff8:	b430      	push	{r4, r5}
  __ASM volatile ("cpsid i" : : : "memory");
 800affa:	b672      	cpsid	i
    CRITICAL_SECTION_ENTER();
 800affc:	4a0e      	ldr	r2, [pc, #56]	; (800b038 <circular_queue_dequeue+0x40>)
    return queue->capacity - queue->free_space;
 800affe:	6981      	ldr	r1, [r0, #24]
    CRITICAL_SECTION_ENTER();
 800b000:	6813      	ldr	r3, [r2, #0]
 800b002:	1c5c      	adds	r4, r3, #1
 800b004:	6014      	str	r4, [r2, #0]
    if (!circular_queue_is_empty(queue)) {
 800b006:	6944      	ldr	r4, [r0, #20]
 800b008:	428c      	cmp	r4, r1
 800b00a:	d012      	beq.n	800b032 <circular_queue_dequeue+0x3a>
    queue->free_space += 1;
 800b00c:	3101      	adds	r1, #1
 800b00e:	6181      	str	r1, [r0, #24]
    queue->dequeue_it = (void *)((char *)queue->dequeue_it + queue->item_size);
 800b010:	e9d0 4103 	ldrd	r4, r1, [r0, #12]
 800b014:	6845      	ldr	r5, [r0, #4]
 800b016:	4429      	add	r1, r5
    if (queue->dequeue_it >= queue->buffer_end) {
 800b018:	42a1      	cmp	r1, r4
    queue->dequeue_it = (void *)((char *)queue->dequeue_it + queue->item_size);
 800b01a:	6041      	str	r1, [r0, #4]
    if (queue->dequeue_it >= queue->buffer_end) {
 800b01c:	d205      	bcs.n	800b02a <circular_queue_dequeue+0x32>
    bool success = true;
 800b01e:	2001      	movs	r0, #1
    CRITICAL_SECTION_EXIT();
 800b020:	6013      	str	r3, [r2, #0]
 800b022:	b903      	cbnz	r3, 800b026 <circular_queue_dequeue+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 800b024:	b662      	cpsie	i
}
 800b026:	bc30      	pop	{r4, r5}
 800b028:	4770      	bx	lr
        queue->dequeue_it = queue->buffer_begin;
 800b02a:	6881      	ldr	r1, [r0, #8]
 800b02c:	6041      	str	r1, [r0, #4]
    bool success = true;
 800b02e:	2001      	movs	r0, #1
 800b030:	e7f6      	b.n	800b020 <circular_queue_dequeue+0x28>
        success = false;
 800b032:	2000      	movs	r0, #0
 800b034:	e7f4      	b.n	800b020 <circular_queue_dequeue+0x28>
 800b036:	bf00      	nop
 800b038:	20006178 	.word	0x20006178

0800b03c <circular_queue_is_empty>:
    return (circular_queue_size(queue) == 0 ? true : false);
 800b03c:	e9d0 2005 	ldrd	r2, r0, [r0, #20]
}
 800b040:	1a10      	subs	r0, r2, r0
 800b042:	fab0 f080 	clz	r0, r0
 800b046:	0940      	lsrs	r0, r0, #5
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop

0800b04c <queue_init>:
static queue_enter_critical_t enter_critical;
static queue_exit_critical_t exit_critical;

/* PUBLIC FUNCTIONS ***********************************************************/
void queue_init(queue_critical_cfg_t critical)
{
 800b04c:	b410      	push	{r4}
 800b04e:	b083      	sub	sp, #12
 800b050:	ab02      	add	r3, sp, #8
 800b052:	e903 0003 	stmdb	r3, {r0, r1}
    enter_critical = critical.enter_critical;
 800b056:	e9dd 4000 	ldrd	r4, r0, [sp]
 800b05a:	4a05      	ldr	r2, [pc, #20]	; (800b070 <queue_init+0x24>)
    exit_critical  = critical.exit_critical;
 800b05c:	4905      	ldr	r1, [pc, #20]	; (800b074 <queue_init+0x28>)
    last_queue = NULL;
 800b05e:	4b06      	ldr	r3, [pc, #24]	; (800b078 <queue_init+0x2c>)
    enter_critical = critical.enter_critical;
 800b060:	6014      	str	r4, [r2, #0]
    last_queue = NULL;
 800b062:	2200      	movs	r2, #0
    exit_critical  = critical.exit_critical;
 800b064:	6008      	str	r0, [r1, #0]
    last_queue = NULL;
 800b066:	601a      	str	r2, [r3, #0]
}
 800b068:	b003      	add	sp, #12
 800b06a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b06e:	4770      	bx	lr
 800b070:	2000617c 	.word	0x2000617c
 800b074:	20006180 	.word	0x20006180
 800b078:	20006184 	.word	0x20006184

0800b07c <queue_init_pool>:

uint32_t queue_init_pool(uint8_t *pool, queue_t *new_free_queue, uint16_t num_nodes,
                         uint16_t data_size, const char *queue_name)
{
 800b07c:	b5f0      	push	{r4, r5, r6, r7, lr}
    queue_node_t *node_ptr = (queue_node_t *)pool;
    uint8_t *data = (uint8_t *)pool + (sizeof(queue_node_t) * num_nodes);
 800b07e:	0117      	lsls	r7, r2, #4
 800b080:	eb00 1502 	add.w	r5, r0, r2, lsl #4
    uint32_t num_bytes_used;

    /* Initialize nodes */
    for (uint8_t i = 0; i < num_nodes; i++) {
 800b084:	b192      	cbz	r2, 800b0ac <queue_init_pool+0x30>
    queue_node_t *node_ptr = (queue_node_t *)pool;
 800b086:	4604      	mov	r4, r0
    for (uint8_t i = 0; i < num_nodes; i++) {
 800b088:	f04f 0c00 	mov.w	ip, #0
        node_ptr->next = node_ptr + 1;
        node_ptr->data = data;
        node_ptr->home_queue = new_free_queue;
        node_ptr->copy_count = 1;
 800b08c:	2601      	movs	r6, #1
    for (uint8_t i = 0; i < num_nodes; i++) {
 800b08e:	f10c 0c01 	add.w	ip, ip, #1
 800b092:	fa5f fe8c 	uxtb.w	lr, ip
        node_ptr->next = node_ptr + 1;
 800b096:	3410      	adds	r4, #16
    for (uint8_t i = 0; i < num_nodes; i++) {
 800b098:	4596      	cmp	lr, r2
        node_ptr->data = data;
 800b09a:	f844 5c10 	str.w	r5, [r4, #-16]
        node_ptr->home_queue = new_free_queue;
 800b09e:	e944 1403 	strd	r1, r4, [r4, #-12]
        node_ptr++;
        data += data_size;
 800b0a2:	441d      	add	r5, r3
    for (uint8_t i = 0; i < num_nodes; i++) {
 800b0a4:	46f4      	mov	ip, lr
        node_ptr->copy_count = 1;
 800b0a6:	f804 6c04 	strb.w	r6, [r4, #-4]
    for (uint8_t i = 0; i < num_nodes; i++) {
 800b0aa:	d3f0      	bcc.n	800b08e <queue_init_pool+0x12>
    }
    /* Initialize the free queue */
    new_free_queue->head = (queue_node_t *)pool;
    new_free_queue->tail = new_free_queue->head + (num_nodes - 1);
 800b0ac:	f1a7 0410 	sub.w	r4, r7, #16
 800b0b0:	4404      	add	r4, r0
    new_free_queue->q_name = queue_name;
    new_free_queue->free_queue_type = true;
    /* Add queue to queue list */
    new_free_queue->prev_queue = last_queue;
    last_queue = new_free_queue;
    num_bytes_used =  (num_nodes * ((sizeof(queue_node_t) + data_size)));
 800b0b2:	3310      	adds	r3, #16
    new_free_queue->head = (queue_node_t *)pool;
 800b0b4:	6008      	str	r0, [r1, #0]
    new_free_queue->tail->next = NULL;
 800b0b6:	2500      	movs	r5, #0
    num_bytes_used =  (num_nodes * ((sizeof(queue_node_t) + data_size)));
 800b0b8:	fb02 f003 	mul.w	r0, r2, r3
    new_free_queue->prev_queue = last_queue;
 800b0bc:	4b07      	ldr	r3, [pc, #28]	; (800b0dc <queue_init_pool+0x60>)
    new_free_queue->tail = new_free_queue->head + (num_nodes - 1);
 800b0be:	604c      	str	r4, [r1, #4]
    new_free_queue->tail->next = NULL;
 800b0c0:	60a5      	str	r5, [r4, #8]
    new_free_queue->free_queue_type = true;
 800b0c2:	2401      	movs	r4, #1
    new_free_queue->length = num_nodes;
 800b0c4:	810a      	strh	r2, [r1, #8]
    new_free_queue->limit = num_nodes;
 800b0c6:	814a      	strh	r2, [r1, #10]
    new_free_queue->free_queue_type = true;
 800b0c8:	730c      	strb	r4, [r1, #12]
    new_free_queue->prev_queue = last_queue;
 800b0ca:	681a      	ldr	r2, [r3, #0]
    new_free_queue->q_name = queue_name;
 800b0cc:	9c05      	ldr	r4, [sp, #20]
    last_queue = new_free_queue;
 800b0ce:	6019      	str	r1, [r3, #0]
    /* Round up the number of bytes used to nearest 4-byte multiple */
    num_bytes_used = ((num_bytes_used + 3) & 0xfffffffc);
 800b0d0:	3003      	adds	r0, #3
    new_free_queue->prev_queue = last_queue;
 800b0d2:	e9c1 4204 	strd	r4, r2, [r1, #16]
    return num_bytes_used;
}
 800b0d6:	f020 0003 	bic.w	r0, r0, #3
 800b0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0dc:	20006184 	.word	0x20006184

0800b0e0 <queue_init_queue>:

void queue_init_queue(queue_t *queue, uint16_t limit, const char *q_name)
{
    /* Initialize new queue */
    enter_critical();
 800b0e0:	4b0b      	ldr	r3, [pc, #44]	; (800b110 <queue_init_queue+0x30>)
{
 800b0e2:	b570      	push	{r4, r5, r6, lr}
    enter_critical();
 800b0e4:	681b      	ldr	r3, [r3, #0]
{
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	460e      	mov	r6, r1
 800b0ea:	4615      	mov	r5, r2
    enter_critical();
 800b0ec:	4798      	blx	r3
    queue->length = 0;
    queue->limit  = limit;
    queue->q_name = q_name;
    queue->free_queue_type = false;
    /* Add queue to queue list */
    queue->prev_queue = last_queue;
 800b0ee:	4a09      	ldr	r2, [pc, #36]	; (800b114 <queue_init_queue+0x34>)
    last_queue = queue;
    exit_critical();
 800b0f0:	4909      	ldr	r1, [pc, #36]	; (800b118 <queue_init_queue+0x38>)
    queue->prev_queue = last_queue;
 800b0f2:	6810      	ldr	r0, [r2, #0]
    queue->limit  = limit;
 800b0f4:	8166      	strh	r6, [r4, #10]
    queue->head   = NULL;
 800b0f6:	2300      	movs	r3, #0
    queue->tail   = NULL;
 800b0f8:	e9c4 3300 	strd	r3, r3, [r4]
    queue->length = 0;
 800b0fc:	8123      	strh	r3, [r4, #8]
    queue->q_name = q_name;
 800b0fe:	6125      	str	r5, [r4, #16]
    queue->free_queue_type = false;
 800b100:	7323      	strb	r3, [r4, #12]
    queue->prev_queue = last_queue;
 800b102:	6160      	str	r0, [r4, #20]
    last_queue = queue;
 800b104:	6014      	str	r4, [r2, #0]
    exit_critical();
 800b106:	6809      	ldr	r1, [r1, #0]
}
 800b108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    exit_critical();
 800b10c:	4708      	bx	r1
 800b10e:	bf00      	nop
 800b110:	2000617c 	.word	0x2000617c
 800b114:	20006184 	.word	0x20006184
 800b118:	20006180 	.word	0x20006180

0800b11c <queue_get_free_node>:

queue_node_t *queue_get_free_node(queue_t *queue)
{
 800b11c:	b538      	push	{r3, r4, r5, lr}
    return (queue->free_queue_type) ? queue_dequeue_node(queue) : NULL;
 800b11e:	7b05      	ldrb	r5, [r0, #12]
 800b120:	b17d      	cbz	r5, 800b142 <queue_get_free_node+0x26>

queue_node_t *queue_dequeue_node(queue_t *queue)
{
    queue_node_t *head = NULL;

    enter_critical();
 800b122:	4b0c      	ldr	r3, [pc, #48]	; (800b154 <queue_get_free_node+0x38>)
 800b124:	4604      	mov	r4, r0
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4798      	blx	r3
    if (queue->length == 0) {
 800b12a:	8923      	ldrh	r3, [r4, #8]
 800b12c:	b15b      	cbz	r3, 800b146 <queue_get_free_node+0x2a>
        /* The queue is empty */
    } else if (queue->length == 1) {
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d00b      	beq.n	800b14a <queue_get_free_node+0x2e>
        /* The queue has one node */
        head = queue->head;
        queue->length--;
    } else {
        /* The queue has more than one node */
        head = queue->head;
 800b132:	6825      	ldr	r5, [r4, #0]
        queue->head = queue->head->next;
        queue->length--;
 800b134:	3b01      	subs	r3, #1
        queue->head = queue->head->next;
 800b136:	68aa      	ldr	r2, [r5, #8]
 800b138:	6022      	str	r2, [r4, #0]
        queue->length--;
 800b13a:	8123      	strh	r3, [r4, #8]
    }
    exit_critical();
 800b13c:	4b06      	ldr	r3, [pc, #24]	; (800b158 <queue_get_free_node+0x3c>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4798      	blx	r3
}
 800b142:	4628      	mov	r0, r5
 800b144:	bd38      	pop	{r3, r4, r5, pc}
    queue_node_t *head = NULL;
 800b146:	461d      	mov	r5, r3
 800b148:	e7f8      	b.n	800b13c <queue_get_free_node+0x20>
        queue->length--;
 800b14a:	2300      	movs	r3, #0
        head = queue->head;
 800b14c:	6825      	ldr	r5, [r4, #0]
        queue->length--;
 800b14e:	8123      	strh	r3, [r4, #8]
 800b150:	e7f4      	b.n	800b13c <queue_get_free_node+0x20>
 800b152:	bf00      	nop
 800b154:	2000617c 	.word	0x2000617c
 800b158:	20006180 	.word	0x20006180

0800b15c <queue_dequeue_node>:
{
 800b15c:	b538      	push	{r3, r4, r5, lr}
    enter_critical();
 800b15e:	4b10      	ldr	r3, [pc, #64]	; (800b1a0 <queue_dequeue_node+0x44>)
{
 800b160:	4604      	mov	r4, r0
    enter_critical();
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4798      	blx	r3
    if (queue->length == 0) {
 800b166:	8923      	ldrh	r3, [r4, #8]
 800b168:	b19b      	cbz	r3, 800b192 <queue_dequeue_node+0x36>
    } else if (queue->length == 1) {
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d009      	beq.n	800b182 <queue_dequeue_node+0x26>
        head = queue->head;
 800b16e:	6825      	ldr	r5, [r4, #0]
        queue->length--;
 800b170:	3b01      	subs	r3, #1
        queue->head = queue->head->next;
 800b172:	68aa      	ldr	r2, [r5, #8]
        queue->length--;
 800b174:	8123      	strh	r3, [r4, #8]
    exit_critical();
 800b176:	4b0b      	ldr	r3, [pc, #44]	; (800b1a4 <queue_dequeue_node+0x48>)
        queue->head = queue->head->next;
 800b178:	6022      	str	r2, [r4, #0]
    exit_critical();
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4798      	blx	r3

    return head;
}
 800b17e:	4628      	mov	r0, r5
 800b180:	bd38      	pop	{r3, r4, r5, pc}
        queue->length--;
 800b182:	2300      	movs	r3, #0
 800b184:	8123      	strh	r3, [r4, #8]
    exit_critical();
 800b186:	4b07      	ldr	r3, [pc, #28]	; (800b1a4 <queue_dequeue_node+0x48>)
        head = queue->head;
 800b188:	6825      	ldr	r5, [r4, #0]
    exit_critical();
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4798      	blx	r3
}
 800b18e:	4628      	mov	r0, r5
 800b190:	bd38      	pop	{r3, r4, r5, pc}
    queue_node_t *head = NULL;
 800b192:	461d      	mov	r5, r3
    exit_critical();
 800b194:	4b03      	ldr	r3, [pc, #12]	; (800b1a4 <queue_dequeue_node+0x48>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4798      	blx	r3
}
 800b19a:	4628      	mov	r0, r5
 800b19c:	bd38      	pop	{r3, r4, r5, pc}
 800b19e:	bf00      	nop
 800b1a0:	2000617c 	.word	0x2000617c
 800b1a4:	20006180 	.word	0x20006180

0800b1a8 <queue_enqueue_node>:

bool queue_enqueue_node(queue_t *queue, queue_node_t *node)
{
 800b1a8:	b530      	push	{r4, r5, lr}
    bool ret = false;

    if (node != NULL) { /* Prevent NULL node from being enqueued */
 800b1aa:	460c      	mov	r4, r1
{
 800b1ac:	b083      	sub	sp, #12
    if (node != NULL) { /* Prevent NULL node from being enqueued */
 800b1ae:	b1b9      	cbz	r1, 800b1e0 <queue_enqueue_node+0x38>
        enter_critical();
 800b1b0:	4b0e      	ldr	r3, [pc, #56]	; (800b1ec <queue_enqueue_node+0x44>)
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4798      	blx	r3
        if (queue->length < queue->limit) {
 800b1b8:	892b      	ldrh	r3, [r5, #8]
 800b1ba:	896a      	ldrh	r2, [r5, #10]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d807      	bhi.n	800b1d0 <queue_enqueue_node+0x28>
    bool ret = false;
 800b1c0:	2000      	movs	r0, #0
            }
            queue->tail = node;
            queue->length++;
            ret = true;
        }
        exit_critical();
 800b1c2:	4b0b      	ldr	r3, [pc, #44]	; (800b1f0 <queue_enqueue_node+0x48>)
 800b1c4:	9001      	str	r0, [sp, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4798      	blx	r3
 800b1ca:	9801      	ldr	r0, [sp, #4]
    }
    return ret;
}
 800b1cc:	b003      	add	sp, #12
 800b1ce:	bd30      	pop	{r4, r5, pc}
            if (queue->length == 0) {
 800b1d0:	b14b      	cbz	r3, 800b1e6 <queue_enqueue_node+0x3e>
                queue->tail->next = node;
 800b1d2:	686a      	ldr	r2, [r5, #4]
 800b1d4:	6094      	str	r4, [r2, #8]
            queue->length++;
 800b1d6:	3301      	adds	r3, #1
            queue->tail = node;
 800b1d8:	606c      	str	r4, [r5, #4]
            queue->length++;
 800b1da:	812b      	strh	r3, [r5, #8]
            ret = true;
 800b1dc:	2001      	movs	r0, #1
 800b1de:	e7f0      	b.n	800b1c2 <queue_enqueue_node+0x1a>
    bool ret = false;
 800b1e0:	4608      	mov	r0, r1
}
 800b1e2:	b003      	add	sp, #12
 800b1e4:	bd30      	pop	{r4, r5, pc}
                queue->head = node;
 800b1e6:	602c      	str	r4, [r5, #0]
 800b1e8:	e7f5      	b.n	800b1d6 <queue_enqueue_node+0x2e>
 800b1ea:	bf00      	nop
 800b1ec:	2000617c 	.word	0x2000617c
 800b1f0:	20006180 	.word	0x20006180

0800b1f4 <queue_free_node>:
    if (node != NULL) {
 800b1f4:	b1b8      	cbz	r0, 800b226 <queue_free_node+0x32>
        enter_critical();
 800b1f6:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <queue_free_node+0x34>)
{
 800b1f8:	b510      	push	{r4, lr}
 800b1fa:	4604      	mov	r4, r0
        enter_critical();
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4798      	blx	r3
        if (node->copy_count == 1) {
 800b200:	7b23      	ldrb	r3, [r4, #12]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d006      	beq.n	800b214 <queue_free_node+0x20>
            exit_critical();
 800b206:	4a09      	ldr	r2, [pc, #36]	; (800b22c <queue_free_node+0x38>)
            node->copy_count--;
 800b208:	3b01      	subs	r3, #1
 800b20a:	7323      	strb	r3, [r4, #12]
}
 800b20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            exit_critical();
 800b210:	6812      	ldr	r2, [r2, #0]
 800b212:	4710      	bx	r2
            exit_critical();
 800b214:	4b05      	ldr	r3, [pc, #20]	; (800b22c <queue_free_node+0x38>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4798      	blx	r3
            queue_enqueue_node(node->home_queue, node);
 800b21a:	6860      	ldr	r0, [r4, #4]
 800b21c:	4621      	mov	r1, r4
}
 800b21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            queue_enqueue_node(node->home_queue, node);
 800b222:	f7ff bfc1 	b.w	800b1a8 <queue_enqueue_node>
 800b226:	4770      	bx	lr
 800b228:	2000617c 	.word	0x2000617c
 800b22c:	20006180 	.word	0x20006180

0800b230 <queue_get_node>:
    return ret;
}

queue_node_t *queue_get_node(queue_t *queue)
{
    return (queue->free_queue_type || (queue->length == 0)) ? NULL : queue->head;
 800b230:	7b03      	ldrb	r3, [r0, #12]
 800b232:	b91b      	cbnz	r3, 800b23c <queue_get_node+0xc>
 800b234:	8903      	ldrh	r3, [r0, #8]
 800b236:	b10b      	cbz	r3, 800b23c <queue_get_node+0xc>
 800b238:	6800      	ldr	r0, [r0, #0]
 800b23a:	4770      	bx	lr
 800b23c:	2000      	movs	r0, #0
 800b23e:	4770      	bx	lr

0800b240 <queue_get_length>:
}

uint16_t queue_get_length(queue_t *queue)
{
    return (queue == NULL) ? 0 : queue->length;
 800b240:	b100      	cbz	r0, 800b244 <queue_get_length+0x4>
 800b242:	8900      	ldrh	r0, [r0, #8]
}
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop

0800b248 <queue_get_limit>:

uint16_t queue_get_limit(queue_t *queue)
{
    return (queue == NULL) ? 0 : queue->limit;
 800b248:	b100      	cbz	r0, 800b24c <queue_get_limit+0x4>
 800b24a:	8940      	ldrh	r0, [r0, #10]
}
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop

0800b250 <queue_inc_copy_count>:
    return ret;
}

void queue_inc_copy_count(queue_node_t *node)
{
    enter_critical();
 800b250:	4b06      	ldr	r3, [pc, #24]	; (800b26c <queue_inc_copy_count+0x1c>)
{
 800b252:	b510      	push	{r4, lr}
 800b254:	4604      	mov	r4, r0
    enter_critical();
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4798      	blx	r3
    node->copy_count++;
 800b25a:	7b23      	ldrb	r3, [r4, #12]
    exit_critical();
 800b25c:	4a04      	ldr	r2, [pc, #16]	; (800b270 <queue_inc_copy_count+0x20>)
    node->copy_count++;
 800b25e:	3301      	adds	r3, #1
 800b260:	7323      	strb	r3, [r4, #12]
}
 800b262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    exit_critical();
 800b266:	6812      	ldr	r2, [r2, #0]
 800b268:	4710      	bx	r2
 800b26a:	bf00      	nop
 800b26c:	2000617c 	.word	0x2000617c
 800b270:	20006180 	.word	0x20006180

0800b274 <get_ptr_addr.isra.0>:
 *  @param[in] idx           Array index.
 *  @return memory address according to the index.
 */
static int32_t *get_ptr_addr(resampling_instance_t *instance, int32_t *sample_array, uint16_t idx)
{
    switch (instance->buffer_type) {
 800b274:	1fc3      	subs	r3, r0, #7
 800b276:	2b18      	cmp	r3, #24
 800b278:	d80e      	bhi.n	800b298 <get_ptr_addr.isra.0+0x24>
 800b27a:	e8df f003 	tbb	[pc, r3]
 800b27e:	0d13      	.short	0x0d13
 800b280:	0d0d0d0d 	.word	0x0d0d0d0d
 800b284:	0d0d0d0d 	.word	0x0d0d0d0d
 800b288:	0d100d0d 	.word	0x0d100d0d
 800b28c:	0d100d0d 	.word	0x0d100d0d
 800b290:	0d0d0d0d 	.word	0x0d0d0d0d
 800b294:	0d0d      	.short	0x0d0d
 800b296:	10          	.byte	0x10
 800b297:	00          	.byte	0x00
    case BUFFER_8BITS:
        return (int32_t *)&((int8_t *)sample_array)[idx];
    case BUFFER_16BITS:
        return (int32_t *)&((int16_t *)sample_array)[idx];
 800b298:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800b29c:	4770      	bx	lr
    case BUFFER_20BITS:
    case BUFFER_24BITS:
    case BUFFER_32BITS:
        return (int32_t *)&((int32_t *)sample_array)[idx];
 800b29e:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    default:
        return (int32_t *)&((int16_t *)sample_array)[idx];
    }
}
 800b2a2:	4770      	bx	lr
        return (int32_t *)&((int8_t *)sample_array)[idx];
 800b2a4:	1888      	adds	r0, r1, r2
 800b2a6:	4770      	bx	lr

0800b2a8 <cast_type_write.isra.0>:
    switch (instance->buffer_type) {
 800b2a8:	3807      	subs	r0, #7
 800b2aa:	2818      	cmp	r0, #24
 800b2ac:	d80e      	bhi.n	800b2cc <cast_type_write.isra.0+0x24>
 800b2ae:	e8df f000 	tbb	[pc, r0]
 800b2b2:	0d13      	.short	0x0d13
 800b2b4:	0d0d0d0d 	.word	0x0d0d0d0d
 800b2b8:	0d0d0d0d 	.word	0x0d0d0d0d
 800b2bc:	0d100d0d 	.word	0x0d100d0d
 800b2c0:	0d100d0d 	.word	0x0d100d0d
 800b2c4:	0d0d0d0d 	.word	0x0d0d0d0d
 800b2c8:	0d0d      	.short	0x0d0d
 800b2ca:	10          	.byte	0x10
 800b2cb:	00          	.byte	0x00
        ((int16_t *)out)[index] = (int16_t)value;
 800b2cc:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
}
 800b2d0:	4770      	bx	lr
        ((int32_t *)out)[index] = (int32_t)value;
 800b2d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        break;
 800b2d6:	4770      	bx	lr
        ((int8_t *)out)[index] = (int8_t)value;
 800b2d8:	548b      	strb	r3, [r1, r2]
        break;
 800b2da:	4770      	bx	lr

0800b2dc <cast_type_read.isra.0>:
    switch (instance->buffer_type) {
 800b2dc:	3807      	subs	r0, #7
 800b2de:	2818      	cmp	r0, #24
 800b2e0:	d80e      	bhi.n	800b300 <cast_type_read.isra.0+0x24>
 800b2e2:	e8df f000 	tbb	[pc, r0]
 800b2e6:	0d13      	.short	0x0d13
 800b2e8:	0d0d0d0d 	.word	0x0d0d0d0d
 800b2ec:	0d0d0d0d 	.word	0x0d0d0d0d
 800b2f0:	0d100d0d 	.word	0x0d100d0d
 800b2f4:	0d100d0d 	.word	0x0d100d0d
 800b2f8:	0d0d0d0d 	.word	0x0d0d0d0d
 800b2fc:	0d0d      	.short	0x0d0d
 800b2fe:	10          	.byte	0x10
 800b2ff:	00          	.byte	0x00
        value = ((int16_t *)in)[index];
 800b300:	f931 0012 	ldrsh.w	r0, [r1, r2, lsl #1]
}
 800b304:	4770      	bx	lr
        value = ((int32_t *)in)[index];
 800b306:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
        break;
 800b30a:	4770      	bx	lr
        value = ((int8_t *)in)[index];
 800b30c:	5688      	ldrsb	r0, [r1, r2]
        break;
 800b30e:	4770      	bx	lr

0800b310 <interp_linear>:
{
 800b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b314:	b083      	sub	sp, #12
    nb_ch = instance->nb_channel;
 800b316:	f890 7038 	ldrb.w	r7, [r0, #56]	; 0x38
{
 800b31a:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
    while (idx < size) {
 800b31e:	2e00      	cmp	r6, #0
 800b320:	d07d      	beq.n	800b41e <interp_linear+0x10e>
 800b322:	3e01      	subs	r6, #1
 800b324:	fa1f fb86 	uxth.w	fp, r6
 800b328:	469a      	mov	sl, r3
 800b32a:	f10b 0302 	add.w	r3, fp, #2
 800b32e:	4604      	mov	r4, r0
 800b330:	4688      	mov	r8, r1
 800b332:	4691      	mov	r9, r2
 800b334:	9301      	str	r3, [sp, #4]
        if ((idx % nb_ch) == 0) {
 800b336:	2601      	movs	r6, #1
 800b338:	e01d      	b.n	800b376 <interp_linear+0x66>
                instance->bias += instance->bias_step_rem;
 800b33a:	6a22      	ldr	r2, [r4, #32]
 800b33c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                if (instance->bias >= instance->buffer_type_max) {
 800b33e:	6861      	ldr	r1, [r4, #4]
                instance->bias += instance->bias_step_rem;
 800b340:	4402      	add	r2, r0
                if (instance->bias >= instance->buffer_type_max) {
 800b342:	428a      	cmp	r2, r1
                instance->bias += instance->bias_step_rem;
 800b344:	6222      	str	r2, [r4, #32]
                if (instance->bias >= instance->buffer_type_max) {
 800b346:	d302      	bcc.n	800b34e <interp_linear+0x3e>
                    instance->bias -= instance->buffer_type_max;
 800b348:	1a52      	subs	r2, r2, r1
 800b34a:	6222      	str	r2, [r4, #32]
 800b34c:	2301      	movs	r3, #1
                instance->x_axis += instance->step_rem + bias_comp;
 800b34e:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 800b352:	69e0      	ldr	r0, [r4, #28]
 800b354:	4403      	add	r3, r0
 800b356:	185b      	adds	r3, r3, r1
                if(instance->x_axis > instance->max_x_axis) {
 800b358:	6be1      	ldr	r1, [r4, #60]	; 0x3c
                instance->x_axis += instance->step_rem + bias_comp;
 800b35a:	f142 0200 	adc.w	r2, r2, #0
 800b35e:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
                if(instance->x_axis > instance->max_x_axis) {
 800b362:	4299      	cmp	r1, r3
 800b364:	f04f 0300 	mov.w	r3, #0
 800b368:	4193      	sbcs	r3, r2
 800b36a:	db58      	blt.n	800b41e <interp_linear+0x10e>
    while (idx < size) {
 800b36c:	9a01      	ldr	r2, [sp, #4]
 800b36e:	1c73      	adds	r3, r6, #1
 800b370:	429a      	cmp	r2, r3
 800b372:	d054      	beq.n	800b41e <interp_linear+0x10e>
 800b374:	461e      	mov	r6, r3
 800b376:	78a5      	ldrb	r5, [r4, #2]
 800b378:	1e72      	subs	r2, r6, #1
 800b37a:	b292      	uxth	r2, r2
        y1_value = cast_type_read(instance, y1, idx);
 800b37c:	4649      	mov	r1, r9
 800b37e:	4628      	mov	r0, r5
 800b380:	f7ff ffac 	bl	800b2dc <cast_type_read.isra.0>
        y_value  = cast_type_read(instance, y, idx);
 800b384:	4641      	mov	r1, r8
        y1_value = cast_type_read(instance, y1, idx);
 800b386:	4683      	mov	fp, r0
        y_value  = cast_type_read(instance, y, idx);
 800b388:	4628      	mov	r0, r5
 800b38a:	f7ff ffa7 	bl	800b2dc <cast_type_read.isra.0>
        interp = (int32_t)(y1_value + ((instance->x_axis * (y_value - y1_value)) >> instance->buffer_type));
 800b38e:	6b61      	ldr	r1, [r4, #52]	; 0x34
        y_value  = cast_type_read(instance, y, idx);
 800b390:	ea4f 7ce0 	mov.w	ip, r0, asr #31
        interp = (int32_t)(y1_value + ((instance->x_axis * (y_value - y1_value)) >> instance->buffer_type));
 800b394:	ebb0 000b 	subs.w	r0, r0, fp
 800b398:	fb00 fe01 	mul.w	lr, r0, r1
 800b39c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b39e:	eb6c 7ceb 	sbc.w	ip, ip, fp, asr #31
 800b3a2:	fb0c ec01 	mla	ip, ip, r1, lr
 800b3a6:	fba1 1000 	umull	r1, r0, r1, r0
 800b3aa:	4460      	add	r0, ip
 800b3ac:	f1c5 0c20 	rsb	ip, r5, #32
 800b3b0:	fa00 fc0c 	lsl.w	ip, r0, ip
 800b3b4:	40e9      	lsrs	r1, r5
 800b3b6:	ea41 010c 	orr.w	r1, r1, ip
 800b3ba:	f1b5 0c20 	subs.w	ip, r5, #32
 800b3be:	bf5c      	itt	pl
 800b3c0:	fa40 fc0c 	asrpl.w	ip, r0, ip
 800b3c4:	ea41 010c 	orrpl.w	r1, r1, ip
        cast_type_write(instance, out, idx, interp);
 800b3c8:	eb0b 0301 	add.w	r3, fp, r1
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	4651      	mov	r1, sl
 800b3d0:	f7ff ff6a 	bl	800b2a8 <cast_type_write.isra.0>
        if ((idx % nb_ch) == 0) {
 800b3d4:	fbb6 f3f7 	udiv	r3, r6, r7
 800b3d8:	fb07 6313 	mls	r3, r7, r3, r6
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1c5      	bne.n	800b36c <interp_linear+0x5c>
            if (instance->correction == RESAMPLING_ADD_SAMPLE) {
 800b3e0:	7862      	ldrb	r2, [r4, #1]
 800b3e2:	2a01      	cmp	r2, #1
 800b3e4:	d1a9      	bne.n	800b33a <interp_linear+0x2a>
                instance->bias += instance->bias_step_add;
 800b3e6:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 800b3ea:	4401      	add	r1, r0
                if (instance->bias >= instance->buffer_type_max) {
 800b3ec:	6860      	ldr	r0, [r4, #4]
                instance->bias += instance->bias_step_add;
 800b3ee:	6221      	str	r1, [r4, #32]
                if (instance->bias >= instance->buffer_type_max) {
 800b3f0:	4281      	cmp	r1, r0
                    instance->bias -= instance->buffer_type_max;
 800b3f2:	bf2a      	itet	cs
 800b3f4:	1a09      	subcs	r1, r1, r0
 800b3f6:	461a      	movcc	r2, r3
 800b3f8:	6221      	strcs	r1, [r4, #32]
                if(instance->x_axis > (instance->step_add + bias_comp)) {
 800b3fa:	69a3      	ldr	r3, [r4, #24]
 800b3fc:	e9d4 100c 	ldrd	r1, r0, [r4, #48]	; 0x30
 800b400:	441a      	add	r2, r3
 800b402:	428a      	cmp	r2, r1
 800b404:	f04f 0300 	mov.w	r3, #0
 800b408:	4183      	sbcs	r3, r0
 800b40a:	da08      	bge.n	800b41e <interp_linear+0x10e>
                    instance->x_axis -= (instance->step_add + bias_comp);
 800b40c:	1a8a      	subs	r2, r1, r2
 800b40e:	f160 0000 	sbc.w	r0, r0, #0
 800b412:	e9c4 200c 	strd	r2, r0, [r4, #48]	; 0x30
    while (idx < size) {
 800b416:	9a01      	ldr	r2, [sp, #4]
 800b418:	1c73      	adds	r3, r6, #1
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d1aa      	bne.n	800b374 <interp_linear+0x64>
}
 800b41e:	4630      	mov	r0, r6
 800b420:	b003      	add	sp, #12
 800b422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b426:	bf00      	nop

0800b428 <resample_bypass>:
{
 800b428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42c:	f890 b038 	ldrb.w	fp, [r0, #56]	; 0x38
 800b430:	b083      	sub	sp, #12
 800b432:	f1bb 0f01 	cmp.w	fp, #1
 800b436:	bf38      	it	cc
 800b438:	f04f 0b01 	movcc.w	fp, #1
 800b43c:	4607      	mov	r7, r0
 800b43e:	4689      	mov	r9, r1
 800b440:	4692      	mov	sl, r2
 800b442:	9301      	str	r3, [sp, #4]
        cast_type_write(instance, (int32_t *)ptr_output, size, (int32_t)cast_type_read(instance, (int32_t *)instance->last_sample, nb_ch+mux_index));
 800b444:	f100 0808 	add.w	r8, r0, #8
 800b448:	fa1f f68b 	uxth.w	r6, fp
    size = 0;
 800b44c:	2400      	movs	r4, #0
        cast_type_write(instance, (int32_t *)ptr_output, size, (int32_t)cast_type_read(instance, (int32_t *)instance->last_sample, nb_ch+mux_index));
 800b44e:	78bd      	ldrb	r5, [r7, #2]
 800b450:	1932      	adds	r2, r6, r4
 800b452:	b292      	uxth	r2, r2
 800b454:	4641      	mov	r1, r8
 800b456:	4628      	mov	r0, r5
 800b458:	f7ff ff40 	bl	800b2dc <cast_type_read.isra.0>
 800b45c:	4622      	mov	r2, r4
 800b45e:	4603      	mov	r3, r0
 800b460:	4651      	mov	r1, sl
 800b462:	4628      	mov	r0, r5
 800b464:	f7ff ff20 	bl	800b2a8 <cast_type_write.isra.0>
        size++;
 800b468:	3201      	adds	r2, #1
 800b46a:	b294      	uxth	r4, r2
    for (uint8_t mux_index = 0; mux_index < nb_ch; mux_index++) {
 800b46c:	42a6      	cmp	r6, r4
 800b46e:	d1ee      	bne.n	800b44e <resample_bypass+0x26>
    memcpy((void *)get_ptr_addr(instance, (int32_t *)ptr_output, size), (void *)ptr_input, sizeof_buffer_type(instance)*(sample_count-size));
 800b470:	78bc      	ldrb	r4, [r7, #2]
 800b472:	4620      	mov	r0, r4
 800b474:	3c07      	subs	r4, #7
 800b476:	4632      	mov	r2, r6
 800b478:	b2e4      	uxtb	r4, r4
 800b47a:	f7ff fefb 	bl	800b274 <get_ptr_addr.isra.0>
 *  @param[in] instance      Structure instance pointer.
 *  @return buffer size.
 */
static uint8_t sizeof_buffer_type(resampling_instance_t *instance)
{
    switch (instance->buffer_type) {
 800b47e:	2c18      	cmp	r4, #24
    memcpy((void *)get_ptr_addr(instance, (int32_t *)ptr_output, size), (void *)ptr_input, sizeof_buffer_type(instance)*(sample_count-size));
 800b480:	bf9c      	itt	ls
 800b482:	4b16      	ldrls	r3, [pc, #88]	; (800b4dc <resample_bypass+0xb4>)
 800b484:	5d1a      	ldrbls	r2, [r3, r4]
 800b486:	9c01      	ldr	r4, [sp, #4]
 800b488:	bf88      	it	hi
 800b48a:	2202      	movhi	r2, #2
 800b48c:	eba4 0b0b 	sub.w	fp, r4, fp
 800b490:	fb02 f20b 	mul.w	r2, r2, fp
 800b494:	4649      	mov	r1, r9
 800b496:	f006 fc69 	bl	8011d6c <memcpy>
    uint16_t nb_sample = LAST_SAMPLE_AMT * instance->nb_channel; /* nb sample in last_sample array */
 800b49a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    for (uint16_t mux_index = 0; mux_index < nb_sample; mux_index++) {
 800b49e:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 800b4a2:	b1bb      	cbz	r3, 800b4d4 <resample_bypass+0xac>
        cast_type_write(instance, instance->last_sample, mux_index, (int32_t)cast_type_read(instance, (int32_t *)ptr_input, (sample_count-nb_sample)+mux_index));
 800b4a4:	eba4 0a0b 	sub.w	sl, r4, fp
 800b4a8:	2500      	movs	r5, #0
 800b4aa:	fa1f fa8a 	uxth.w	sl, sl
 800b4ae:	462c      	mov	r4, r5
 800b4b0:	78be      	ldrb	r6, [r7, #2]
 800b4b2:	eb04 020a 	add.w	r2, r4, sl
 800b4b6:	b292      	uxth	r2, r2
 800b4b8:	4649      	mov	r1, r9
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7ff ff0e 	bl	800b2dc <cast_type_read.isra.0>
    for (uint16_t mux_index = 0; mux_index < nb_sample; mux_index++) {
 800b4c0:	3501      	adds	r5, #1
        cast_type_write(instance, instance->last_sample, mux_index, (int32_t)cast_type_read(instance, (int32_t *)ptr_input, (sample_count-nb_sample)+mux_index));
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	4622      	mov	r2, r4
 800b4c6:	4641      	mov	r1, r8
 800b4c8:	4630      	mov	r0, r6
    for (uint16_t mux_index = 0; mux_index < nb_sample; mux_index++) {
 800b4ca:	b2ac      	uxth	r4, r5
        cast_type_write(instance, instance->last_sample, mux_index, (int32_t)cast_type_read(instance, (int32_t *)ptr_input, (sample_count-nb_sample)+mux_index));
 800b4cc:	f7ff feec 	bl	800b2a8 <cast_type_write.isra.0>
    for (uint16_t mux_index = 0; mux_index < nb_sample; mux_index++) {
 800b4d0:	45a3      	cmp	fp, r4
 800b4d2:	d8ed      	bhi.n	800b4b0 <resample_bypass+0x88>
}
 800b4d4:	9801      	ldr	r0, [sp, #4]
 800b4d6:	b003      	add	sp, #12
 800b4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4dc:	08014964 	.word	0x08014964

0800b4e0 <resampling_init>:
    if (resampling_config->nb_channel > RESAMPLING_CFG_MAX_NB_CHANNEL) {
 800b4e0:	790b      	ldrb	r3, [r1, #4]
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	f200 8091 	bhi.w	800b60a <resampling_init+0x12a>
{
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    switch (resampling_config->buffer_type) {
 800b4ec:	784a      	ldrb	r2, [r1, #1]
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	1fd0      	subs	r0, r2, #7
{
 800b4f2:	b083      	sub	sp, #12
    switch (resampling_config->buffer_type) {
 800b4f4:	2818      	cmp	r0, #24
 800b4f6:	d80e      	bhi.n	800b516 <resampling_init+0x36>
 800b4f8:	e8df f000 	tbb	[pc, r0]
 800b4fc:	0d0d0d12 	.word	0x0d0d0d12
 800b500:	0d0d0d0d 	.word	0x0d0d0d0d
 800b504:	0d0d0d12 	.word	0x0d0d0d12
 800b508:	0d0d0d12 	.word	0x0d0d0d12
 800b50c:	0d0d0d12 	.word	0x0d0d0d12
 800b510:	0d0d0d0d 	.word	0x0d0d0d0d
 800b514:	12          	.byte	0x12
 800b515:	00          	.byte	0x00
 800b516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800b51a:	b003      	add	sp, #12
 800b51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    instance->status      = RESAMPLING_WAIT_QUEUE_FULL;
 800b520:	2500      	movs	r5, #0
    instance->buffer_type = resampling_config->buffer_type;
 800b522:	70a2      	strb	r2, [r4, #2]
    instance->nb_channel  = resampling_config->nb_channel;
 800b524:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    instance->status      = RESAMPLING_WAIT_QUEUE_FULL;
 800b528:	8025      	strh	r5, [r4, #0]
    instance->buffer_type_max = (1 << instance->buffer_type);
 800b52a:	2601      	movs	r6, #1
    nb_sample_ch = resampling_config->nb_sample/resampling_config->nb_channel;
 800b52c:	780f      	ldrb	r7, [r1, #0]
 800b52e:	fbb7 f3f3 	udiv	r3, r7, r3
    instance->buffer_type_max = (1 << instance->buffer_type);
 800b532:	4096      	lsls	r6, r2
    resampling_size  = (uint32_t)(resampling_config->resampling_length / nb_sample_ch) * nb_sample_ch;
 800b534:	884f      	ldrh	r7, [r1, #2]
 800b536:	fbb7 f7f3 	udiv	r7, r7, r3
 800b53a:	fb03 f707 	mul.w	r7, r3, r7
    instance->step_rem      = (uint32_t)(instance->buffer_type_max / (resampling_size-ADD_REM_DIFF));
 800b53e:	f1a7 0b02 	sub.w	fp, r7, #2
    instance->step_add      = (uint32_t)(instance->buffer_type_max / resampling_size);
 800b542:	fbb6 f3f7 	udiv	r3, r6, r7
    instance->step_rem      = (uint32_t)(instance->buffer_type_max / (resampling_size-ADD_REM_DIFF));
 800b546:	fbb6 fafb 	udiv	sl, r6, fp
    instance->buffer_type_max = (1 << instance->buffer_type);
 800b54a:	6066      	str	r6, [r4, #4]
    instance->step_add      = (uint32_t)(instance->buffer_type_max / resampling_size);
 800b54c:	61a3      	str	r3, [r4, #24]
    instance->max_x_axis    = (uint32_t)((resampling_size-1)*(1.0 / resampling_size)* instance->buffer_type_max);
 800b54e:	4638      	mov	r0, r7
    instance->step_rem      = (uint32_t)(instance->buffer_type_max / (resampling_size-ADD_REM_DIFF));
 800b550:	f8c4 a01c 	str.w	sl, [r4, #28]
    instance->step_add      = (uint32_t)(instance->buffer_type_max / resampling_size);
 800b554:	9301      	str	r3, [sp, #4]
    instance->max_x_axis    = (uint32_t)((resampling_size-1)*(1.0 / resampling_size)* instance->buffer_type_max);
 800b556:	f7f4 fff5 	bl	8000544 <__aeabi_ui2d>
 800b55a:	460b      	mov	r3, r1
 800b55c:	4602      	mov	r2, r0
 800b55e:	492c      	ldr	r1, [pc, #176]	; (800b610 <resampling_init+0x130>)
 800b560:	2000      	movs	r0, #0
 800b562:	f7f5 f993 	bl	800088c <__aeabi_ddiv>
 800b566:	4680      	mov	r8, r0
 800b568:	4630      	mov	r0, r6
 800b56a:	4689      	mov	r9, r1
 800b56c:	f7f4 ffea 	bl	8000544 <__aeabi_ui2d>
 800b570:	4602      	mov	r2, r0
 800b572:	1e78      	subs	r0, r7, #1
 800b574:	4616      	mov	r6, r2
 800b576:	460f      	mov	r7, r1
 800b578:	f7f4 ffe4 	bl	8000544 <__aeabi_ui2d>
 800b57c:	4642      	mov	r2, r8
 800b57e:	464b      	mov	r3, r9
 800b580:	f7f5 f85a 	bl	8000638 <__aeabi_dmul>
 800b584:	4632      	mov	r2, r6
 800b586:	463b      	mov	r3, r7
 800b588:	f7f5 f856 	bl	8000638 <__aeabi_dmul>
 800b58c:	f7f5 fb16 	bl	8000bbc <__aeabi_d2uiz>
    instance->bias_step_add = (uint32_t)((((double)1.0 / (double)resampling_size) * (double)instance->buffer_type_max - (double)instance->step_add) * (double)instance->buffer_type_max);
 800b590:	463b      	mov	r3, r7
    instance->max_x_axis    = (uint32_t)((resampling_size-1)*(1.0 / resampling_size)* instance->buffer_type_max);
 800b592:	63e0      	str	r0, [r4, #60]	; 0x3c
    instance->bias_step_add = (uint32_t)((((double)1.0 / (double)resampling_size) * (double)instance->buffer_type_max - (double)instance->step_add) * (double)instance->buffer_type_max);
 800b594:	4632      	mov	r2, r6
 800b596:	4640      	mov	r0, r8
 800b598:	4649      	mov	r1, r9
 800b59a:	f7f5 f84d 	bl	8000638 <__aeabi_dmul>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	9801      	ldr	r0, [sp, #4]
 800b5a2:	4690      	mov	r8, r2
 800b5a4:	4689      	mov	r9, r1
 800b5a6:	f7f4 ffcd 	bl	8000544 <__aeabi_ui2d>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	4640      	mov	r0, r8
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	f7f4 fe89 	bl	80002c8 <__aeabi_dsub>
 800b5b6:	4632      	mov	r2, r6
 800b5b8:	463b      	mov	r3, r7
 800b5ba:	f7f5 f83d 	bl	8000638 <__aeabi_dmul>
 800b5be:	f7f5 fafd 	bl	8000bbc <__aeabi_d2uiz>
 800b5c2:	6260      	str	r0, [r4, #36]	; 0x24
    instance->bias_step_rem = (uint32_t)((((double)1.0 / (double)(resampling_size-ADD_REM_DIFF)) * (double)instance->buffer_type_max - (double)instance->step_rem) * (double)instance->buffer_type_max);
 800b5c4:	4658      	mov	r0, fp
 800b5c6:	f7f4 ffbd 	bl	8000544 <__aeabi_ui2d>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	490f      	ldr	r1, [pc, #60]	; (800b610 <resampling_init+0x130>)
 800b5d2:	f7f5 f95b 	bl	800088c <__aeabi_ddiv>
 800b5d6:	4632      	mov	r2, r6
 800b5d8:	463b      	mov	r3, r7
 800b5da:	f7f5 f82d 	bl	8000638 <__aeabi_dmul>
 800b5de:	4680      	mov	r8, r0
 800b5e0:	4650      	mov	r0, sl
 800b5e2:	4689      	mov	r9, r1
 800b5e4:	f7f4 ffae 	bl	8000544 <__aeabi_ui2d>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	4640      	mov	r0, r8
 800b5ee:	4649      	mov	r1, r9
 800b5f0:	f7f4 fe6a 	bl	80002c8 <__aeabi_dsub>
 800b5f4:	4632      	mov	r2, r6
 800b5f6:	463b      	mov	r3, r7
 800b5f8:	f7f5 f81e 	bl	8000638 <__aeabi_dmul>
 800b5fc:	f7f5 fade 	bl	8000bbc <__aeabi_d2uiz>
 800b600:	62a0      	str	r0, [r4, #40]	; 0x28
    return RESAMPLING_NO_ERROR;
 800b602:	4628      	mov	r0, r5
}
 800b604:	b003      	add	sp, #12
 800b606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return RESAMPLING_INVALID_NB_CHANNEL;
 800b60a:	f06f 0001 	mvn.w	r0, #1
}
 800b60e:	4770      	bx	lr
 800b610:	3ff00000 	.word	0x3ff00000

0800b614 <resampling_start>:
    instance->status = RESAMPLING_START;
 800b614:	2302      	movs	r3, #2
 800b616:	7003      	strb	r3, [r0, #0]
    instance->correction = correction;
 800b618:	7041      	strb	r1, [r0, #1]
}
 800b61a:	4770      	bx	lr

0800b61c <resample>:
    if (instance->status != RESAMPLING_IDLE) {
 800b61c:	f890 c000 	ldrb.w	ip, [r0]
 800b620:	f1bc 0f01 	cmp.w	ip, #1
 800b624:	f000 8186 	beq.w	800b934 <resample+0x318>
{
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        switch (instance->correction) {
 800b62c:	7847      	ldrb	r7, [r0, #1]
 800b62e:	2f01      	cmp	r7, #1
{
 800b630:	b089      	sub	sp, #36	; 0x24
 800b632:	4604      	mov	r4, r0
 800b634:	460d      	mov	r5, r1
 800b636:	4693      	mov	fp, r2
 800b638:	461e      	mov	r6, r3
        switch (instance->correction) {
 800b63a:	d007      	beq.n	800b64c <resample+0x30>
 800b63c:	2f02      	cmp	r7, #2
 800b63e:	f000 809e 	beq.w	800b77e <resample+0x162>
}
 800b642:	b009      	add	sp, #36	; 0x24
 800b644:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                return resample_bypass(instance, ptr_input, ptr_output, sample_count);
 800b648:	f7ff beee 	b.w	800b428 <resample_bypass>
    nb_ch = (instance->nb_channel == 0) ? 1 : instance->nb_channel;
 800b64c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800b650:	2b01      	cmp	r3, #1
 800b652:	bf38      	it	cc
 800b654:	2301      	movcc	r3, #1
    if (instance->status == RESAMPLING_START) {
 800b656:	f1bc 0f02 	cmp.w	ip, #2
 800b65a:	9305      	str	r3, [sp, #20]
 800b65c:	f000 8148 	beq.w	800b8f0 <resample+0x2d4>
    } else if (instance->status == RESAMPLING_RUNNING) {
 800b660:	f1bc 0f03 	cmp.w	ip, #3
        size += interp_linear(instance, get_ptr_addr(instance, instance->last_sample, nb_ch), (int32_t *)instance->last_sample, (int32_t *)ptr_output, nb_ch);
 800b664:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800b668:	f100 0a08 	add.w	sl, r0, #8
    } else if (instance->status == RESAMPLING_RUNNING) {
 800b66c:	f000 817a 	beq.w	800b964 <resample+0x348>
            cast_type_write(instance, (int32_t *)ptr_output, size, (int32_t)cast_type_read(instance, (int32_t *)instance->last_sample, nb_ch+mux_index));
 800b670:	9304      	str	r3, [sp, #16]
    size = 0;
 800b672:	2700      	movs	r7, #0
    size += interp_linear(instance, (int32_t *)ptr_input, get_ptr_addr(instance, instance->last_sample, nb_ch), (int32_t *)get_ptr_addr(instance, (int32_t *)ptr_output, size), nb_ch);
 800b674:	f894 9002 	ldrb.w	r9, [r4, #2]
 800b678:	9a04      	ldr	r2, [sp, #16]
 800b67a:	4651      	mov	r1, sl
 800b67c:	4648      	mov	r0, r9
 800b67e:	f7ff fdf9 	bl	800b274 <get_ptr_addr.isra.0>
 800b682:	463a      	mov	r2, r7
 800b684:	4680      	mov	r8, r0
 800b686:	4659      	mov	r1, fp
 800b688:	4648      	mov	r0, r9
 800b68a:	f7ff fdf3 	bl	800b274 <get_ptr_addr.isra.0>
 800b68e:	9904      	ldr	r1, [sp, #16]
 800b690:	9100      	str	r1, [sp, #0]
 800b692:	4603      	mov	r3, r0
 800b694:	4642      	mov	r2, r8
 800b696:	4629      	mov	r1, r5
 800b698:	4620      	mov	r0, r4
 800b69a:	f7ff fe39 	bl	800b310 <interp_linear>
 800b69e:	f894 9002 	ldrb.w	r9, [r4, #2]
    size += interp_linear(instance, (int32_t *)get_ptr_addr(instance, (int32_t *)ptr_input, nb_ch), (int32_t *)ptr_input, (int32_t *)get_ptr_addr(instance, (int32_t *)ptr_output, size), (sample_count - size));
 800b6a2:	9a04      	ldr	r2, [sp, #16]
    size += interp_linear(instance, (int32_t *)ptr_input, get_ptr_addr(instance, instance->last_sample, nb_ch), (int32_t *)get_ptr_addr(instance, (int32_t *)ptr_output, size), nb_ch);
 800b6a4:	4407      	add	r7, r0
    size += interp_linear(instance, (int32_t *)get_ptr_addr(instance, (int32_t *)ptr_input, nb_ch), (int32_t *)ptr_input, (int32_t *)get_ptr_addr(instance, (int32_t *)ptr_output, size), (sample_count - size));
 800b6a6:	4629      	mov	r1, r5
 800b6a8:	4648      	mov	r0, r9
 800b6aa:	f7ff fde3 	bl	800b274 <get_ptr_addr.isra.0>
    size += interp_linear(instance, (int32_t *)ptr_input, get_ptr_addr(instance, instance->last_sample, nb_ch), (int32_t *)get_ptr_addr(instance, (int32_t *)ptr_output, size), nb_ch);
 800b6ae:	b2bf      	uxth	r7, r7
    size += interp_linear(instance, (int32_t *)get_ptr_addr(instance, (int32_t *)ptr_input, nb_ch), (int32_t *)ptr_input, (int32_t *)get_ptr_addr(instance, (int32_t *)ptr_output, size), (sample_count - size));
 800b6b0:	463a      	mov	r2, r7
 800b6b2:	4680      	mov	r8, r0
 800b6b4:	4659      	mov	r1, fp
 800b6b6:	4648      	mov	r0, r9
 800b6b8:	f7ff fddc 	bl	800b274 <get_ptr_addr.isra.0>
 800b6bc:	1bf2      	subs	r2, r6, r7
 800b6be:	b292      	uxth	r2, r2
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	9200      	str	r2, [sp, #0]
 800b6c4:	4641      	mov	r1, r8
 800b6c6:	462a      	mov	r2, r5
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f7ff fe21 	bl	800b310 <interp_linear>
 800b6ce:	4438      	add	r0, r7
 800b6d0:	b283      	uxth	r3, r0
 800b6d2:	9303      	str	r3, [sp, #12]
    uint16_t nb_sample = LAST_SAMPLE_AMT * instance->nb_channel; /* nb sample in last_sample array */
 800b6d4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    for (uint16_t mux_index = 0; mux_index < nb_sample; mux_index++) {
 800b6d8:	005f      	lsls	r7, r3, #1
 800b6da:	b30b      	cbz	r3, 800b720 <resample+0x104>
        cast_type_write(instance, instance->last_sample, mux_index, (int32_t)cast_type_read(instance, (int32_t *)ptr_input, (sample_count-nb_sample)+mux_index));
 800b6dc:	1bf6      	subs	r6, r6, r7
 800b6de:	b2b3      	uxth	r3, r6
 800b6e0:	f04f 0800 	mov.w	r8, #0
 800b6e4:	ee07 ba90 	vmov	s15, fp
 800b6e8:	4646      	mov	r6, r8
 800b6ea:	46ab      	mov	fp, r5
 800b6ec:	4625      	mov	r5, r4
 800b6ee:	461c      	mov	r4, r3
 800b6f0:	f895 9002 	ldrb.w	r9, [r5, #2]
 800b6f4:	1932      	adds	r2, r6, r4
 800b6f6:	b292      	uxth	r2, r2
 800b6f8:	4659      	mov	r1, fp
 800b6fa:	4648      	mov	r0, r9
 800b6fc:	f7ff fdee 	bl	800b2dc <cast_type_read.isra.0>
    for (uint16_t mux_index = 0; mux_index < nb_sample; mux_index++) {
 800b700:	f108 0801 	add.w	r8, r8, #1
        cast_type_write(instance, instance->last_sample, mux_index, (int32_t)cast_type_read(instance, (int32_t *)ptr_input, (sample_count-nb_sample)+mux_index));
 800b704:	4603      	mov	r3, r0
 800b706:	4632      	mov	r2, r6
 800b708:	4651      	mov	r1, sl
 800b70a:	4648      	mov	r0, r9
    for (uint16_t mux_index = 0; mux_index < nb_sample; mux_index++) {
 800b70c:	fa1f f688 	uxth.w	r6, r8
        cast_type_write(instance, instance->last_sample, mux_index, (int32_t)cast_type_read(instance, (int32_t *)ptr_input, (sample_count-nb_sample)+mux_index));
 800b710:	f7ff fdca 	bl	800b2a8 <cast_type_write.isra.0>
    for (uint16_t mux_index = 0; mux_index < nb_sample; mux_index++) {
 800b714:	42b7      	cmp	r7, r6
 800b716:	d8eb      	bhi.n	800b6f0 <resample+0xd4>
 800b718:	462c      	mov	r4, r5
 800b71a:	465d      	mov	r5, fp
 800b71c:	ee17 ba90 	vmov	fp, s15
    if (instance->x_axis <= instance->step_add) {
 800b720:	e9d4 130c 	ldrd	r1, r3, [r4, #48]	; 0x30
 800b724:	69a0      	ldr	r0, [r4, #24]
 800b726:	2200      	movs	r2, #0
 800b728:	4288      	cmp	r0, r1
 800b72a:	eb72 0303 	sbcs.w	r3, r2, r3
 800b72e:	db22      	blt.n	800b776 <resample+0x15a>
 800b730:	e9dd 7303 	ldrd	r7, r3, [sp, #12]
 800b734:	eba7 0643 	sub.w	r6, r7, r3, lsl #1
 800b738:	eb07 0903 	add.w	r9, r7, r3
 800b73c:	b2b6      	uxth	r6, r6
 800b73e:	fa1f f989 	uxth.w	r9, r9
            cast_type_write(instance, (int32_t *)ptr_output, size, cast_type_read(instance, (int32_t *)ptr_input, size - (nb_ch*LAST_SAMPLE_AMT)));
 800b742:	f894 8002 	ldrb.w	r8, [r4, #2]
 800b746:	4632      	mov	r2, r6
 800b748:	4629      	mov	r1, r5
 800b74a:	4640      	mov	r0, r8
 800b74c:	f7ff fdc6 	bl	800b2dc <cast_type_read.isra.0>
 800b750:	463a      	mov	r2, r7
 800b752:	4603      	mov	r3, r0
 800b754:	4659      	mov	r1, fp
 800b756:	4640      	mov	r0, r8
 800b758:	f7ff fda6 	bl	800b2a8 <cast_type_write.isra.0>
            size++;
 800b75c:	3201      	adds	r2, #1
 800b75e:	b297      	uxth	r7, r2
        for (uint8_t mux_index = 0; mux_index < nb_ch; mux_index++) {
 800b760:	3601      	adds	r6, #1
 800b762:	45b9      	cmp	r9, r7
 800b764:	b2b6      	uxth	r6, r6
 800b766:	d1ec      	bne.n	800b742 <resample+0x126>
            size++;
 800b768:	9803      	ldr	r0, [sp, #12]
 800b76a:	9b05      	ldr	r3, [sp, #20]
 800b76c:	4418      	add	r0, r3
 800b76e:	b282      	uxth	r2, r0
    instance->status = RESAMPLING_IDLE;
 800b770:	2301      	movs	r3, #1
            size++;
 800b772:	9203      	str	r2, [sp, #12]
    instance->status = RESAMPLING_IDLE;
 800b774:	8023      	strh	r3, [r4, #0]
}
 800b776:	9803      	ldr	r0, [sp, #12]
 800b778:	b009      	add	sp, #36	; 0x24
 800b77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nb_ch = instance->nb_channel == 0 ? 1 : instance->nb_channel;
 800b77e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800b782:	2b01      	cmp	r3, #1
 800b784:	bf38      	it	cc
 800b786:	2301      	movcc	r3, #1
 800b788:	9303      	str	r3, [sp, #12]
    if (instance->status == RESAMPLING_START) {
 800b78a:	f1bc 0f02 	cmp.w	ip, #2
    size = 0;
 800b78e:	f04f 0300 	mov.w	r3, #0
 800b792:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (instance->status == RESAMPLING_START) {
 800b796:	d07f      	beq.n	800b898 <resample+0x27c>
    } else if (instance->status == RESAMPLING_RUNNING) {
 800b798:	f1bc 0f03 	cmp.w	ip, #3
 800b79c:	f000 80cc 	beq.w	800b938 <resample+0x31c>
    size += interp_linear(instance, get_ptr_addr(instance, (int32_t *)ptr_input, size), (int32_t *)ptr_input, get_ptr_addr(instance, (int32_t *)ptr_output, size), sample_count - size);
 800b7a0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b7a4:	f894 8002 	ldrb.w	r8, [r4, #2]
 800b7a8:	b292      	uxth	r2, r2
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	4640      	mov	r0, r8
 800b7ae:	f7ff fd61 	bl	800b274 <get_ptr_addr.isra.0>
 800b7b2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b7b6:	4607      	mov	r7, r0
 800b7b8:	b292      	uxth	r2, r2
 800b7ba:	4659      	mov	r1, fp
 800b7bc:	4640      	mov	r0, r8
 800b7be:	f7ff fd59 	bl	800b274 <get_ptr_addr.isra.0>
 800b7c2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b7c6:	1ab2      	subs	r2, r6, r2
 800b7c8:	b292      	uxth	r2, r2
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	9200      	str	r2, [sp, #0]
 800b7ce:	4639      	mov	r1, r7
 800b7d0:	462a      	mov	r2, r5
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f7ff fd9c 	bl	800b310 <interp_linear>
 800b7d8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b7dc:	fa10 f383 	uxtah	r3, r0, r3
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16_t nb_sample = LAST_SAMPLE_AMT * instance->nb_channel; /* nb sample in last_sample array */
 800b7e6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    for (uint16_t mux_index = 0; mux_index < nb_sample; mux_index++) {
 800b7ea:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800b7ee:	b323      	cbz	r3, 800b83a <resample+0x21e>
        cast_type_write(instance, instance->last_sample, mux_index, (int32_t)cast_type_read(instance, (int32_t *)ptr_input, (sample_count-nb_sample)+mux_index));
 800b7f0:	eba6 060a 	sub.w	r6, r6, sl
 800b7f4:	b2b3      	uxth	r3, r6
 800b7f6:	f04f 0800 	mov.w	r8, #0
 800b7fa:	ee07 ba90 	vmov	s15, fp
            cast_type_write(instance, (int32_t *)ptr_output, size, (int32_t)cast_type_read(instance, (int32_t *)instance->last_sample, nb_ch+mux_index));
 800b7fe:	f104 0608 	add.w	r6, r4, #8
 800b802:	46ab      	mov	fp, r5
 800b804:	4647      	mov	r7, r8
 800b806:	4625      	mov	r5, r4
 800b808:	461c      	mov	r4, r3
        cast_type_write(instance, instance->last_sample, mux_index, (int32_t)cast_type_read(instance, (int32_t *)ptr_input, (sample_count-nb_sample)+mux_index));
 800b80a:	f895 9002 	ldrb.w	r9, [r5, #2]
 800b80e:	19e2      	adds	r2, r4, r7
 800b810:	b292      	uxth	r2, r2
 800b812:	4659      	mov	r1, fp
 800b814:	4648      	mov	r0, r9
 800b816:	f7ff fd61 	bl	800b2dc <cast_type_read.isra.0>
    for (uint16_t mux_index = 0; mux_index < nb_sample; mux_index++) {
 800b81a:	f108 0801 	add.w	r8, r8, #1
        cast_type_write(instance, instance->last_sample, mux_index, (int32_t)cast_type_read(instance, (int32_t *)ptr_input, (sample_count-nb_sample)+mux_index));
 800b81e:	4603      	mov	r3, r0
 800b820:	463a      	mov	r2, r7
 800b822:	4631      	mov	r1, r6
 800b824:	4648      	mov	r0, r9
    for (uint16_t mux_index = 0; mux_index < nb_sample; mux_index++) {
 800b826:	fa1f f788 	uxth.w	r7, r8
        cast_type_write(instance, instance->last_sample, mux_index, (int32_t)cast_type_read(instance, (int32_t *)ptr_input, (sample_count-nb_sample)+mux_index));
 800b82a:	f7ff fd3d 	bl	800b2a8 <cast_type_write.isra.0>
    for (uint16_t mux_index = 0; mux_index < nb_sample; mux_index++) {
 800b82e:	45ba      	cmp	sl, r7
 800b830:	d8eb      	bhi.n	800b80a <resample+0x1ee>
 800b832:	462c      	mov	r4, r5
 800b834:	465d      	mov	r5, fp
 800b836:	ee17 ba90 	vmov	fp, s15
    if (instance->x_axis >= instance->max_x_axis) {
 800b83a:	e9d4 130c 	ldrd	r1, r3, [r4, #48]	; 0x30
 800b83e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b840:	4291      	cmp	r1, r2
 800b842:	f173 0300 	sbcs.w	r3, r3, #0
 800b846:	db1f      	blt.n	800b888 <resample+0x26c>
 800b848:	9f03      	ldr	r7, [sp, #12]
 800b84a:	2600      	movs	r6, #0
            cast_type_write(instance, (int32_t *)ptr_output, size, cast_type_read(instance, (int32_t *)ptr_input, size));
 800b84c:	f8bd 801e 	ldrh.w	r8, [sp, #30]
 800b850:	f894 9002 	ldrb.w	r9, [r4, #2]
 800b854:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b858:	4629      	mov	r1, r5
 800b85a:	b292      	uxth	r2, r2
 800b85c:	4648      	mov	r0, r9
 800b85e:	f7ff fd3d 	bl	800b2dc <cast_type_read.isra.0>
 800b862:	fa1f f888 	uxth.w	r8, r8
 800b866:	4603      	mov	r3, r0
 800b868:	4642      	mov	r2, r8
 800b86a:	4659      	mov	r1, fp
 800b86c:	4648      	mov	r0, r9
 800b86e:	f7ff fd1b 	bl	800b2a8 <cast_type_write.isra.0>
            size++;
 800b872:	f8bd 301e 	ldrh.w	r3, [sp, #30]
        for (uint8_t mux_index = 0; mux_index < nb_ch; mux_index++) {
 800b876:	3601      	adds	r6, #1
            size++;
 800b878:	3301      	adds	r3, #1
 800b87a:	b29b      	uxth	r3, r3
        for (uint8_t mux_index = 0; mux_index < nb_ch; mux_index++) {
 800b87c:	42b7      	cmp	r7, r6
            size++;
 800b87e:	f8ad 301e 	strh.w	r3, [sp, #30]
        for (uint8_t mux_index = 0; mux_index < nb_ch; mux_index++) {
 800b882:	d1e3      	bne.n	800b84c <resample+0x230>
    instance->status = RESAMPLING_IDLE;
 800b884:	2301      	movs	r3, #1
 800b886:	8023      	strh	r3, [r4, #0]
    return size;
 800b888:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 800b88c:	b283      	uxth	r3, r0
 800b88e:	9303      	str	r3, [sp, #12]
}
 800b890:	9803      	ldr	r0, [sp, #12]
 800b892:	b009      	add	sp, #36	; 0x24
 800b894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        instance->x_axis = instance->step_rem;
 800b898:	6343      	str	r3, [r0, #52]	; 0x34
        instance->bias = instance->bias_step_rem;
 800b89a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b89c:	6203      	str	r3, [r0, #32]
        instance->x_axis = instance->step_rem;
 800b89e:	69c3      	ldr	r3, [r0, #28]
 800b8a0:	6303      	str	r3, [r0, #48]	; 0x30
        instance->status = RESAMPLING_RUNNING;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	7003      	strb	r3, [r0, #0]
            cast_type_write(instance, (int32_t *)ptr_output, size, (int32_t)cast_type_read(instance, (int32_t *)instance->last_sample, nb_ch+mux_index));
 800b8a6:	9b03      	ldr	r3, [sp, #12]
 800b8a8:	ee07 1a90 	vmov	s15, r1
 800b8ac:	b29f      	uxth	r7, r3
 800b8ae:	005b      	lsls	r3, r3, #1
 800b8b0:	f100 0a08 	add.w	sl, r0, #8
 800b8b4:	4698      	mov	r8, r3
            cast_type_write(instance, (int32_t *)ptr_output, size, (int32_t)cast_type_read(instance, (int32_t *)instance->last_sample, nb_ch+mux_index));
 800b8b6:	78a5      	ldrb	r5, [r4, #2]
 800b8b8:	f8bd 901e 	ldrh.w	r9, [sp, #30]
 800b8bc:	463a      	mov	r2, r7
 800b8be:	4651      	mov	r1, sl
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f7ff fd0b 	bl	800b2dc <cast_type_read.isra.0>
 800b8c6:	fa1f f989 	uxth.w	r9, r9
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	464a      	mov	r2, r9
 800b8ce:	4659      	mov	r1, fp
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f7ff fce9 	bl	800b2a8 <cast_type_write.isra.0>
            size++;
 800b8d6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
        for (uint8_t mux_index = 0; mux_index < nb_ch; mux_index++) {
 800b8da:	3701      	adds	r7, #1
 800b8dc:	b2bf      	uxth	r7, r7
            size++;
 800b8de:	3301      	adds	r3, #1
 800b8e0:	b29b      	uxth	r3, r3
        for (uint8_t mux_index = 0; mux_index < nb_ch; mux_index++) {
 800b8e2:	45b8      	cmp	r8, r7
            size++;
 800b8e4:	f8ad 301e 	strh.w	r3, [sp, #30]
        for (uint8_t mux_index = 0; mux_index < nb_ch; mux_index++) {
 800b8e8:	d1e5      	bne.n	800b8b6 <resample+0x29a>
 800b8ea:	ee17 5a90 	vmov	r5, s15
 800b8ee:	e757      	b.n	800b7a0 <resample+0x184>
        instance->bias = instance->bias_step_add;
 800b8f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b8f2:	6203      	str	r3, [r0, #32]
        instance->x_axis = instance->max_x_axis;
 800b8f4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
            cast_type_write(instance, (int32_t *)ptr_output, size, (int32_t)cast_type_read(instance, (int32_t *)instance->last_sample, nb_ch+mux_index));
 800b8f6:	f8bd 9014 	ldrh.w	r9, [sp, #20]
        instance->x_axis = instance->max_x_axis;
 800b8fa:	6303      	str	r3, [r0, #48]	; 0x30
 800b8fc:	2700      	movs	r7, #0
        instance->status = RESAMPLING_RUNNING;
 800b8fe:	2303      	movs	r3, #3
        instance->x_axis = instance->max_x_axis;
 800b900:	6347      	str	r7, [r0, #52]	; 0x34
        instance->status = RESAMPLING_RUNNING;
 800b902:	7003      	strb	r3, [r0, #0]
            cast_type_write(instance, (int32_t *)ptr_output, size, (int32_t)cast_type_read(instance, (int32_t *)instance->last_sample, nb_ch+mux_index));
 800b904:	f100 0a08 	add.w	sl, r0, #8
 800b908:	f8cd 9010 	str.w	r9, [sp, #16]
 800b90c:	f894 8002 	ldrb.w	r8, [r4, #2]
 800b910:	eb07 0209 	add.w	r2, r7, r9
 800b914:	b292      	uxth	r2, r2
 800b916:	4651      	mov	r1, sl
 800b918:	4640      	mov	r0, r8
 800b91a:	f7ff fcdf 	bl	800b2dc <cast_type_read.isra.0>
 800b91e:	463a      	mov	r2, r7
 800b920:	4603      	mov	r3, r0
 800b922:	4659      	mov	r1, fp
 800b924:	4640      	mov	r0, r8
 800b926:	f7ff fcbf 	bl	800b2a8 <cast_type_write.isra.0>
            size++;
 800b92a:	3201      	adds	r2, #1
 800b92c:	b297      	uxth	r7, r2
        for (uint8_t mux_index = 0; mux_index < nb_ch; mux_index++) {
 800b92e:	454f      	cmp	r7, r9
 800b930:	d1ec      	bne.n	800b90c <resample+0x2f0>
 800b932:	e69f      	b.n	800b674 <resample+0x58>
        return resample_bypass(instance, ptr_input, ptr_output, sample_count);
 800b934:	f7ff bd78 	b.w	800b428 <resample_bypass>
        size += interp_linear(instance, (int32_t *)ptr_input, get_ptr_addr(instance, (int32_t *)instance->last_sample, nb_ch), (int32_t *)ptr_output, nb_ch);
 800b938:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800b93c:	7880      	ldrb	r0, [r0, #2]
 800b93e:	f104 0108 	add.w	r1, r4, #8
 800b942:	f7ff fc97 	bl	800b274 <get_ptr_addr.isra.0>
 800b946:	9200      	str	r2, [sp, #0]
 800b948:	465b      	mov	r3, fp
 800b94a:	4602      	mov	r2, r0
 800b94c:	4629      	mov	r1, r5
 800b94e:	4620      	mov	r0, r4
 800b950:	f7ff fcde 	bl	800b310 <interp_linear>
 800b954:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b958:	fa10 f383 	uxtah	r3, r0, r3
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b962:	e71d      	b.n	800b7a0 <resample+0x184>
        size += interp_linear(instance, get_ptr_addr(instance, instance->last_sample, nb_ch), (int32_t *)instance->last_sample, (int32_t *)ptr_output, nb_ch);
 800b964:	461a      	mov	r2, r3
 800b966:	7880      	ldrb	r0, [r0, #2]
 800b968:	9304      	str	r3, [sp, #16]
 800b96a:	4651      	mov	r1, sl
 800b96c:	f7ff fc82 	bl	800b274 <get_ptr_addr.isra.0>
 800b970:	9200      	str	r2, [sp, #0]
 800b972:	4601      	mov	r1, r0
 800b974:	465b      	mov	r3, fp
 800b976:	4652      	mov	r2, sl
 800b978:	4620      	mov	r0, r4
 800b97a:	f7ff fcc9 	bl	800b310 <interp_linear>
 800b97e:	b287      	uxth	r7, r0
 800b980:	e678      	b.n	800b674 <resample+0x58>
 800b982:	bf00      	nop

0800b984 <resample_get_state>:
}
 800b984:	7800      	ldrb	r0, [r0, #0]
 800b986:	4770      	bx	lr

0800b988 <arm_fir_decimate_init_q15>:
        uint16_t numTaps,
        uint8_t M,
  const q15_t * pCoeffs,
        q15_t * pState,
        uint32_t blockSize)
{
 800b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98a:	4616      	mov	r6, r2
 800b98c:	e9dd 7206 	ldrd	r7, r2, [sp, #24]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 800b990:	fbb2 f4f6 	udiv	r4, r2, r6
 800b994:	fb06 2414 	mls	r4, r6, r4, r2
 800b998:	b96c      	cbnz	r4, 800b9b6 <arm_fir_decimate_init_q15+0x2e>
  {
    /* Assign filter taps */
    S->numTaps = numTaps;

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 800b99a:	6043      	str	r3, [r0, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(q15_t));
 800b99c:	1e4b      	subs	r3, r1, #1
 800b99e:	4605      	mov	r5, r0
 800b9a0:	441a      	add	r2, r3
    S->numTaps = numTaps;
 800b9a2:	8041      	strh	r1, [r0, #2]
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(q15_t));
 800b9a4:	0052      	lsls	r2, r2, #1
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	f006 fa07 	bl	8011dbc <memset>

    /* Assign state pointer */
    S->pState = pState;

    /* Assign Decimation Factor */
    S->M = M;
 800b9ae:	702e      	strb	r6, [r5, #0]
    S->pState = pState;
 800b9b0:	60af      	str	r7, [r5, #8]

    status = ARM_MATH_SUCCESS;
 800b9b2:	4620      	mov	r0, r4
  }

  return (status);

}
 800b9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ARM_MATH_LENGTH_ERROR;
 800b9b6:	f06f 0001 	mvn.w	r0, #1
}
 800b9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b9bc <arm_fir_decimate_q15>:
void arm_fir_decimate_q15(
  const arm_fir_decimate_instance_q15 * S,
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 800b9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        q31_t x0, x1, c0;                              /* Temporary variables to hold state and coefficient values */
        q63_t sum0;                                    /* Accumulators */
        q63_t acc0, acc1;
        q15_t *px0, *px1;
        uint32_t blkCntN3;
        uint32_t numTaps = S->numTaps;                 /* Number of taps */
 800b9c0:	8845      	ldrh	r5, [r0, #2]
        q15_t *pState = S->pState;                     /* State pointer */
 800b9c2:	6884      	ldr	r4, [r0, #8]
        uint32_t i, blkCnt, tapCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 800b9c4:	7806      	ldrb	r6, [r0, #0]
 800b9c6:	fbb3 f3f6 	udiv	r3, r3, r6
{
 800b9ca:	b08b      	sub	sp, #44	; 0x2c
 800b9cc:	4617      	mov	r7, r2
 800b9ce:	9206      	str	r2, [sp, #24]
        q31_t c1;                                      /* Temporary variables to hold state and coefficient values */
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
 800b9d0:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
{
 800b9d4:	9004      	str	r0, [sp, #16]
  pStateCur = S->pState + (numTaps - 1U);
 800b9d6:	3a01      	subs	r2, #1
  const q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 800b9d8:	6840      	ldr	r0, [r0, #4]
        uint32_t numTaps = S->numTaps;                 /* Number of taps */
 800b9da:	9503      	str	r5, [sp, #12]
  const q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 800b9dc:	9005      	str	r0, [sp, #20]
  pStateCur = S->pState + (numTaps - 1U);
 800b9de:	eb04 0542 	add.w	r5, r4, r2, lsl #1
 800b9e2:	f003 0001 	and.w	r0, r3, #1

  /* Total number of output samples to be computed */
  blkCnt = outBlockSize / 2;
  blkCntN3 = outBlockSize - (2 * blkCnt);

  while (blkCnt > 0U)
 800b9e6:	085b      	lsrs	r3, r3, #1
        q15_t *pState = S->pState;                     /* State pointer */
 800b9e8:	9407      	str	r4, [sp, #28]
  pStateCur = S->pState + (numTaps - 1U);
 800b9ea:	9501      	str	r5, [sp, #4]
        q15_t *pState = S->pState;                     /* State pointer */
 800b9ec:	46a1      	mov	r9, r4
  blkCntN3 = outBlockSize - (2 * blkCnt);
 800b9ee:	9008      	str	r0, [sp, #32]
  while (blkCnt > 0U)
 800b9f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f2:	d048      	beq.n	800ba86 <arm_fir_decimate_q15+0xca>
 800b9f4:	b236      	sxth	r6, r6
 800b9f6:	f107 0a04 	add.w	sl, r7, #4
 800b9fa:	9302      	str	r3, [sp, #8]
  {
    /* Copy 2 * decimation factor number of new input samples into the state buffer */
    i = S->M * 2;
 800b9fc:	9b01      	ldr	r3, [sp, #4]
 800b9fe:	0075      	lsls	r5, r6, #1
 800ba00:	1e98      	subs	r0, r3, #2
 800ba02:	462a      	mov	r2, r5
 800ba04:	460b      	mov	r3, r1

    do
    {
      *pStateCur++ = *pSrc++;
 800ba06:	f933 4b02 	ldrsh.w	r4, [r3], #2
 800ba0a:	f820 4f02 	strh.w	r4, [r0, #2]!

    } while (--i);
 800ba0e:	3a01      	subs	r2, #1
 800ba10:	d1f9      	bne.n	800ba06 <arm_fir_decimate_q15+0x4a>
      *pStateCur++ = *pSrc++;
 800ba12:	9b01      	ldr	r3, [sp, #4]
    acc0 = 0;
    acc1 = 0;

    /* Initialize state pointer for all the samples */
    px0 = pState;
    px1 = pState + S->M;
 800ba14:	eb09 0c46 	add.w	ip, r9, r6, lsl #1
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (tapCnt > 0U)
 800ba18:	9e03      	ldr	r6, [sp, #12]
      *pStateCur++ = *pSrc++;
 800ba1a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800ba1e:	9301      	str	r3, [sp, #4]
 800ba20:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    while (tapCnt > 0U)
 800ba24:	2e00      	cmp	r6, #0
 800ba26:	d079      	beq.n	800bb1c <arm_fir_decimate_q15+0x160>
    pb = pCoeffs;
 800ba28:	f8dd e014 	ldr.w	lr, [sp, #20]
    while (tapCnt > 0U)
 800ba2c:	46c8      	mov	r8, r9
    acc1 = 0;
 800ba2e:	4613      	mov	r3, r2
    acc0 = 0;
 800ba30:	4610      	mov	r0, r2
 800ba32:	4614      	mov	r4, r2
      /* Read coefficients */
      c0 = *pb++;

      /* Fetch state variables for acc0, acc1 */
      x0 = *px0++;
      x1 = *px1++;
 800ba34:	f93c 7b02 	ldrsh.w	r7, [ip], #2

      /* Perform the multiply-accumulate */
      acc0 = __SMLALD(x0, c0, acc0);
 800ba38:	f938 bb02 	ldrsh.w	fp, [r8], #2
 800ba3c:	f93e 5b02 	ldrsh.w	r5, [lr], #2
    uint64_t w64;
  } llr;
  llr.w64 = acc;

#ifndef __ARMEB__   /* Little endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800ba40:	fbcb 04c5 	smlald	r0, r4, fp, r5
 800ba44:	fbc7 23c5 	smlald	r2, r3, r7, r5
    while (tapCnt > 0U)
 800ba48:	3e01      	subs	r6, #1
 800ba4a:	d1f3      	bne.n	800ba34 <arm_fir_decimate_q15+0x78>
     * to process the next group of decimation factor number samples */
    pState = pState + S->M * 2;

    /* Store filter output, smlad returns the values in 2.14 format */
    /* so downsacle by 15 to get output in 1.15 */
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 800ba4c:	0bc0      	lsrs	r0, r0, #15
    *pDst++ = (q15_t) (__SSAT((acc1 >> 15), 16));
 800ba4e:	0bd2      	lsrs	r2, r2, #15
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 800ba50:	ea40 4444 	orr.w	r4, r0, r4, lsl #17
    *pDst++ = (q15_t) (__SSAT((acc1 >> 15), 16));
 800ba54:	ea42 4343 	orr.w	r3, r2, r3, lsl #17
    pState = pState + S->M * 2;
 800ba58:	9a04      	ldr	r2, [sp, #16]
 800ba5a:	7816      	ldrb	r6, [r2, #0]
 800ba5c:	eb09 0986 	add.w	r9, r9, r6, lsl #2
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 800ba60:	f304 040f 	ssat	r4, #16, r4
 800ba64:	f82a 4c04 	strh.w	r4, [sl, #-4]
    *pDst++ = (q15_t) (__SSAT((acc1 >> 15), 16));
 800ba68:	f303 030f 	ssat	r3, #16, r3
 800ba6c:	f82a 3c02 	strh.w	r3, [sl, #-2]
  while (blkCnt > 0U)
 800ba70:	9b02      	ldr	r3, [sp, #8]
 800ba72:	3b01      	subs	r3, #1
 800ba74:	f10a 0a04 	add.w	sl, sl, #4
 800ba78:	9302      	str	r3, [sp, #8]
 800ba7a:	d1bf      	bne.n	800b9fc <arm_fir_decimate_q15+0x40>
    *pDst++ = (q15_t) (__SSAT((acc1 >> 15), 16));
 800ba7c:	9b06      	ldr	r3, [sp, #24]
 800ba7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ba84:	9306      	str	r3, [sp, #24]

    /* Decrement loop counter */
    blkCnt--;
  }

  while (blkCntN3 > 0U)
 800ba86:	9b08      	ldr	r3, [sp, #32]
 800ba88:	b313      	cbz	r3, 800bad0 <arm_fir_decimate_q15+0x114>
  {
    /* Copy decimation factor number of new input samples into the state buffer */
    i = S->M;
 800ba8a:	9b01      	ldr	r3, [sp, #4]
 800ba8c:	1e9a      	subs	r2, r3, #2
 800ba8e:	9b04      	ldr	r3, [sp, #16]
 800ba90:	781b      	ldrb	r3, [r3, #0]

    do
    {
      *pStateCur++ = *pSrc++;
 800ba92:	f931 0b02 	ldrsh.w	r0, [r1], #2
 800ba96:	f822 0f02 	strh.w	r0, [r2, #2]!

    } while (--i);
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	d1f9      	bne.n	800ba92 <arm_fir_decimate_q15+0xd6>
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (tapCnt > 0U)
 800ba9e:	9803      	ldr	r0, [sp, #12]
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d03e      	beq.n	800bb22 <arm_fir_decimate_q15+0x166>
    sum0 = 0;
 800baa4:	9d05      	ldr	r5, [sp, #20]
    while (tapCnt > 0U)
 800baa6:	464e      	mov	r6, r9
    sum0 = 0;
 800baa8:	4619      	mov	r1, r3

      /* Fetch 1 state variable */
      x0 = *px++;

      /* Perform the multiply-accumulate */
      sum0 = __SMLALD(x0, c0, sum0);
 800baaa:	f936 2b02 	ldrsh.w	r2, [r6], #2
 800baae:	f935 4b02 	ldrsh.w	r4, [r5], #2
 800bab2:	fbc2 31c4 	smlald	r3, r1, r2, r4
    while (tapCnt > 0U)
 800bab6:	3801      	subs	r0, #1
 800bab8:	d1f7      	bne.n	800baaa <arm_fir_decimate_q15+0xee>
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;

    /* Store filter output, smlad returns the values in 2.14 format */
    /* so downsacle by 15 to get output in 1.15 */
    *pDst++ = (q15_t) (__SSAT((sum0 >> 15), 16));
 800baba:	0bda      	lsrs	r2, r3, #15
 800babc:	ea42 4341 	orr.w	r3, r2, r1, lsl #17
    pState = pState + S->M;
 800bac0:	9a04      	ldr	r2, [sp, #16]
 800bac2:	7812      	ldrb	r2, [r2, #0]
 800bac4:	eb09 0942 	add.w	r9, r9, r2, lsl #1
    *pDst++ = (q15_t) (__SSAT((sum0 >> 15), 16));
 800bac8:	f303 030f 	ssat	r3, #16, r3
 800bacc:	9a06      	ldr	r2, [sp, #24]
 800bace:	8013      	strh	r3, [r2, #0]
     Now copy the last numTaps - 1 samples to the satrt of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCur = S->pState;
  i = (numTaps - 1U) >> 2U;
 800bad0:	9b03      	ldr	r3, [sp, #12]
 800bad2:	1e59      	subs	r1, r3, #1
  pStateCur = S->pState;
 800bad4:	9b07      	ldr	r3, [sp, #28]
 
  /* copy data */
  while (i > 0U)
 800bad6:	088d      	lsrs	r5, r1, #2
  pStateCur = S->pState;
 800bad8:	461a      	mov	r2, r3
  while (i > 0U)
 800bada:	d010      	beq.n	800bafe <arm_fir_decimate_q15+0x142>
 800badc:	464b      	mov	r3, r9
 800bade:	4628      	mov	r0, r5
  q15_t ** pQ15)
{
  q31_t val;

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (&val, *pQ15, 4);
 800bae0:	681c      	ldr	r4, [r3, #0]
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 800bae2:	6014      	str	r4, [r2, #0]
  memcpy (&val, *pQ15, 4);
 800bae4:	685c      	ldr	r4, [r3, #4]
  memcpy (*pQ15, &val, 4);
 800bae6:	6054      	str	r4, [r2, #4]
 800bae8:	3801      	subs	r0, #1
 800baea:	f103 0308 	add.w	r3, r3, #8
#else
  (*pQ15)[0] = (val & 0x0FFFF);
  (*pQ15)[1] = (val >> 16) & 0x0FFFF;
#endif

 *pQ15 += 2;
 800baee:	f102 0208 	add.w	r2, r2, #8
 800baf2:	d1f5      	bne.n	800bae0 <arm_fir_decimate_q15+0x124>
 800baf4:	9b07      	ldr	r3, [sp, #28]
 *pQ15 += 2;
 800baf6:	eb09 09c5 	add.w	r9, r9, r5, lsl #3
 *pQ15 += 2;
 800bafa:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
  }

  i = (numTaps - 1U) % 0x04U;

  /* Copy data */
  while (i > 0U)
 800bafe:	f011 0303 	ands.w	r3, r1, #3
 800bb02:	d008      	beq.n	800bb16 <arm_fir_decimate_q15+0x15a>
 800bb04:	3a02      	subs	r2, #2
 800bb06:	eb09 0343 	add.w	r3, r9, r3, lsl #1
  {
    *pStateCur++ = *pState++;
 800bb0a:	f939 1b02 	ldrsh.w	r1, [r9], #2
 800bb0e:	f822 1f02 	strh.w	r1, [r2, #2]!
  while (i > 0U)
 800bb12:	4599      	cmp	r9, r3
 800bb14:	d1f9      	bne.n	800bb0a <arm_fir_decimate_q15+0x14e>

    /* Decrement loop counter */
    i--;
  }

}
 800bb16:	b00b      	add	sp, #44	; 0x2c
 800bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (tapCnt > 0U)
 800bb1c:	9c03      	ldr	r4, [sp, #12]
 800bb1e:	4623      	mov	r3, r4
 800bb20:	e79a      	b.n	800ba58 <arm_fir_decimate_q15+0x9c>
    while (tapCnt > 0U)
 800bb22:	9b03      	ldr	r3, [sp, #12]
 800bb24:	e7cc      	b.n	800bac0 <arm_fir_decimate_q15+0x104>
 800bb26:	bf00      	nop

0800bb28 <arm_fir_interpolate_init_q15>:
        uint8_t L,
        uint16_t numTaps,
  const q15_t * pCoeffs,
        q15_t * pState,
        uint32_t blockSize)
{
 800bb28:	b570      	push	{r4, r5, r6, lr}
 800bb2a:	4605      	mov	r5, r0
  arm_status status;

  /* The filter length must be a multiple of the interpolation factor */
  if ((numTaps % L) != 0U)
 800bb2c:	fbb2 f0f1 	udiv	r0, r2, r1
 800bb30:	fb01 2410 	mls	r4, r1, r0, r2
{
 800bb34:	9e04      	ldr	r6, [sp, #16]
  if ((numTaps % L) != 0U)
 800bb36:	b96c      	cbnz	r4, 800bb54 <arm_fir_interpolate_init_q15+0x2c>
    status = ARM_MATH_LENGTH_ERROR;
  }
  else
  {
    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 800bb38:	606b      	str	r3, [r5, #4]

    /* Assign polyPhaseLength */
    S->phaseLength = numTaps / L;

    /* Clear state buffer and size of buffer is always phaseLength + blockSize - 1 */
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(q15_t));
 800bb3a:	9b05      	ldr	r3, [sp, #20]
    S->L = L;
 800bb3c:	7029      	strb	r1, [r5, #0]
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(q15_t));
 800bb3e:	1e5a      	subs	r2, r3, #1
 800bb40:	4402      	add	r2, r0
    S->phaseLength = numTaps / L;
 800bb42:	8068      	strh	r0, [r5, #2]
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(q15_t));
 800bb44:	0052      	lsls	r2, r2, #1
 800bb46:	4621      	mov	r1, r4
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f006 f937 	bl	8011dbc <memset>

    /* Assign state pointer */
    S->pState = pState;
 800bb4e:	60ae      	str	r6, [r5, #8]

    status = ARM_MATH_SUCCESS;
 800bb50:	4620      	mov	r0, r4
  }

  return (status);
}
 800bb52:	bd70      	pop	{r4, r5, r6, pc}
    status = ARM_MATH_LENGTH_ERROR;
 800bb54:	f06f 0001 	mvn.w	r0, #1
}
 800bb58:	bd70      	pop	{r4, r5, r6, pc}
 800bb5a:	bf00      	nop

0800bb5c <arm_fir_interpolate_q15>:
void arm_fir_interpolate_q15(
  const arm_fir_interpolate_instance_q15 * S,
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 800bb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb60:	b089      	sub	sp, #36	; 0x24
#if (1)
//#if !defined(ARM_MATH_CM0_FAMILY)

        q15_t *pState = S->pState;                     /* State pointer */
 800bb62:	6884      	ldr	r4, [r0, #8]
{
 800bb64:	9103      	str	r1, [sp, #12]
        q15_t *pStateCur;                              /* Points to the current sample of the state */
        q15_t *ptr1;                                   /* Temporary pointer for state buffer */
  const q15_t *ptr2;                                   /* Temporary pointer for coefficient buffer */
        q63_t sum0;                                    /* Accumulators */
        uint32_t i, blkCnt, tapCnt;                    /* Loop counters */
        uint32_t phaseLen = S->phaseLength;            /* Length of each polyphase filter component */
 800bb66:	f8b0 8002 	ldrh.w	r8, [r0, #2]
  const q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 800bb6a:	6841      	ldr	r1, [r0, #4]
        q15_t *pState = S->pState;                     /* State pointer */
 800bb6c:	9406      	str	r4, [sp, #24]
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800bb6e:	9307      	str	r3, [sp, #28]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d058      	beq.n	800bc26 <arm_fir_interpolate_q15+0xca>
 800bb74:	4693      	mov	fp, r2
 800bb76:	f108 4200 	add.w	r2, r8, #2147483648	; 0x80000000
 800bb7a:	3a01      	subs	r2, #1
 800bb7c:	0052      	lsls	r2, r2, #1
 800bb7e:	461d      	mov	r5, r3
 800bb80:	3a02      	subs	r2, #2

    /* Address modifier index of coefficient buffer */
    j = 1U;

    /* Loop over the Interpolation factor. */
    i = S->L;
 800bb82:	7803      	ldrb	r3, [r0, #0]
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	18a2      	adds	r2, r4, r2
 800bb88:	9201      	str	r2, [sp, #4]
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800bb92:	9305      	str	r3, [sp, #20]
        sum0 += (q63_t) *ptr1++ * *ptr2;

        /* Upsampling is done by stuffing L-1 zeros between each sample.
         * So instead of multiplying zeros with coefficients,
         * Increment the coefficient pointer by interpolation factor times. */
        ptr2 += S->L;
 800bb94:	0052      	lsls	r2, r2, #1
 800bb96:	9502      	str	r5, [sp, #8]
        q15_t *pState = S->pState;                     /* State pointer */
 800bb98:	46a2      	mov	sl, r4
    *pStateCur++ = *pSrc++;
 800bb9a:	9903      	ldr	r1, [sp, #12]
 800bb9c:	f931 3b02 	ldrsh.w	r3, [r1], #2
 800bba0:	9103      	str	r1, [sp, #12]
 800bba2:	9901      	ldr	r1, [sp, #4]
 800bba4:	f821 3f02 	strh.w	r3, [r1, #2]!
    while (i > 0U)
 800bba8:	9b04      	ldr	r3, [sp, #16]
    *pStateCur++ = *pSrc++;
 800bbaa:	9101      	str	r1, [sp, #4]
    while (i > 0U)
 800bbac:	b303      	cbz	r3, 800bbf0 <arm_fir_interpolate_q15+0x94>
 800bbae:	f8dd e014 	ldr.w	lr, [sp, #20]
 800bbb2:	469c      	mov	ip, r3
 800bbb4:	46d9      	mov	r9, fp
      ptr2 = pCoeffs + (S->L - j);
 800bbb6:	4673      	mov	r3, lr
      while (tapCnt > 0U)
 800bbb8:	f1b8 0f00 	cmp.w	r8, #0
 800bbbc:	d031      	beq.n	800bc22 <arm_fir_interpolate_q15+0xc6>
 800bbbe:	4641      	mov	r1, r8
 800bbc0:	4650      	mov	r0, sl
      sum0 = 0;
 800bbc2:	2400      	movs	r4, #0
 800bbc4:	2500      	movs	r5, #0
        sum0 += (q63_t) *ptr1++ * *ptr2;
 800bbc6:	881e      	ldrh	r6, [r3, #0]
 800bbc8:	f830 7b02 	ldrh.w	r7, [r0], #2
      while (tapCnt > 0U)
 800bbcc:	3901      	subs	r1, #1
        ptr2 += S->L;
 800bbce:	4413      	add	r3, r2
        sum0 += (q63_t) *ptr1++ * *ptr2;
 800bbd0:	fbc7 4586 	smlalbb	r4, r5, r7, r6
      while (tapCnt > 0U)
 800bbd4:	d1f7      	bne.n	800bbc6 <arm_fir_interpolate_q15+0x6a>
        /* Decrement loop counter */
        tapCnt--;
      }

      /* The result is in the accumulator, store in the destination buffer. */
      *pDst++ = (q15_t) (__SSAT((sum0 >> 15), 16));
 800bbd6:	0be3      	lsrs	r3, r4, #15
 800bbd8:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
 800bbdc:	f303 030f 	ssat	r3, #16, r3
    while (i > 0U)
 800bbe0:	f1bc 0c01 	subs.w	ip, ip, #1
      *pDst++ = (q15_t) (__SSAT((sum0 >> 15), 16));
 800bbe4:	f829 3b02 	strh.w	r3, [r9], #2
    while (i > 0U)
 800bbe8:	f1ae 0e02 	sub.w	lr, lr, #2
 800bbec:	d1e3      	bne.n	800bbb6 <arm_fir_interpolate_q15+0x5a>
      *pDst++ = (q15_t) (__SSAT((sum0 >> 15), 16));
 800bbee:	4493      	add	fp, r2
  while (blkCnt > 0U)
 800bbf0:	9b02      	ldr	r3, [sp, #8]
 800bbf2:	3b01      	subs	r3, #1
      i--;
    }

    /* Advance the state pointer by 1
     * to process the next group of interpolation factor number samples */
    pState = pState + 1;
 800bbf4:	f10a 0a02 	add.w	sl, sl, #2
  while (blkCnt > 0U)
 800bbf8:	9302      	str	r3, [sp, #8]
 800bbfa:	d1ce      	bne.n	800bb9a <arm_fir_interpolate_q15+0x3e>
    pState = pState + 1;
 800bbfc:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bc00:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    tapCnt = (phaseLen - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
 800bc04:	f1b8 0801 	subs.w	r8, r8, #1
 800bc08:	d008      	beq.n	800bc1c <arm_fir_interpolate_q15+0xc0>
 800bc0a:	9b06      	ldr	r3, [sp, #24]
 800bc0c:	3b02      	subs	r3, #2
  {
    *pStateCur++ = *pState++;
 800bc0e:	f932 1b02 	ldrsh.w	r1, [r2], #2
 800bc12:	f823 1f02 	strh.w	r1, [r3, #2]!
  while (tapCnt > 0U)
 800bc16:	f1b8 0801 	subs.w	r8, r8, #1
 800bc1a:	d1f8      	bne.n	800bc0e <arm_fir_interpolate_q15+0xb2>
    tapCnt--;
  }

#endif /* #if !defined(ARM_MATH_CM0_FAMILY) */

}
 800bc1c:	b009      	add	sp, #36	; 0x24
 800bc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while (tapCnt > 0U)
 800bc22:	4643      	mov	r3, r8
 800bc24:	e7da      	b.n	800bbdc <arm_fir_interpolate_q15+0x80>
        q15_t *pState = S->pState;                     /* State pointer */
 800bc26:	9a06      	ldr	r2, [sp, #24]
 800bc28:	e7ec      	b.n	800bc04 <arm_fir_interpolate_q15+0xa8>
 800bc2a:	bf00      	nop

0800bc2c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bc2c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc2e:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800bc32:	b184      	cbz	r4, 800bc56 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bc34:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800bc38:	b15b      	cbz	r3, 800bc52 <USBD_CDC_EP0_RxReady+0x26>
 800bc3a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800bc3e:	28ff      	cmp	r0, #255	; 0xff
 800bc40:	d007      	beq.n	800bc52 <USBD_CDC_EP0_RxReady+0x26>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800bc48:	4621      	mov	r1, r4
 800bc4a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800bc4c:	23ff      	movs	r3, #255	; 0xff
 800bc4e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bc52:	2000      	movs	r0, #0
}
 800bc54:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800bc56:	2003      	movs	r0, #3
}
 800bc58:	bd10      	pop	{r4, pc}
 800bc5a:	bf00      	nop

0800bc5c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bc5c:	2343      	movs	r3, #67	; 0x43
 800bc5e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800bc60:	4800      	ldr	r0, [pc, #0]	; (800bc64 <USBD_CDC_GetFSCfgDesc+0x8>)
 800bc62:	4770      	bx	lr
 800bc64:	200005d8 	.word	0x200005d8

0800bc68 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bc68:	2343      	movs	r3, #67	; 0x43
 800bc6a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800bc6c:	4800      	ldr	r0, [pc, #0]	; (800bc70 <USBD_CDC_GetHSCfgDesc+0x8>)
 800bc6e:	4770      	bx	lr
 800bc70:	2000061c 	.word	0x2000061c

0800bc74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bc74:	2343      	movs	r3, #67	; 0x43
 800bc76:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800bc78:	4800      	ldr	r0, [pc, #0]	; (800bc7c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800bc7a:	4770      	bx	lr
 800bc7c:	2000066c 	.word	0x2000066c

0800bc80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bc80:	230a      	movs	r3, #10
 800bc82:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800bc84:	4800      	ldr	r0, [pc, #0]	; (800bc88 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800bc86:	4770      	bx	lr
 800bc88:	20000660 	.word	0x20000660

0800bc8c <USBD_CDC_DataOut>:
{
 800bc8c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc8e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800bc92:	b17d      	cbz	r5, 800bcb4 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc94:	4604      	mov	r4, r0
 800bc96:	f7f7 fb3f 	bl	8003318 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bc9a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc9e:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bca6:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bcaa:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800bcae:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800bcb0:	2000      	movs	r0, #0
}
 800bcb2:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800bcb4:	2003      	movs	r0, #3
}
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}

0800bcb8 <USBD_CDC_DataIn>:
{
 800bcb8:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 800bcba:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 800bcbe:	b35d      	cbz	r5, 800bd18 <USBD_CDC_DataIn+0x60>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bcc0:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800bcc4:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 800bcc8:	4684      	mov	ip, r0
 800bcca:	f8de 3018 	ldr.w	r3, [lr, #24]
 800bcce:	460a      	mov	r2, r1
 800bcd0:	b96b      	cbnz	r3, 800bcee <USBD_CDC_DataIn+0x36>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bcd2:	f8dc 32c0 	ldr.w	r3, [ip, #704]	; 0x2c0
 800bcd6:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800bcd8:	2400      	movs	r4, #0
 800bcda:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bcde:	b1cb      	cbz	r3, 800bd14 <USBD_CDC_DataIn+0x5c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bce0:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800bce4:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800bce8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800bcea:	4620      	mov	r0, r4
}
 800bcec:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bcee:	f8d0 62c4 	ldr.w	r6, [r0, #708]	; 0x2c4
 800bcf2:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800bcf6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800bcf8:	fbb3 f6f4 	udiv	r6, r3, r4
 800bcfc:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bd00:	2c00      	cmp	r4, #0
 800bd02:	d1e6      	bne.n	800bcd2 <USBD_CDC_DataIn+0x1a>
    pdev->ep_in[epnum].total_length = 0U;
 800bd04:	f8ce 4018 	str.w	r4, [lr, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bd08:	4623      	mov	r3, r4
 800bd0a:	4622      	mov	r2, r4
 800bd0c:	f7f7 fae8 	bl	80032e0 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800bd10:	4620      	mov	r0, r4
}
 800bd12:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 800bd14:	4618      	mov	r0, r3
}
 800bd16:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 800bd18:	2003      	movs	r0, #3
}
 800bd1a:	bd70      	pop	{r4, r5, r6, pc}

0800bd1c <USBD_CDC_Setup>:
{
 800bd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd1e:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
{
 800bd22:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 800bd24:	2300      	movs	r3, #0
 800bd26:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800bd2a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 800bd2e:	2f00      	cmp	r7, #0
 800bd30:	d067      	beq.n	800be02 <USBD_CDC_Setup+0xe6>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd32:	f891 c000 	ldrb.w	ip, [r1]
 800bd36:	f01c 0560 	ands.w	r5, ip, #96	; 0x60
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	d01e      	beq.n	800bd7e <USBD_CDC_Setup+0x62>
 800bd40:	2d20      	cmp	r5, #32
 800bd42:	d007      	beq.n	800bd54 <USBD_CDC_Setup+0x38>
          USBD_CtlError(pdev, req);
 800bd44:	4621      	mov	r1, r4
 800bd46:	4630      	mov	r0, r6
 800bd48:	f000 fd28 	bl	800c79c <USBD_CtlError>
          ret = USBD_FAIL;
 800bd4c:	2503      	movs	r5, #3
}
 800bd4e:	4628      	mov	r0, r5
 800bd50:	b003      	add	sp, #12
 800bd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 800bd54:	88cd      	ldrh	r5, [r1, #6]
 800bd56:	b38d      	cbz	r5, 800bdbc <USBD_CDC_Setup+0xa0>
        if ((req->bmRequest & 0x80U) != 0U)
 800bd58:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800bd5c:	d155      	bne.n	800be0a <USBD_CDC_Setup+0xee>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bd5e:	2d3f      	cmp	r5, #63	; 0x3f
          hcdc->CmdOpCode = req->bRequest;
 800bd60:	784b      	ldrb	r3, [r1, #1]
 800bd62:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bd66:	bf95      	itete	ls
 800bd68:	462a      	movls	r2, r5
 800bd6a:	2340      	movhi	r3, #64	; 0x40
 800bd6c:	b2d3      	uxtbls	r3, r2
 800bd6e:	461a      	movhi	r2, r3
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bd70:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bd74:	4639      	mov	r1, r7
 800bd76:	f000 fd5d 	bl	800c834 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800bd7a:	2500      	movs	r5, #0
 800bd7c:	e7e7      	b.n	800bd4e <USBD_CDC_Setup+0x32>
      switch (req->bRequest)
 800bd7e:	784f      	ldrb	r7, [r1, #1]
 800bd80:	2f0b      	cmp	r7, #11
 800bd82:	d8df      	bhi.n	800bd44 <USBD_CDC_Setup+0x28>
 800bd84:	a301      	add	r3, pc, #4	; (adr r3, 800bd8c <USBD_CDC_Setup+0x70>)
 800bd86:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 800bd8a:	bf00      	nop
 800bd8c:	0800bded 	.word	0x0800bded
 800bd90:	0800bd4f 	.word	0x0800bd4f
 800bd94:	0800bd45 	.word	0x0800bd45
 800bd98:	0800bd45 	.word	0x0800bd45
 800bd9c:	0800bd45 	.word	0x0800bd45
 800bda0:	0800bd45 	.word	0x0800bd45
 800bda4:	0800bd45 	.word	0x0800bd45
 800bda8:	0800bd45 	.word	0x0800bd45
 800bdac:	0800bd45 	.word	0x0800bd45
 800bdb0:	0800bd45 	.word	0x0800bd45
 800bdb4:	0800bdd9 	.word	0x0800bdd9
 800bdb8:	0800bdcf 	.word	0x0800bdcf
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdbc:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800bdc0:	7848      	ldrb	r0, [r1, #1]
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	462a      	mov	r2, r5
 800bdc6:	4798      	blx	r3
}
 800bdc8:	4628      	mov	r0, r5
 800bdca:	b003      	add	sp, #12
 800bdcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bdce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bdd2:	2b03      	cmp	r3, #3
 800bdd4:	d0bb      	beq.n	800bd4e <USBD_CDC_Setup+0x32>
 800bdd6:	e7b5      	b.n	800bd44 <USBD_CDC_Setup+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bddc:	2b03      	cmp	r3, #3
 800bdde:	d1b1      	bne.n	800bd44 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bde0:	2201      	movs	r2, #1
 800bde2:	f10d 0105 	add.w	r1, sp, #5
 800bde6:	f000 fd0f 	bl	800c808 <USBD_CtlSendData>
 800bdea:	e7b0      	b.n	800bd4e <USBD_CDC_Setup+0x32>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bdf0:	2b03      	cmp	r3, #3
 800bdf2:	d1a7      	bne.n	800bd44 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bdf4:	2202      	movs	r2, #2
 800bdf6:	f10d 0106 	add.w	r1, sp, #6
 800bdfa:	f000 fd05 	bl	800c808 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800bdfe:	463d      	mov	r5, r7
 800be00:	e7a5      	b.n	800bd4e <USBD_CDC_Setup+0x32>
    return (uint8_t)USBD_FAIL;
 800be02:	2503      	movs	r5, #3
}
 800be04:	4628      	mov	r0, r5
 800be06:	b003      	add	sp, #12
 800be08:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be0a:	462a      	mov	r2, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800be0c:	461d      	mov	r5, r3
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be0e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800be12:	7860      	ldrb	r0, [r4, #1]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	4639      	mov	r1, r7
 800be18:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800be1a:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800be1c:	2a07      	cmp	r2, #7
 800be1e:	4639      	mov	r1, r7
 800be20:	bf28      	it	cs
 800be22:	2207      	movcs	r2, #7
 800be24:	4630      	mov	r0, r6
 800be26:	f000 fcef 	bl	800c808 <USBD_CtlSendData>
 800be2a:	e790      	b.n	800bd4e <USBD_CDC_Setup+0x32>

0800be2c <USBD_CDC_DeInit>:
{
 800be2c:	b538      	push	{r3, r4, r5, lr}
 800be2e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800be30:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800be32:	2181      	movs	r1, #129	; 0x81
 800be34:	f7f7 fa08 	bl	8003248 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800be38:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800be3a:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800be3c:	4620      	mov	r0, r4
 800be3e:	f7f7 fa03 	bl	8003248 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800be42:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800be46:	2182      	movs	r1, #130	; 0x82
 800be48:	4620      	mov	r0, r4
 800be4a:	f7f7 f9fd 	bl	8003248 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800be4e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800be52:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800be54:	b14b      	cbz	r3, 800be6a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800be56:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800be5e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800be62:	f7f7 fa89 	bl	8003378 <USBD_static_free>
    pdev->pClassData = NULL;
 800be66:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800be6a:	2000      	movs	r0, #0
 800be6c:	bd38      	pop	{r3, r4, r5, pc}
 800be6e:	bf00      	nop

0800be70 <USBD_CDC_Init>:
{
 800be70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be74:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be76:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800be7a:	f7f7 fa79 	bl	8003370 <USBD_static_malloc>
  if (hcdc == NULL)
 800be7e:	4605      	mov	r5, r0
 800be80:	2800      	cmp	r0, #0
 800be82:	d04b      	beq.n	800bf1c <USBD_CDC_Init+0xac>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be84:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 800be86:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be8a:	b393      	cbz	r3, 800bef2 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be8c:	2340      	movs	r3, #64	; 0x40
 800be8e:	2202      	movs	r2, #2
 800be90:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be92:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be94:	4620      	mov	r0, r4
 800be96:	f7f7 f9c7 	bl	8003228 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be9a:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be9c:	2340      	movs	r3, #64	; 0x40
 800be9e:	4631      	mov	r1, r6
 800bea0:	2202      	movs	r2, #2
 800bea2:	4620      	mov	r0, r4
 800bea4:	f7f7 f9c0 	bl	8003228 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bea8:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800beaa:	2203      	movs	r2, #3
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800beac:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800beb0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800beb4:	2182      	movs	r1, #130	; 0x82
 800beb6:	2308      	movs	r3, #8
 800beb8:	4620      	mov	r0, r4
 800beba:	f7f7 f9b5 	bl	8003228 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bebe:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bec2:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bec6:	681b      	ldr	r3, [r3, #0]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bec8:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  hcdc->TxState = 0U;
 800becc:	2700      	movs	r7, #0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bece:	4798      	blx	r3
  hcdc->TxState = 0U;
 800bed0:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800bed4:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bed8:	7c26      	ldrb	r6, [r4, #16]
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800beda:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bede:	b9a6      	cbnz	r6, 800bf0a <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bee4:	4641      	mov	r1, r8
 800bee6:	4620      	mov	r0, r4
 800bee8:	f7f7 fa08 	bl	80032fc <USBD_LL_PrepareReceive>
}
 800beec:	4630      	mov	r0, r6
 800beee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bef6:	2202      	movs	r2, #2
 800bef8:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800befa:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800befc:	4620      	mov	r0, r4
 800befe:	f7f7 f993 	bl	8003228 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf02:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf08:	e7c9      	b.n	800be9e <USBD_CDC_Init+0x2e>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf0a:	2340      	movs	r3, #64	; 0x40
 800bf0c:	4641      	mov	r1, r8
 800bf0e:	4620      	mov	r0, r4
  return (uint8_t)USBD_OK;
 800bf10:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf12:	f7f7 f9f3 	bl	80032fc <USBD_LL_PrepareReceive>
}
 800bf16:	4630      	mov	r0, r6
 800bf18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800bf1c:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 800bf1e:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 800bf22:	4630      	mov	r0, r6
 800bf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf28 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800bf28:	b119      	cbz	r1, 800bf32 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800bf2a:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bf2e:	2000      	movs	r0, #0
 800bf30:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800bf32:	2003      	movs	r0, #3
}
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop

0800bf38 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf38:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800bf3c:	b12b      	cbz	r3, 800bf4a <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800bf3e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bf42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bf46:	2000      	movs	r0, #0
 800bf48:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800bf4a:	2003      	movs	r0, #3
}
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop

0800bf50 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf50:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800bf54:	b11b      	cbz	r3, 800bf5e <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800bf56:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800bf5e:	2003      	movs	r0, #3
}
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop

0800bf64 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf64:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800bf68:	b192      	cbz	r2, 800bf90 <USBD_CDC_TransmitPacket+0x2c>
{
 800bf6a:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800bf6c:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800bf70:	b10c      	cbz	r4, 800bf76 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bf72:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800bf74:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 800bf76:	2301      	movs	r3, #1
 800bf78:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bf7c:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bf80:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bf84:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bf86:	2181      	movs	r1, #129	; 0x81
 800bf88:	f7f7 f9aa 	bl	80032e0 <USBD_LL_Transmit>
    ret = USBD_OK;
 800bf8c:	4620      	mov	r0, r4
}
 800bf8e:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800bf90:	2003      	movs	r0, #3
}
 800bf92:	4770      	bx	lr

0800bf94 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf94:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800bf98:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800bf9a:	b18a      	cbz	r2, 800bfc0 <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf9c:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf9e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfa2:	b134      	cbz	r4, 800bfb2 <USBD_CDC_ReceivePacket+0x1e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bfa4:	2340      	movs	r3, #64	; 0x40
 800bfa6:	2101      	movs	r1, #1
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bfa8:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bfaa:	f7f7 f9a7 	bl	80032fc <USBD_LL_PrepareReceive>
}
 800bfae:	4620      	mov	r0, r4
 800bfb0:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bfb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfb6:	2101      	movs	r1, #1
 800bfb8:	f7f7 f9a0 	bl	80032fc <USBD_LL_PrepareReceive>
}
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800bfc0:	2403      	movs	r4, #3
}
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	bd10      	pop	{r4, pc}
 800bfc6:	bf00      	nop

0800bfc8 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bfc8:	b178      	cbz	r0, 800bfea <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bfd0:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bfd4:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bfd8:	b109      	cbz	r1, 800bfde <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800bfda:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 800bfe4:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bfe6:	f7f7 b8b3 	b.w	8003150 <USBD_LL_Init>

  return ret;
}
 800bfea:	2003      	movs	r0, #3
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop

0800bff0 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 800bff0:	b510      	push	{r4, lr}
 800bff2:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 800bff4:	f7f7 f90a 	bl	800320c <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800bff8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bffc:	2201      	movs	r2, #1
 800bffe:	f884 229c 	strb.w	r2, [r4, #668]	; 0x29c
  if (pdev->pClass != NULL)
 800c002:	b143      	cbz	r3, 800c016 <USBD_DeInit+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	7921      	ldrb	r1, [r4, #4]
 800c008:	4620      	mov	r0, r4
 800c00a:	4798      	blx	r3
    pdev->pClass = NULL;
 800c00c:	2300      	movs	r3, #0
 800c00e:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
    pdev->pUserData = NULL;
 800c012:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  }

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 800c016:	2300      	movs	r3, #0
 800c018:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 800c01c:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 800c020:	4620      	mov	r0, r4

  return ret;
}
 800c022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ret = USBD_LL_DeInit(pdev);
 800c026:	f7f7 b8d5 	b.w	80031d4 <USBD_LL_DeInit>
 800c02a:	bf00      	nop

0800c02c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c02c:	b530      	push	{r4, r5, lr}
 800c02e:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800c030:	2400      	movs	r4, #0
 800c032:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800c036:	b179      	cbz	r1, 800c058 <USBD_RegisterClass+0x2c>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c038:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 800c03a:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c03e:	4605      	mov	r5, r0
 800c040:	b13b      	cbz	r3, 800c052 <USBD_RegisterClass+0x26>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c042:	f10d 0006 	add.w	r0, sp, #6
 800c046:	4798      	blx	r3
 800c048:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c04c:	4620      	mov	r0, r4
}
 800c04e:	b003      	add	sp, #12
 800c050:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 800c052:	4618      	mov	r0, r3
}
 800c054:	b003      	add	sp, #12
 800c056:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800c058:	2003      	movs	r0, #3
}
 800c05a:	b003      	add	sp, #12
 800c05c:	bd30      	pop	{r4, r5, pc}
 800c05e:	bf00      	nop

0800c060 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c060:	f7f7 b8c6 	b.w	80031f0 <USBD_LL_Start>

0800c064 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800c064:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c068:	b10b      	cbz	r3, 800c06e <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4718      	bx	r3
  }

  return ret;
}
 800c06e:	2003      	movs	r0, #3
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop

0800c074 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c074:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c076:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c07a:	b10b      	cbz	r3, 800c080 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	4798      	blx	r3
  }

  return USBD_OK;
}
 800c080:	2000      	movs	r0, #0
 800c082:	bd08      	pop	{r3, pc}

0800c084 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c084:	b538      	push	{r3, r4, r5, lr}
 800c086:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c088:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800c08c:	4628      	mov	r0, r5
 800c08e:	f000 fb79 	bl	800c784 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800c092:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 800c096:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 800c09a:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  pdev->ep0_state = USBD_EP0_SETUP;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800c0a4:	f001 031f 	and.w	r3, r1, #31
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d009      	beq.n	800c0c0 <USBD_LL_SetupStage+0x3c>
 800c0ac:	2b02      	cmp	r3, #2
 800c0ae:	d013      	beq.n	800c0d8 <USBD_LL_SetupStage+0x54>
 800c0b0:	b163      	cbz	r3, 800c0cc <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800c0b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c0bc:	f7f7 b8d2 	b.w	8003264 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	4620      	mov	r0, r4
}
 800c0c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c0c8:	f000 ba92 	b.w	800c5f0 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	4620      	mov	r0, r4
}
 800c0d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c0d4:	f000 b8ec 	b.w	800c2b0 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c0d8:	4629      	mov	r1, r5
 800c0da:	4620      	mov	r0, r4
}
 800c0dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c0e0:	f000 bab6 	b.w	800c650 <USBD_StdEPReq>

0800c0e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c0e8:	b931      	cbnz	r1, 800c0f8 <USBD_LL_DataOutStage+0x14>
 800c0ea:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c0ec:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800c0f0:	2a03      	cmp	r2, #3
 800c0f2:	d00d      	beq.n	800c110 <USBD_LL_DataOutStage+0x2c>
      }
    }
  }

  return USBD_OK;
}
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	bd10      	pop	{r4, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	d1f9      	bne.n	800c0f4 <USBD_LL_DataOutStage+0x10>
      if (pdev->pClass->DataOut != NULL)
 800c100:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c104:	699b      	ldr	r3, [r3, #24]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d0f4      	beq.n	800c0f4 <USBD_LL_DataOutStage+0x10>
}
 800c10a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c10e:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800c110:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 800c114:	4291      	cmp	r1, r2
 800c116:	d808      	bhi.n	800c12a <USBD_LL_DataOutStage+0x46>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c118:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c11c:	2b03      	cmp	r3, #3
 800c11e:	d00e      	beq.n	800c13e <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800c120:	4620      	mov	r0, r4
 800c122:	f000 fb9d 	bl	800c860 <USBD_CtlSendStatus>
}
 800c126:	2000      	movs	r0, #0
 800c128:	bd10      	pop	{r4, pc}
        pep->rem_length -= pep->maxpacket;
 800c12a:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c12c:	428a      	cmp	r2, r1
 800c12e:	bf28      	it	cs
 800c130:	460a      	movcs	r2, r1
        pep->rem_length -= pep->maxpacket;
 800c132:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c136:	4619      	mov	r1, r3
 800c138:	f000 fb8a 	bl	800c850 <USBD_CtlContinueRx>
 800c13c:	e7da      	b.n	800c0f4 <USBD_LL_DataOutStage+0x10>
          if (pdev->pClass->EP0_RxReady != NULL)
 800c13e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c142:	691b      	ldr	r3, [r3, #16]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d0eb      	beq.n	800c120 <USBD_LL_DataOutStage+0x3c>
            pdev->pClass->EP0_RxReady(pdev);
 800c148:	4798      	blx	r3
 800c14a:	e7e9      	b.n	800c120 <USBD_LL_DataOutStage+0x3c>

0800c14c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c14c:	b570      	push	{r4, r5, r6, lr}
 800c14e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c150:	b951      	cbnz	r1, 800c168 <USBD_LL_DataInStage+0x1c>
 800c152:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c154:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800c158:	2a02      	cmp	r2, #2
 800c15a:	d011      	beq.n	800c180 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c15c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c160:	2b01      	cmp	r3, #1
 800c162:	d022      	beq.n	800c1aa <USBD_LL_DataInStage+0x5e>
      }
    }
  }

  return USBD_OK;
}
 800c164:	2000      	movs	r0, #0
 800c166:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c168:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c16c:	2b03      	cmp	r3, #3
 800c16e:	d1f9      	bne.n	800c164 <USBD_LL_DataInStage+0x18>
      if (pdev->pClass->DataIn != NULL)
 800c170:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c174:	695b      	ldr	r3, [r3, #20]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d0f4      	beq.n	800c164 <USBD_LL_DataInStage+0x18>
}
 800c17a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c17e:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800c180:	e9d0 2607 	ldrd	r2, r6, [r0, #28]
 800c184:	42b2      	cmp	r2, r6
 800c186:	460d      	mov	r5, r1
 800c188:	d814      	bhi.n	800c1b4 <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 800c18a:	d01f      	beq.n	800c1cc <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c18c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800c190:	2b03      	cmp	r3, #3
 800c192:	d028      	beq.n	800c1e6 <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c194:	2180      	movs	r1, #128	; 0x80
 800c196:	4620      	mov	r0, r4
 800c198:	f7f7 f864 	bl	8003264 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c19c:	4620      	mov	r0, r4
 800c19e:	f000 fb6b 	bl	800c878 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800c1a2:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d1dc      	bne.n	800c164 <USBD_LL_DataInStage+0x18>
      pdev->dev_test_mode = 0U;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800c1b4:	1b92      	subs	r2, r2, r6
 800c1b6:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	f000 fb33 	bl	800c824 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1be:	462b      	mov	r3, r5
 800c1c0:	462a      	mov	r2, r5
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f7f7 f899 	bl	80032fc <USBD_LL_PrepareReceive>
 800c1ca:	e7c7      	b.n	800c15c <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 800c1cc:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d8dc      	bhi.n	800c18c <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 800c1d2:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d2d8      	bcs.n	800c18c <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c1da:	460a      	mov	r2, r1
 800c1dc:	f000 fb22 	bl	800c824 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c1e0:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800c1e4:	e7eb      	b.n	800c1be <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 800c1e6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d0d1      	beq.n	800c194 <USBD_LL_DataInStage+0x48>
              pdev->pClass->EP0_TxSent(pdev);
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	4798      	blx	r3
 800c1f4:	e7ce      	b.n	800c194 <USBD_LL_DataInStage+0x48>
 800c1f6:	bf00      	nop

0800c1f8 <USBD_LL_Reset>:
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800c1f8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 800c1fc:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1fe:	2201      	movs	r2, #1
 800c200:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800c204:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c206:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800c20a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 800c20e:	b1eb      	cbz	r3, 800c24c <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800c210:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800c214:	b570      	push	{r4, r5, r6, lr}
 800c216:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800c218:	b112      	cbz	r2, 800c220 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	b103      	cbz	r3, 800c220 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c21e:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c220:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c222:	2200      	movs	r2, #0
 800c224:	4611      	mov	r1, r2
 800c226:	462b      	mov	r3, r5
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c228:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c22a:	4620      	mov	r0, r4
 800c22c:	f7f6 fffc 	bl	8003228 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c230:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c234:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c238:	462b      	mov	r3, r5
 800c23a:	2200      	movs	r2, #0
 800c23c:	2180      	movs	r1, #128	; 0x80
 800c23e:	4620      	mov	r0, r4
 800c240:	f7f6 fff2 	bl	8003228 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c244:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c246:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800c248:	2000      	movs	r0, #0
}
 800c24a:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800c24c:	2003      	movs	r0, #3
}
 800c24e:	4770      	bx	lr

0800c250 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800c250:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800c252:	2000      	movs	r0, #0
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop

0800c258 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800c258:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 800c25c:	4603      	mov	r3, r0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c25e:	2104      	movs	r1, #4
  pdev->dev_old_state = pdev->dev_state;
 800c260:	b2d2      	uxtb	r2, r2
 800c262:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d

  return USBD_OK;
}
 800c266:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c268:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop

0800c270 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c270:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c274:	2b04      	cmp	r3, #4
 800c276:	d104      	bne.n	800c282 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c278:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800c282:	2000      	movs	r0, #0
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop

0800c288 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800c288:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c28c:	b15a      	cbz	r2, 800c2a6 <USBD_LL_SOF+0x1e>
{
 800c28e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c290:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c294:	2b03      	cmp	r3, #3
 800c296:	d001      	beq.n	800c29c <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800c298:	2000      	movs	r0, #0
}
 800c29a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800c29c:	69d3      	ldr	r3, [r2, #28]
 800c29e:	b123      	cbz	r3, 800c2aa <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 800c2a0:	4798      	blx	r3
  return USBD_OK;
 800c2a2:	2000      	movs	r0, #0
}
 800c2a4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c2a6:	2003      	movs	r0, #3
}
 800c2a8:	4770      	bx	lr
  return USBD_OK;
 800c2aa:	4618      	mov	r0, r3
}
 800c2ac:	bd08      	pop	{r3, pc}
 800c2ae:	bf00      	nop

0800c2b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2b2:	780c      	ldrb	r4, [r1, #0]
 800c2b4:	f004 0460 	and.w	r4, r4, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2b8:	2c20      	cmp	r4, #32
{
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	460e      	mov	r6, r1
 800c2be:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2c0:	d00e      	beq.n	800c2e0 <USBD_StdDevReq+0x30>
 800c2c2:	2c40      	cmp	r4, #64	; 0x40
 800c2c4:	d00c      	beq.n	800c2e0 <USBD_StdDevReq+0x30>
 800c2c6:	b1a4      	cbz	r4, 800c2f2 <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2c8:	2180      	movs	r1, #128	; 0x80
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	f7f6 ffca 	bl	8003264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f7f6 ffc6 	bl	8003264 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800c2d8:	2400      	movs	r4, #0
}
 800c2da:	4620      	mov	r0, r4
 800c2dc:	b003      	add	sp, #12
 800c2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2e0:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	4631      	mov	r1, r6
 800c2e8:	4628      	mov	r0, r5
}
 800c2ea:	b003      	add	sp, #12
 800c2ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2f0:	4718      	bx	r3
      switch (req->bRequest)
 800c2f2:	784f      	ldrb	r7, [r1, #1]
 800c2f4:	2f09      	cmp	r7, #9
 800c2f6:	d8e7      	bhi.n	800c2c8 <USBD_StdDevReq+0x18>
 800c2f8:	a301      	add	r3, pc, #4	; (adr r3, 800c300 <USBD_StdDevReq+0x50>)
 800c2fa:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 800c2fe:	bf00      	nop
 800c300:	0800c361 	.word	0x0800c361
 800c304:	0800c38f 	.word	0x0800c38f
 800c308:	0800c2c9 	.word	0x0800c2c9
 800c30c:	0800c3ad 	.word	0x0800c3ad
 800c310:	0800c2c9 	.word	0x0800c2c9
 800c314:	0800c3b5 	.word	0x0800c3b5
 800c318:	0800c3ed 	.word	0x0800c3ed
 800c31c:	0800c2c9 	.word	0x0800c2c9
 800c320:	0800c409 	.word	0x0800c409
 800c324:	0800c329 	.word	0x0800c329
  cfgidx = (uint8_t)(req->wValue);
 800c328:	788e      	ldrb	r6, [r1, #2]
 800c32a:	4fb0      	ldr	r7, [pc, #704]	; (800c5ec <USBD_StdDevReq+0x33c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c32c:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 800c32e:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c330:	f200 8139 	bhi.w	800c5a6 <USBD_StdDevReq+0x2f6>
  switch (pdev->dev_state)
 800c334:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c338:	2b02      	cmp	r3, #2
 800c33a:	b2da      	uxtb	r2, r3
 800c33c:	f000 8121 	beq.w	800c582 <USBD_StdDevReq+0x2d2>
 800c340:	2a03      	cmp	r2, #3
 800c342:	f000 80fb 	beq.w	800c53c <USBD_StdDevReq+0x28c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c346:	2180      	movs	r1, #128	; 0x80
 800c348:	f7f6 ff8c 	bl	8003264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c34c:	2100      	movs	r1, #0
 800c34e:	4628      	mov	r0, r5
 800c350:	f7f6 ff88 	bl	8003264 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c354:	7839      	ldrb	r1, [r7, #0]
 800c356:	4628      	mov	r0, r5
 800c358:	f7ff fe8c 	bl	800c074 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c35c:	2403      	movs	r4, #3
      break;
 800c35e:	e7bc      	b.n	800c2da <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800c360:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c364:	3b01      	subs	r3, #1
 800c366:	2b02      	cmp	r3, #2
 800c368:	d866      	bhi.n	800c438 <USBD_StdDevReq+0x188>
      if (req->wLength != 0x2U)
 800c36a:	88cb      	ldrh	r3, [r1, #6]
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	d163      	bne.n	800c438 <USBD_StdDevReq+0x188>
      if (pdev->dev_remote_wakeup != 0U)
 800c370:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c374:	2201      	movs	r2, #1
 800c376:	60c2      	str	r2, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800c378:	b10b      	cbz	r3, 800c37e <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c37a:	2303      	movs	r3, #3
 800c37c:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c37e:	2202      	movs	r2, #2
 800c380:	f105 010c 	add.w	r1, r5, #12
 800c384:	4628      	mov	r0, r5
 800c386:	f000 fa3f 	bl	800c808 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c38a:	463c      	mov	r4, r7
      break;
 800c38c:	e7a5      	b.n	800c2da <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800c38e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c392:	3b01      	subs	r3, #1
 800c394:	2b02      	cmp	r3, #2
 800c396:	d84f      	bhi.n	800c438 <USBD_StdDevReq+0x188>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c398:	884b      	ldrh	r3, [r1, #2]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d19d      	bne.n	800c2da <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	f000 fa5b 	bl	800c860 <USBD_CtlSendStatus>
 800c3aa:	e796      	b.n	800c2da <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3ac:	884b      	ldrh	r3, [r1, #2]
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d193      	bne.n	800c2da <USBD_StdDevReq+0x2a>
 800c3b2:	e7f5      	b.n	800c3a0 <USBD_StdDevReq+0xf0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c3b4:	888b      	ldrh	r3, [r1, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d13e      	bne.n	800c438 <USBD_StdDevReq+0x188>
 800c3ba:	88cb      	ldrh	r3, [r1, #6]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d13b      	bne.n	800c438 <USBD_StdDevReq+0x188>
 800c3c0:	884e      	ldrh	r6, [r1, #2]
 800c3c2:	2e7f      	cmp	r6, #127	; 0x7f
 800c3c4:	d838      	bhi.n	800c438 <USBD_StdDevReq+0x188>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3c6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	d034      	beq.n	800c438 <USBD_StdDevReq+0x188>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c3ce:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800c3d0:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c3d4:	f7f6 ff76 	bl	80032c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c3d8:	4628      	mov	r0, r5
 800c3da:	f000 fa41 	bl	800c860 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800c3de:	2e00      	cmp	r6, #0
 800c3e0:	f000 80ff 	beq.w	800c5e2 <USBD_StdDevReq+0x332>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800c3ea:	e776      	b.n	800c2da <USBD_StdDevReq+0x2a>
  switch (req->wValue >> 8)
 800c3ec:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800c3f4:	0a13      	lsrs	r3, r2, #8
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	2b06      	cmp	r3, #6
 800c3fa:	d81d      	bhi.n	800c438 <USBD_StdDevReq+0x188>
 800c3fc:	e8df f003 	tbb	[pc, r3]
 800c400:	1c4d606d 	.word	0x1c4d606d
 800c404:	431c      	.short	0x431c
 800c406:	27          	.byte	0x27
 800c407:	00          	.byte	0x00
  if (req->wLength != 1U)
 800c408:	88ca      	ldrh	r2, [r1, #6]
 800c40a:	2a01      	cmp	r2, #1
 800c40c:	d114      	bne.n	800c438 <USBD_StdDevReq+0x188>
    switch (pdev->dev_state)
 800c40e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800c412:	2902      	cmp	r1, #2
 800c414:	b2cb      	uxtb	r3, r1
 800c416:	f200 808a 	bhi.w	800c52e <USBD_StdDevReq+0x27e>
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f43f af54 	beq.w	800c2c8 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800c420:	4601      	mov	r1, r0
 800c422:	2300      	movs	r3, #0
 800c424:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c428:	f000 f9ee 	bl	800c808 <USBD_CtlSendData>
        break;
 800c42c:	e755      	b.n	800c2da <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c42e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d15d      	bne.n	800c4f4 <USBD_StdDevReq+0x244>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c438:	2180      	movs	r1, #128	; 0x80
 800c43a:	4628      	mov	r0, r5
 800c43c:	f7f6 ff12 	bl	8003264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c440:	2100      	movs	r1, #0
 800c442:	4628      	mov	r0, r5
 800c444:	f7f6 ff0e 	bl	8003264 <USBD_LL_StallEP>
}
 800c448:	4620      	mov	r0, r4
 800c44a:	b003      	add	sp, #12
 800c44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c44e:	7c03      	ldrb	r3, [r0, #16]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d1f1      	bne.n	800c438 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c454:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c458:	f10d 0006 	add.w	r0, sp, #6
 800c45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c460:	2307      	movs	r3, #7
 800c462:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800c464:	88f2      	ldrh	r2, [r6, #6]
 800c466:	2a00      	cmp	r2, #0
 800c468:	d09c      	beq.n	800c3a4 <USBD_StdDevReq+0xf4>
    if (len != 0U)
 800c46a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d0e2      	beq.n	800c438 <USBD_StdDevReq+0x188>
      len = MIN(len, req->wLength);
 800c472:	429a      	cmp	r2, r3
 800c474:	bf28      	it	cs
 800c476:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c478:	4601      	mov	r1, r0
 800c47a:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800c47c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c480:	f000 f9c2 	bl	800c808 <USBD_CtlSendData>
 800c484:	e729      	b.n	800c2da <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c486:	7c03      	ldrb	r3, [r0, #16]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1d5      	bne.n	800c438 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c48c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c490:	f10d 0006 	add.w	r0, sp, #6
 800c494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c496:	4798      	blx	r3
  if (err != 0U)
 800c498:	e7e4      	b.n	800c464 <USBD_StdDevReq+0x1b4>
      switch ((uint8_t)(req->wValue))
 800c49a:	b2d2      	uxtb	r2, r2
 800c49c:	2a05      	cmp	r2, #5
 800c49e:	d8cb      	bhi.n	800c438 <USBD_StdDevReq+0x188>
 800c4a0:	a301      	add	r3, pc, #4	; (adr r3, 800c4a8 <USBD_StdDevReq+0x1f8>)
 800c4a2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c4a6:	bf00      	nop
 800c4a8:	0800c42f 	.word	0x0800c42f
 800c4ac:	0800c523 	.word	0x0800c523
 800c4b0:	0800c517 	.word	0x0800c517
 800c4b4:	0800c50b 	.word	0x0800c50b
 800c4b8:	0800c4ff 	.word	0x0800c4ff
 800c4bc:	0800c4eb 	.word	0x0800c4eb
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4c0:	7c03      	ldrb	r3, [r0, #16]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f040 8084 	bne.w	800c5d0 <USBD_StdDevReq+0x320>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c4c8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c4cc:	f10d 0006 	add.w	r0, sp, #6
 800c4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c4d8:	e7c4      	b.n	800c464 <USBD_StdDevReq+0x1b4>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c4da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c4de:	7c00      	ldrb	r0, [r0, #16]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f10d 0106 	add.w	r1, sp, #6
 800c4e6:	4798      	blx	r3
  if (err != 0U)
 800c4e8:	e7bc      	b.n	800c464 <USBD_StdDevReq+0x1b4>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c4ee:	699b      	ldr	r3, [r3, #24]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d0a1      	beq.n	800c438 <USBD_StdDevReq+0x188>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4f4:	7c28      	ldrb	r0, [r5, #16]
 800c4f6:	f10d 0106 	add.w	r1, sp, #6
 800c4fa:	4798      	blx	r3
  if (err != 0U)
 800c4fc:	e7b2      	b.n	800c464 <USBD_StdDevReq+0x1b4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4fe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c502:	695b      	ldr	r3, [r3, #20]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1f5      	bne.n	800c4f4 <USBD_StdDevReq+0x244>
 800c508:	e796      	b.n	800c438 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c50a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c50e:	691b      	ldr	r3, [r3, #16]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1ef      	bne.n	800c4f4 <USBD_StdDevReq+0x244>
 800c514:	e790      	b.n	800c438 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c516:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1e9      	bne.n	800c4f4 <USBD_StdDevReq+0x244>
 800c520:	e78a      	b.n	800c438 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c522:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1e3      	bne.n	800c4f4 <USBD_StdDevReq+0x244>
 800c52c:	e784      	b.n	800c438 <USBD_StdDevReq+0x188>
    switch (pdev->dev_state)
 800c52e:	2b03      	cmp	r3, #3
 800c530:	f47f aeca 	bne.w	800c2c8 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c534:	1d01      	adds	r1, r0, #4
 800c536:	f000 f967 	bl	800c808 <USBD_CtlSendData>
        break;
 800c53a:	e6ce      	b.n	800c2da <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800c53c:	2e00      	cmp	r6, #0
 800c53e:	d03b      	beq.n	800c5b8 <USBD_StdDevReq+0x308>
      else if (cfgidx != pdev->dev_config)
 800c540:	6841      	ldr	r1, [r0, #4]
 800c542:	2901      	cmp	r1, #1
 800c544:	f43f af2e 	beq.w	800c3a4 <USBD_StdDevReq+0xf4>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c548:	b2c9      	uxtb	r1, r1
 800c54a:	f7ff fd93 	bl	800c074 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c54e:	7839      	ldrb	r1, [r7, #0]
 800c550:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c552:	4628      	mov	r0, r5
 800c554:	f7ff fd86 	bl	800c064 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c558:	4606      	mov	r6, r0
 800c55a:	2800      	cmp	r0, #0
 800c55c:	f43f af22 	beq.w	800c3a4 <USBD_StdDevReq+0xf4>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c560:	2180      	movs	r1, #128	; 0x80
 800c562:	4628      	mov	r0, r5
 800c564:	f7f6 fe7e 	bl	8003264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c568:	2100      	movs	r1, #0
 800c56a:	4628      	mov	r0, r5
 800c56c:	f7f6 fe7a 	bl	8003264 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c570:	7929      	ldrb	r1, [r5, #4]
 800c572:	4628      	mov	r0, r5
 800c574:	f7ff fd7e 	bl	800c074 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c578:	2302      	movs	r3, #2
 800c57a:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800c57e:	4634      	mov	r4, r6
 800c580:	e6ab      	b.n	800c2da <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800c582:	2e00      	cmp	r6, #0
 800c584:	f43f af0e 	beq.w	800c3a4 <USBD_StdDevReq+0xf4>
        pdev->dev_config = cfgidx;
 800c588:	2101      	movs	r1, #1
 800c58a:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c58c:	f7ff fd6a 	bl	800c064 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c590:	4604      	mov	r4, r0
 800c592:	2800      	cmp	r0, #0
 800c594:	f47f af50 	bne.w	800c438 <USBD_StdDevReq+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800c598:	4628      	mov	r0, r5
 800c59a:	f000 f961 	bl	800c860 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c59e:	2303      	movs	r3, #3
 800c5a0:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800c5a4:	e699      	b.n	800c2da <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5a6:	2180      	movs	r1, #128	; 0x80
 800c5a8:	f7f6 fe5c 	bl	8003264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	f7f6 fe58 	bl	8003264 <USBD_LL_StallEP>
    return USBD_FAIL;
 800c5b4:	2403      	movs	r4, #3
}
 800c5b6:	e690      	b.n	800c2da <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5b8:	2302      	movs	r3, #2
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5ba:	4631      	mov	r1, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5bc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c5c0:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5c2:	f7ff fd57 	bl	800c074 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	f000 f94a 	bl	800c860 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800c5cc:	4634      	mov	r4, r6
 800c5ce:	e684      	b.n	800c2da <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c5d0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c5d4:	f10d 0006 	add.w	r0, sp, #6
 800c5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5da:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5dc:	2302      	movs	r3, #2
 800c5de:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c5e0:	e740      	b.n	800c464 <USBD_StdDevReq+0x1b4>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800c5e8:	e677      	b.n	800c2da <USBD_StdDevReq+0x2a>
 800c5ea:	bf00      	nop
 800c5ec:	20006188 	.word	0x20006188

0800c5f0 <USBD_StdItfReq>:
{
 800c5f0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5f2:	780b      	ldrb	r3, [r1, #0]
 800c5f4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800c5f8:	2a40      	cmp	r2, #64	; 0x40
{
 800c5fa:	460d      	mov	r5, r1
 800c5fc:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5fe:	d00b      	beq.n	800c618 <USBD_StdItfReq+0x28>
 800c600:	065b      	lsls	r3, r3, #25
 800c602:	d509      	bpl.n	800c618 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c604:	2180      	movs	r1, #128	; 0x80
 800c606:	f7f6 fe2d 	bl	8003264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c60a:	2100      	movs	r1, #0
 800c60c:	4620      	mov	r0, r4
 800c60e:	f7f6 fe29 	bl	8003264 <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 800c612:	2500      	movs	r5, #0
}
 800c614:	4628      	mov	r0, r5
 800c616:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800c618:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800c61c:	3b01      	subs	r3, #1
 800c61e:	2b02      	cmp	r3, #2
 800c620:	d812      	bhi.n	800c648 <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c622:	792b      	ldrb	r3, [r5, #4]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d80f      	bhi.n	800c648 <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c628:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c62c:	4629      	mov	r1, r5
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	4620      	mov	r0, r4
 800c632:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c634:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c636:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1eb      	bne.n	800c614 <USBD_StdItfReq+0x24>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d1e9      	bne.n	800c614 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800c640:	4620      	mov	r0, r4
 800c642:	f000 f90d 	bl	800c860 <USBD_CtlSendStatus>
 800c646:	e7e5      	b.n	800c614 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c648:	2180      	movs	r1, #128	; 0x80
 800c64a:	4620      	mov	r0, r4
 800c64c:	e7db      	b.n	800c606 <USBD_StdItfReq+0x16>
 800c64e:	bf00      	nop

0800c650 <USBD_StdEPReq>:
{
 800c650:	b570      	push	{r4, r5, r6, lr}
 800c652:	780b      	ldrb	r3, [r1, #0]
 800c654:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c658:	2b20      	cmp	r3, #32
{
 800c65a:	460d      	mov	r5, r1
 800c65c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c65e:	d01b      	beq.n	800c698 <USBD_StdEPReq+0x48>
 800c660:	2b40      	cmp	r3, #64	; 0x40
 800c662:	d019      	beq.n	800c698 <USBD_StdEPReq+0x48>
 800c664:	b303      	cbz	r3, 800c6a8 <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c666:	2180      	movs	r1, #128	; 0x80
 800c668:	4620      	mov	r0, r4
 800c66a:	f7f6 fdfb 	bl	8003264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c66e:	2100      	movs	r1, #0
 800c670:	4620      	mov	r0, r4
 800c672:	f7f6 fdf7 	bl	8003264 <USBD_LL_StallEP>
}
 800c676:	2000      	movs	r0, #0
 800c678:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800c67a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c67e:	2b02      	cmp	r3, #2
 800c680:	b2da      	uxtb	r2, r3
 800c682:	d053      	beq.n	800c72c <USBD_StdEPReq+0xdc>
 800c684:	2a03      	cmp	r2, #3
 800c686:	d1ee      	bne.n	800c666 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c688:	886b      	ldrh	r3, [r5, #2]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1f3      	bne.n	800c676 <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 800c68e:	064e      	lsls	r6, r1, #25
 800c690:	d16f      	bne.n	800c772 <USBD_StdEPReq+0x122>
                (void)USBD_CtlSendStatus(pdev);
 800c692:	4620      	mov	r0, r4
 800c694:	f000 f8e4 	bl	800c860 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c698:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c69c:	4629      	mov	r1, r5
 800c69e:	4620      	mov	r0, r4
 800c6a0:	689b      	ldr	r3, [r3, #8]
}
 800c6a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6a6:	4718      	bx	r3
      switch (req->bRequest)
 800c6a8:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800c6aa:	888a      	ldrh	r2, [r1, #4]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800c6b0:	d0e3      	beq.n	800c67a <USBD_StdEPReq+0x2a>
 800c6b2:	2b03      	cmp	r3, #3
 800c6b4:	d029      	beq.n	800c70a <USBD_StdEPReq+0xba>
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1d5      	bne.n	800c666 <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 800c6ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	b2d8      	uxtb	r0, r3
 800c6c2:	d03c      	beq.n	800c73e <USBD_StdEPReq+0xee>
 800c6c4:	2803      	cmp	r0, #3
 800c6c6:	d1ce      	bne.n	800c666 <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c6c8:	f001 030f 	and.w	r3, r1, #15
 800c6cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800c6d0:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c6d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800c6d6:	d441      	bmi.n	800c75c <USBD_StdEPReq+0x10c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c6d8:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d0c2      	beq.n	800c666 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6e0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800c6e4:	2514      	movs	r5, #20
 800c6e6:	fb05 4503 	mla	r5, r5, r3, r4
 800c6ea:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6ee:	b12b      	cbz	r3, 800c6fc <USBD_StdEPReq+0xac>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f7f6 fdd3 	bl	800329c <USBD_LL_IsStallEP>
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d03e      	beq.n	800c778 <USBD_StdEPReq+0x128>
                pep->status = 0x0001U;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c6fe:	2202      	movs	r2, #2
 800c700:	4629      	mov	r1, r5
 800c702:	4620      	mov	r0, r4
 800c704:	f000 f880 	bl	800c808 <USBD_CtlSendData>
              break;
 800c708:	e7b5      	b.n	800c676 <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 800c70a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c70e:	2b02      	cmp	r3, #2
 800c710:	b2da      	uxtb	r2, r3
 800c712:	d00b      	beq.n	800c72c <USBD_StdEPReq+0xdc>
 800c714:	2a03      	cmp	r2, #3
 800c716:	d1a6      	bne.n	800c666 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c718:	886b      	ldrh	r3, [r5, #2]
 800c71a:	b91b      	cbnz	r3, 800c724 <USBD_StdEPReq+0xd4>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c71c:	064a      	lsls	r2, r1, #25
 800c71e:	d001      	beq.n	800c724 <USBD_StdEPReq+0xd4>
 800c720:	88eb      	ldrh	r3, [r5, #6]
 800c722:	b35b      	cbz	r3, 800c77c <USBD_StdEPReq+0x12c>
              (void)USBD_CtlSendStatus(pdev);
 800c724:	4620      	mov	r0, r4
 800c726:	f000 f89b 	bl	800c860 <USBD_CtlSendStatus>
              break;
 800c72a:	e7a4      	b.n	800c676 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c72c:	064b      	lsls	r3, r1, #25
 800c72e:	d09a      	beq.n	800c666 <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c730:	f7f6 fd98 	bl	8003264 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c734:	2180      	movs	r1, #128	; 0x80
 800c736:	4620      	mov	r0, r4
 800c738:	f7f6 fd94 	bl	8003264 <USBD_LL_StallEP>
 800c73c:	e79b      	b.n	800c676 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c73e:	0648      	lsls	r0, r1, #25
 800c740:	d191      	bne.n	800c666 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c742:	0611      	lsls	r1, r2, #24
 800c744:	bf4c      	ite	mi
 800c746:	f104 0114 	addmi.w	r1, r4, #20
 800c74a:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800c74e:	2300      	movs	r3, #0
 800c750:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c752:	2202      	movs	r2, #2
 800c754:	4620      	mov	r0, r4
 800c756:	f000 f857 	bl	800c808 <USBD_CtlSendData>
              break;
 800c75a:	e78c      	b.n	800c676 <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c75c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d081      	beq.n	800c666 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c762:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800c766:	1c5d      	adds	r5, r3, #1
 800c768:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800c76c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c770:	e7bd      	b.n	800c6ee <USBD_StdEPReq+0x9e>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c772:	f7f6 fd85 	bl	8003280 <USBD_LL_ClearStallEP>
 800c776:	e78c      	b.n	800c692 <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 800c778:	6028      	str	r0, [r5, #0]
 800c77a:	e7c0      	b.n	800c6fe <USBD_StdEPReq+0xae>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c77c:	f7f6 fd72 	bl	8003264 <USBD_LL_StallEP>
 800c780:	e7d0      	b.n	800c724 <USBD_StdEPReq+0xd4>
 800c782:	bf00      	nop

0800c784 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800c784:	780b      	ldrb	r3, [r1, #0]
 800c786:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800c788:	784b      	ldrb	r3, [r1, #1]
 800c78a:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800c78c:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 800c78e:	8043      	strh	r3, [r0, #2]
 800c790:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 800c792:	8083      	strh	r3, [r0, #4]
 800c794:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 800c796:	80c3      	strh	r3, [r0, #6]
}
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop

0800c79c <USBD_CtlError>:
{
 800c79c:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c79e:	2180      	movs	r1, #128	; 0x80
{
 800c7a0:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7a2:	f7f6 fd5f 	bl	8003264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	2100      	movs	r1, #0
}
 800c7aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800c7ae:	f7f6 bd59 	b.w	8003264 <USBD_LL_StallEP>
 800c7b2:	bf00      	nop

0800c7b4 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800c7b4:	b318      	cbz	r0, 800c7fe <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800c7b6:	7803      	ldrb	r3, [r0, #0]
{
 800c7b8:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 800c7ba:	b30b      	cbz	r3, 800c800 <USBD_GetString+0x4c>
 800c7bc:	4604      	mov	r4, r0
 800c7be:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 800c7c2:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 800c7c6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	2d00      	cmp	r5, #0
 800c7ce:	d1f8      	bne.n	800c7c2 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	b2dc      	uxtb	r4, r3
 800c7d6:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c7d8:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800c7da:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c7dc:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800c7de:	7804      	ldrb	r4, [r0, #0]
 800c7e0:	b15c      	cbz	r4, 800c7fa <USBD_GetString+0x46>
  idx++;
 800c7e2:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800c7e4:	2500      	movs	r5, #0
    idx++;
 800c7e6:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 800c7e8:	b2d2      	uxtb	r2, r2
    unicode[idx] = *pdesc;
 800c7ea:	54cc      	strb	r4, [r1, r3]
    unicode[idx] = 0U;
 800c7ec:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 800c7ee:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    idx++;
 800c7f2:	3302      	adds	r3, #2
 800c7f4:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800c7f6:	2c00      	cmp	r4, #0
 800c7f8:	d1f5      	bne.n	800c7e6 <USBD_GetString+0x32>
}
 800c7fa:	bc30      	pop	{r4, r5}
 800c7fc:	4770      	bx	lr
 800c7fe:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800c800:	2402      	movs	r4, #2
 800c802:	4623      	mov	r3, r4
 800c804:	e7e7      	b.n	800c7d6 <USBD_GetString+0x22>
 800c806:	bf00      	nop

0800c808 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c808:	b508      	push	{r3, lr}
 800c80a:	4613      	mov	r3, r2
 800c80c:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c80e:	2102      	movs	r1, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c810:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c814:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c818:	2100      	movs	r1, #0
 800c81a:	f7f6 fd61 	bl	80032e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c81e:	2000      	movs	r0, #0
 800c820:	bd08      	pop	{r3, pc}
 800c822:	bf00      	nop

0800c824 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c824:	b508      	push	{r3, lr}
 800c826:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c828:	460a      	mov	r2, r1
 800c82a:	2100      	movs	r1, #0
 800c82c:	f7f6 fd58 	bl	80032e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c830:	2000      	movs	r0, #0
 800c832:	bd08      	pop	{r3, pc}

0800c834 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c834:	b508      	push	{r3, lr}
 800c836:	4613      	mov	r3, r2
 800c838:	460a      	mov	r2, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c83a:	2103      	movs	r1, #3
  pdev->ep_out[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c83c:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c840:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c844:	2100      	movs	r1, #0
 800c846:	f7f6 fd59 	bl	80032fc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c84a:	2000      	movs	r0, #0
 800c84c:	bd08      	pop	{r3, pc}
 800c84e:	bf00      	nop

0800c850 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c850:	b508      	push	{r3, lr}
 800c852:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c854:	460a      	mov	r2, r1
 800c856:	2100      	movs	r1, #0
 800c858:	f7f6 fd50 	bl	80032fc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c85c:	2000      	movs	r0, #0
 800c85e:	bd08      	pop	{r3, pc}

0800c860 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c860:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c862:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c864:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c866:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c86a:	461a      	mov	r2, r3
 800c86c:	4619      	mov	r1, r3
 800c86e:	f7f6 fd37 	bl	80032e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c872:	2000      	movs	r0, #0
 800c874:	bd08      	pop	{r3, pc}
 800c876:	bf00      	nop

0800c878 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c878:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c87a:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c87c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c87e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c882:	461a      	mov	r2, r3
 800c884:	4619      	mov	r1, r3
 800c886:	f7f6 fd39 	bl	80032fc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c88a:	2000      	movs	r0, #0
 800c88c:	bd08      	pop	{r3, pc}
 800c88e:	bf00      	nop

0800c890 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c890:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c892:	2003      	movs	r0, #3
 800c894:	f000 f830 	bl	800c8f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c898:	200e      	movs	r0, #14
 800c89a:	f7f6 f9a1 	bl	8002be0 <HAL_InitTick>
 800c89e:	b110      	cbz	r0, 800c8a6 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 800c8a0:	2401      	movs	r4, #1
  }

  /* Return function status */
  return status;

}
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	bd10      	pop	{r4, pc}
 800c8a6:	4604      	mov	r4, r0
    HAL_MspInit();
 800c8a8:	f7f5 fe3a 	bl	8002520 <HAL_MspInit>
}
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	bd10      	pop	{r4, pc}

0800c8b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800c8b0:	4a03      	ldr	r2, [pc, #12]	; (800c8c0 <HAL_IncTick+0x10>)
 800c8b2:	4904      	ldr	r1, [pc, #16]	; (800c8c4 <HAL_IncTick+0x14>)
 800c8b4:	6813      	ldr	r3, [r2, #0]
 800c8b6:	6809      	ldr	r1, [r1, #0]
 800c8b8:	440b      	add	r3, r1
 800c8ba:	6013      	str	r3, [r2, #0]
}
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	2000618c 	.word	0x2000618c
 800c8c4:	200006b0 	.word	0x200006b0

0800c8c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800c8c8:	4b01      	ldr	r3, [pc, #4]	; (800c8d0 <HAL_GetTick+0x8>)
 800c8ca:	6818      	ldr	r0, [r3, #0]
}
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	2000618c 	.word	0x2000618c

0800c8d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c8d8:	f7ff fff6 	bl	800c8c8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c8dc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800c8de:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800c8e0:	d002      	beq.n	800c8e8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800c8e2:	4b04      	ldr	r3, [pc, #16]	; (800c8f4 <HAL_Delay+0x20>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c8e8:	f7ff ffee 	bl	800c8c8 <HAL_GetTick>
 800c8ec:	1b43      	subs	r3, r0, r5
 800c8ee:	42a3      	cmp	r3, r4
 800c8f0:	d3fa      	bcc.n	800c8e8 <HAL_Delay+0x14>
  {
  }
}
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	200006b0 	.word	0x200006b0

0800c8f8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c8f8:	4907      	ldr	r1, [pc, #28]	; (800c918 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800c8fa:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c8fc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c8fe:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c902:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c906:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c908:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c90a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c90e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800c912:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	e000ed00 	.word	0xe000ed00

0800c91c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c91c:	4b1c      	ldr	r3, [pc, #112]	; (800c990 <HAL_NVIC_SetPriority+0x74>)
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c924:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c926:	f1c3 0e07 	rsb	lr, r3, #7
 800c92a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c92e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c932:	bf28      	it	cs
 800c934:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c938:	f1bc 0f06 	cmp.w	ip, #6
 800c93c:	d91b      	bls.n	800c976 <HAL_NVIC_SetPriority+0x5a>
 800c93e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c940:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c944:	fa0c fc03 	lsl.w	ip, ip, r3
 800c948:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c94c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c950:	fa0c fc0e 	lsl.w	ip, ip, lr
 800c954:	ea21 010c 	bic.w	r1, r1, ip
 800c958:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800c95a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c95c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800c960:	db0c      	blt.n	800c97c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c962:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800c966:	0109      	lsls	r1, r1, #4
 800c968:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800c96c:	b2c9      	uxtb	r1, r1
 800c96e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800c972:	f85d fb04 	ldr.w	pc, [sp], #4
 800c976:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c978:	4613      	mov	r3, r2
 800c97a:	e7e7      	b.n	800c94c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c97c:	4b05      	ldr	r3, [pc, #20]	; (800c994 <HAL_NVIC_SetPriority+0x78>)
 800c97e:	f000 000f 	and.w	r0, r0, #15
 800c982:	0109      	lsls	r1, r1, #4
 800c984:	4403      	add	r3, r0
 800c986:	b2c9      	uxtb	r1, r1
 800c988:	7619      	strb	r1, [r3, #24]
 800c98a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c98e:	bf00      	nop
 800c990:	e000ed00 	.word	0xe000ed00
 800c994:	e000ecfc 	.word	0xe000ecfc

0800c998 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800c998:	2800      	cmp	r0, #0
 800c99a:	db08      	blt.n	800c9ae <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c99c:	4a04      	ldr	r2, [pc, #16]	; (800c9b0 <HAL_NVIC_EnableIRQ+0x18>)
 800c99e:	0941      	lsrs	r1, r0, #5
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	f000 001f 	and.w	r0, r0, #31
 800c9a6:	fa03 f000 	lsl.w	r0, r3, r0
 800c9aa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800c9ae:	4770      	bx	lr
 800c9b0:	e000e100 	.word	0xe000e100

0800c9b4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	db0d      	blt.n	800c9d4 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c9b8:	0943      	lsrs	r3, r0, #5
 800c9ba:	4907      	ldr	r1, [pc, #28]	; (800c9d8 <HAL_NVIC_DisableIRQ+0x24>)
 800c9bc:	2201      	movs	r2, #1
 800c9be:	3320      	adds	r3, #32
 800c9c0:	f000 001f 	and.w	r0, r0, #31
 800c9c4:	fa02 f000 	lsl.w	r0, r2, r0
 800c9c8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c9cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c9d0:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	e000e100 	.word	0xe000e100

0800c9dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c9dc:	3801      	subs	r0, #1
 800c9de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800c9e2:	d210      	bcs.n	800ca06 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c9e4:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c9e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9ea:	4c08      	ldr	r4, [pc, #32]	; (800ca0c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c9ec:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c9ee:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800c9f2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c9f6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c9f8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c9fa:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c9fc:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800c9fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ca02:	6119      	str	r1, [r3, #16]
 800ca04:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800ca06:	2001      	movs	r0, #1
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	e000ed00 	.word	0xe000ed00

0800ca10 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800ca10:	2800      	cmp	r0, #0
 800ca12:	db09      	blt.n	800ca28 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ca14:	0943      	lsrs	r3, r0, #5
 800ca16:	4905      	ldr	r1, [pc, #20]	; (800ca2c <HAL_NVIC_ClearPendingIRQ+0x1c>)
 800ca18:	f000 001f 	and.w	r0, r0, #31
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	3360      	adds	r3, #96	; 0x60
 800ca20:	fa02 f000 	lsl.w	r0, r2, r0
 800ca24:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	e000e100 	.word	0xe000e100

0800ca30 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800ca30:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800ca34:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800ca36:	6913      	ldr	r3, [r2, #16]
 800ca38:	bf0c      	ite	eq
 800ca3a:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800ca3e:	f023 0304 	bicne.w	r3, r3, #4
 800ca42:	6113      	str	r3, [r2, #16]
  }
}
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop

0800ca48 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d07a      	beq.n	800cb42 <HAL_DMA_Init+0xfa>
{
 800ca4c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ca4e:	4b3e      	ldr	r3, [pc, #248]	; (800cb48 <HAL_DMA_Init+0x100>)
 800ca50:	6804      	ldr	r4, [r0, #0]
 800ca52:	429c      	cmp	r4, r3
 800ca54:	d95f      	bls.n	800cb16 <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800ca56:	4a3d      	ldr	r2, [pc, #244]	; (800cb4c <HAL_DMA_Init+0x104>)
 800ca58:	4b3d      	ldr	r3, [pc, #244]	; (800cb50 <HAL_DMA_Init+0x108>)
 800ca5a:	4422      	add	r2, r4
 800ca5c:	fba3 3202 	umull	r3, r2, r3, r2
 800ca60:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA2;
 800ca62:	4b3c      	ldr	r3, [pc, #240]	; (800cb54 <HAL_DMA_Init+0x10c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800ca64:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA2;
 800ca66:	e9c0 3210 	strd	r3, r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ca6a:	e9d0 5302 	ldrd	r5, r3, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 800ca6e:	2102      	movs	r1, #2
 800ca70:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca74:	6901      	ldr	r1, [r0, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca76:	69c6      	ldr	r6, [r0, #28]
  tmp |=  hdma->Init.Direction        |
 800ca78:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ca7a:	430b      	orrs	r3, r1
 800ca7c:	6941      	ldr	r1, [r0, #20]
 800ca7e:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ca80:	6981      	ldr	r1, [r0, #24]
 800ca82:	430b      	orrs	r3, r1
 800ca84:	4333      	orrs	r3, r6
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ca86:	fa5f fc84 	uxtb.w	ip, r4
 800ca8a:	4e31      	ldr	r6, [pc, #196]	; (800cb50 <HAL_DMA_Init+0x108>)
  tmp = hdma->Instance->CCR;
 800ca8c:	6821      	ldr	r1, [r4, #0]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ca8e:	f1ac 0c08 	sub.w	ip, ip, #8
 800ca92:	fba6 6c0c 	umull	r6, ip, r6, ip
          hdma->Init.Mode                | hdma->Init.Priority;
 800ca96:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ca98:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800ca9c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800caa0:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 800caa2:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 800caa4:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800caa6:	4e2c      	ldr	r6, [pc, #176]	; (800cb58 <HAL_DMA_Init+0x110>)
 800caa8:	4b27      	ldr	r3, [pc, #156]	; (800cb48 <HAL_DMA_Init+0x100>)
 800caaa:	492c      	ldr	r1, [pc, #176]	; (800cb5c <HAL_DMA_Init+0x114>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800caac:	f3cc 1c04 	ubfx	ip, ip, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800cab0:	429c      	cmp	r4, r3
 800cab2:	bf98      	it	ls
 800cab4:	4631      	movls	r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800cab6:	f04f 0e01 	mov.w	lr, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800caba:	4c29      	ldr	r4, [pc, #164]	; (800cb60 <HAL_DMA_Init+0x118>)
 800cabc:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800cabe:	fa0e f30c 	lsl.w	r3, lr, ip
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800cac2:	1854      	adds	r4, r2, r1
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800cac4:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800cac8:	6503      	str	r3, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800caca:	6484      	str	r4, [r0, #72]	; 0x48
 800cacc:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800cad0:	d02c      	beq.n	800cb2c <HAL_DMA_Init+0xe4>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800cad2:	6845      	ldr	r5, [r0, #4]
 800cad4:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800cad6:	3d01      	subs	r5, #1
 800cad8:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800cada:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cade:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800cae2:	d829      	bhi.n	800cb38 <HAL_DMA_Init+0xf0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800cae4:	4b1f      	ldr	r3, [pc, #124]	; (800cb64 <HAL_DMA_Init+0x11c>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800cae6:	4920      	ldr	r1, [pc, #128]	; (800cb68 <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800cae8:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800caea:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800caec:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800caee:	f004 041f 	and.w	r4, r4, #31
 800caf2:	fa0e f404 	lsl.w	r4, lr, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800caf6:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800caf8:	e9c0 3115 	strd	r3, r1, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800cafc:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800cafe:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cb00:	4b1a      	ldr	r3, [pc, #104]	; (800cb6c <HAL_DMA_Init+0x124>)
 800cb02:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cb04:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800cb06:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cb08:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 800cb0a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800cb0e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 800cb12:	4618      	mov	r0, r3
}
 800cb14:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800cb16:	4a16      	ldr	r2, [pc, #88]	; (800cb70 <HAL_DMA_Init+0x128>)
 800cb18:	4b0d      	ldr	r3, [pc, #52]	; (800cb50 <HAL_DMA_Init+0x108>)
 800cb1a:	4422      	add	r2, r4
 800cb1c:	fba3 3202 	umull	r3, r2, r3, r2
 800cb20:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 800cb22:	4b14      	ldr	r3, [pc, #80]	; (800cb74 <HAL_DMA_Init+0x12c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800cb24:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 800cb26:	e9c0 3210 	strd	r3, r2, [r0, #64]	; 0x40
 800cb2a:	e79e      	b.n	800ca6a <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800cb2c:	2400      	movs	r4, #0
 800cb2e:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800cb30:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cb34:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 800cb38:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 800cb3a:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800cb3e:	65c3      	str	r3, [r0, #92]	; 0x5c
 800cb40:	e7e0      	b.n	800cb04 <HAL_DMA_Init+0xbc>
    return HAL_ERROR;
 800cb42:	2001      	movs	r0, #1
}
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop
 800cb48:	40020407 	.word	0x40020407
 800cb4c:	bffdfbf8 	.word	0xbffdfbf8
 800cb50:	cccccccd 	.word	0xcccccccd
 800cb54:	40020400 	.word	0x40020400
 800cb58:	40020800 	.word	0x40020800
 800cb5c:	40020820 	.word	0x40020820
 800cb60:	40020880 	.word	0x40020880
 800cb64:	1000823f 	.word	0x1000823f
 800cb68:	40020940 	.word	0x40020940
 800cb6c:	40020900 	.word	0x40020900
 800cb70:	bffdfff8 	.word	0xbffdfff8
 800cb74:	40020000 	.word	0x40020000

0800cb78 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cb78:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800cb7c:	2a02      	cmp	r2, #2
{
 800cb7e:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cb80:	d009      	beq.n	800cb96 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cb82:	2204      	movs	r2, #4
 800cb84:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800cb86:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 800cb88:	2200      	movs	r2, #0
    status = HAL_ERROR;
 800cb8a:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 800cb8c:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800cb90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800cb94:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cb96:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cb98:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 800cb9a:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cb9c:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cb9e:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cba0:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cba2:	f020 000e 	bic.w	r0, r0, #14
 800cba6:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cba8:	6820      	ldr	r0, [r4, #0]
 800cbaa:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800cbae:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 800cbb0:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cbb2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 800cbb4:	f020 0001 	bic.w	r0, r0, #1
 800cbb8:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cbba:	f001 011f 	and.w	r1, r1, #31
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cbc2:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cbc6:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cbc8:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 800cbca:	b138      	cbz	r0, 800cbdc <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cbcc:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cbce:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cbd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbd6:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cbd8:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cbda:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800cbdc:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 800cbde:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 800cbe0:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800cbe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800cbe8:	bc30      	pop	{r4, r5}
 800cbea:	4770      	bx	lr

0800cbec <HAL_DMA_Abort_IT>:
{
 800cbec:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800cbee:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800cbf2:	2b02      	cmp	r3, #2
 800cbf4:	d009      	beq.n	800cc0a <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 800cbf6:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cbf8:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 800cbfa:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cbfc:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800cbfe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800cc02:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    status = HAL_ERROR;
 800cc06:	4618      	mov	r0, r3
}
 800cc08:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cc0a:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cc0c:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cc0e:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cc10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc12:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cc14:	f021 010e 	bic.w	r1, r1, #14
 800cc18:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800cc1a:	6819      	ldr	r1, [r3, #0]
 800cc1c:	f021 0101 	bic.w	r1, r1, #1
 800cc20:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cc22:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cc24:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cc26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc2a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cc2c:	f002 021f 	and.w	r2, r2, #31
 800cc30:	2301      	movs	r3, #1
 800cc32:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cc34:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cc38:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cc3a:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800cc3c:	b132      	cbz	r2, 800cc4c <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cc3e:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cc40:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cc44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc48:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cc4a:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 800cc4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800cc4e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 800cc50:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800cc52:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800cc56:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 800cc5a:	b113      	cbz	r3, 800cc62 <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 800cc5c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800cc5e:	4620      	mov	r0, r4
}
 800cc60:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800cc62:	4618      	mov	r0, r3
}
 800cc64:	bd38      	pop	{r3, r4, r5, pc}
 800cc66:	bf00      	nop

0800cc68 <HAL_DMA_IRQHandler>:
{
 800cc68:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800cc6a:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800cc6c:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800cc6e:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800cc70:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800cc72:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800cc74:	f003 031f 	and.w	r3, r3, #31
 800cc78:	2204      	movs	r2, #4
 800cc7a:	409a      	lsls	r2, r3
 800cc7c:	420a      	tst	r2, r1
 800cc7e:	d00e      	beq.n	800cc9e <HAL_DMA_IRQHandler+0x36>
 800cc80:	f014 0f04 	tst.w	r4, #4
 800cc84:	d00b      	beq.n	800cc9e <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cc86:	682b      	ldr	r3, [r5, #0]
 800cc88:	069b      	lsls	r3, r3, #26
 800cc8a:	d403      	bmi.n	800cc94 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cc8c:	682b      	ldr	r3, [r5, #0]
 800cc8e:	f023 0304 	bic.w	r3, r3, #4
 800cc92:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800cc94:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800cc96:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800cc98:	b1cb      	cbz	r3, 800ccce <HAL_DMA_IRQHandler+0x66>
}
 800cc9a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800cc9c:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800cc9e:	2202      	movs	r2, #2
 800cca0:	409a      	lsls	r2, r3
 800cca2:	420a      	tst	r2, r1
 800cca4:	d015      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 800cca6:	f014 0f02 	tst.w	r4, #2
 800ccaa:	d012      	beq.n	800ccd2 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ccac:	682b      	ldr	r3, [r5, #0]
 800ccae:	0699      	lsls	r1, r3, #26
 800ccb0:	d406      	bmi.n	800ccc0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ccb2:	682b      	ldr	r3, [r5, #0]
 800ccb4:	f023 030a 	bic.w	r3, r3, #10
 800ccb8:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 800ccc0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800ccc2:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1e5      	bne.n	800cc9a <HAL_DMA_IRQHandler+0x32>
}
 800ccce:	bc70      	pop	{r4, r5, r6}
 800ccd0:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800ccd2:	2208      	movs	r2, #8
 800ccd4:	409a      	lsls	r2, r3
 800ccd6:	420a      	tst	r2, r1
 800ccd8:	d0f9      	beq.n	800ccce <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 800ccda:	0722      	lsls	r2, r4, #28
 800ccdc:	d5f7      	bpl.n	800ccce <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ccde:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 800cce0:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cce2:	f022 020e 	bic.w	r2, r2, #14
 800cce6:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cce8:	2201      	movs	r2, #1
 800ccea:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800ccee:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ccf0:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ccf2:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800ccf4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800ccf8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 800ccfc:	2900      	cmp	r1, #0
 800ccfe:	d0e6      	beq.n	800ccce <HAL_DMA_IRQHandler+0x66>
}
 800cd00:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800cd02:	4708      	bx	r1

0800cd04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800cd08:	680d      	ldr	r5, [r1, #0]
{
 800cd0a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 800cd0c:	2d00      	cmp	r5, #0
 800cd0e:	f000 8094 	beq.w	800ce3a <HAL_GPIO_Init+0x136>
 800cd12:	2200      	movs	r2, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800cd14:	4e78      	ldr	r6, [pc, #480]	; (800cef8 <HAL_GPIO_Init+0x1f4>)
  uint32_t position = 0x00U;
 800cd16:	4613      	mov	r3, r2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cd18:	468c      	mov	ip, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800cd1a:	2101      	movs	r1, #1
 800cd1c:	fa01 f803 	lsl.w	r8, r1, r3
    if (iocurrent != 0x00u)
 800cd20:	ea18 0e05 	ands.w	lr, r8, r5
 800cd24:	f000 8082 	beq.w	800ce2c <HAL_GPIO_Init+0x128>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cd28:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd2c:	f021 0910 	bic.w	r9, r1, #16
 800cd30:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800cd34:	2c01      	cmp	r4, #1
 800cd36:	f240 8083 	bls.w	800ce40 <HAL_GPIO_Init+0x13c>
      temp = GPIOx->PUPDR;
 800cd3a:	f8d0 900c 	ldr.w	r9, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cd3e:	f8dc 4008 	ldr.w	r4, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cd42:	f04f 0803 	mov.w	r8, #3
 800cd46:	fa08 f802 	lsl.w	r8, r8, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cd4a:	4094      	lsls	r4, r2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cd4c:	ea29 0908 	bic.w	r9, r9, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cd50:	ea44 0409 	orr.w	r4, r4, r9
      GPIOx->PUPDR = temp;
 800cd54:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cd56:	ea6f 0408 	mvn.w	r4, r8
      temp = GPIOx->MODER;
 800cd5a:	f8d0 8000 	ldr.w	r8, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cd5e:	ea08 0804 	and.w	r8, r8, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cd62:	f001 0403 	and.w	r4, r1, #3
 800cd66:	4094      	lsls	r4, r2
 800cd68:	ea44 0408 	orr.w	r4, r4, r8
      GPIOx->MODER = temp;
 800cd6c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800cd6e:	00cc      	lsls	r4, r1, #3
 800cd70:	d55c      	bpl.n	800ce2c <HAL_GPIO_Init+0x128>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cd72:	4c62      	ldr	r4, [pc, #392]	; (800cefc <HAL_GPIO_Init+0x1f8>)
 800cd74:	4627      	mov	r7, r4
 800cd76:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800cd78:	f044 0401 	orr.w	r4, r4, #1
 800cd7c:	663c      	str	r4, [r7, #96]	; 0x60
 800cd7e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800cd80:	f004 0401 	and.w	r4, r4, #1
 800cd84:	9401      	str	r4, [sp, #4]
 800cd86:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800cd88:	f023 0403 	bic.w	r4, r3, #3
 800cd8c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800cd90:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cd94:	f003 0903 	and.w	r9, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800cd98:	f8d4 8008 	ldr.w	r8, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cd9c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800cda0:	270f      	movs	r7, #15
 800cda2:	fa07 fa09 	lsl.w	sl, r7, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cda6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cdaa:	ea28 080a 	bic.w	r8, r8, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cdae:	d019      	beq.n	800cde4 <HAL_GPIO_Init+0xe0>
 800cdb0:	4f53      	ldr	r7, [pc, #332]	; (800cf00 <HAL_GPIO_Init+0x1fc>)
 800cdb2:	42b8      	cmp	r0, r7
 800cdb4:	f000 808b 	beq.w	800cece <HAL_GPIO_Init+0x1ca>
 800cdb8:	4f52      	ldr	r7, [pc, #328]	; (800cf04 <HAL_GPIO_Init+0x200>)
 800cdba:	42b8      	cmp	r0, r7
 800cdbc:	f000 808d 	beq.w	800ceda <HAL_GPIO_Init+0x1d6>
 800cdc0:	4f51      	ldr	r7, [pc, #324]	; (800cf08 <HAL_GPIO_Init+0x204>)
 800cdc2:	42b8      	cmp	r0, r7
 800cdc4:	d07c      	beq.n	800cec0 <HAL_GPIO_Init+0x1bc>
 800cdc6:	4f51      	ldr	r7, [pc, #324]	; (800cf0c <HAL_GPIO_Init+0x208>)
 800cdc8:	42b8      	cmp	r0, r7
 800cdca:	f000 808d 	beq.w	800cee8 <HAL_GPIO_Init+0x1e4>
 800cdce:	4f50      	ldr	r7, [pc, #320]	; (800cf10 <HAL_GPIO_Init+0x20c>)
 800cdd0:	42b8      	cmp	r0, r7
 800cdd2:	bf0c      	ite	eq
 800cdd4:	f04f 0a05 	moveq.w	sl, #5
 800cdd8:	f04f 0a06 	movne.w	sl, #6
 800cddc:	fa0a f909 	lsl.w	r9, sl, r9
 800cde0:	ea48 0809 	orr.w	r8, r8, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cde4:	f8c4 8008 	str.w	r8, [r4, #8]
        temp = EXTI->IMR1;
 800cde8:	6834      	ldr	r4, [r6, #0]
        temp &= ~(iocurrent);
 800cdea:	ea6f 080e 	mvn.w	r8, lr
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800cdee:	03cf      	lsls	r7, r1, #15
        temp &= ~(iocurrent);
 800cdf0:	bf54      	ite	pl
 800cdf2:	ea08 0404 	andpl.w	r4, r8, r4
        {
          temp |= iocurrent;
 800cdf6:	ea4e 0404 	orrmi.w	r4, lr, r4
        }
        EXTI->IMR1 = temp;
 800cdfa:	6034      	str	r4, [r6, #0]

        temp = EXTI->EMR1;
 800cdfc:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800cdfe:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 800ce00:	bf54      	ite	pl
 800ce02:	ea08 0404 	andpl.w	r4, r8, r4
        {
          temp |= iocurrent;
 800ce06:	ea4e 0404 	orrmi.w	r4, lr, r4
        }
        EXTI->EMR1 = temp;
 800ce0a:	6074      	str	r4, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ce0c:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ce0e:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 800ce10:	bf54      	ite	pl
 800ce12:	ea08 0404 	andpl.w	r4, r8, r4
        {
          temp |= iocurrent;
 800ce16:	ea4e 0404 	orrmi.w	r4, lr, r4
        }
        EXTI->RTSR1 = temp;
 800ce1a:	60b4      	str	r4, [r6, #8]

        temp = EXTI->FTSR1;
 800ce1c:	68f4      	ldr	r4, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ce1e:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 800ce20:	bf54      	ite	pl
 800ce22:	ea08 0404 	andpl.w	r4, r8, r4
        {
          temp |= iocurrent;
 800ce26:	ea4e 0404 	orrmi.w	r4, lr, r4
        }
        EXTI->FTSR1 = temp;
 800ce2a:	60f4      	str	r4, [r6, #12]
      }
    }

    position++;
 800ce2c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ce2e:	fa35 f103 	lsrs.w	r1, r5, r3
 800ce32:	f102 0202 	add.w	r2, r2, #2
 800ce36:	f47f af70 	bne.w	800cd1a <HAL_GPIO_Init+0x16>
  }
}
 800ce3a:	b003      	add	sp, #12
 800ce3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800ce40:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ce44:	f8dc 400c 	ldr.w	r4, [ip, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ce48:	f8dc 7008 	ldr.w	r7, [ip, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ce4c:	f04f 0b03 	mov.w	fp, #3
 800ce50:	fa0b fb02 	lsl.w	fp, fp, r2
 800ce54:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ce58:	4094      	lsls	r4, r2
 800ce5a:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 800ce5e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800ce60:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ce62:	ea24 0808 	bic.w	r8, r4, r8
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ce66:	f3c1 1400 	ubfx	r4, r1, #4, #1
 800ce6a:	409c      	lsls	r4, r3
 800ce6c:	ea44 0408 	orr.w	r4, r4, r8
        GPIOx->OTYPER = temp;
 800ce70:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800ce72:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ce74:	fa07 f802 	lsl.w	r8, r7, r2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ce78:	ea24 0a0b 	bic.w	sl, r4, fp
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ce7c:	ea48 080a 	orr.w	r8, r8, sl
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ce80:	f1b9 0f02 	cmp.w	r9, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ce84:	ea6f 040b 	mvn.w	r4, fp
      GPIOx->PUPDR = temp;
 800ce88:	f8c0 800c 	str.w	r8, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ce8c:	f47f af65 	bne.w	800cd5a <HAL_GPIO_Init+0x56>
        temp = GPIOx->AFR[position >> 3U];
 800ce90:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ce94:	f8dc 7010 	ldr.w	r7, [ip, #16]
 800ce98:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ce9c:	f003 0807 	and.w	r8, r3, #7
 800cea0:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cea4:	fa07 fb08 	lsl.w	fp, r7, r8
        temp = GPIOx->AFR[position >> 3U];
 800cea8:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ceac:	270f      	movs	r7, #15
 800ceae:	fa07 f808 	lsl.w	r8, r7, r8
 800ceb2:	ea2a 0808 	bic.w	r8, sl, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ceb6:	ea4b 0b08 	orr.w	fp, fp, r8
        GPIOx->AFR[position >> 3U] = temp;
 800ceba:	f8c9 b020 	str.w	fp, [r9, #32]
 800cebe:	e74c      	b.n	800cd5a <HAL_GPIO_Init+0x56>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cec0:	f04f 0a03 	mov.w	sl, #3
 800cec4:	fa0a f909 	lsl.w	r9, sl, r9
 800cec8:	ea48 0809 	orr.w	r8, r8, r9
 800cecc:	e78a      	b.n	800cde4 <HAL_GPIO_Init+0xe0>
 800cece:	2701      	movs	r7, #1
 800ced0:	fa07 f909 	lsl.w	r9, r7, r9
 800ced4:	ea48 0809 	orr.w	r8, r8, r9
 800ced8:	e784      	b.n	800cde4 <HAL_GPIO_Init+0xe0>
 800ceda:	f04f 0a02 	mov.w	sl, #2
 800cede:	fa0a f909 	lsl.w	r9, sl, r9
 800cee2:	ea48 0809 	orr.w	r8, r8, r9
 800cee6:	e77d      	b.n	800cde4 <HAL_GPIO_Init+0xe0>
 800cee8:	f04f 0a04 	mov.w	sl, #4
 800ceec:	fa0a f909 	lsl.w	r9, sl, r9
 800cef0:	ea48 0809 	orr.w	r8, r8, r9
 800cef4:	e776      	b.n	800cde4 <HAL_GPIO_Init+0xe0>
 800cef6:	bf00      	nop
 800cef8:	40010400 	.word	0x40010400
 800cefc:	40021000 	.word	0x40021000
 800cf00:	48000400 	.word	0x48000400
 800cf04:	48000800 	.word	0x48000800
 800cf08:	48000c00 	.word	0x48000c00
 800cf0c:	48001000 	.word	0x48001000
 800cf10:	48001400 	.word	0x48001400

0800cf14 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800cf14:	6903      	ldr	r3, [r0, #16]
 800cf16:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800cf18:	bf14      	ite	ne
 800cf1a:	2001      	movne	r0, #1
 800cf1c:	2000      	moveq	r0, #0
 800cf1e:	4770      	bx	lr

0800cf20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cf20:	b10a      	cbz	r2, 800cf26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800cf22:	6181      	str	r1, [r0, #24]
 800cf24:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800cf26:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop

0800cf2c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cf2c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cf2e:	ea01 0203 	and.w	r2, r1, r3
 800cf32:	ea21 0103 	bic.w	r1, r1, r3
 800cf36:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cf3a:	6181      	str	r1, [r0, #24]
}
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop

0800cf40 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop

0800cf44 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800cf44:	4a04      	ldr	r2, [pc, #16]	; (800cf58 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800cf46:	6951      	ldr	r1, [r2, #20]
 800cf48:	4201      	tst	r1, r0
 800cf4a:	d100      	bne.n	800cf4e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800cf4c:	4770      	bx	lr
{
 800cf4e:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cf50:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cf52:	f7ff fff5 	bl	800cf40 <HAL_GPIO_EXTI_Callback>
}
 800cf56:	bd08      	pop	{r3, pc}
 800cf58:	40010400 	.word	0x40010400

0800cf5c <I2C_IsAcknowledgeFailed.part.0>:
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 800cf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5e:	4606      	mov	r6, r0
 800cf60:	460d      	mov	r5, r1
 800cf62:	4617      	mov	r7, r2
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cf64:	6834      	ldr	r4, [r6, #0]
 800cf66:	e001      	b.n	800cf6c <I2C_IsAcknowledgeFailed.part.0+0x10>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cf68:	1c68      	adds	r0, r5, #1
 800cf6a:	d120      	bne.n	800cfae <I2C_IsAcknowledgeFailed.part.0+0x52>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cf6c:	69a3      	ldr	r3, [r4, #24]
 800cf6e:	0699      	lsls	r1, r3, #26
 800cf70:	d5fa      	bpl.n	800cf68 <I2C_IsAcknowledgeFailed.part.0+0xc>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf72:	2210      	movs	r2, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf74:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf76:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf78:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cf7a:	69a3      	ldr	r3, [r4, #24]
 800cf7c:	079a      	lsls	r2, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 800cf7e:	bf44      	itt	mi
 800cf80:	2300      	movmi	r3, #0
 800cf82:	62a3      	strmi	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cf84:	69a3      	ldr	r3, [r4, #24]
 800cf86:	07db      	lsls	r3, r3, #31
 800cf88:	d525      	bpl.n	800cfd6 <I2C_IsAcknowledgeFailed.part.0+0x7a>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cf8a:	6863      	ldr	r3, [r4, #4]
 800cf8c:	4914      	ldr	r1, [pc, #80]	; (800cfe0 <I2C_IsAcknowledgeFailed.part.0+0x84>)
 800cf8e:	400b      	ands	r3, r1
 800cf90:	6063      	str	r3, [r4, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cf92:	6c73      	ldr	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf94:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800cf96:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cf98:	f043 0304 	orr.w	r3, r3, #4
 800cf9c:	6473      	str	r3, [r6, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf9e:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800cfa2:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfa6:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42

    return HAL_ERROR;
  }
  return HAL_OK;
}
 800cfaa:	2001      	movs	r0, #1
 800cfac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfae:	f7ff fc8b 	bl	800c8c8 <HAL_GetTick>
 800cfb2:	1bc0      	subs	r0, r0, r7
 800cfb4:	4285      	cmp	r5, r0
 800cfb6:	d301      	bcc.n	800cfbc <I2C_IsAcknowledgeFailed.part.0+0x60>
 800cfb8:	2d00      	cmp	r5, #0
 800cfba:	d1d3      	bne.n	800cf64 <I2C_IsAcknowledgeFailed.part.0+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cfbc:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfbe:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cfc0:	f043 0320 	orr.w	r3, r3, #32
          hi2c->State = HAL_I2C_STATE_READY;
 800cfc4:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cfc6:	6473      	str	r3, [r6, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 800cfc8:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 800cfcc:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfd0:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
          return HAL_ERROR;
 800cfd4:	e7e9      	b.n	800cfaa <I2C_IsAcknowledgeFailed.part.0+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cfd6:	69a3      	ldr	r3, [r4, #24]
 800cfd8:	f043 0301 	orr.w	r3, r3, #1
 800cfdc:	61a3      	str	r3, [r4, #24]
 800cfde:	e7d4      	b.n	800cf8a <I2C_IsAcknowledgeFailed.part.0+0x2e>
 800cfe0:	fe00e800 	.word	0xfe00e800

0800cfe4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800cfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	460d      	mov	r5, r1
 800cfea:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cfec:	e001      	b.n	800cff2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 800cfee:	1c6b      	adds	r3, r5, #1
 800cff0:	d111      	bne.n	800d016 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cff2:	6823      	ldr	r3, [r4, #0]
 800cff4:	699e      	ldr	r6, [r3, #24]
 800cff6:	07b6      	lsls	r6, r6, #30
 800cff8:	463a      	mov	r2, r7
 800cffa:	4629      	mov	r1, r5
 800cffc:	4620      	mov	r0, r4
 800cffe:	d408      	bmi.n	800d012 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d000:	699b      	ldr	r3, [r3, #24]
 800d002:	06de      	lsls	r6, r3, #27
 800d004:	d5f3      	bpl.n	800cfee <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 800d006:	f7ff ffa9 	bl	800cf5c <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d00a:	2800      	cmp	r0, #0
 800d00c:	d0ef      	beq.n	800cfee <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 800d00e:	2001      	movs	r0, #1
}
 800d010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800d012:	2000      	movs	r0, #0
}
 800d014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d016:	f7ff fc57 	bl	800c8c8 <HAL_GetTick>
 800d01a:	1bc0      	subs	r0, r0, r7
 800d01c:	42a8      	cmp	r0, r5
 800d01e:	d801      	bhi.n	800d024 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d020:	2d00      	cmp	r5, #0
 800d022:	d1e6      	bne.n	800cff2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d024:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d026:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d028:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800d02c:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d02e:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800d030:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800d034:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d038:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        return HAL_ERROR;
 800d03c:	2001      	movs	r0, #1
}
 800d03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d040 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d042:	4605      	mov	r5, r0
 800d044:	460c      	mov	r4, r1
 800d046:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d048:	e005      	b.n	800d056 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d04a:	f7ff fc3d 	bl	800c8c8 <HAL_GetTick>
 800d04e:	1b80      	subs	r0, r0, r6
 800d050:	42a0      	cmp	r0, r4
 800d052:	d810      	bhi.n	800d076 <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
 800d054:	b17c      	cbz	r4, 800d076 <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d056:	682b      	ldr	r3, [r5, #0]
 800d058:	699f      	ldr	r7, [r3, #24]
 800d05a:	06bf      	lsls	r7, r7, #26
 800d05c:	4632      	mov	r2, r6
 800d05e:	4621      	mov	r1, r4
 800d060:	4628      	mov	r0, r5
 800d062:	d416      	bmi.n	800d092 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d064:	699b      	ldr	r3, [r3, #24]
 800d066:	06db      	lsls	r3, r3, #27
 800d068:	d5ef      	bpl.n	800d04a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800d06a:	f7ff ff77 	bl	800cf5c <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d06e:	2800      	cmp	r0, #0
 800d070:	d0eb      	beq.n	800d04a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      return HAL_ERROR;
 800d072:	2001      	movs	r0, #1
}
 800d074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d076:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d078:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d07a:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800d07e:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d080:	646b      	str	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800d082:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800d086:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d08a:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800d08e:	2001      	movs	r0, #1
}
 800d090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800d092:	2000      	movs	r0, #0
}
 800d094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d096:	bf00      	nop

0800d098 <I2C_RequestMemoryRead>:
{
 800d098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d09c:	4616      	mov	r6, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800d09e:	6802      	ldr	r2, [r0, #0]
 800d0a0:	4c27      	ldr	r4, [pc, #156]	; (800d140 <I2C_RequestMemoryRead+0xa8>)
{
 800d0a2:	461f      	mov	r7, r3
  MODIFY_REG(hi2c->Instance->CR2,
 800d0a4:	6853      	ldr	r3, [r2, #4]
 800d0a6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d0aa:	4023      	ands	r3, r4
 800d0ac:	b2fc      	uxtb	r4, r7
 800d0ae:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d0b2:	4319      	orrs	r1, r3
{
 800d0b4:	e9dd 4908 	ldrd	r4, r9, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2,
 800d0b8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800d0bc:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800d0c0:	6051      	str	r1, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0c2:	464a      	mov	r2, r9
 800d0c4:	4621      	mov	r1, r4
{
 800d0c6:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0c8:	f7ff ff8c 	bl	800cfe4 <I2C_WaitOnTXISFlagUntilTimeout>
 800d0cc:	b9c0      	cbnz	r0, 800d100 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d0ce:	2f01      	cmp	r7, #1
 800d0d0:	4680      	mov	r8, r0
 800d0d2:	d10b      	bne.n	800d0ec <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d0d4:	682a      	ldr	r2, [r5, #0]
 800d0d6:	b2f6      	uxtb	r6, r6
 800d0d8:	6296      	str	r6, [r2, #40]	; 0x28
 800d0da:	e001      	b.n	800d0e0 <I2C_RequestMemoryRead+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800d0dc:	1c61      	adds	r1, r4, #1
 800d0de:	d114      	bne.n	800d10a <I2C_RequestMemoryRead+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d0e0:	6993      	ldr	r3, [r2, #24]
 800d0e2:	065b      	lsls	r3, r3, #25
 800d0e4:	d5fa      	bpl.n	800d0dc <I2C_RequestMemoryRead+0x44>
}
 800d0e6:	4640      	mov	r0, r8
 800d0e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d0ec:	682b      	ldr	r3, [r5, #0]
 800d0ee:	0a32      	lsrs	r2, r6, #8
 800d0f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0f2:	4621      	mov	r1, r4
 800d0f4:	464a      	mov	r2, r9
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	f7ff ff74 	bl	800cfe4 <I2C_WaitOnTXISFlagUntilTimeout>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d0e9      	beq.n	800d0d4 <I2C_RequestMemoryRead+0x3c>
    return HAL_ERROR;
 800d100:	f04f 0801 	mov.w	r8, #1
}
 800d104:	4640      	mov	r0, r8
 800d106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d10a:	f7ff fbdd 	bl	800c8c8 <HAL_GetTick>
 800d10e:	eba0 0009 	sub.w	r0, r0, r9
 800d112:	4284      	cmp	r4, r0
 800d114:	d302      	bcc.n	800d11c <I2C_RequestMemoryRead+0x84>
 800d116:	b10c      	cbz	r4, 800d11c <I2C_RequestMemoryRead+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d118:	682a      	ldr	r2, [r5, #0]
 800d11a:	e7e1      	b.n	800d0e0 <I2C_RequestMemoryRead+0x48>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d11c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d11e:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d120:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800d124:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d126:	646b      	str	r3, [r5, #68]	; 0x44
    return HAL_ERROR;
 800d128:	f04f 0801 	mov.w	r8, #1
        hi2c->State = HAL_I2C_STATE_READY;
 800d12c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800d130:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d134:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d138:	4640      	mov	r0, r8
 800d13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d13e:	bf00      	nop
 800d140:	fc009800 	.word	0xfc009800

0800d144 <HAL_I2C_MspInit>:
}
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop

0800d148 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800d148:	2800      	cmp	r0, #0
 800d14a:	d04f      	beq.n	800d1ec <HAL_I2C_Init+0xa4>
{
 800d14c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d14e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800d152:	4604      	mov	r4, r0
 800d154:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d042      	beq.n	800d1e2 <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 800d15c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d15e:	2224      	movs	r2, #36	; 0x24
 800d160:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800d164:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d166:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 800d168:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d16c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800d170:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d172:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d174:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d176:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d17c:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d17e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d180:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d182:	d02a      	beq.n	800d1da <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d184:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d188:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d18a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d18c:	bf04      	itt	eq
 800d18e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800d192:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d194:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d196:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d198:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800d19c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800d1a0:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d1a2:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d1a4:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d1a6:	430a      	orrs	r2, r1
 800d1a8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d1aa:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d1ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d1b2:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d1b4:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d1b6:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d1b8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d1ba:	4301      	orrs	r1, r0
 800d1bc:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d1be:	6819      	ldr	r1, [r3, #0]
 800d1c0:	f041 0101 	orr.w	r1, r1, #1
 800d1c4:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1c6:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800d1c8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1ca:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d1cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d1d0:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1d2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 800d1d6:	4610      	mov	r0, r2
}
 800d1d8:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d1da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1de:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d1e0:	e7d8      	b.n	800d194 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800d1e2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800d1e6:	f7ff ffad 	bl	800d144 <HAL_I2C_MspInit>
 800d1ea:	e7b7      	b.n	800d15c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800d1ec:	2001      	movs	r0, #1
}
 800d1ee:	4770      	bx	lr

0800d1f0 <HAL_I2C_Master_Transmit>:
{
 800d1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1f4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1f6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800d1fa:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1fc:	2b20      	cmp	r3, #32
 800d1fe:	d178      	bne.n	800d2f2 <HAL_I2C_Master_Transmit+0x102>
    __HAL_LOCK(hi2c);
 800d200:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d204:	2b01      	cmp	r3, #1
 800d206:	4604      	mov	r4, r0
 800d208:	d073      	beq.n	800d2f2 <HAL_I2C_Master_Transmit+0x102>
 800d20a:	2301      	movs	r3, #1
 800d20c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800d210:	460f      	mov	r7, r1
 800d212:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800d214:	f7ff fb58 	bl	800c8c8 <HAL_GetTick>
 800d218:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d21a:	e004      	b.n	800d226 <HAL_I2C_Master_Transmit+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d21c:	f7ff fb54 	bl	800c8c8 <HAL_GetTick>
 800d220:	1b80      	subs	r0, r0, r6
 800d222:	2819      	cmp	r0, #25
 800d224:	d868      	bhi.n	800d2f8 <HAL_I2C_Master_Transmit+0x108>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	6998      	ldr	r0, [r3, #24]
 800d22a:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800d22e:	d1f5      	bne.n	800d21c <HAL_I2C_Master_Transmit+0x2c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d230:	2221      	movs	r2, #33	; 0x21
 800d232:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d236:	2210      	movs	r2, #16
 800d238:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d23c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800d23e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d242:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800d244:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d248:	b292      	uxth	r2, r2
 800d24a:	2aff      	cmp	r2, #255	; 0xff
    hi2c->XferISR   = NULL;
 800d24c:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d24e:	d875      	bhi.n	800d33c <HAL_I2C_Master_Transmit+0x14c>
      hi2c->XferSize = hi2c->XferCount;
 800d250:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800d252:	484e      	ldr	r0, [pc, #312]	; (800d38c <HAL_I2C_Master_Transmit+0x19c>)
      hi2c->XferSize = hi2c->XferCount;
 800d254:	b292      	uxth	r2, r2
 800d256:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800d258:	b2d1      	uxtb	r1, r2
 800d25a:	685a      	ldr	r2, [r3, #4]
 800d25c:	4002      	ands	r2, r0
 800d25e:	f3c7 0009 	ubfx	r0, r7, #0, #10
 800d262:	4302      	orrs	r2, r0
 800d264:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d268:	f042 4202 	orr.w	r2, r2, #2181038080	; 0x82000000
 800d26c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d270:	605a      	str	r2, [r3, #4]
 800d272:	4607      	mov	r7, r0
    while (hi2c->XferCount > 0U)
 800d274:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d276:	b29b      	uxth	r3, r3
 800d278:	b333      	cbz	r3, 800d2c8 <HAL_I2C_Master_Transmit+0xd8>
  MODIFY_REG(hi2c->Instance->CR2,
 800d27a:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800d398 <HAL_I2C_Master_Transmit+0x1a8>
 800d27e:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800d39c <HAL_I2C_Master_Transmit+0x1ac>
 800d282:	b2bf      	uxth	r7, r7
 800d284:	e002      	b.n	800d28c <HAL_I2C_Master_Transmit+0x9c>
    while (hi2c->XferCount > 0U)
 800d286:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d288:	b29b      	uxth	r3, r3
 800d28a:	b1eb      	cbz	r3, 800d2c8 <HAL_I2C_Master_Transmit+0xd8>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d28c:	4632      	mov	r2, r6
 800d28e:	4629      	mov	r1, r5
 800d290:	4620      	mov	r0, r4
 800d292:	f7ff fea7 	bl	800cfe4 <I2C_WaitOnTXISFlagUntilTimeout>
 800d296:	2800      	cmp	r0, #0
 800d298:	d174      	bne.n	800d384 <HAL_I2C_Master_Transmit+0x194>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d29a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d29c:	6821      	ldr	r1, [r4, #0]
 800d29e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d2a2:	628b      	str	r3, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800d2a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d2a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800d2a8:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800d2aa:	3a01      	subs	r2, #1
 800d2ac:	b292      	uxth	r2, r2
 800d2ae:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d2b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d2b6:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d2b8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d2ba:	2a00      	cmp	r2, #0
 800d2bc:	d0e3      	beq.n	800d286 <HAL_I2C_Master_Transmit+0x96>
 800d2be:	b363      	cbz	r3, 800d31a <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferCount > 0U)
 800d2c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1e1      	bne.n	800d28c <HAL_I2C_Master_Transmit+0x9c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2c8:	4632      	mov	r2, r6
 800d2ca:	4629      	mov	r1, r5
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f7ff feb7 	bl	800d040 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	d156      	bne.n	800d384 <HAL_I2C_Master_Transmit+0x194>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d2d6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800d2d8:	4d2d      	ldr	r5, [pc, #180]	; (800d390 <HAL_I2C_Master_Transmit+0x1a0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d2da:	2120      	movs	r1, #32
 800d2dc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	402a      	ands	r2, r5
 800d2e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d2e4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d2e8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d2ec:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800d2f0:	e000      	b.n	800d2f4 <HAL_I2C_Master_Transmit+0x104>
    return HAL_BUSY;
 800d2f2:	2002      	movs	r0, #2
}
 800d2f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d2f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2fa:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d2fc:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800d300:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d302:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800d304:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800d308:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d30c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 800d310:	2001      	movs	r0, #1
}
 800d312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800d316:	1c6a      	adds	r2, r5, #1
 800d318:	d11d      	bne.n	800d356 <HAL_I2C_Master_Transmit+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d31a:	698b      	ldr	r3, [r1, #24]
 800d31c:	061b      	lsls	r3, r3, #24
 800d31e:	d5fa      	bpl.n	800d316 <HAL_I2C_Master_Transmit+0x126>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d320:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d322:	b29b      	uxth	r3, r3
 800d324:	2bff      	cmp	r3, #255	; 0xff
 800d326:	d91f      	bls.n	800d368 <HAL_I2C_Master_Transmit+0x178>
  MODIFY_REG(hi2c->Instance->CR2,
 800d328:	684b      	ldr	r3, [r1, #4]
 800d32a:	ea03 0308 	and.w	r3, r3, r8
 800d32e:	433b      	orrs	r3, r7
 800d330:	ea43 0309 	orr.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d334:	22ff      	movs	r2, #255	; 0xff
 800d336:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800d338:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800d33a:	e7a4      	b.n	800d286 <HAL_I2C_Master_Transmit+0x96>
  MODIFY_REG(hi2c->Instance->CR2,
 800d33c:	685a      	ldr	r2, [r3, #4]
 800d33e:	4913      	ldr	r1, [pc, #76]	; (800d38c <HAL_I2C_Master_Transmit+0x19c>)
 800d340:	f3c7 0009 	ubfx	r0, r7, #0, #10
 800d344:	400a      	ands	r2, r1
 800d346:	4913      	ldr	r1, [pc, #76]	; (800d394 <HAL_I2C_Master_Transmit+0x1a4>)
 800d348:	4302      	orrs	r2, r0
 800d34a:	4311      	orrs	r1, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d34c:	22ff      	movs	r2, #255	; 0xff
 800d34e:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800d350:	4607      	mov	r7, r0
 800d352:	6059      	str	r1, [r3, #4]
}
 800d354:	e78e      	b.n	800d274 <HAL_I2C_Master_Transmit+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d356:	f7ff fab7 	bl	800c8c8 <HAL_GetTick>
 800d35a:	1b80      	subs	r0, r0, r6
 800d35c:	4285      	cmp	r5, r0
 800d35e:	d3cb      	bcc.n	800d2f8 <HAL_I2C_Master_Transmit+0x108>
 800d360:	2d00      	cmp	r5, #0
 800d362:	d0c9      	beq.n	800d2f8 <HAL_I2C_Master_Transmit+0x108>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d364:	6821      	ldr	r1, [r4, #0]
 800d366:	e7d8      	b.n	800d31a <HAL_I2C_Master_Transmit+0x12a>
          hi2c->XferSize = hi2c->XferCount;
 800d368:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	684b      	ldr	r3, [r1, #4]
 800d372:	ea03 0308 	and.w	r3, r3, r8
 800d376:	433b      	orrs	r3, r7
 800d378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d37c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d380:	604b      	str	r3, [r1, #4]
}
 800d382:	e780      	b.n	800d286 <HAL_I2C_Master_Transmit+0x96>
        return HAL_ERROR;
 800d384:	2001      	movs	r0, #1
}
 800d386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d38a:	bf00      	nop
 800d38c:	fc009800 	.word	0xfc009800
 800d390:	fe00e800 	.word	0xfe00e800
 800d394:	81ff2000 	.word	0x81ff2000
 800d398:	fc009c00 	.word	0xfc009c00
 800d39c:	01ff0000 	.word	0x01ff0000

0800d3a0 <HAL_I2C_Mem_Read>:
{
 800d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3a6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800d3aa:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3ac:	2b20      	cmp	r3, #32
{
 800d3ae:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800d3b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3b4:	d178      	bne.n	800d4a8 <HAL_I2C_Mem_Read+0x108>
    if ((pData == NULL) || (Size == 0U))
 800d3b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3b8:	4605      	mov	r5, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d06d      	beq.n	800d49a <HAL_I2C_Mem_Read+0xfa>
 800d3be:	f1ba 0f00 	cmp.w	sl, #0
 800d3c2:	d06a      	beq.n	800d49a <HAL_I2C_Mem_Read+0xfa>
    __HAL_LOCK(hi2c);
 800d3c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d06d      	beq.n	800d4a8 <HAL_I2C_Mem_Read+0x108>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800d3d2:	460f      	mov	r7, r1
 800d3d4:	4690      	mov	r8, r2
    tickstart = HAL_GetTick();
 800d3d6:	f7ff fa77 	bl	800c8c8 <HAL_GetTick>
 800d3da:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d3dc:	e004      	b.n	800d3e8 <HAL_I2C_Mem_Read+0x48>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3de:	f7ff fa73 	bl	800c8c8 <HAL_GetTick>
 800d3e2:	1b80      	subs	r0, r0, r6
 800d3e4:	2819      	cmp	r0, #25
 800d3e6:	d86a      	bhi.n	800d4be <HAL_I2C_Mem_Read+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d3e8:	682b      	ldr	r3, [r5, #0]
 800d3ea:	699b      	ldr	r3, [r3, #24]
 800d3ec:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 800d3f0:	d1f5      	bne.n	800d3de <HAL_I2C_Mem_Read+0x3e>
    hi2c->pBuffPtr  = pData;
 800d3f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3f4:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d3f6:	2122      	movs	r1, #34	; 0x22
    hi2c->XferISR   = NULL;
 800d3f8:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d3fc:	e9cd 4600 	strd	r4, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d400:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d404:	2140      	movs	r1, #64	; 0x40
 800d406:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d40a:	464b      	mov	r3, r9
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d40c:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d410:	4642      	mov	r2, r8
    hi2c->XferCount = Size;
 800d412:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d416:	4639      	mov	r1, r7
 800d418:	4628      	mov	r0, r5
 800d41a:	f7ff fe3d 	bl	800d098 <I2C_RequestMemoryRead>
 800d41e:	2800      	cmp	r0, #0
 800d420:	f040 8095 	bne.w	800d54e <HAL_I2C_Mem_Read+0x1ae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d424:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d426:	b29b      	uxth	r3, r3
 800d428:	2bff      	cmp	r3, #255	; 0xff
 800d42a:	d874      	bhi.n	800d516 <HAL_I2C_Mem_Read+0x176>
      hi2c->XferSize = hi2c->XferCount;
 800d42c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 800d42e:	682a      	ldr	r2, [r5, #0]
 800d430:	4854      	ldr	r0, [pc, #336]	; (800d584 <HAL_I2C_Mem_Read+0x1e4>)
      hi2c->XferSize = hi2c->XferCount;
 800d432:	b29b      	uxth	r3, r3
 800d434:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800d436:	b2d9      	uxtb	r1, r3
 800d438:	6853      	ldr	r3, [r2, #4]
 800d43a:	4018      	ands	r0, r3
 800d43c:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800d440:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d444:	4303      	orrs	r3, r0
 800d446:	f043 4302 	orr.w	r3, r3, #2181038080	; 0x82000000
 800d44a:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 800d44e:	6053      	str	r3, [r2, #4]
 800d450:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d454:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800d590 <HAL_I2C_Mem_Read+0x1f0>
 800d458:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800d594 <HAL_I2C_Mem_Read+0x1f4>
 800d45c:	b2bf      	uxth	r7, r7
 800d45e:	e001      	b.n	800d464 <HAL_I2C_Mem_Read+0xc4>
    if (Timeout != HAL_MAX_DELAY)
 800d460:	1c63      	adds	r3, r4, #1
 800d462:	d125      	bne.n	800d4b0 <HAL_I2C_Mem_Read+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d464:	6993      	ldr	r3, [r2, #24]
 800d466:	0758      	lsls	r0, r3, #29
 800d468:	d5fa      	bpl.n	800d460 <HAL_I2C_Mem_Read+0xc0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d46a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d46c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d46e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800d470:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800d472:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      hi2c->XferCount--;
 800d474:	3b01      	subs	r3, #1
 800d476:	b29b      	uxth	r3, r3
 800d478:	856b      	strh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800d47a:	3201      	adds	r2, #1
      hi2c->XferSize--;
 800d47c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->pBuffPtr++;
 800d47e:	626a      	str	r2, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d480:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800d482:	3b01      	subs	r3, #1
 800d484:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d486:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d488:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d48a:	b102      	cbz	r2, 800d48e <HAL_I2C_Mem_Read+0xee>
 800d48c:	b373      	cbz	r3, 800d4ec <HAL_I2C_Mem_Read+0x14c>
    } while (hi2c->XferCount > 0U);
 800d48e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d490:	b29b      	uxth	r3, r3
 800d492:	2b00      	cmp	r3, #0
 800d494:	d05f      	beq.n	800d556 <HAL_I2C_Mem_Read+0x1b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d496:	682a      	ldr	r2, [r5, #0]
 800d498:	e7e4      	b.n	800d464 <HAL_I2C_Mem_Read+0xc4>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d49a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d49e:	646b      	str	r3, [r5, #68]	; 0x44
      return  HAL_ERROR;
 800d4a0:	2001      	movs	r0, #1
}
 800d4a2:	b003      	add	sp, #12
 800d4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800d4a8:	2002      	movs	r0, #2
}
 800d4aa:	b003      	add	sp, #12
 800d4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4b0:	f7ff fa0a 	bl	800c8c8 <HAL_GetTick>
 800d4b4:	1b80      	subs	r0, r0, r6
 800d4b6:	4284      	cmp	r4, r0
 800d4b8:	d301      	bcc.n	800d4be <HAL_I2C_Mem_Read+0x11e>
 800d4ba:	2c00      	cmp	r4, #0
 800d4bc:	d1eb      	bne.n	800d496 <HAL_I2C_Mem_Read+0xf6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4be:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4c0:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4c2:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800d4c6:	2120      	movs	r1, #32
          return HAL_ERROR;
 800d4c8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d4ca:	646b      	str	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800d4cc:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800d4d0:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d4d4:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800d4d8:	b003      	add	sp, #12
 800d4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4de:	f7ff f9f3 	bl	800c8c8 <HAL_GetTick>
 800d4e2:	1b80      	subs	r0, r0, r6
 800d4e4:	4284      	cmp	r4, r0
 800d4e6:	d3ea      	bcc.n	800d4be <HAL_I2C_Mem_Read+0x11e>
 800d4e8:	2c00      	cmp	r4, #0
 800d4ea:	d0e8      	beq.n	800d4be <HAL_I2C_Mem_Read+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d4ec:	682a      	ldr	r2, [r5, #0]
 800d4ee:	e001      	b.n	800d4f4 <HAL_I2C_Mem_Read+0x154>
    if (Timeout != HAL_MAX_DELAY)
 800d4f0:	1c61      	adds	r1, r4, #1
 800d4f2:	d1f4      	bne.n	800d4de <HAL_I2C_Mem_Read+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d4f4:	6993      	ldr	r3, [r2, #24]
 800d4f6:	061b      	lsls	r3, r3, #24
 800d4f8:	d5fa      	bpl.n	800d4f0 <HAL_I2C_Mem_Read+0x150>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d4fa:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	2bff      	cmp	r3, #255	; 0xff
 800d500:	d917      	bls.n	800d532 <HAL_I2C_Mem_Read+0x192>
  MODIFY_REG(hi2c->Instance->CR2,
 800d502:	6853      	ldr	r3, [r2, #4]
 800d504:	ea03 0308 	and.w	r3, r3, r8
 800d508:	433b      	orrs	r3, r7
 800d50a:	ea43 0309 	orr.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d50e:	21ff      	movs	r1, #255	; 0xff
 800d510:	8529      	strh	r1, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800d512:	6053      	str	r3, [r2, #4]
}
 800d514:	e7bb      	b.n	800d48e <HAL_I2C_Mem_Read+0xee>
  MODIFY_REG(hi2c->Instance->CR2,
 800d516:	682a      	ldr	r2, [r5, #0]
 800d518:	491a      	ldr	r1, [pc, #104]	; (800d584 <HAL_I2C_Mem_Read+0x1e4>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d51a:	23ff      	movs	r3, #255	; 0xff
 800d51c:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800d51e:	6853      	ldr	r3, [r2, #4]
 800d520:	f3c7 0009 	ubfx	r0, r7, #0, #10
 800d524:	400b      	ands	r3, r1
 800d526:	4918      	ldr	r1, [pc, #96]	; (800d588 <HAL_I2C_Mem_Read+0x1e8>)
 800d528:	4303      	orrs	r3, r0
 800d52a:	4319      	orrs	r1, r3
 800d52c:	6051      	str	r1, [r2, #4]
 800d52e:	4607      	mov	r7, r0
}
 800d530:	e790      	b.n	800d454 <HAL_I2C_Mem_Read+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 800d532:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d534:	b29b      	uxth	r3, r3
 800d536:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800d538:	b2d9      	uxtb	r1, r3
 800d53a:	6853      	ldr	r3, [r2, #4]
 800d53c:	ea03 0308 	and.w	r3, r3, r8
 800d540:	433b      	orrs	r3, r7
 800d542:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d546:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d54a:	6053      	str	r3, [r2, #4]
}
 800d54c:	e79f      	b.n	800d48e <HAL_I2C_Mem_Read+0xee>
      __HAL_UNLOCK(hi2c);
 800d54e:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
      return HAL_ERROR;
 800d552:	2001      	movs	r0, #1
 800d554:	e7a5      	b.n	800d4a2 <HAL_I2C_Mem_Read+0x102>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d556:	4632      	mov	r2, r6
 800d558:	4621      	mov	r1, r4
 800d55a:	4628      	mov	r0, r5
 800d55c:	f7ff fd70 	bl	800d040 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d560:	b968      	cbnz	r0, 800d57e <HAL_I2C_Mem_Read+0x1de>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d562:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 800d564:	4c09      	ldr	r4, [pc, #36]	; (800d58c <HAL_I2C_Mem_Read+0x1ec>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d566:	2120      	movs	r1, #32
 800d568:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	4022      	ands	r2, r4
 800d56e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d570:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d574:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d578:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800d57c:	e791      	b.n	800d4a2 <HAL_I2C_Mem_Read+0x102>
      return HAL_ERROR;
 800d57e:	2001      	movs	r0, #1
 800d580:	e78f      	b.n	800d4a2 <HAL_I2C_Mem_Read+0x102>
 800d582:	bf00      	nop
 800d584:	fc009800 	.word	0xfc009800
 800d588:	81ff2400 	.word	0x81ff2400
 800d58c:	fe00e800 	.word	0xfe00e800
 800d590:	fc009c00 	.word	0xfc009c00
 800d594:	01ff0000 	.word	0x01ff0000

0800d598 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d598:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800d59c:	2a20      	cmp	r2, #32
 800d59e:	d123      	bne.n	800d5e8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800d5a0:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d5a4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800d5a8:	2a01      	cmp	r2, #1
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	d01c      	beq.n	800d5e8 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d5ae:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d5b0:	2024      	movs	r0, #36	; 0x24
{
 800d5b2:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d5b4:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800d5b8:	6810      	ldr	r0, [r2, #0]
 800d5ba:	f020 0001 	bic.w	r0, r0, #1
 800d5be:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d5c0:	6810      	ldr	r0, [r2, #0]
 800d5c2:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 800d5c6:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d5c8:	6810      	ldr	r0, [r2, #0]
 800d5ca:	4301      	orrs	r1, r0
 800d5cc:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d5ce:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d5d0:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 800d5d4:	f041 0101 	orr.w	r1, r1, #1
 800d5d8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800d5da:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d5de:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 800d5e2:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 800d5e4:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800d5e8:	2002      	movs	r0, #2
}
 800d5ea:	4770      	bx	lr

0800d5ec <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5ec:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800d5f0:	2a20      	cmp	r2, #32
 800d5f2:	d122      	bne.n	800d63a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 800d5f4:	b500      	push	{lr}
 800d5f6:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d5fa:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800d5fe:	2a01      	cmp	r2, #1
 800d600:	4603      	mov	r3, r0
 800d602:	d01c      	beq.n	800d63e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d604:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d606:	2024      	movs	r0, #36	; 0x24
 800d608:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800d60c:	6810      	ldr	r0, [r2, #0]
 800d60e:	f020 0001 	bic.w	r0, r0, #1
 800d612:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d614:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d616:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d61a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d61e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d620:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d622:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 800d626:	f041 0101 	orr.w	r1, r1, #1
 800d62a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800d62c:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d630:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 800d634:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 800d636:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800d63a:	2002      	movs	r0, #2
}
 800d63c:	4770      	bx	lr
    return HAL_BUSY;
 800d63e:	2002      	movs	r0, #2
}
 800d640:	f85d fb04 	ldr.w	pc, [sp], #4

0800d644 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d644:	2800      	cmp	r0, #0
 800d646:	d05e      	beq.n	800d706 <HAL_PCD_Init+0xc2>
{
 800d648:	b5f0      	push	{r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d64a:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
{
 800d64e:	b087      	sub	sp, #28
 800d650:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d652:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d656:	2b00      	cmp	r3, #0
 800d658:	d050      	beq.n	800d6fc <HAL_PCD_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d65a:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d65c:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 800d65e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800d662:	f003 fcf3 	bl	801104c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d666:	6865      	ldr	r5, [r4, #4]
 800d668:	b35d      	cbz	r5, 800d6c2 <HAL_PCD_Init+0x7e>
 800d66a:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d66c:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d670:	4618      	mov	r0, r3
    hpcd->IN_ep[i].is_in = 1U;
 800d672:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d676:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d67a:	f103 0c01 	add.w	ip, r3, #1
    hpcd->IN_ep[i].num = i;
 800d67e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d682:	86d3      	strh	r3, [r2, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d684:	fa5f f38c 	uxtb.w	r3, ip
 800d688:	42ab      	cmp	r3, r5
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d68a:	e9c2 000e 	strd	r0, r0, [r2, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 800d68e:	f882 e029 	strb.w	lr, [r2, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d692:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 800d696:	6410      	str	r0, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d698:	d3eb      	bcc.n	800d672 <HAL_PCD_Init+0x2e>
 800d69a:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d69c:	4611      	mov	r1, r2
 800d69e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800d6a2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d6a6:	1c50      	adds	r0, r2, #1
    hpcd->OUT_ep[i].num = i;
 800d6a8:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d6ac:	b2c2      	uxtb	r2, r0
 800d6ae:	42aa      	cmp	r2, r5
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d6b0:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800d6b4:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d6b8:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d6bc:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d6c0:	d3ed      	bcc.n	800d69e <HAL_PCD_Init+0x5a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800d6c2:	4625      	mov	r5, r4
 800d6c4:	46ec      	mov	ip, sp
 800d6c6:	f855 7b10 	ldr.w	r7, [r5], #16
 800d6ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d6d0:	682b      	ldr	r3, [r5, #0]
 800d6d2:	f8cc 3000 	str.w	r3, [ip]
 800d6d6:	f104 0e04 	add.w	lr, r4, #4
 800d6da:	e89e 000e 	ldmia.w	lr, {r1, r2, r3}
 800d6de:	4638      	mov	r0, r7
 800d6e0:	f003 fcbe 	bl	8011060 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800d6e4:	69e3      	ldr	r3, [r4, #28]
  hpcd->State = HAL_PCD_STATE_READY;
 800d6e6:	2201      	movs	r2, #1
  hpcd->USB_Address = 0U;
 800d6e8:	2600      	movs	r6, #0
  if (hpcd->Init.lpm_enable == 1U)
 800d6ea:	4293      	cmp	r3, r2
  hpcd->USB_Address = 0U;
 800d6ec:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800d6f0:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
  if (hpcd->Init.lpm_enable == 1U)
 800d6f4:	d009      	beq.n	800d70a <HAL_PCD_Init+0xc6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 800d6f6:	4630      	mov	r0, r6
}
 800d6f8:	b007      	add	sp, #28
 800d6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800d6fc:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 800d700:	f7f5 fc9e 	bl	8003040 <HAL_PCD_MspInit>
 800d704:	e7a9      	b.n	800d65a <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 800d706:	2001      	movs	r0, #1
}
 800d708:	4770      	bx	lr
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800d70a:	4620      	mov	r0, r4
 800d70c:	f000 ff12 	bl	800e534 <HAL_PCDEx_ActivateLPM>
  return HAL_OK;
 800d710:	4630      	mov	r0, r6
}
 800d712:	b007      	add	sp, #28
 800d714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d716:	bf00      	nop

0800d718 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 800d718:	b538      	push	{r3, r4, r5, lr}
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d71a:	b140      	cbz	r0, 800d72e <HAL_PCD_DeInit+0x16>
  {
    return HAL_ERROR;
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d71c:	4604      	mov	r4, r0
 800d71e:	2303      	movs	r3, #3

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 800d720:	6800      	ldr	r0, [r0, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 800d722:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 800d726:	f004 fa89 	bl	8011c3c <USB_StopDevice>
 800d72a:	4605      	mov	r5, r0
 800d72c:	b110      	cbz	r0, 800d734 <HAL_PCD_DeInit+0x1c>
    return HAL_ERROR;
 800d72e:	2501      	movs	r5, #1
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;

  return HAL_OK;
}
 800d730:	4628      	mov	r0, r5
 800d732:	bd38      	pop	{r3, r4, r5, pc}
  HAL_PCD_MspDeInit(hpcd);
 800d734:	4620      	mov	r0, r4
 800d736:	f7f5 fca3 	bl	8003080 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET;
 800d73a:	f884 52a9 	strb.w	r5, [r4, #681]	; 0x2a9
}
 800d73e:	4628      	mov	r0, r5
 800d740:	bd38      	pop	{r3, r4, r5, pc}
 800d742:	bf00      	nop

0800d744 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800d744:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d00e      	beq.n	800d76a <HAL_PCD_Start+0x26>
{
 800d74c:	b510      	push	{r4, lr}
 800d74e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800d750:	2301      	movs	r3, #1
  __HAL_PCD_ENABLE(hpcd);
 800d752:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800d754:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800d758:	f003 fc6e 	bl	8011038 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800d75c:	6820      	ldr	r0, [r4, #0]
 800d75e:	f004 fa7f 	bl	8011c60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800d762:	2000      	movs	r0, #0
 800d764:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800d768:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800d76a:	2002      	movs	r0, #2
}
 800d76c:	4770      	bx	lr
 800d76e:	bf00      	nop

0800d770 <HAL_PCD_Stop>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800d770:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800d774:	2b01      	cmp	r3, #1
 800d776:	d00e      	beq.n	800d796 <HAL_PCD_Stop+0x26>
{
 800d778:	b510      	push	{r4, lr}
 800d77a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800d77c:	2301      	movs	r3, #1
  __HAL_PCD_DISABLE(hpcd);
 800d77e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800d780:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 800d784:	f003 fc62 	bl	801104c <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800d788:	6820      	ldr	r0, [r4, #0]
 800d78a:	f004 fa75 	bl	8011c78 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 800d78e:	2000      	movs	r0, #0
 800d790:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800d794:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800d796:	2002      	movs	r0, #2
}
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop

0800d79c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800d79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	b083      	sub	sp, #12
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800d7a4:	6800      	ldr	r0, [r0, #0]
 800d7a6:	f004 fa71 	bl	8011c8c <USB_ReadInterrupts>
 800d7aa:	0400      	lsls	r0, r0, #16
 800d7ac:	f100 80e6 	bmi.w	800d97c <HAL_PCD_IRQHandler+0x1e0>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800d7b0:	f8d4 b000 	ldr.w	fp, [r4]
 800d7b4:	4658      	mov	r0, fp
 800d7b6:	f004 fa69 	bl	8011c8c <USB_ReadInterrupts>
 800d7ba:	0546      	lsls	r6, r0, #21
 800d7bc:	f100 80c0 	bmi.w	800d940 <HAL_PCD_IRQHandler+0x1a4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800d7c0:	6820      	ldr	r0, [r4, #0]
 800d7c2:	f004 fa63 	bl	8011c8c <USB_ReadInterrupts>
 800d7c6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800d7ca:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800d7cc:	d007      	beq.n	800d7de <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800d7ce:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800d7d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7d6:	041b      	lsls	r3, r3, #16
 800d7d8:	0c1b      	lsrs	r3, r3, #16
 800d7da:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800d7de:	f004 fa55 	bl	8011c8c <USB_ReadInterrupts>
 800d7e2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800d7e6:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800d7e8:	d007      	beq.n	800d7fa <HAL_PCD_IRQHandler+0x5e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800d7ea:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800d7ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d7f2:	041b      	lsls	r3, r3, #16
 800d7f4:	0c1b      	lsrs	r3, r3, #16
 800d7f6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800d7fa:	f004 fa47 	bl	8011c8c <USB_ReadInterrupts>
 800d7fe:	04c5      	lsls	r5, r0, #19
 800d800:	d448      	bmi.n	800d894 <HAL_PCD_IRQHandler+0xf8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800d802:	6820      	ldr	r0, [r4, #0]
 800d804:	f004 fa42 	bl	8011c8c <USB_ReadInterrupts>
 800d808:	0500      	lsls	r0, r0, #20
 800d80a:	d469      	bmi.n	800d8e0 <HAL_PCD_IRQHandler+0x144>
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800d80c:	6820      	ldr	r0, [r4, #0]
 800d80e:	f004 fa3d 	bl	8011c8c <USB_ReadInterrupts>
 800d812:	0601      	lsls	r1, r0, #24
 800d814:	d528      	bpl.n	800d868 <HAL_PCD_IRQHandler+0xcc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800d816:	6822      	ldr	r2, [r4, #0]
 800d818:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800d81c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d820:	041b      	lsls	r3, r3, #16
 800d822:	0c1b      	lsrs	r3, r3, #16
 800d824:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800d828:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d172      	bne.n	800d916 <HAL_PCD_IRQHandler+0x17a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800d830:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800d834:	b29b      	uxth	r3, r3
 800d836:	f043 0304 	orr.w	r3, r3, #4
 800d83a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800d83e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800d842:	b29b      	uxth	r3, r3
 800d844:	f043 0308 	orr.w	r3, r3, #8

      hpcd->LPM_State = LPM_L1;
 800d848:	2101      	movs	r1, #1
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800d84a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 800d84e:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800d852:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 800d856:	f3c3 038d 	ubfx	r3, r3, #2, #14
 800d85a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800d85e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800d862:	4620      	mov	r0, r4
 800d864:	f7f5 fd5c 	bl	8003320 <HAL_PCDEx_LPM_Callback>
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800d868:	6820      	ldr	r0, [r4, #0]
 800d86a:	f004 fa0f 	bl	8011c8c <USB_ReadInterrupts>
 800d86e:	0582      	lsls	r2, r0, #22
 800d870:	d459      	bmi.n	800d926 <HAL_PCD_IRQHandler+0x18a>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800d872:	6820      	ldr	r0, [r4, #0]
 800d874:	f004 fa0a 	bl	8011c8c <USB_ReadInterrupts>
 800d878:	05c3      	lsls	r3, r0, #23
 800d87a:	d508      	bpl.n	800d88e <HAL_PCD_IRQHandler+0xf2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800d87c:	6822      	ldr	r2, [r4, #0]
 800d87e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800d882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d886:	041b      	lsls	r3, r3, #16
 800d888:	0c1b      	lsrs	r3, r3, #16
 800d88a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 800d88e:	b003      	add	sp, #12
 800d890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800d894:	6822      	ldr	r2, [r4, #0]
 800d896:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800d89a:	f023 0304 	bic.w	r3, r3, #4
 800d89e:	041b      	lsls	r3, r3, #16
 800d8a0:	0c1b      	lsrs	r3, r3, #16
 800d8a2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800d8a6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800d8aa:	f023 0308 	bic.w	r3, r3, #8
 800d8ae:	041b      	lsls	r3, r3, #16
 800d8b0:	0c1b      	lsrs	r3, r3, #16
 800d8b2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 800d8b6:	f894 32e0 	ldrb.w	r3, [r4, #736]	; 0x2e0
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	f000 8373 	beq.w	800dfa6 <HAL_PCD_IRQHandler+0x80a>
    HAL_PCD_ResumeCallback(hpcd);
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f7f5 fc2b 	bl	800311c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800d8c6:	6820      	ldr	r0, [r4, #0]
 800d8c8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800d8cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8d0:	041b      	lsls	r3, r3, #16
 800d8d2:	0c1b      	lsrs	r3, r3, #16
 800d8d4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800d8d8:	f004 f9d8 	bl	8011c8c <USB_ReadInterrupts>
 800d8dc:	0500      	lsls	r0, r0, #20
 800d8de:	d595      	bpl.n	800d80c <HAL_PCD_IRQHandler+0x70>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800d8e0:	6822      	ldr	r2, [r4, #0]
 800d8e2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	f043 0308 	orr.w	r3, r3, #8
 800d8ec:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800d8f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800d8f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d8f8:	041b      	lsls	r3, r3, #16
 800d8fa:	0c1b      	lsrs	r3, r3, #16
 800d8fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800d900:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800d904:	b29b      	uxth	r3, r3
 800d906:	f043 0304 	orr.w	r3, r3, #4
    HAL_PCD_SuspendCallback(hpcd);
 800d90a:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800d90c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800d910:	f7f5 fbf4 	bl	80030fc <HAL_PCD_SuspendCallback>
 800d914:	e77a      	b.n	800d80c <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 800d916:	4620      	mov	r0, r4
 800d918:	f7f5 fbf0 	bl	80030fc <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800d91c:	6820      	ldr	r0, [r4, #0]
 800d91e:	f004 f9b5 	bl	8011c8c <USB_ReadInterrupts>
 800d922:	0582      	lsls	r2, r0, #22
 800d924:	d5a5      	bpl.n	800d872 <HAL_PCD_IRQHandler+0xd6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800d926:	6822      	ldr	r2, [r4, #0]
 800d928:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800d92c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d930:	041b      	lsls	r3, r3, #16
 800d932:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_SOFCallback(hpcd);
 800d934:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800d936:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800d93a:	f7f5 fbcd 	bl	80030d8 <HAL_PCD_SOFCallback>
 800d93e:	e798      	b.n	800d872 <HAL_PCD_IRQHandler+0xd6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800d940:	6822      	ldr	r2, [r4, #0]
 800d942:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800d946:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d94a:	041b      	lsls	r3, r3, #16
 800d94c:	0c1b      	lsrs	r3, r3, #16
 800d94e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800d952:	4620      	mov	r0, r4
 800d954:	f7f5 fbc4 	bl	80030e0 <HAL_PCD_ResetCallback>
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800d958:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	f43f af2f 	beq.w	800d7c0 <HAL_PCD_IRQHandler+0x24>
  hpcd->USB_Address = address;
 800d962:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 800d964:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d966:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d968:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800d96c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d970:	4629      	mov	r1, r5
 800d972:	f004 f96f 	bl	8011c54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d976:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8

  return HAL_OK;
 800d97a:	e721      	b.n	800d7c0 <HAL_PCD_IRQHandler+0x24>
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d97c:	6820      	ldr	r0, [r4, #0]
 800d97e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800d982:	0419      	lsls	r1, r3, #16
 800d984:	4683      	mov	fp, r0
 800d986:	f57f af15 	bpl.w	800d7b4 <HAL_PCD_IRQHandler+0x18>
  {
    wIstr = hpcd->Instance->ISTR;
 800d98a:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 800d98e:	b2a9      	uxth	r1, r5

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 800d990:	f015 050f 	ands.w	r5, r5, #15
 800d994:	d117      	bne.n	800d9c6 <HAL_PCD_IRQHandler+0x22a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800d996:	f011 0110 	ands.w	r1, r1, #16
 800d99a:	f000 8167 	beq.w	800dc6c <HAL_PCD_IRQHandler+0x4d0>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d99e:	8801      	ldrh	r1, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800d9a0:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d9a4:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800d9a6:	f040 8192 	bne.w	800dcce <HAL_PCD_IRQHandler+0x532>
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d9aa:	041a      	lsls	r2, r3, #16
 800d9ac:	d453      	bmi.n	800da56 <HAL_PCD_IRQHandler+0x2ba>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d9ae:	4683      	mov	fp, r0
 800d9b0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800d9b4:	041f      	lsls	r7, r3, #16
 800d9b6:	f57f aefd 	bpl.w	800d7b4 <HAL_PCD_IRQHandler+0x18>
    wIstr = hpcd->Instance->ISTR;
 800d9ba:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 800d9be:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 800d9c0:	f015 050f 	ands.w	r5, r5, #15
 800d9c4:	d0e7      	beq.n	800d996 <HAL_PCD_IRQHandler+0x1fa>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800d9c6:	b22e      	sxth	r6, r5
 800d9c8:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d9cc:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800d9ce:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d9d0:	f100 8108 	bmi.w	800dbe4 <HAL_PCD_IRQHandler+0x448>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800d9d4:	063a      	lsls	r2, r7, #24
 800d9d6:	d5ea      	bpl.n	800d9ae <HAL_PCD_IRQHandler+0x212>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800d9d8:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800d9e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9ea:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800d9ee:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800d9f2:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800d9f6:	4683      	mov	fp, r0
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800d9f8:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d17d      	bne.n	800dafc <HAL_PCD_IRQHandler+0x360>
 800da00:	f417 7c80 	ands.w	ip, r7, #256	; 0x100
 800da04:	d17a      	bne.n	800dafc <HAL_PCD_IRQHandler+0x360>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800da06:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800da0a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800da0e:	f200 4202 	addw	r2, r0, #1026	; 0x402
 800da12:	fa12 f383 	uxtah	r3, r2, r3
 800da16:	f833 2031 	ldrh.w	r2, [r3, r1, lsl #3]

          if (ep->xfer_len > TxByteNbre)
 800da1a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800da1e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800da22:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800da26:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 800da28:	4296      	cmp	r6, r2
 800da2a:	f240 82d5 	bls.w	800dfd8 <HAL_PCD_IRQHandler+0x83c>
          {
            ep->xfer_len -= TxByteNbre;
 800da2e:	1ab6      	subs	r6, r6, r2
 800da30:	641e      	str	r6, [r3, #64]	; 0x40
          {
            ep->xfer_len = 0U;
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800da32:	2e00      	cmp	r6, #0
 800da34:	f000 82d2 	beq.w	800dfdc <HAL_PCD_IRQHandler+0x840>
        ep = &hpcd->IN_ep[epindex];
 800da38:	3501      	adds	r5, #1
 800da3a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
            ep->xfer_count += TxByteNbre;
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800da3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
            ep->xfer_buff += TxByteNbre;
 800da42:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800da44:	4415      	add	r5, r2
 800da46:	63dd      	str	r5, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 800da48:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800da4a:	442a      	add	r2, r5
 800da4c:	645a      	str	r2, [r3, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800da4e:	f003 fd5d 	bl	801150c <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800da52:	6820      	ldr	r0, [r4, #0]
 800da54:	e7ab      	b.n	800d9ae <HAL_PCD_IRQHandler+0x212>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800da56:	8802      	ldrh	r2, [r0, #0]
 800da58:	f640 738f 	movw	r3, #3983	; 0xf8f
 800da5c:	4013      	ands	r3, r2
 800da5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da62:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800da64:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800da68:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 800da6c:	f240 4306 	movw	r3, #1030	; 0x406
 800da70:	fa10 f282 	uxtah	r2, r0, r2
 800da74:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800da78:	5ad3      	ldrh	r3, [r2, r3]
 800da7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da7e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800da82:	b193      	cbz	r3, 800daaa <HAL_PCD_IRQHandler+0x30e>
 800da84:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 800da88:	b179      	cbz	r1, 800daaa <HAL_PCD_IRQHandler+0x30e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800da8a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800da8e:	f004 f911 	bl	8011cb4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800da92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da96:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 800da9a:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800da9c:	4620      	mov	r0, r4
 800da9e:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800daa0:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800daa4:	f7f5 fb04 	bl	80030b0 <HAL_PCD_DataOutStageCallback>
 800daa8:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800daaa:	8803      	ldrh	r3, [r0, #0]
 800daac:	051b      	lsls	r3, r3, #20
 800daae:	4683      	mov	fp, r0
 800dab0:	f53f af7e 	bmi.w	800d9b0 <HAL_PCD_IRQHandler+0x214>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800dab4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800dab8:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	f200 4106 	addw	r1, r0, #1030	; 0x406
 800dac2:	2a00      	cmp	r2, #0
 800dac4:	f040 82b3 	bne.w	800e02e <HAL_PCD_IRQHandler+0x892>
 800dac8:	5aca      	ldrh	r2, [r1, r3]
 800daca:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800dace:	0412      	lsls	r2, r2, #16
 800dad0:	0c12      	lsrs	r2, r2, #16
 800dad2:	52ca      	strh	r2, [r1, r3]
 800dad4:	5aca      	ldrh	r2, [r1, r3]
 800dad6:	b292      	uxth	r2, r2
 800dad8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dadc:	52ca      	strh	r2, [r1, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800dade:	8803      	ldrh	r3, [r0, #0]
 800dae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dae8:	041b      	lsls	r3, r3, #16
 800daea:	0c1b      	lsrs	r3, r3, #16
 800daec:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800daf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800daf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daf8:	8003      	strh	r3, [r0, #0]
 800dafa:	e759      	b.n	800d9b0 <HAL_PCD_IRQHandler+0x214>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800dafc:	f017 0a40 	ands.w	sl, r7, #64	; 0x40
 800db00:	f000 813c 	beq.w	800dd7c <HAL_PCD_IRQHandler+0x5e0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800db04:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
 800db08:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800db0c:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 800db10:	fa19 f383 	uxtah	r3, r9, r3
 800db14:	f200 4e02 	addw	lr, r0, #1026	; 0x402

    if (ep->xfer_len > TxByteNbre)
 800db18:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800db1c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800db20:	f833 300e 	ldrh.w	r3, [r3, lr]
    if (ep->xfer_len > TxByteNbre)
 800db24:	6c11      	ldr	r1, [r2, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800db26:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 800db2a:	4299      	cmp	r1, r3
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800db2c:	fa0f fc8a 	sxth.w	ip, sl
    if (ep->xfer_len > TxByteNbre)
 800db30:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800db34:	f240 81eb 	bls.w	800df0e <HAL_PCD_IRQHandler+0x772>
    {
      ep->xfer_len -= TxByteNbre;
 800db38:	1ac9      	subs	r1, r1, r3
 800db3a:	6411      	str	r1, [r2, #64]	; 0x40
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800db3c:	2900      	cmp	r1, #0
 800db3e:	f000 81e8 	beq.w	800df12 <HAL_PCD_IRQHandler+0x776>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800db42:	047f      	lsls	r7, r7, #17
 800db44:	d50d      	bpl.n	800db62 <HAL_PCD_IRQHandler+0x3c6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800db46:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800db4a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800db4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800db52:	0412      	lsls	r2, r2, #16
 800db54:	0c12      	lsrs	r2, r2, #16
 800db56:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800db5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800db5e:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800db62:	eb08 0705 	add.w	r7, r8, r5
 800db66:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 800db6a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800db6e:	2a01      	cmp	r2, #1
 800db70:	f040 8165 	bne.w	800de3e <HAL_PCD_IRQHandler+0x6a2>
      {
        ep->xfer_buff += TxByteNbre;
 800db74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800db76:	f8d7 a038 	ldr.w	sl, [r7, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800db7a:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxByteNbre;
 800db7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800db7e:	63f9      	str	r1, [r7, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800db80:	441a      	add	r2, r3
 800db82:	647a      	str	r2, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800db84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db86:	4552      	cmp	r2, sl
 800db88:	f0c0 82df 	bcc.w	800e14a <HAL_PCD_IRQHandler+0x9ae>
        {
          len = ep->maxpacket;
          ep->xfer_len_db -= len;
 800db8c:	eba2 020a 	sub.w	r2, r2, sl
 800db90:	64ba      	str	r2, [r7, #72]	; 0x48
          ep->xfer_len_db = 0U;
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800db92:	fa1f f38a 	uxth.w	r3, sl
 800db96:	f896 7029 	ldrb.w	r7, [r6, #41]	; 0x29
 800db9a:	2f00      	cmp	r7, #0
 800db9c:	f040 82cb 	bne.w	800e136 <HAL_PCD_IRQHandler+0x99a>
 800dba0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800dba4:	fa1e fe82 	uxtah	lr, lr, r2
 800dba8:	44f1      	add	r9, lr
 800dbaa:	f1ba 0f00 	cmp.w	sl, #0
 800dbae:	f040 831d 	bne.w	800e1ec <HAL_PCD_IRQHandler+0xa50>
 800dbb2:	f83e 203c 	ldrh.w	r2, [lr, ip, lsl #3]
 800dbb6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800dbba:	0412      	lsls	r2, r2, #16
 800dbbc:	0c12      	lsrs	r2, r2, #16
 800dbbe:	f82e 203c 	strh.w	r2, [lr, ip, lsl #3]
 800dbc2:	f83e 203c 	ldrh.w	r2, [lr, ip, lsl #3]
 800dbc6:	b292      	uxth	r2, r2
 800dbc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dbcc:	f82e 203c 	strh.w	r2, [lr, ip, lsl #3]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800dbd0:	eb08 0205 	add.w	r2, r8, r5
 800dbd4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800dbd8:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800dbda:	f004 f85b 	bl	8011c94 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800dbde:	6820      	ldr	r0, [r4, #0]
 800dbe0:	4683      	mov	fp, r0
 800dbe2:	e12c      	b.n	800de3e <HAL_PCD_IRQHandler+0x6a2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800dbe4:	f830 2026 	ldrh.w	r2, [r0, r6, lsl #2]
 800dbe8:	f640 738f 	movw	r3, #3983	; 0xf8f
 800dbec:	4013      	ands	r3, r2
 800dbee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
        if (ep->doublebuffer == 0U)
 800dbf2:	eb05 0185 	add.w	r1, r5, r5, lsl #2
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800dbf6:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800dbfa:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800dbfe:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800dc02:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f040 8084 	bne.w	800dd14 <HAL_PCD_IRQHandler+0x578>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800dc0c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800dc10:	f200 4206 	addw	r2, r0, #1030	; 0x406
 800dc14:	fa12 f383 	uxtah	r3, r2, r3
 800dc18:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800dc1c:	f833 9032 	ldrh.w	r9, [r3, r2, lsl #3]
 800dc20:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 800dc24:	f1b9 0f00 	cmp.w	r9, #0
 800dc28:	f040 81c4 	bne.w	800dfb4 <HAL_PCD_IRQHandler+0x818>
        ep->xfer_count += count;
 800dc2c:	eb08 0205 	add.w	r2, r8, r5
 800dc30:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800dc34:	f8d2 3184 	ldr.w	r3, [r2, #388]	; 0x184
 800dc38:	444b      	add	r3, r9
 800dc3a:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
        ep->xfer_buff += count;
 800dc3e:	f8d2 317c 	ldr.w	r3, [r2, #380]	; 0x17c
 800dc42:	444b      	add	r3, r9
 800dc44:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800dc48:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
 800dc4c:	b123      	cbz	r3, 800dc58 <HAL_PCD_IRQHandler+0x4bc>
 800dc4e:	f8d2 3178 	ldr.w	r3, [r2, #376]	; 0x178
 800dc52:	454b      	cmp	r3, r9
 800dc54:	f240 81b6 	bls.w	800dfc4 <HAL_PCD_IRQHandler+0x828>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800dc58:	44a8      	add	r8, r5
 800dc5a:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f898 1168 	ldrb.w	r1, [r8, #360]	; 0x168
 800dc64:	f7f5 fa24 	bl	80030b0 <HAL_PCD_DataOutStageCallback>
 800dc68:	6820      	ldr	r0, [r4, #0]
 800dc6a:	e6b3      	b.n	800d9d4 <HAL_PCD_IRQHandler+0x238>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800dc6c:	8803      	ldrh	r3, [r0, #0]
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800dc74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc7c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800dc7e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800dc82:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800dc86:	fa10 f083 	uxtah	r0, r0, r3
 800dc8a:	f240 4302 	movw	r3, #1026	; 0x402
 800dc8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        ep->xfer_buff += ep->xfer_count;
 800dc92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800dc94:	5ac3      	ldrh	r3, [r0, r3]
 800dc96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc9a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800dc9c:	4413      	add	r3, r2
 800dc9e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800dca0:	4620      	mov	r0, r4
 800dca2:	f7f5 fa0f 	bl	80030c4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800dca6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	f43f aed1 	beq.w	800da52 <HAL_PCD_IRQHandler+0x2b6>
 800dcb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f47f aecd 	bne.w	800da52 <HAL_PCD_IRQHandler+0x2b6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800dcb8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800dcbc:	6820      	ldr	r0, [r4, #0]
 800dcbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dcc2:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 800dcc6:	4683      	mov	fp, r0
          hpcd->USB_Address = 0U;
 800dcc8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800dccc:	e670      	b.n	800d9b0 <HAL_PCD_IRQHandler+0x214>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800dcce:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800dcd2:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 800dcd6:	f240 4306 	movw	r3, #1030	; 0x406
 800dcda:	fa10 f282 	uxtah	r2, r0, r2
 800dcde:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800dce2:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800dce6:	5ad3      	ldrh	r3, [r2, r3]
 800dce8:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800dcec:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800dcf0:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800dcf4:	f003 ffde 	bl	8011cb4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800dcf8:	6822      	ldr	r2, [r4, #0]
 800dcfa:	8811      	ldrh	r1, [r2, #0]
 800dcfc:	f640 738f 	movw	r3, #3983	; 0xf8f
 800dd00:	400b      	ands	r3, r1
 800dd02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
          HAL_PCD_SetupStageCallback(hpcd);
 800dd06:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800dd08:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800dd0a:	f7f5 f9cb 	bl	80030a4 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800dd0e:	6820      	ldr	r0, [r4, #0]
 800dd10:	4683      	mov	fp, r0
 800dd12:	e64d      	b.n	800d9b0 <HAL_PCD_IRQHandler+0x214>
          if (ep->type == EP_TYPE_BULK)
 800dd14:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 800dd18:	2b02      	cmp	r3, #2
 800dd1a:	f000 8192 	beq.w	800e042 <HAL_PCD_IRQHandler+0x8a6>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800dd1e:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800dd22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800dd26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd2e:	041b      	lsls	r3, r3, #16
 800dd30:	0c1b      	lsrs	r3, r3, #16
 800dd32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dd3a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800dd3e:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800dd42:	b213      	sxth	r3, r2
 800dd44:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 800dd48:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800dd4c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800dd50:	f000 8115 	beq.w	800df7e <HAL_PCD_IRQHandler+0x7e2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800dd54:	f200 4c02 	addw	ip, r0, #1026	; 0x402
 800dd58:	fa1c f383 	uxtah	r3, ip, r3
 800dd5c:	f833 9032 	ldrh.w	r9, [r3, r2, lsl #3]
 800dd60:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 800dd64:	f1b9 0f00 	cmp.w	r9, #0
 800dd68:	f43f af60 	beq.w	800dc2c <HAL_PCD_IRQHandler+0x490>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800dd6c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800dd70:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800dd74:	464b      	mov	r3, r9
 800dd76:	f003 ff9d 	bl	8011cb4 <USB_ReadPMA>
 800dd7a:	e757      	b.n	800dc2c <HAL_PCD_IRQHandler+0x490>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800dd7c:	f896 9028 	ldrb.w	r9, [r6, #40]	; 0x28
 800dd80:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800dd84:	f200 4e06 	addw	lr, r0, #1030	; 0x406
 800dd88:	fa1e f383 	uxtah	r3, lr, r3
 800dd8c:	fa0f fc89 	sxth.w	ip, r9
    if (ep->xfer_len >= TxByteNbre)
 800dd90:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800dd94:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800dd98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dd9c:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 800dda0:	9101      	str	r1, [sp, #4]
    if (ep->xfer_len >= TxByteNbre)
 800dda2:	6c11      	ldr	r1, [r2, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800dda4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 800dda8:	4299      	cmp	r1, r3
 800ddaa:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800ddae:	d258      	bcs.n	800de62 <HAL_PCD_IRQHandler+0x6c6>
 800ddb0:	f8c2 a040 	str.w	sl, [r2, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ddb4:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	f040 8113 	bne.w	800dfe4 <HAL_PCD_IRQHandler+0x848>
 800ddbe:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800ddc2:	f200 4302 	addw	r3, r0, #1026	; 0x402
 800ddc6:	fa13 f282 	uxtah	r2, r3, r2
 800ddca:	f832 303c 	ldrh.w	r3, [r2, ip, lsl #3]
 800ddce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ddd2:	041b      	lsls	r3, r3, #16
 800ddd4:	0c1b      	lsrs	r3, r3, #16
 800ddd6:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
 800ddda:	f832 303c 	ldrh.w	r3, [r2, ip, lsl #3]
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dde4:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800dde8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800ddec:	fa1e fe83 	uxtah	lr, lr, r3
 800ddf0:	f83e 303c 	ldrh.w	r3, [lr, ip, lsl #3]
 800ddf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ddf8:	041b      	lsls	r3, r3, #16
 800ddfa:	0c1b      	lsrs	r3, r3, #16
 800ddfc:	f82e 303c 	strh.w	r3, [lr, ip, lsl #3]
 800de00:	f83e 303c 	ldrh.w	r3, [lr, ip, lsl #3]
 800de04:	b29b      	uxth	r3, r3
 800de06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de0a:	f82e 303c 	strh.w	r3, [lr, ip, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800de0e:	4649      	mov	r1, r9
 800de10:	4620      	mov	r0, r4
 800de12:	f7f5 f957 	bl	80030c4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800de16:	0479      	lsls	r1, r7, #17
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800de18:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800de1a:	d476      	bmi.n	800df0a <HAL_PCD_IRQHandler+0x76e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800de1c:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800de20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800de24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de2c:	041b      	lsls	r3, r3, #16
 800de2e:	0c1b      	lsrs	r3, r3, #16
 800de30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800de34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800de3c:	4683      	mov	fp, r0
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800de3e:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800de42:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800de46:	b29b      	uxth	r3, r3
 800de48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de50:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800de54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de5c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  return HAL_OK;
 800de60:	e5a6      	b.n	800d9b0 <HAL_PCD_IRQHandler+0x214>
      ep->xfer_len -= TxByteNbre;
 800de62:	1ac9      	subs	r1, r1, r3
 800de64:	6411      	str	r1, [r2, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800de66:	2900      	cmp	r1, #0
 800de68:	d0a4      	beq.n	800ddb4 <HAL_PCD_IRQHandler+0x618>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800de6a:	047a      	lsls	r2, r7, #17
 800de6c:	d40d      	bmi.n	800de8a <HAL_PCD_IRQHandler+0x6ee>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800de6e:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800de72:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800de76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800de7a:	0412      	lsls	r2, r2, #16
 800de7c:	0c12      	lsrs	r2, r2, #16
 800de7e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800de82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800de86:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800de8a:	eb08 0705 	add.w	r7, r8, r5
 800de8e:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 800de92:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800de96:	2a01      	cmp	r2, #1
 800de98:	d1d1      	bne.n	800de3e <HAL_PCD_IRQHandler+0x6a2>
        ep->xfer_buff += TxByteNbre;
 800de9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800de9c:	f8d7 9038 	ldr.w	r9, [r7, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800dea0:	18d1      	adds	r1, r2, r3
        ep->xfer_count += TxByteNbre;
 800dea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800dea4:	63f9      	str	r1, [r7, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800dea6:	441a      	add	r2, r3
 800dea8:	647a      	str	r2, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800deaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800deac:	454a      	cmp	r2, r9
 800deae:	f0c0 815d 	bcc.w	800e16c <HAL_PCD_IRQHandler+0x9d0>
          ep->xfer_len_db -= len;
 800deb2:	eba2 0209 	sub.w	r2, r2, r9
 800deb6:	64ba      	str	r2, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800deb8:	fa1f f389 	uxth.w	r3, r9
 800debc:	f896 7029 	ldrb.w	r7, [r6, #41]	; 0x29
 800dec0:	2f00      	cmp	r7, #0
 800dec2:	f040 8149 	bne.w	800e158 <HAL_PCD_IRQHandler+0x9bc>
 800dec6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800deca:	9f01      	ldr	r7, [sp, #4]
 800decc:	fa1e fe82 	uxtah	lr, lr, r2
 800ded0:	4477      	add	r7, lr
 800ded2:	46ba      	mov	sl, r7
 800ded4:	f1b9 0f00 	cmp.w	r9, #0
 800ded8:	f040 81a7 	bne.w	800e22a <HAL_PCD_IRQHandler+0xa8e>
 800dedc:	f83e 203c 	ldrh.w	r2, [lr, ip, lsl #3]
 800dee0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800dee4:	0412      	lsls	r2, r2, #16
 800dee6:	0c12      	lsrs	r2, r2, #16
 800dee8:	f82e 203c 	strh.w	r2, [lr, ip, lsl #3]
 800deec:	f83e 203c 	ldrh.w	r2, [lr, ip, lsl #3]
 800def0:	b292      	uxth	r2, r2
 800def2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800def6:	f82e 203c 	strh.w	r2, [lr, ip, lsl #3]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800defa:	eb08 0205 	add.w	r2, r8, r5
 800defe:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800df02:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800df04:	f003 fec6 	bl	8011c94 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800df08:	6820      	ldr	r0, [r4, #0]
 800df0a:	4683      	mov	fp, r0
 800df0c:	e797      	b.n	800de3e <HAL_PCD_IRQHandler+0x6a2>
 800df0e:	2300      	movs	r3, #0
 800df10:	6413      	str	r3, [r2, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800df12:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 800df16:	2b00      	cmp	r3, #0
 800df18:	d177      	bne.n	800e00a <HAL_PCD_IRQHandler+0x86e>
 800df1a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800df1e:	fa1e fe83 	uxtah	lr, lr, r3
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800df22:	f200 4106 	addw	r1, r0, #1030	; 0x406
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800df26:	f83e 303c 	ldrh.w	r3, [lr, ip, lsl #3]
 800df2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800df2e:	041b      	lsls	r3, r3, #16
 800df30:	0c1b      	lsrs	r3, r3, #16
 800df32:	f82e 303c 	strh.w	r3, [lr, ip, lsl #3]
 800df36:	f83e 303c 	ldrh.w	r3, [lr, ip, lsl #3]
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df40:	f82e 303c 	strh.w	r3, [lr, ip, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800df44:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800df48:	fa11 f282 	uxtah	r2, r1, r2
 800df4c:	f832 303c 	ldrh.w	r3, [r2, ip, lsl #3]
 800df50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800df54:	041b      	lsls	r3, r3, #16
 800df56:	0c1b      	lsrs	r3, r3, #16
 800df58:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
 800df5c:	f832 303c 	ldrh.w	r3, [r2, ip, lsl #3]
 800df60:	b29b      	uxth	r3, r3
 800df62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df66:	f822 303c 	strh.w	r3, [r2, ip, lsl #3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800df6a:	4620      	mov	r0, r4
 800df6c:	4651      	mov	r1, sl
 800df6e:	f7f5 f8a9 	bl	80030c4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800df72:	047b      	lsls	r3, r7, #17
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800df74:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800df76:	f53f af51 	bmi.w	800de1c <HAL_PCD_IRQHandler+0x680>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800df7a:	4683      	mov	fp, r0
 800df7c:	e75f      	b.n	800de3e <HAL_PCD_IRQHandler+0x6a2>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800df7e:	f200 4c06 	addw	ip, r0, #1030	; 0x406
 800df82:	fa1c f383 	uxtah	r3, ip, r3
 800df86:	f833 9032 	ldrh.w	r9, [r3, r2, lsl #3]
 800df8a:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 800df8e:	f1b9 0f00 	cmp.w	r9, #0
 800df92:	f43f ae4b 	beq.w	800dc2c <HAL_PCD_IRQHandler+0x490>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800df96:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800df9a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800df9e:	464b      	mov	r3, r9
 800dfa0:	f003 fe88 	bl	8011cb4 <USB_ReadPMA>
 800dfa4:	e642      	b.n	800dc2c <HAL_PCD_IRQHandler+0x490>
      hpcd->LPM_State = LPM_L0;
 800dfa6:	2100      	movs	r1, #0
 800dfa8:	f884 12e0 	strb.w	r1, [r4, #736]	; 0x2e0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800dfac:	4620      	mov	r0, r4
 800dfae:	f7f5 f9b7 	bl	8003320 <HAL_PCDEx_LPM_Callback>
 800dfb2:	e485      	b.n	800d8c0 <HAL_PCD_IRQHandler+0x124>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800dfb4:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 800dfb8:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800dfbc:	464b      	mov	r3, r9
 800dfbe:	f003 fe79 	bl	8011cb4 <USB_ReadPMA>
 800dfc2:	e633      	b.n	800dc2c <HAL_PCD_IRQHandler+0x490>
        ep = &hpcd->OUT_ep[epindex];
 800dfc4:	2128      	movs	r1, #40	; 0x28
 800dfc6:	fb01 4105 	mla	r1, r1, r5, r4
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800dfca:	6820      	ldr	r0, [r4, #0]
 800dfcc:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800dfd0:	f003 fa9c 	bl	801150c <USB_EPStartXfer>
 800dfd4:	6820      	ldr	r0, [r4, #0]
 800dfd6:	e4fd      	b.n	800d9d4 <HAL_PCD_IRQHandler+0x238>
 800dfd8:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f7f5 f871 	bl	80030c4 <HAL_PCD_DataInStageCallback>
 800dfe2:	e536      	b.n	800da52 <HAL_PCD_IRQHandler+0x2b6>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	f47f af12 	bne.w	800de0e <HAL_PCD_IRQHandler+0x672>
 800dfea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800dfee:	f200 4202 	addw	r2, r0, #1026	; 0x402
 800dff2:	fa12 f383 	uxtah	r3, r2, r3
 800dff6:	2200      	movs	r2, #0
 800dff8:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800dffc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800e000:	fa1e fe83 	uxtah	lr, lr, r3
 800e004:	f82e 203c 	strh.w	r2, [lr, ip, lsl #3]
 800e008:	e701      	b.n	800de0e <HAL_PCD_IRQHandler+0x672>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d1ad      	bne.n	800df6a <HAL_PCD_IRQHandler+0x7ce>
 800e00e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800e012:	fa1e fe83 	uxtah	lr, lr, r3
 800e016:	2200      	movs	r2, #0
 800e018:	f82e 203c 	strh.w	r2, [lr, ip, lsl #3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e01c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800e020:	f200 4106 	addw	r1, r0, #1030	; 0x406
 800e024:	fa11 f383 	uxtah	r3, r1, r3
 800e028:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
 800e02c:	e79d      	b.n	800df6a <HAL_PCD_IRQHandler+0x7ce>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800e02e:	2a3e      	cmp	r2, #62	; 0x3e
 800e030:	d841      	bhi.n	800e0b6 <HAL_PCD_IRQHandler+0x91a>
 800e032:	0855      	lsrs	r5, r2, #1
 800e034:	07d7      	lsls	r7, r2, #31
 800e036:	bf48      	it	mi
 800e038:	3501      	addmi	r5, #1
 800e03a:	02aa      	lsls	r2, r5, #10
 800e03c:	b292      	uxth	r2, r2
 800e03e:	52ca      	strh	r2, [r1, r3]
 800e040:	e54d      	b.n	800dade <HAL_PCD_IRQHandler+0x342>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e042:	f417 4e80 	ands.w	lr, r7, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e046:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e04a:	d03f      	beq.n	800e0cc <HAL_PCD_IRQHandler+0x930>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e04c:	f200 4202 	addw	r2, r0, #1026	; 0x402
 800e050:	fa12 f383 	uxtah	r3, r2, r3
 800e054:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
    if (ep->xfer_len >= count)
 800e058:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e05c:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 800e060:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 800e064:	429a      	cmp	r2, r3
 800e066:	4699      	mov	r9, r3
 800e068:	f0c0 8086 	bcc.w	800e178 <HAL_PCD_IRQHandler+0x9dc>
      ep->xfer_len -= count;
 800e06c:	1ad2      	subs	r2, r2, r3
 800e06e:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800e072:	2a00      	cmp	r2, #0
 800e074:	f000 8083 	beq.w	800e17e <HAL_PCD_IRQHandler+0x9e2>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800e078:	067a      	lsls	r2, r7, #25
 800e07a:	d50f      	bpl.n	800e09c <HAL_PCD_IRQHandler+0x900>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800e07c:	fa0f fc8c 	sxth.w	ip, ip
 800e080:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800e084:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800e088:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e08c:	0412      	lsls	r2, r2, #16
 800e08e:	0c12      	lsrs	r2, r2, #16
 800e090:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e094:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800e098:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d03c      	beq.n	800e11a <HAL_PCD_IRQHandler+0x97e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800e0a0:	eb08 0105 	add.w	r1, r8, r5
 800e0a4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800e0a8:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800e0ac:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800e0b0:	f003 fe00 	bl	8011cb4 <USB_ReadPMA>
 800e0b4:	e5ba      	b.n	800dc2c <HAL_PCD_IRQHandler+0x490>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800e0b6:	0955      	lsrs	r5, r2, #5
 800e0b8:	06d6      	lsls	r6, r2, #27
 800e0ba:	4a71      	ldr	r2, [pc, #452]	; (800e280 <HAL_PCD_IRQHandler+0xae4>)
 800e0bc:	bf08      	it	eq
 800e0be:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 800e0c2:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800e0c6:	b292      	uxth	r2, r2
 800e0c8:	52ca      	strh	r2, [r1, r3]
 800e0ca:	e508      	b.n	800dade <HAL_PCD_IRQHandler+0x342>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e0cc:	f200 4206 	addw	r2, r0, #1030	; 0x406
 800e0d0:	fa12 f383 	uxtah	r3, r2, r3
 800e0d4:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
    if (ep->xfer_len >= count)
 800e0d8:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e0dc:	f833 303c 	ldrh.w	r3, [r3, ip, lsl #3]
 800e0e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	4699      	mov	r9, r3
 800e0e8:	d35c      	bcc.n	800e1a4 <HAL_PCD_IRQHandler+0xa08>
      ep->xfer_len -= count;
 800e0ea:	1ad2      	subs	r2, r2, r3
 800e0ec:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 800e0f0:	2a00      	cmp	r2, #0
 800e0f2:	d059      	beq.n	800e1a8 <HAL_PCD_IRQHandler+0xa0c>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800e0f4:	0679      	lsls	r1, r7, #25
 800e0f6:	d40f      	bmi.n	800e118 <HAL_PCD_IRQHandler+0x97c>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800e0f8:	fa0f fc8c 	sxth.w	ip, ip
 800e0fc:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800e100:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800e104:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e108:	0412      	lsls	r2, r2, #16
 800e10a:	0c12      	lsrs	r2, r2, #16
 800e10c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e110:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800e114:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 800e118:	b90b      	cbnz	r3, 800e11e <HAL_PCD_IRQHandler+0x982>
 800e11a:	4699      	mov	r9, r3
 800e11c:	e586      	b.n	800dc2c <HAL_PCD_IRQHandler+0x490>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800e11e:	eb08 0105 	add.w	r1, r8, r5
 800e122:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800e126:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800e12a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800e12e:	f003 fdc1 	bl	8011cb4 <USB_ReadPMA>
 800e132:	e57b      	b.n	800dc2c <HAL_PCD_IRQHandler+0x490>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e134:	b293      	uxth	r3, r2
 800e136:	2f01      	cmp	r7, #1
 800e138:	f47f ad4a 	bne.w	800dbd0 <HAL_PCD_IRQHandler+0x434>
 800e13c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800e140:	fa1e fe82 	uxtah	lr, lr, r2
 800e144:	f82e 303c 	strh.w	r3, [lr, ip, lsl #3]
 800e148:	e542      	b.n	800dbd0 <HAL_PCD_IRQHandler+0x434>
        else if (ep->xfer_len_db == 0U)
 800e14a:	2a00      	cmp	r2, #0
 800e14c:	d13f      	bne.n	800e1ce <HAL_PCD_IRQHandler+0xa32>
          ep->xfer_fill_db = 0U;
 800e14e:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
 800e152:	469a      	mov	sl, r3
 800e154:	e51f      	b.n	800db96 <HAL_PCD_IRQHandler+0x3fa>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e156:	b293      	uxth	r3, r2
 800e158:	2f01      	cmp	r7, #1
 800e15a:	f47f aece 	bne.w	800defa <HAL_PCD_IRQHandler+0x75e>
 800e15e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800e162:	fa1e fe82 	uxtah	lr, lr, r2
 800e166:	f82e 303c 	strh.w	r3, [lr, ip, lsl #3]
 800e16a:	e6c6      	b.n	800defa <HAL_PCD_IRQHandler+0x75e>
        else if (ep->xfer_len_db == 0U)
 800e16c:	2a00      	cmp	r2, #0
 800e16e:	d14b      	bne.n	800e208 <HAL_PCD_IRQHandler+0xa6c>
          ep->xfer_fill_db = 0U;
 800e170:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
 800e174:	4699      	mov	r9, r3
 800e176:	e6a1      	b.n	800debc <HAL_PCD_IRQHandler+0x720>
 800e178:	2200      	movs	r2, #0
 800e17a:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800e17e:	fa0f f18c 	sxth.w	r1, ip
 800e182:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800e186:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e18a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e18e:	0412      	lsls	r2, r2, #16
 800e190:	0c12      	lsrs	r2, r2, #16
 800e192:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800e196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e19a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e19e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 800e1a2:	e769      	b.n	800e078 <HAL_PCD_IRQHandler+0x8dc>
 800e1a4:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800e1a8:	fa0f f18c 	sxth.w	r1, ip
 800e1ac:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800e1b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e1b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e1b8:	0412      	lsls	r2, r2, #16
 800e1ba:	0c12      	lsrs	r2, r2, #16
 800e1bc:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800e1c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e1c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e1c8:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 800e1cc:	e792      	b.n	800e0f4 <HAL_PCD_IRQHandler+0x958>
          ep->xfer_fill_db = 0U;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800e1d4:	64bb      	str	r3, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e1d6:	f896 7029 	ldrb.w	r7, [r6, #41]	; 0x29
 800e1da:	2f00      	cmp	r7, #0
 800e1dc:	d1aa      	bne.n	800e134 <HAL_PCD_IRQHandler+0x998>
 800e1de:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800e1e2:	fa1e fe83 	uxtah	lr, lr, r3
 800e1e6:	44f1      	add	r9, lr
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800e1e8:	b293      	uxth	r3, r2
 800e1ea:	4692      	mov	sl, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e1ec:	f1ba 0f3e 	cmp.w	sl, #62	; 0x3e
 800e1f0:	d829      	bhi.n	800e246 <HAL_PCD_IRQHandler+0xaaa>
 800e1f2:	ea4f 025a 	mov.w	r2, sl, lsr #1
 800e1f6:	f01a 0f01 	tst.w	sl, #1
 800e1fa:	bf18      	it	ne
 800e1fc:	3201      	addne	r2, #1
 800e1fe:	0292      	lsls	r2, r2, #10
 800e200:	b292      	uxth	r2, r2
 800e202:	f8a9 2000 	strh.w	r2, [r9]
 800e206:	e4e3      	b.n	800dbd0 <HAL_PCD_IRQHandler+0x434>
          ep->xfer_len_db = 0U;
 800e208:	2300      	movs	r3, #0
 800e20a:	64bb      	str	r3, [r7, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800e20c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e210:	f896 7029 	ldrb.w	r7, [r6, #41]	; 0x29
 800e214:	2f00      	cmp	r7, #0
 800e216:	d19e      	bne.n	800e156 <HAL_PCD_IRQHandler+0x9ba>
 800e218:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 800e21c:	9b01      	ldr	r3, [sp, #4]
 800e21e:	fa1e f787 	uxtah	r7, lr, r7
 800e222:	eb07 0a03 	add.w	sl, r7, r3
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800e226:	4691      	mov	r9, r2
 800e228:	b293      	uxth	r3, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e22a:	f1b9 0f3e 	cmp.w	r9, #62	; 0x3e
 800e22e:	d818      	bhi.n	800e262 <HAL_PCD_IRQHandler+0xac6>
 800e230:	ea4f 0259 	mov.w	r2, r9, lsr #1
 800e234:	f019 0f01 	tst.w	r9, #1
 800e238:	bf18      	it	ne
 800e23a:	3201      	addne	r2, #1
 800e23c:	0292      	lsls	r2, r2, #10
 800e23e:	b292      	uxth	r2, r2
 800e240:	f8aa 2000 	strh.w	r2, [sl]
 800e244:	e659      	b.n	800defa <HAL_PCD_IRQHandler+0x75e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e246:	ea4f 125a 	mov.w	r2, sl, lsr #5
 800e24a:	4f0d      	ldr	r7, [pc, #52]	; (800e280 <HAL_PCD_IRQHandler+0xae4>)
 800e24c:	f01a 0f1f 	tst.w	sl, #31
 800e250:	bf08      	it	eq
 800e252:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800e256:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 800e25a:	b292      	uxth	r2, r2
 800e25c:	f8a9 2000 	strh.w	r2, [r9]
 800e260:	e4b6      	b.n	800dbd0 <HAL_PCD_IRQHandler+0x434>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e262:	ea4f 1259 	mov.w	r2, r9, lsr #5
 800e266:	4f06      	ldr	r7, [pc, #24]	; (800e280 <HAL_PCD_IRQHandler+0xae4>)
 800e268:	f019 0f1f 	tst.w	r9, #31
 800e26c:	bf08      	it	eq
 800e26e:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800e272:	ea47 2282 	orr.w	r2, r7, r2, lsl #10
 800e276:	b292      	uxth	r2, r2
 800e278:	f8aa 2000 	strh.w	r2, [sl]
 800e27c:	e63d      	b.n	800defa <HAL_PCD_IRQHandler+0x75e>
 800e27e:	bf00      	nop
 800e280:	ffff8000 	.word	0xffff8000

0800e284 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800e284:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800e288:	2a01      	cmp	r2, #1
 800e28a:	d00d      	beq.n	800e2a8 <HAL_PCD_SetAddress+0x24>
{
 800e28c:	b510      	push	{r4, lr}
 800e28e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800e290:	2201      	movs	r2, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e292:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800e294:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800e298:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e29c:	f003 fcda 	bl	8011c54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800e2a6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800e2a8:	2002      	movs	r0, #2
}
 800e2aa:	4770      	bx	lr

0800e2ac <HAL_PCD_EP_Open>:
{
 800e2ac:	b510      	push	{r4, lr}
 800e2ae:	f001 0e07 	and.w	lr, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 800e2b2:	0609      	lsls	r1, r1, #24
{
 800e2b4:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800e2b6:	d427      	bmi.n	800e308 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e2b8:	f04f 0c28 	mov.w	ip, #40	; 0x28
 800e2bc:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800e2c0:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
    ep->is_in = 0U;
 800e2c4:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
 800e2c8:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	f88c 0169 	strb.w	r0, [ip, #361]	; 0x169
  ep->maxpacket = ep_mps;
 800e2d2:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800e2d4:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e2d6:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800e2da:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800e2dc:	b10a      	cbz	r2, 800e2e2 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800e2de:	f8a1 e00e 	strh.w	lr, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800e2e2:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800e2e4:	bf04      	itt	eq
 800e2e6:	2300      	moveq	r3, #0
 800e2e8:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800e2ea:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d015      	beq.n	800e31e <HAL_PCD_EP_Open+0x72>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e2f8:	6820      	ldr	r0, [r4, #0]
 800e2fa:	f002 fec3 	bl	8011084 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e2fe:	2300      	movs	r3, #0
 800e300:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return ret;
 800e304:	4618      	mov	r0, r3
}
 800e306:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e308:	f10e 0c01 	add.w	ip, lr, #1
    ep->is_in = 1U;
 800e30c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800e310:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800e314:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e316:	4661      	mov	r1, ip
    ep->is_in = 1U;
 800e318:	f88c 0001 	strb.w	r0, [ip, #1]
 800e31c:	e7d9      	b.n	800e2d2 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800e31e:	2002      	movs	r0, #2
}
 800e320:	bd10      	pop	{r4, pc}
 800e322:	bf00      	nop

0800e324 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800e324:	060a      	lsls	r2, r1, #24
{
 800e326:	b510      	push	{r4, lr}
 800e328:	f001 0307 	and.w	r3, r1, #7
 800e32c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800e32e:	d41a      	bmi.n	800e366 <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e330:	2128      	movs	r1, #40	; 0x28
 800e332:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 800e336:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800e33a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e33e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800e342:	2000      	movs	r0, #0
 800e344:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e348:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e34a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d016      	beq.n	800e380 <HAL_PCD_EP_Close+0x5c>
 800e352:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e354:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e356:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e35a:	f002 fff7 	bl	801134c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e35e:	2000      	movs	r0, #0
 800e360:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800e364:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e366:	1c5a      	adds	r2, r3, #1
    ep->is_in = 1U;
 800e368:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800e36c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e370:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800e372:	2001      	movs	r0, #1
 800e374:	7050      	strb	r0, [r2, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e376:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e378:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d1e8      	bne.n	800e352 <HAL_PCD_EP_Close+0x2e>
 800e380:	2002      	movs	r0, #2
}
 800e382:	bd10      	pop	{r4, pc}

0800e384 <HAL_PCD_EP_Receive>:
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e384:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800e388:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
{
 800e38c:	b510      	push	{r4, lr}
  ep->xfer_buff = pBuf;
 800e38e:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep->xfer_count = 0U;
 800e392:	2400      	movs	r4, #0
  ep->xfer_buff = pBuf;
 800e394:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e398:	2228      	movs	r2, #40	; 0x28
 800e39a:	fb02 0201 	mla	r2, r2, r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 800e39e:	f88c 1168 	strb.w	r1, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e3a2:	6800      	ldr	r0, [r0, #0]
  ep->is_in = 0U;
 800e3a4:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->xfer_count = 0U;
 800e3a8:	e9cc 3460 	strd	r3, r4, [ip, #384]	; 0x180
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e3ac:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800e3b0:	f003 f8ac 	bl	801150c <USB_EPStartXfer>
}
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	bd10      	pop	{r4, pc}

0800e3b8 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e3b8:	f001 0107 	and.w	r1, r1, #7
 800e3bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e3c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800e3c4:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop

0800e3cc <HAL_PCD_EP_Transmit>:
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3cc:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800e3d0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
{
 800e3d4:	b510      	push	{r4, lr}
  ep->xfer_buff = pBuf;
 800e3d6:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
{
 800e3da:	4686      	mov	lr, r0
  ep->xfer_fill_db = 1U;
 800e3dc:	2001      	movs	r0, #1
  ep->xfer_len = len;
 800e3de:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 800e3e2:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3e6:	180b      	adds	r3, r1, r0
  ep->xfer_count = 0U;
 800e3e8:	2400      	movs	r4, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  ep->xfer_fill_db = 1U;
 800e3ee:	f88c 004c 	strb.w	r0, [ip, #76]	; 0x4c
  ep->is_in = 1U;
 800e3f2:	f88c 0029 	strb.w	r0, [ip, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800e3f6:	f88c 1028 	strb.w	r1, [ip, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e3fa:	f8de 0000 	ldr.w	r0, [lr]
  ep->xfer_buff = pBuf;
 800e3fe:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->xfer_count = 0U;
 800e402:	f8cc 4044 	str.w	r4, [ip, #68]	; 0x44
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e406:	eb0e 01c3 	add.w	r1, lr, r3, lsl #3
 800e40a:	f003 f87f 	bl	801150c <USB_EPStartXfer>
}
 800e40e:	4620      	mov	r0, r4
 800e410:	bd10      	pop	{r4, pc}
 800e412:	bf00      	nop

0800e414 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e414:	6842      	ldr	r2, [r0, #4]
 800e416:	f001 0307 	and.w	r3, r1, #7
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d830      	bhi.n	800e480 <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 800e41e:	060a      	lsls	r2, r1, #24
{
 800e420:	b510      	push	{r4, lr}
 800e422:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800e424:	d41b      	bmi.n	800e45e <HAL_PCD_EP_SetStall+0x4a>
    ep->is_in = 0U;
 800e426:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 800e42a:	2028      	movs	r0, #40	; 0x28
 800e42c:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 800e430:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800e434:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800e438:	2000      	movs	r0, #0
 800e43a:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 1U;
 800e43e:	2201      	movs	r2, #1
 800e440:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e442:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e444:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800e448:	4293      	cmp	r3, r2
 800e44a:	d017      	beq.n	800e47c <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e44c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e44e:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e452:	f003 fb7b 	bl	8011b4c <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800e456:	2000      	movs	r0, #0
 800e458:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800e45c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e45e:	1c5a      	adds	r2, r3, #1
    ep->is_in = 1U;
 800e460:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800e464:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e468:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800e46a:	2001      	movs	r0, #1
 800e46c:	7050      	strb	r0, [r2, #1]
  ep->is_stall = 1U;
 800e46e:	2201      	movs	r2, #1
 800e470:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e472:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e474:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800e478:	4293      	cmp	r3, r2
 800e47a:	d1e7      	bne.n	800e44c <HAL_PCD_EP_SetStall+0x38>
 800e47c:	2002      	movs	r0, #2
}
 800e47e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800e480:	2001      	movs	r0, #1
}
 800e482:	4770      	bx	lr

0800e484 <HAL_PCD_EP_ClrStall>:
{
 800e484:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e486:	6843      	ldr	r3, [r0, #4]
 800e488:	f001 020f 	and.w	r2, r1, #15
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d832      	bhi.n	800e4f6 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800e490:	060a      	lsls	r2, r1, #24
 800e492:	4604      	mov	r4, r0
 800e494:	f001 0307 	and.w	r3, r1, #7
 800e498:	d41c      	bmi.n	800e4d4 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e49a:	2128      	movs	r1, #40	; 0x28
 800e49c:	fb01 0103 	mla	r1, r1, r3, r0
    ep->is_in = 0U;
 800e4a0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800e4a4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e4a8:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800e4ac:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 800e4ae:	2500      	movs	r5, #0
    ep->is_in = 0U;
 800e4b0:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 800e4b4:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e4b6:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e4b8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d018      	beq.n	800e4f2 <HAL_PCD_EP_ClrStall+0x6e>
 800e4c0:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e4c2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800e4c4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e4c8:	f003 fb68 	bl	8011b9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e4cc:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 800e4d0:	4628      	mov	r0, r5
}
 800e4d2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e4d4:	1c5a      	adds	r2, r3, #1
    ep->is_in = 1U;
 800e4d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800e4da:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e4de:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800e4e0:	2001      	movs	r0, #1
  ep->is_stall = 0U;
 800e4e2:	2500      	movs	r5, #0
    ep->is_in = 1U;
 800e4e4:	7050      	strb	r0, [r2, #1]
  ep->is_stall = 0U;
 800e4e6:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e4e8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800e4ea:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d1e6      	bne.n	800e4c0 <HAL_PCD_EP_ClrStall+0x3c>
 800e4f2:	2002      	movs	r0, #2
}
 800e4f4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e4f6:	2001      	movs	r0, #1
}
 800e4f8:	bd38      	pop	{r3, r4, r5, pc}
 800e4fa:	bf00      	nop

0800e4fc <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800e4fc:	f011 0f80 	tst.w	r1, #128	; 0x80
 800e500:	d00b      	beq.n	800e51a <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e502:	f001 0107 	and.w	r1, r1, #7
 800e506:	3101      	adds	r1, #1
 800e508:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e50c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800e510:	b95a      	cbnz	r2, 800e52a <HAL_PCDEx_PMAConfig+0x2e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800e512:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800e514:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800e516:	2000      	movs	r0, #0
 800e518:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800e51a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e51e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e522:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 800e526:	2a00      	cmp	r2, #0
 800e528:	d0f3      	beq.n	800e512 <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 800e52a:	2201      	movs	r2, #1
 800e52c:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800e52e:	608b      	str	r3, [r1, #8]
}
 800e530:	2000      	movs	r0, #0
 800e532:	4770      	bx	lr

0800e534 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 800e534:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800e536:	2100      	movs	r1, #0
{
 800e538:	b410      	push	{r4}
  hpcd->LPM_State = LPM_L0;
 800e53a:	f880 12e0 	strb.w	r1, [r0, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e53e:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
  hpcd->lpm_active = 1U;
 800e542:	2401      	movs	r4, #1
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e544:	b29b      	uxth	r3, r3
 800e546:	4323      	orrs	r3, r4
  hpcd->lpm_active = 1U;
 800e548:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e54c:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e550:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800e554:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e558:	b29b      	uxth	r3, r3
 800e55a:	f043 0302 	orr.w	r3, r3, #2
}
 800e55e:	4608      	mov	r0, r1
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e560:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
}
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop

0800e568 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800e568:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800e56a:	4a3b      	ldr	r2, [pc, #236]	; (800e658 <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800e56c:	b970      	cbnz	r0, 800e58c <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800e56e:	6813      	ldr	r3, [r2, #0]
 800e570:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e578:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800e57c:	d023      	beq.n	800e5c6 <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e57e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 800e582:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e586:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800e58a:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e58c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800e590:	d009      	beq.n	800e5a6 <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800e592:	6813      	ldr	r3, [r2, #0]
}
 800e594:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800e598:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800e59c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 800e5a0:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800e5a2:	6013      	str	r3, [r2, #0]
}
 800e5a4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800e5a6:	6813      	ldr	r3, [r2, #0]
 800e5a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e5ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e5b0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800e5b4:	d02f      	beq.n	800e616 <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e5b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 800e5ba:	2000      	movs	r0, #0
}
 800e5bc:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e5c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800e5c4:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e5c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800e5ce:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e5d0:	4c22      	ldr	r4, [pc, #136]	; (800e65c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800e5d2:	4823      	ldr	r0, [pc, #140]	; (800e660 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800e5d4:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800e5d8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800e5dc:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e5de:	6823      	ldr	r3, [r4, #0]
 800e5e0:	2132      	movs	r1, #50	; 0x32
 800e5e2:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e5e6:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e5e8:	fba0 0303 	umull	r0, r3, r0, r3
 800e5ec:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e5ee:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e5f0:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e5f4:	d506      	bpl.n	800e604 <HAL_PWREx_ControlVoltageScaling+0x9c>
 800e5f6:	e000      	b.n	800e5fa <HAL_PWREx_ControlVoltageScaling+0x92>
 800e5f8:	b123      	cbz	r3, 800e604 <HAL_PWREx_ControlVoltageScaling+0x9c>
 800e5fa:	6951      	ldr	r1, [r2, #20]
 800e5fc:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800e5fe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e602:	d4f9      	bmi.n	800e5f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800e604:	4b14      	ldr	r3, [pc, #80]	; (800e658 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800e606:	695b      	ldr	r3, [r3, #20]
 800e608:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 800e60a:	bf54      	ite	pl
 800e60c:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 800e60e:	2003      	movmi	r0, #3
}
 800e610:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e614:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e61a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800e61e:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e620:	4c0e      	ldr	r4, [pc, #56]	; (800e65c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800e622:	480f      	ldr	r0, [pc, #60]	; (800e660 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800e624:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800e628:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800e62c:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e62e:	6823      	ldr	r3, [r4, #0]
 800e630:	2132      	movs	r1, #50	; 0x32
 800e632:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e636:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e638:	fba0 0303 	umull	r0, r3, r0, r3
 800e63c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e63e:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e640:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e644:	d5de      	bpl.n	800e604 <HAL_PWREx_ControlVoltageScaling+0x9c>
 800e646:	e001      	b.n	800e64c <HAL_PWREx_ControlVoltageScaling+0xe4>
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d0db      	beq.n	800e604 <HAL_PWREx_ControlVoltageScaling+0x9c>
 800e64c:	6951      	ldr	r1, [r2, #20]
 800e64e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800e650:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e654:	d5d6      	bpl.n	800e604 <HAL_PWREx_ControlVoltageScaling+0x9c>
 800e656:	e7f7      	b.n	800e648 <HAL_PWREx_ControlVoltageScaling+0xe0>
 800e658:	40007000 	.word	0x40007000
 800e65c:	200003c4 	.word	0x200003c4
 800e660:	431bde83 	.word	0x431bde83

0800e664 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800e664:	b570      	push	{r4, r5, r6, lr}

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800e666:	4c2b      	ldr	r4, [pc, #172]	; (800e714 <HAL_RCC_DeInit+0xb0>)
  tickstart = HAL_GetTick();
 800e668:	f7fe f92e 	bl	800c8c8 <HAL_GetTick>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800e66c:	6823      	ldr	r3, [r4, #0]
 800e66e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tickstart = HAL_GetTick();
 800e672:	4605      	mov	r5, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800e674:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e676:	e004      	b.n	800e682 <HAL_RCC_DeInit+0x1e>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e678:	f7fe f926 	bl	800c8c8 <HAL_GetTick>
 800e67c:	1b40      	subs	r0, r0, r5
 800e67e:	2802      	cmp	r0, #2
 800e680:	d825      	bhi.n	800e6ce <HAL_RCC_DeInit+0x6a>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e682:	6823      	ldr	r3, [r4, #0]
 800e684:	055b      	lsls	r3, r3, #21
 800e686:	d5f7      	bpl.n	800e678 <HAL_RCC_DeInit+0x14>
      return HAL_TIMEOUT;
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 800e688:	6863      	ldr	r3, [r4, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800e68a:	4e22      	ldr	r6, [pc, #136]	; (800e714 <HAL_RCC_DeInit+0xb0>)
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 800e68c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e690:	6063      	str	r3, [r4, #4]
  tickstart = HAL_GetTick();
 800e692:	f7fe f919 	bl	800c8c8 <HAL_GetTick>
  RCC->CFGR = 0x00000001u;
 800e696:	2301      	movs	r3, #1
 800e698:	60a3      	str	r3, [r4, #8]
  tickstart = HAL_GetTick();
 800e69a:	4605      	mov	r5, r0
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e69c:	f241 3488 	movw	r4, #5000	; 0x1388
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800e6a0:	e004      	b.n	800e6ac <HAL_RCC_DeInit+0x48>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e6a2:	f7fe f911 	bl	800c8c8 <HAL_GetTick>
 800e6a6:	1b40      	subs	r0, r0, r5
 800e6a8:	42a0      	cmp	r0, r4
 800e6aa:	d810      	bhi.n	800e6ce <HAL_RCC_DeInit+0x6a>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800e6ac:	68b3      	ldr	r3, [r6, #8]
 800e6ae:	f003 030c 	and.w	r3, r3, #12
 800e6b2:	2b04      	cmp	r3, #4
 800e6b4:	d1f5      	bne.n	800e6a2 <HAL_RCC_DeInit+0x3e>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e6b6:	4918      	ldr	r1, [pc, #96]	; (800e718 <HAL_RCC_DeInit+0xb4>)
  SystemCoreClock = HSI_VALUE;
 800e6b8:	4b18      	ldr	r3, [pc, #96]	; (800e71c <HAL_RCC_DeInit+0xb8>)
 800e6ba:	4a19      	ldr	r2, [pc, #100]	; (800e720 <HAL_RCC_DeInit+0xbc>)
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e6bc:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HSI_VALUE;
 800e6be:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e6c0:	f7f4 fa8e 	bl	8002be0 <HAL_InitTick>
 800e6c4:	4604      	mov	r4, r0
 800e6c6:	b128      	cbz	r0, 800e6d4 <HAL_RCC_DeInit+0x70>
  {
    return HAL_ERROR;
 800e6c8:	2401      	movs	r4, #1

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);

  return HAL_OK;
}
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800e6ce:	2403      	movs	r4, #3
}
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	bd70      	pop	{r4, r5, r6, pc}
  RCC->CR = RCC_CR_HSION;
 800e6d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6d8:	6033      	str	r3, [r6, #0]
  RCC->CR = RCC_CR_HSION;
 800e6da:	6033      	str	r3, [r6, #0]
  tickstart = HAL_GetTick();
 800e6dc:	f7fe f8f4 	bl	800c8c8 <HAL_GetTick>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e6e0:	4e0c      	ldr	r6, [pc, #48]	; (800e714 <HAL_RCC_DeInit+0xb0>)
  tickstart = HAL_GetTick();
 800e6e2:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e6e4:	e004      	b.n	800e6f0 <HAL_RCC_DeInit+0x8c>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e6e6:	f7fe f8ef 	bl	800c8c8 <HAL_GetTick>
 800e6ea:	1b43      	subs	r3, r0, r5
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	d8ee      	bhi.n	800e6ce <HAL_RCC_DeInit+0x6a>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e6f0:	6833      	ldr	r3, [r6, #0]
 800e6f2:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800e6f6:	d1f6      	bne.n	800e6e6 <HAL_RCC_DeInit+0x82>
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 800e6f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800e6fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 800e700:	60f1      	str	r1, [r6, #12]
  CLEAR_REG(RCC->CIER);
 800e702:	61b3      	str	r3, [r6, #24]
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800e704:	6232      	str	r2, [r6, #32]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800e706:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800e70a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e70e:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
  return HAL_OK;
 800e712:	e7dd      	b.n	800e6d0 <HAL_RCC_DeInit+0x6c>
 800e714:	40021000 	.word	0x40021000
 800e718:	200006b4 	.word	0x200006b4
 800e71c:	200003c4 	.word	0x200003c4
 800e720:	00f42400 	.word	0x00f42400

0800e724 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e724:	2800      	cmp	r0, #0
 800e726:	f000 81c3 	beq.w	800eab0 <HAL_RCC_OscConfig+0x38c>
{
 800e72a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e72e:	6803      	ldr	r3, [r0, #0]
 800e730:	07d9      	lsls	r1, r3, #31
{
 800e732:	b082      	sub	sp, #8
 800e734:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e736:	d52d      	bpl.n	800e794 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e738:	49a6      	ldr	r1, [pc, #664]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
 800e73a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e73c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e73e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800e742:	2a0c      	cmp	r2, #12
 800e744:	f000 810a 	beq.w	800e95c <HAL_RCC_OscConfig+0x238>
 800e748:	2a08      	cmp	r2, #8
 800e74a:	f000 810c 	beq.w	800e966 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e74e:	6863      	ldr	r3, [r4, #4]
 800e750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e754:	f000 8133 	beq.w	800e9be <HAL_RCC_OscConfig+0x29a>
 800e758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e75c:	f000 819b 	beq.w	800ea96 <HAL_RCC_OscConfig+0x372>
 800e760:	4d9c      	ldr	r5, [pc, #624]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
 800e762:	682a      	ldr	r2, [r5, #0]
 800e764:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e768:	602a      	str	r2, [r5, #0]
 800e76a:	682a      	ldr	r2, [r5, #0]
 800e76c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e770:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e772:	2b00      	cmp	r3, #0
 800e774:	f040 8128 	bne.w	800e9c8 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e778:	f7fe f8a6 	bl	800c8c8 <HAL_GetTick>
 800e77c:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e77e:	e005      	b.n	800e78c <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e780:	f7fe f8a2 	bl	800c8c8 <HAL_GetTick>
 800e784:	1b80      	subs	r0, r0, r6
 800e786:	2864      	cmp	r0, #100	; 0x64
 800e788:	f200 8142 	bhi.w	800ea10 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e78c:	682b      	ldr	r3, [r5, #0]
 800e78e:	039f      	lsls	r7, r3, #14
 800e790:	d4f6      	bmi.n	800e780 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e792:	6823      	ldr	r3, [r4, #0]
 800e794:	079e      	lsls	r6, r3, #30
 800e796:	d528      	bpl.n	800e7ea <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e798:	4a8e      	ldr	r2, [pc, #568]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
 800e79a:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e79c:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e79e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800e7a2:	2b0c      	cmp	r3, #12
 800e7a4:	f000 80ec 	beq.w	800e980 <HAL_RCC_OscConfig+0x25c>
 800e7a8:	2b04      	cmp	r3, #4
 800e7aa:	f000 80ee 	beq.w	800e98a <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e7ae:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e7b0:	4d88      	ldr	r5, [pc, #544]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f000 811d 	beq.w	800e9f2 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 800e7b8:	682b      	ldr	r3, [r5, #0]
 800e7ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e7be:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7c0:	f7fe f882 	bl	800c8c8 <HAL_GetTick>
 800e7c4:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e7c6:	e005      	b.n	800e7d4 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e7c8:	f7fe f87e 	bl	800c8c8 <HAL_GetTick>
 800e7cc:	1b80      	subs	r0, r0, r6
 800e7ce:	2802      	cmp	r0, #2
 800e7d0:	f200 811e 	bhi.w	800ea10 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e7d4:	682b      	ldr	r3, [r5, #0]
 800e7d6:	0558      	lsls	r0, r3, #21
 800e7d8:	d5f6      	bpl.n	800e7c8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e7da:	686b      	ldr	r3, [r5, #4]
 800e7dc:	6922      	ldr	r2, [r4, #16]
 800e7de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800e7e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e7e6:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e7e8:	6823      	ldr	r3, [r4, #0]
 800e7ea:	071a      	lsls	r2, r3, #28
 800e7ec:	d519      	bpl.n	800e822 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e7ee:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e7f0:	4d78      	ldr	r5, [pc, #480]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	f000 809e 	beq.w	800e934 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 800e7f8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800e7fc:	f043 0301 	orr.w	r3, r3, #1
 800e800:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e804:	f7fe f860 	bl	800c8c8 <HAL_GetTick>
 800e808:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e80a:	e005      	b.n	800e818 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e80c:	f7fe f85c 	bl	800c8c8 <HAL_GetTick>
 800e810:	1b80      	subs	r0, r0, r6
 800e812:	2802      	cmp	r0, #2
 800e814:	f200 80fc 	bhi.w	800ea10 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e818:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800e81c:	079f      	lsls	r7, r3, #30
 800e81e:	d5f5      	bpl.n	800e80c <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e820:	6823      	ldr	r3, [r4, #0]
 800e822:	0759      	lsls	r1, r3, #29
 800e824:	d541      	bpl.n	800e8aa <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800e826:	4b6b      	ldr	r3, [pc, #428]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
 800e828:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e82a:	00d2      	lsls	r2, r2, #3
 800e82c:	f100 80f4 	bmi.w	800ea18 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e830:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e832:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e836:	659a      	str	r2, [r3, #88]	; 0x58
 800e838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e83a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e83e:	9301      	str	r3, [sp, #4]
 800e840:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800e842:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e844:	4e64      	ldr	r6, [pc, #400]	; (800e9d8 <HAL_RCC_OscConfig+0x2b4>)
 800e846:	6833      	ldr	r3, [r6, #0]
 800e848:	05df      	lsls	r7, r3, #23
 800e84a:	f140 8113 	bpl.w	800ea74 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e84e:	68a3      	ldr	r3, [r4, #8]
 800e850:	2b01      	cmp	r3, #1
 800e852:	f000 80e3 	beq.w	800ea1c <HAL_RCC_OscConfig+0x2f8>
 800e856:	2b05      	cmp	r3, #5
 800e858:	f000 8169 	beq.w	800eb2e <HAL_RCC_OscConfig+0x40a>
 800e85c:	4e5d      	ldr	r6, [pc, #372]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
 800e85e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800e862:	f022 0201 	bic.w	r2, r2, #1
 800e866:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800e86a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800e86e:	f022 0204 	bic.w	r2, r2, #4
 800e872:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e876:	2b00      	cmp	r3, #0
 800e878:	f040 80d7 	bne.w	800ea2a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e87c:	f7fe f824 	bl	800c8c8 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e880:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800e884:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e886:	e005      	b.n	800e894 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e888:	f7fe f81e 	bl	800c8c8 <HAL_GetTick>
 800e88c:	1bc0      	subs	r0, r0, r7
 800e88e:	4540      	cmp	r0, r8
 800e890:	f200 80be 	bhi.w	800ea10 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e894:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800e898:	079a      	lsls	r2, r3, #30
 800e89a:	d4f5      	bmi.n	800e888 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e89c:	b125      	cbz	r5, 800e8a8 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e89e:	4a4d      	ldr	r2, [pc, #308]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
 800e8a0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e8a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e8a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e8a8:	6823      	ldr	r3, [r4, #0]
 800e8aa:	069b      	lsls	r3, r3, #26
 800e8ac:	d518      	bpl.n	800e8e0 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e8ae:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e8b0:	4d48      	ldr	r5, [pc, #288]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	f000 80ca 	beq.w	800ea4c <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 800e8b8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800e8bc:	f043 0301 	orr.w	r3, r3, #1
 800e8c0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e8c4:	f7fe f800 	bl	800c8c8 <HAL_GetTick>
 800e8c8:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e8ca:	e005      	b.n	800e8d8 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e8cc:	f7fd fffc 	bl	800c8c8 <HAL_GetTick>
 800e8d0:	1b80      	subs	r0, r0, r6
 800e8d2:	2802      	cmp	r0, #2
 800e8d4:	f200 809c 	bhi.w	800ea10 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e8d8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800e8dc:	079f      	lsls	r7, r3, #30
 800e8de:	d5f5      	bpl.n	800e8cc <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e8e0:	69e0      	ldr	r0, [r4, #28]
 800e8e2:	b318      	cbz	r0, 800e92c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e8e4:	4d3b      	ldr	r5, [pc, #236]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
 800e8e6:	68ab      	ldr	r3, [r5, #8]
 800e8e8:	f003 030c 	and.w	r3, r3, #12
 800e8ec:	2b0c      	cmp	r3, #12
 800e8ee:	f000 812c 	beq.w	800eb4a <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e8f2:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e8f4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800e8f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e8fa:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e8fc:	f000 80da 	beq.w	800eab4 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800e900:	68eb      	ldr	r3, [r5, #12]
 800e902:	f023 0303 	bic.w	r3, r3, #3
 800e906:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800e908:	68eb      	ldr	r3, [r5, #12]
 800e90a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800e90e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e912:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e914:	f7fd ffd8 	bl	800c8c8 <HAL_GetTick>
 800e918:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e91a:	e004      	b.n	800e926 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e91c:	f7fd ffd4 	bl	800c8c8 <HAL_GetTick>
 800e920:	1b00      	subs	r0, r0, r4
 800e922:	2802      	cmp	r0, #2
 800e924:	d874      	bhi.n	800ea10 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e926:	682b      	ldr	r3, [r5, #0]
 800e928:	019b      	lsls	r3, r3, #6
 800e92a:	d4f7      	bmi.n	800e91c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 800e92c:	2000      	movs	r0, #0
}
 800e92e:	b002      	add	sp, #8
 800e930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800e934:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800e938:	f023 0301 	bic.w	r3, r3, #1
 800e93c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800e940:	f7fd ffc2 	bl	800c8c8 <HAL_GetTick>
 800e944:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e946:	e004      	b.n	800e952 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e948:	f7fd ffbe 	bl	800c8c8 <HAL_GetTick>
 800e94c:	1b80      	subs	r0, r0, r6
 800e94e:	2802      	cmp	r0, #2
 800e950:	d85e      	bhi.n	800ea10 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e952:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800e956:	0798      	lsls	r0, r3, #30
 800e958:	d4f6      	bmi.n	800e948 <HAL_RCC_OscConfig+0x224>
 800e95a:	e761      	b.n	800e820 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e95c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800e960:	2903      	cmp	r1, #3
 800e962:	f47f aef4 	bne.w	800e74e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e966:	4a1b      	ldr	r2, [pc, #108]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
 800e968:	6812      	ldr	r2, [r2, #0]
 800e96a:	0392      	lsls	r2, r2, #14
 800e96c:	f57f af12 	bpl.w	800e794 <HAL_RCC_OscConfig+0x70>
 800e970:	6862      	ldr	r2, [r4, #4]
 800e972:	2a00      	cmp	r2, #0
 800e974:	f47f af0e 	bne.w	800e794 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 800e978:	2001      	movs	r0, #1
}
 800e97a:	b002      	add	sp, #8
 800e97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e980:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800e984:	2a02      	cmp	r2, #2
 800e986:	f47f af12 	bne.w	800e7ae <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e98a:	4b12      	ldr	r3, [pc, #72]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	055d      	lsls	r5, r3, #21
 800e990:	d502      	bpl.n	800e998 <HAL_RCC_OscConfig+0x274>
 800e992:	68e3      	ldr	r3, [r4, #12]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d0ef      	beq.n	800e978 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e998:	4a0e      	ldr	r2, [pc, #56]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
 800e99a:	6920      	ldr	r0, [r4, #16]
 800e99c:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e99e:	490f      	ldr	r1, [pc, #60]	; (800e9dc <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e9a0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800e9a4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e9a8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e9aa:	6808      	ldr	r0, [r1, #0]
 800e9ac:	f7f4 f918 	bl	8002be0 <HAL_InitTick>
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	d1e1      	bne.n	800e978 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e9b4:	6823      	ldr	r3, [r4, #0]
 800e9b6:	071a      	lsls	r2, r3, #28
 800e9b8:	f57f af33 	bpl.w	800e822 <HAL_RCC_OscConfig+0xfe>
 800e9bc:	e717      	b.n	800e7ee <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e9be:	4a05      	ldr	r2, [pc, #20]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
 800e9c0:	6813      	ldr	r3, [r2, #0]
 800e9c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e9c6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800e9c8:	f7fd ff7e 	bl	800c8c8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e9cc:	4e01      	ldr	r6, [pc, #4]	; (800e9d4 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800e9ce:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e9d0:	e00b      	b.n	800e9ea <HAL_RCC_OscConfig+0x2c6>
 800e9d2:	bf00      	nop
 800e9d4:	40021000 	.word	0x40021000
 800e9d8:	40007000 	.word	0x40007000
 800e9dc:	200006b4 	.word	0x200006b4
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e9e0:	f7fd ff72 	bl	800c8c8 <HAL_GetTick>
 800e9e4:	1b40      	subs	r0, r0, r5
 800e9e6:	2864      	cmp	r0, #100	; 0x64
 800e9e8:	d812      	bhi.n	800ea10 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e9ea:	6833      	ldr	r3, [r6, #0]
 800e9ec:	039b      	lsls	r3, r3, #14
 800e9ee:	d5f7      	bpl.n	800e9e0 <HAL_RCC_OscConfig+0x2bc>
 800e9f0:	e6cf      	b.n	800e792 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 800e9f2:	682b      	ldr	r3, [r5, #0]
 800e9f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e9fa:	f7fd ff65 	bl	800c8c8 <HAL_GetTick>
 800e9fe:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ea00:	682b      	ldr	r3, [r5, #0]
 800ea02:	0559      	lsls	r1, r3, #21
 800ea04:	d5d6      	bpl.n	800e9b4 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ea06:	f7fd ff5f 	bl	800c8c8 <HAL_GetTick>
 800ea0a:	1b80      	subs	r0, r0, r6
 800ea0c:	2802      	cmp	r0, #2
 800ea0e:	d9f7      	bls.n	800ea00 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 800ea10:	2003      	movs	r0, #3
}
 800ea12:	b002      	add	sp, #8
 800ea14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 800ea18:	2500      	movs	r5, #0
 800ea1a:	e713      	b.n	800e844 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ea1c:	4a65      	ldr	r2, [pc, #404]	; (800ebb4 <HAL_RCC_OscConfig+0x490>)
 800ea1e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800ea22:	f043 0301 	orr.w	r3, r3, #1
 800ea26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800ea2a:	f7fd ff4d 	bl	800c8c8 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ea2e:	4f61      	ldr	r7, [pc, #388]	; (800ebb4 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 800ea30:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea32:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ea36:	e004      	b.n	800ea42 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea38:	f7fd ff46 	bl	800c8c8 <HAL_GetTick>
 800ea3c:	1b80      	subs	r0, r0, r6
 800ea3e:	4540      	cmp	r0, r8
 800ea40:	d8e6      	bhi.n	800ea10 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ea42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ea46:	0799      	lsls	r1, r3, #30
 800ea48:	d5f6      	bpl.n	800ea38 <HAL_RCC_OscConfig+0x314>
 800ea4a:	e727      	b.n	800e89c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 800ea4c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800ea50:	f023 0301 	bic.w	r3, r3, #1
 800ea54:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 800ea58:	f7fd ff36 	bl	800c8c8 <HAL_GetTick>
 800ea5c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ea5e:	e004      	b.n	800ea6a <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ea60:	f7fd ff32 	bl	800c8c8 <HAL_GetTick>
 800ea64:	1b80      	subs	r0, r0, r6
 800ea66:	2802      	cmp	r0, #2
 800ea68:	d8d2      	bhi.n	800ea10 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ea6a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800ea6e:	0798      	lsls	r0, r3, #30
 800ea70:	d4f6      	bmi.n	800ea60 <HAL_RCC_OscConfig+0x33c>
 800ea72:	e735      	b.n	800e8e0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ea74:	6833      	ldr	r3, [r6, #0]
 800ea76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea7a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800ea7c:	f7fd ff24 	bl	800c8c8 <HAL_GetTick>
 800ea80:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ea82:	6833      	ldr	r3, [r6, #0]
 800ea84:	05d8      	lsls	r0, r3, #23
 800ea86:	f53f aee2 	bmi.w	800e84e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea8a:	f7fd ff1d 	bl	800c8c8 <HAL_GetTick>
 800ea8e:	1bc0      	subs	r0, r0, r7
 800ea90:	2802      	cmp	r0, #2
 800ea92:	d9f6      	bls.n	800ea82 <HAL_RCC_OscConfig+0x35e>
 800ea94:	e7bc      	b.n	800ea10 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ea96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ea9a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800eaa4:	601a      	str	r2, [r3, #0]
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800eaac:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800eaae:	e78b      	b.n	800e9c8 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 800eab0:	2001      	movs	r0, #1
}
 800eab2:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800eab4:	f7fd ff08 	bl	800c8c8 <HAL_GetTick>
 800eab8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800eaba:	e004      	b.n	800eac6 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eabc:	f7fd ff04 	bl	800c8c8 <HAL_GetTick>
 800eac0:	1b80      	subs	r0, r0, r6
 800eac2:	2802      	cmp	r0, #2
 800eac4:	d8a4      	bhi.n	800ea10 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800eac6:	682b      	ldr	r3, [r5, #0]
 800eac8:	0199      	lsls	r1, r3, #6
 800eaca:	d4f7      	bmi.n	800eabc <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800eacc:	68e9      	ldr	r1, [r5, #12]
 800eace:	4b3a      	ldr	r3, [pc, #232]	; (800ebb8 <HAL_RCC_OscConfig+0x494>)
 800ead0:	6a22      	ldr	r2, [r4, #32]
 800ead2:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ead4:	4e37      	ldr	r6, [pc, #220]	; (800ebb4 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ead6:	400b      	ands	r3, r1
 800ead8:	4313      	orrs	r3, r2
 800eada:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800eade:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800eae2:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800eae6:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 800eaea:	3801      	subs	r0, #1
 800eaec:	0849      	lsrs	r1, r1, #1
 800eaee:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800eaf2:	3901      	subs	r1, #1
 800eaf4:	0852      	lsrs	r2, r2, #1
 800eaf6:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800eafa:	3a01      	subs	r2, #1
 800eafc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800eb00:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800eb02:	682b      	ldr	r3, [r5, #0]
 800eb04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800eb08:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800eb0a:	68eb      	ldr	r3, [r5, #12]
 800eb0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800eb10:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800eb12:	f7fd fed9 	bl	800c8c8 <HAL_GetTick>
 800eb16:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800eb18:	e005      	b.n	800eb26 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eb1a:	f7fd fed5 	bl	800c8c8 <HAL_GetTick>
 800eb1e:	1b00      	subs	r0, r0, r4
 800eb20:	2802      	cmp	r0, #2
 800eb22:	f63f af75 	bhi.w	800ea10 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800eb26:	6833      	ldr	r3, [r6, #0]
 800eb28:	019a      	lsls	r2, r3, #6
 800eb2a:	d5f6      	bpl.n	800eb1a <HAL_RCC_OscConfig+0x3f6>
 800eb2c:	e6fe      	b.n	800e92c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb2e:	4b21      	ldr	r3, [pc, #132]	; (800ebb4 <HAL_RCC_OscConfig+0x490>)
 800eb30:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800eb34:	f042 0204 	orr.w	r2, r2, #4
 800eb38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800eb3c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800eb40:	f042 0201 	orr.w	r2, r2, #1
 800eb44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800eb48:	e76f      	b.n	800ea2a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800eb4a:	2801      	cmp	r0, #1
 800eb4c:	f43f aeef 	beq.w	800e92e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 800eb50:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb52:	6a22      	ldr	r2, [r4, #32]
 800eb54:	f003 0103 	and.w	r1, r3, #3
 800eb58:	4291      	cmp	r1, r2
 800eb5a:	f47f af0d 	bne.w	800e978 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800eb5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eb60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800eb64:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb66:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800eb6a:	f47f af05 	bne.w	800e978 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800eb6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800eb70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800eb74:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800eb78:	f47f aefe 	bne.w	800e978 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800eb7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800eb7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800eb82:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800eb86:	f47f aef7 	bne.w	800e978 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eb8a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800eb8c:	0852      	lsrs	r2, r2, #1
 800eb8e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800eb92:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800eb94:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800eb98:	f47f aeee 	bne.w	800e978 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800eb9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800eb9e:	0852      	lsrs	r2, r2, #1
 800eba0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800eba4:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eba6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 800ebaa:	bf14      	ite	ne
 800ebac:	2001      	movne	r0, #1
 800ebae:	2000      	moveq	r0, #0
 800ebb0:	e6bd      	b.n	800e92e <HAL_RCC_OscConfig+0x20a>
 800ebb2:	bf00      	nop
 800ebb4:	40021000 	.word	0x40021000
 800ebb8:	019f800c 	.word	0x019f800c

0800ebbc <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800ebbc:	b570      	push	{r4, r5, r6, lr}

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  MCO1_CLK_ENABLE();
 800ebbe:	4c12      	ldr	r4, [pc, #72]	; (800ec08 <HAL_RCC_MCOConfig+0x4c>)
 800ebc0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ebc2:	f043 0301 	orr.w	r3, r3, #1
 800ebc6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ebc8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 800ebca:	b086      	sub	sp, #24
  MCO1_CLK_ENABLE();
 800ebcc:	f003 0301 	and.w	r3, r3, #1
 800ebd0:	9300      	str	r3, [sp, #0]

  /* Configure the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 800ebd2:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebd6:	2000      	movs	r0, #0
  GPIO_InitStruct.Pin = MCO1_PIN;
 800ebd8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebda:	2302      	movs	r3, #2
{
 800ebdc:	460d      	mov	r5, r1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebde:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebe0:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ebe2:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800ebe4:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800ebe6:	a901      	add	r1, sp, #4
 800ebe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
{
 800ebec:	4616      	mov	r6, r2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ebee:	9304      	str	r3, [sp, #16]
  MCO1_CLK_ENABLE();
 800ebf0:	9a00      	ldr	r2, [sp, #0]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800ebf2:	f7fe f887 	bl	800cd04 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800ebf6:	68a3      	ldr	r3, [r4, #8]
 800ebf8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ebfc:	ea43 0206 	orr.w	r2, r3, r6
 800ec00:	432a      	orrs	r2, r5
 800ec02:	60a2      	str	r2, [r4, #8]
}
 800ec04:	b006      	add	sp, #24
 800ec06:	bd70      	pop	{r4, r5, r6, pc}
 800ec08:	40021000 	.word	0x40021000

0800ec0c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ec0c:	4b18      	ldr	r3, [pc, #96]	; (800ec70 <HAL_RCC_GetSysClockFreq+0x64>)
 800ec0e:	689a      	ldr	r2, [r3, #8]
 800ec10:	f002 020c 	and.w	r2, r2, #12
 800ec14:	2a04      	cmp	r2, #4
 800ec16:	d027      	beq.n	800ec68 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ec18:	689a      	ldr	r2, [r3, #8]
 800ec1a:	f002 020c 	and.w	r2, r2, #12
 800ec1e:	2a08      	cmp	r2, #8
 800ec20:	d024      	beq.n	800ec6c <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ec22:	689a      	ldr	r2, [r3, #8]
 800ec24:	f002 020c 	and.w	r2, r2, #12
 800ec28:	2a0c      	cmp	r2, #12
 800ec2a:	d001      	beq.n	800ec30 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 800ec2c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800ec2e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ec30:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ec32:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ec34:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800ec38:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ec3a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800ec3e:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ec42:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ec44:	bf0c      	ite	eq
 800ec46:	4b0b      	ldreq	r3, [pc, #44]	; (800ec74 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ec48:	4b0b      	ldrne	r3, [pc, #44]	; (800ec78 <HAL_RCC_GetSysClockFreq+0x6c>)
 800ec4a:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ec4e:	4b08      	ldr	r3, [pc, #32]	; (800ec70 <HAL_RCC_GetSysClockFreq+0x64>)
 800ec50:	68db      	ldr	r3, [r3, #12]
 800ec52:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ec56:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ec5a:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ec5c:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ec60:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800ec62:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800ec66:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800ec68:	4803      	ldr	r0, [pc, #12]	; (800ec78 <HAL_RCC_GetSysClockFreq+0x6c>)
 800ec6a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800ec6c:	4801      	ldr	r0, [pc, #4]	; (800ec74 <HAL_RCC_GetSysClockFreq+0x68>)
 800ec6e:	4770      	bx	lr
 800ec70:	40021000 	.word	0x40021000
 800ec74:	00bb8000 	.word	0x00bb8000
 800ec78:	00f42400 	.word	0x00f42400

0800ec7c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	f000 80ee 	beq.w	800ee5e <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ec82:	4a7f      	ldr	r2, [pc, #508]	; (800ee80 <HAL_RCC_ClockConfig+0x204>)
{
 800ec84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ec88:	6813      	ldr	r3, [r2, #0]
 800ec8a:	f003 030f 	and.w	r3, r3, #15
 800ec8e:	428b      	cmp	r3, r1
 800ec90:	460d      	mov	r5, r1
 800ec92:	4604      	mov	r4, r0
 800ec94:	d20c      	bcs.n	800ecb0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec96:	6813      	ldr	r3, [r2, #0]
 800ec98:	f023 030f 	bic.w	r3, r3, #15
 800ec9c:	430b      	orrs	r3, r1
 800ec9e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eca0:	6813      	ldr	r3, [r2, #0]
 800eca2:	f003 030f 	and.w	r3, r3, #15
 800eca6:	428b      	cmp	r3, r1
 800eca8:	d002      	beq.n	800ecb0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800ecaa:	2001      	movs	r0, #1
}
 800ecac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ecb0:	6823      	ldr	r3, [r4, #0]
 800ecb2:	07df      	lsls	r7, r3, #31
 800ecb4:	d563      	bpl.n	800ed7e <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ecb6:	6862      	ldr	r2, [r4, #4]
 800ecb8:	2a03      	cmp	r2, #3
 800ecba:	f000 809a 	beq.w	800edf2 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ecbe:	4b71      	ldr	r3, [pc, #452]	; (800ee84 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ecc0:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ecc2:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ecc4:	f000 8091 	beq.w	800edea <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ecc8:	055b      	lsls	r3, r3, #21
 800ecca:	d5ee      	bpl.n	800ecaa <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800eccc:	f7ff ff9e 	bl	800ec0c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800ecd0:	4b6d      	ldr	r3, [pc, #436]	; (800ee88 <HAL_RCC_ClockConfig+0x20c>)
 800ecd2:	4298      	cmp	r0, r3
 800ecd4:	f200 80c5 	bhi.w	800ee62 <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ecd8:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ecda:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ecde:	4e69      	ldr	r6, [pc, #420]	; (800ee84 <HAL_RCC_ClockConfig+0x208>)
 800ece0:	68b3      	ldr	r3, [r6, #8]
 800ece2:	f023 0303 	bic.w	r3, r3, #3
 800ece6:	431a      	orrs	r2, r3
 800ece8:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 800ecea:	f7fd fded 	bl	800c8c8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ecee:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800ecf2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ecf4:	e004      	b.n	800ed00 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ecf6:	f7fd fde7 	bl	800c8c8 <HAL_GetTick>
 800ecfa:	1bc0      	subs	r0, r0, r7
 800ecfc:	4540      	cmp	r0, r8
 800ecfe:	d871      	bhi.n	800ede4 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ed00:	68b3      	ldr	r3, [r6, #8]
 800ed02:	6862      	ldr	r2, [r4, #4]
 800ed04:	f003 030c 	and.w	r3, r3, #12
 800ed08:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800ed0c:	d1f3      	bne.n	800ecf6 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ed0e:	6823      	ldr	r3, [r4, #0]
 800ed10:	079f      	lsls	r7, r3, #30
 800ed12:	d436      	bmi.n	800ed82 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 800ed14:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800ed18:	d103      	bne.n	800ed22 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ed1a:	68b3      	ldr	r3, [r6, #8]
 800ed1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ed20:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ed22:	4e57      	ldr	r6, [pc, #348]	; (800ee80 <HAL_RCC_ClockConfig+0x204>)
 800ed24:	6833      	ldr	r3, [r6, #0]
 800ed26:	f003 030f 	and.w	r3, r3, #15
 800ed2a:	42ab      	cmp	r3, r5
 800ed2c:	d846      	bhi.n	800edbc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed2e:	6823      	ldr	r3, [r4, #0]
 800ed30:	075a      	lsls	r2, r3, #29
 800ed32:	d506      	bpl.n	800ed42 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ed34:	4953      	ldr	r1, [pc, #332]	; (800ee84 <HAL_RCC_ClockConfig+0x208>)
 800ed36:	68e0      	ldr	r0, [r4, #12]
 800ed38:	688a      	ldr	r2, [r1, #8]
 800ed3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ed3e:	4302      	orrs	r2, r0
 800ed40:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ed42:	071b      	lsls	r3, r3, #28
 800ed44:	d507      	bpl.n	800ed56 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ed46:	4a4f      	ldr	r2, [pc, #316]	; (800ee84 <HAL_RCC_ClockConfig+0x208>)
 800ed48:	6921      	ldr	r1, [r4, #16]
 800ed4a:	6893      	ldr	r3, [r2, #8]
 800ed4c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800ed50:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ed54:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ed56:	f7ff ff59 	bl	800ec0c <HAL_RCC_GetSysClockFreq>
 800ed5a:	4a4a      	ldr	r2, [pc, #296]	; (800ee84 <HAL_RCC_ClockConfig+0x208>)
 800ed5c:	4c4b      	ldr	r4, [pc, #300]	; (800ee8c <HAL_RCC_ClockConfig+0x210>)
 800ed5e:	6892      	ldr	r2, [r2, #8]
 800ed60:	494b      	ldr	r1, [pc, #300]	; (800ee90 <HAL_RCC_ClockConfig+0x214>)
 800ed62:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800ed66:	4603      	mov	r3, r0
 800ed68:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 800ed6a:	484a      	ldr	r0, [pc, #296]	; (800ee94 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ed6c:	f002 021f 	and.w	r2, r2, #31
 800ed70:	40d3      	lsrs	r3, r2
 800ed72:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800ed74:	6800      	ldr	r0, [r0, #0]
}
 800ed76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800ed7a:	f7f3 bf31 	b.w	8002be0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ed7e:	079e      	lsls	r6, r3, #30
 800ed80:	d5cf      	bpl.n	800ed22 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed82:	0758      	lsls	r0, r3, #29
 800ed84:	d504      	bpl.n	800ed90 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ed86:	493f      	ldr	r1, [pc, #252]	; (800ee84 <HAL_RCC_ClockConfig+0x208>)
 800ed88:	688a      	ldr	r2, [r1, #8]
 800ed8a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ed8e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ed90:	0719      	lsls	r1, r3, #28
 800ed92:	d506      	bpl.n	800eda2 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ed94:	4a3b      	ldr	r2, [pc, #236]	; (800ee84 <HAL_RCC_ClockConfig+0x208>)
 800ed96:	6893      	ldr	r3, [r2, #8]
 800ed98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ed9c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800eda0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eda2:	4a38      	ldr	r2, [pc, #224]	; (800ee84 <HAL_RCC_ClockConfig+0x208>)
 800eda4:	68a1      	ldr	r1, [r4, #8]
 800eda6:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800eda8:	4e35      	ldr	r6, [pc, #212]	; (800ee80 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800edaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800edae:	430b      	orrs	r3, r1
 800edb0:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800edb2:	6833      	ldr	r3, [r6, #0]
 800edb4:	f003 030f 	and.w	r3, r3, #15
 800edb8:	42ab      	cmp	r3, r5
 800edba:	d9b8      	bls.n	800ed2e <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800edbc:	6833      	ldr	r3, [r6, #0]
 800edbe:	f023 030f 	bic.w	r3, r3, #15
 800edc2:	432b      	orrs	r3, r5
 800edc4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800edc6:	f7fd fd7f 	bl	800c8c8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800edca:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800edce:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800edd0:	6833      	ldr	r3, [r6, #0]
 800edd2:	f003 030f 	and.w	r3, r3, #15
 800edd6:	42ab      	cmp	r3, r5
 800edd8:	d0a9      	beq.n	800ed2e <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800edda:	f7fd fd75 	bl	800c8c8 <HAL_GetTick>
 800edde:	1bc0      	subs	r0, r0, r7
 800ede0:	4540      	cmp	r0, r8
 800ede2:	d9f5      	bls.n	800edd0 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 800ede4:	2003      	movs	r0, #3
}
 800ede6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800edea:	039a      	lsls	r2, r3, #14
 800edec:	f53f af6e 	bmi.w	800eccc <HAL_RCC_ClockConfig+0x50>
 800edf0:	e75b      	b.n	800ecaa <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800edf2:	4924      	ldr	r1, [pc, #144]	; (800ee84 <HAL_RCC_ClockConfig+0x208>)
 800edf4:	6808      	ldr	r0, [r1, #0]
 800edf6:	0180      	lsls	r0, r0, #6
 800edf8:	f57f af57 	bpl.w	800ecaa <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800edfc:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800edfe:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ee00:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 800ee02:	4f21      	ldr	r7, [pc, #132]	; (800ee88 <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ee04:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 800ee08:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ee0a:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ee0e:	bf0c      	ite	eq
 800ee10:	4e21      	ldreq	r6, [pc, #132]	; (800ee98 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ee12:	4e22      	ldrne	r6, [pc, #136]	; (800ee9c <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ee14:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ee16:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ee1a:	4e1a      	ldr	r6, [pc, #104]	; (800ee84 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ee1c:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800ee20:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ee24:	68f0      	ldr	r0, [r6, #12]
 800ee26:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800ee2a:	3001      	adds	r0, #1
 800ee2c:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 800ee2e:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 800ee32:	42b9      	cmp	r1, r7
 800ee34:	d920      	bls.n	800ee78 <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ee36:	68b1      	ldr	r1, [r6, #8]
 800ee38:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 800ee3c:	d005      	beq.n	800ee4a <HAL_RCC_ClockConfig+0x1ce>
 800ee3e:	f013 0902 	ands.w	r9, r3, #2
 800ee42:	f43f af4c 	beq.w	800ecde <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ee46:	68a3      	ldr	r3, [r4, #8]
 800ee48:	b9b3      	cbnz	r3, 800ee78 <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ee4a:	490e      	ldr	r1, [pc, #56]	; (800ee84 <HAL_RCC_ClockConfig+0x208>)
 800ee4c:	688b      	ldr	r3, [r1, #8]
 800ee4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ee52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee56:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ee58:	f04f 0980 	mov.w	r9, #128	; 0x80
 800ee5c:	e73f      	b.n	800ecde <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 800ee5e:	2001      	movs	r0, #1
}
 800ee60:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ee62:	4a08      	ldr	r2, [pc, #32]	; (800ee84 <HAL_RCC_ClockConfig+0x208>)
 800ee64:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ee66:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ee6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ee6e:	ea43 0309 	orr.w	r3, r3, r9
 800ee72:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ee74:	6862      	ldr	r2, [r4, #4]
 800ee76:	e732      	b.n	800ecde <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ee78:	f04f 0900 	mov.w	r9, #0
 800ee7c:	e72f      	b.n	800ecde <HAL_RCC_ClockConfig+0x62>
 800ee7e:	bf00      	nop
 800ee80:	40022000 	.word	0x40022000
 800ee84:	40021000 	.word	0x40021000
 800ee88:	04c4b400 	.word	0x04c4b400
 800ee8c:	0801447c 	.word	0x0801447c
 800ee90:	200003c4 	.word	0x200003c4
 800ee94:	200006b4 	.word	0x200006b4
 800ee98:	00bb8000 	.word	0x00bb8000
 800ee9c:	00f42400 	.word	0x00f42400

0800eea0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800eea0:	4b05      	ldr	r3, [pc, #20]	; (800eeb8 <HAL_RCC_GetPCLK1Freq+0x18>)
 800eea2:	4a06      	ldr	r2, [pc, #24]	; (800eebc <HAL_RCC_GetPCLK1Freq+0x1c>)
 800eea4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800eea6:	4906      	ldr	r1, [pc, #24]	; (800eec0 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800eea8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800eeac:	6808      	ldr	r0, [r1, #0]
 800eeae:	5cd3      	ldrb	r3, [r2, r3]
 800eeb0:	f003 031f 	and.w	r3, r3, #31
}
 800eeb4:	40d8      	lsrs	r0, r3
 800eeb6:	4770      	bx	lr
 800eeb8:	40021000 	.word	0x40021000
 800eebc:	0801448c 	.word	0x0801448c
 800eec0:	200003c4 	.word	0x200003c4

0800eec4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800eec4:	4b05      	ldr	r3, [pc, #20]	; (800eedc <HAL_RCC_GetPCLK2Freq+0x18>)
 800eec6:	4a06      	ldr	r2, [pc, #24]	; (800eee0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800eec8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800eeca:	4906      	ldr	r1, [pc, #24]	; (800eee4 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800eecc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800eed0:	6808      	ldr	r0, [r1, #0]
 800eed2:	5cd3      	ldrb	r3, [r2, r3]
 800eed4:	f003 031f 	and.w	r3, r3, #31
}
 800eed8:	40d8      	lsrs	r0, r3
 800eeda:	4770      	bx	lr
 800eedc:	40021000 	.word	0x40021000
 800eee0:	0801448c 	.word	0x0801448c
 800eee4:	200003c4 	.word	0x200003c4

0800eee8 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800eee8:	4b0e      	ldr	r3, [pc, #56]	; (800ef24 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800eeea:	220f      	movs	r2, #15
 800eeec:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800eeee:	689a      	ldr	r2, [r3, #8]
 800eef0:	f002 0203 	and.w	r2, r2, #3
 800eef4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800eef6:	689a      	ldr	r2, [r3, #8]
 800eef8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800eefc:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800eefe:	689a      	ldr	r2, [r3, #8]
 800ef00:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800ef04:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	08db      	lsrs	r3, r3, #3
{
 800ef0a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ef0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ef10:	4c05      	ldr	r4, [pc, #20]	; (800ef28 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ef12:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ef14:	6823      	ldr	r3, [r4, #0]
}
 800ef16:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ef1a:	f003 030f 	and.w	r3, r3, #15
 800ef1e:	600b      	str	r3, [r1, #0]
}
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	40021000 	.word	0x40021000
 800ef28:	40022000 	.word	0x40022000

0800ef2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ef2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ef30:	6803      	ldr	r3, [r0, #0]
{
 800ef32:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ef34:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 800ef38:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ef3a:	d056      	beq.n	800efea <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ef3c:	4bac      	ldr	r3, [pc, #688]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800ef3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ef40:	00d5      	lsls	r5, r2, #3
 800ef42:	f140 813e 	bpl.w	800f1c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 800ef46:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ef48:	4daa      	ldr	r5, [pc, #680]	; (800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800ef4a:	682b      	ldr	r3, [r5, #0]
 800ef4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef50:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ef52:	f7fd fcb9 	bl	800c8c8 <HAL_GetTick>
 800ef56:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ef58:	e005      	b.n	800ef66 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ef5a:	f7fd fcb5 	bl	800c8c8 <HAL_GetTick>
 800ef5e:	1b83      	subs	r3, r0, r6
 800ef60:	2b02      	cmp	r3, #2
 800ef62:	f200 8139 	bhi.w	800f1d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ef66:	682b      	ldr	r3, [r5, #0]
 800ef68:	05d8      	lsls	r0, r3, #23
 800ef6a:	d5f6      	bpl.n	800ef5a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ef6c:	4da0      	ldr	r5, [pc, #640]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800ef6e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ef72:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800ef76:	d027      	beq.n	800efc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800ef78:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d025      	beq.n	800efca <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ef7e:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ef82:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800ef86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ef8a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ef8e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800ef92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ef96:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ef9a:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ef9e:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 800efa0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800efa4:	f140 8148 	bpl.w	800f238 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800efa8:	f7fd fc8e 	bl	800c8c8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800efac:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800efb0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800efb2:	e005      	b.n	800efc0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800efb4:	f7fd fc88 	bl	800c8c8 <HAL_GetTick>
 800efb8:	1b80      	subs	r0, r0, r6
 800efba:	4540      	cmp	r0, r8
 800efbc:	f200 810c 	bhi.w	800f1d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800efc0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800efc4:	079b      	lsls	r3, r3, #30
 800efc6:	d5f5      	bpl.n	800efb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800efc8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800efca:	4989      	ldr	r1, [pc, #548]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800efcc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800efd0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800efd4:	4313      	orrs	r3, r2
 800efd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800efda:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800efdc:	b127      	cbz	r7, 800efe8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800efde:	4a84      	ldr	r2, [pc, #528]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800efe0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800efe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800efe6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800efe8:	6823      	ldr	r3, [r4, #0]
 800efea:	07dd      	lsls	r5, r3, #31
 800efec:	d508      	bpl.n	800f000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800efee:	4980      	ldr	r1, [pc, #512]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800eff0:	6865      	ldr	r5, [r4, #4]
 800eff2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800eff6:	f022 0203 	bic.w	r2, r2, #3
 800effa:	432a      	orrs	r2, r5
 800effc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f000:	0799      	lsls	r1, r3, #30
 800f002:	d508      	bpl.n	800f016 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f004:	497a      	ldr	r1, [pc, #488]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f006:	68a5      	ldr	r5, [r4, #8]
 800f008:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f00c:	f022 020c 	bic.w	r2, r2, #12
 800f010:	432a      	orrs	r2, r5
 800f012:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f016:	075a      	lsls	r2, r3, #29
 800f018:	d508      	bpl.n	800f02c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f01a:	4975      	ldr	r1, [pc, #468]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f01c:	68e5      	ldr	r5, [r4, #12]
 800f01e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f022:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800f026:	432a      	orrs	r2, r5
 800f028:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f02c:	071f      	lsls	r7, r3, #28
 800f02e:	d508      	bpl.n	800f042 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f030:	496f      	ldr	r1, [pc, #444]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f032:	6925      	ldr	r5, [r4, #16]
 800f034:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f038:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f03c:	432a      	orrs	r2, r5
 800f03e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f042:	06de      	lsls	r6, r3, #27
 800f044:	d508      	bpl.n	800f058 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f046:	496a      	ldr	r1, [pc, #424]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f048:	6965      	ldr	r5, [r4, #20]
 800f04a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f04e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f052:	432a      	orrs	r2, r5
 800f054:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f058:	069d      	lsls	r5, r3, #26
 800f05a:	d508      	bpl.n	800f06e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f05c:	4964      	ldr	r1, [pc, #400]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f05e:	69a5      	ldr	r5, [r4, #24]
 800f060:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f064:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f068:	432a      	orrs	r2, r5
 800f06a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f06e:	0659      	lsls	r1, r3, #25
 800f070:	d508      	bpl.n	800f084 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f072:	495f      	ldr	r1, [pc, #380]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f074:	69e5      	ldr	r5, [r4, #28]
 800f076:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f07a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800f07e:	432a      	orrs	r2, r5
 800f080:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f084:	061a      	lsls	r2, r3, #24
 800f086:	d508      	bpl.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f088:	4959      	ldr	r1, [pc, #356]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f08a:	6a25      	ldr	r5, [r4, #32]
 800f08c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f090:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f094:	432a      	orrs	r2, r5
 800f096:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f09a:	05df      	lsls	r7, r3, #23
 800f09c:	d508      	bpl.n	800f0b0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f09e:	4954      	ldr	r1, [pc, #336]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f0a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f0a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f0a6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800f0aa:	432a      	orrs	r2, r5
 800f0ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f0b0:	039e      	lsls	r6, r3, #14
 800f0b2:	d508      	bpl.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f0b4:	494e      	ldr	r1, [pc, #312]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f0b6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800f0b8:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800f0bc:	f022 0203 	bic.w	r2, r2, #3
 800f0c0:	432a      	orrs	r2, r5
 800f0c2:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f0c6:	059d      	lsls	r5, r3, #22
 800f0c8:	d508      	bpl.n	800f0dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f0ca:	4949      	ldr	r1, [pc, #292]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f0cc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800f0ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f0d2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800f0d6:	432a      	orrs	r2, r5
 800f0d8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f0dc:	0559      	lsls	r1, r3, #21
 800f0de:	d50b      	bpl.n	800f0f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f0e0:	4943      	ldr	r1, [pc, #268]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f0e2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f0e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f0e8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800f0ec:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800f0ee:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f0f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800f0f6:	d071      	beq.n	800f1dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800f0f8:	051a      	lsls	r2, r3, #20
 800f0fa:	d50b      	bpl.n	800f114 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f0fc:	493c      	ldr	r1, [pc, #240]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f0fe:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800f100:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f104:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800f108:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800f10a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f10e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800f112:	d068      	beq.n	800f1e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f114:	04df      	lsls	r7, r3, #19
 800f116:	d50b      	bpl.n	800f130 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f118:	4935      	ldr	r1, [pc, #212]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f11a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800f11c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f120:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800f124:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800f126:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f12a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800f12e:	d063      	beq.n	800f1f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f130:	049e      	lsls	r6, r3, #18
 800f132:	d50b      	bpl.n	800f14c <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f134:	492e      	ldr	r1, [pc, #184]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f136:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800f138:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f13c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800f140:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f142:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f146:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f14a:	d05a      	beq.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f14c:	045d      	lsls	r5, r3, #17
 800f14e:	d50b      	bpl.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f150:	4927      	ldr	r1, [pc, #156]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f152:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800f154:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f158:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800f15c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f15e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f162:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f166:	d051      	beq.n	800f20c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800f168:	0419      	lsls	r1, r3, #16
 800f16a:	d50b      	bpl.n	800f184 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800f16c:	4920      	ldr	r1, [pc, #128]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f16e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800f170:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f174:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f178:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800f17a:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800f17e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800f182:	d048      	beq.n	800f216 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800f184:	03da      	lsls	r2, r3, #15
 800f186:	d50b      	bpl.n	800f1a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800f188:	4919      	ldr	r1, [pc, #100]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f18a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800f18c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f190:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800f194:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800f196:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800f19a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800f19e:	d03f      	beq.n	800f220 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f1a0:	035b      	lsls	r3, r3, #13
 800f1a2:	d50b      	bpl.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f1a4:	4a12      	ldr	r2, [pc, #72]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800f1a6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f1a8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800f1ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f1b0:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800f1b2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f1b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800f1ba:	d036      	beq.n	800f22a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 800f1bc:	b002      	add	sp, #8
 800f1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800f1c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f1c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f1c8:	659a      	str	r2, [r3, #88]	; 0x58
 800f1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1d0:	9301      	str	r3, [sp, #4]
 800f1d2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800f1d4:	2701      	movs	r7, #1
 800f1d6:	e6b7      	b.n	800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 800f1d8:	2003      	movs	r0, #3
 800f1da:	e6ff      	b.n	800efdc <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f1dc:	68ca      	ldr	r2, [r1, #12]
 800f1de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f1e2:	60ca      	str	r2, [r1, #12]
 800f1e4:	e788      	b.n	800f0f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f1e6:	68ca      	ldr	r2, [r1, #12]
 800f1e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f1ec:	60ca      	str	r2, [r1, #12]
 800f1ee:	e791      	b.n	800f114 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f1f0:	40021000 	.word	0x40021000
 800f1f4:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f1f8:	68ca      	ldr	r2, [r1, #12]
 800f1fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f1fe:	60ca      	str	r2, [r1, #12]
 800f200:	e796      	b.n	800f130 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f202:	68ca      	ldr	r2, [r1, #12]
 800f204:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f208:	60ca      	str	r2, [r1, #12]
 800f20a:	e79f      	b.n	800f14c <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f20c:	68ca      	ldr	r2, [r1, #12]
 800f20e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f212:	60ca      	str	r2, [r1, #12]
 800f214:	e7a8      	b.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800f216:	68ca      	ldr	r2, [r1, #12]
 800f218:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f21c:	60ca      	str	r2, [r1, #12]
 800f21e:	e7b1      	b.n	800f184 <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800f220:	68ca      	ldr	r2, [r1, #12]
 800f222:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f226:	60ca      	str	r2, [r1, #12]
 800f228:	e7ba      	b.n	800f1a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f22a:	68d3      	ldr	r3, [r2, #12]
 800f22c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f230:	60d3      	str	r3, [r2, #12]
}
 800f232:	b002      	add	sp, #8
 800f234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f238:	4613      	mov	r3, r2
 800f23a:	e6c6      	b.n	800efca <HAL_RCCEx_PeriphCLKConfig+0x9e>

0800f23c <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800f23c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800f240:	4a9f      	ldr	r2, [pc, #636]	; (800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800f242:	d055      	beq.n	800f2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 800f244:	68d3      	ldr	r3, [r2, #12]
 800f246:	f003 0303 	and.w	r3, r3, #3
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d049      	beq.n	800f2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
      else
      {
        pllvco = 0U;
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 800f24e:	68d3      	ldr	r3, [r2, #12]
 800f250:	f003 0303 	and.w	r3, r3, #3
 800f254:	2b03      	cmp	r3, #3
 800f256:	f000 810e 	beq.w	800f476 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        pllvco = 0U;
 800f25a:	2200      	movs	r2, #0
    {
      pllvco = 0U;
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800f25c:	4998      	ldr	r1, [pc, #608]	; (800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f25e:	68cb      	ldr	r3, [r1, #12]

    switch(PeriphClk)
 800f260:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800f264:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800f268:	f103 0301 	add.w	r3, r3, #1
 800f26c:	fbb2 f3f3 	udiv	r3, r2, r3
    switch(PeriphClk)
 800f270:	f000 820f 	beq.w	800f692 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800f274:	d86b      	bhi.n	800f34e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800f276:	2820      	cmp	r0, #32
 800f278:	d850      	bhi.n	800f31c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800f27a:	2800      	cmp	r0, #0
 800f27c:	d04d      	beq.n	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 800f27e:	3801      	subs	r0, #1
 800f280:	281f      	cmp	r0, #31
 800f282:	d82c      	bhi.n	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800f284:	e8df f010 	tbh	[pc, r0, lsl #1]
 800f288:	012600fe 	.word	0x012600fe
 800f28c:	0142002b 	.word	0x0142002b
 800f290:	002b002b 	.word	0x002b002b
 800f294:	015e002b 	.word	0x015e002b
 800f298:	002b002b 	.word	0x002b002b
 800f29c:	002b002b 	.word	0x002b002b
 800f2a0:	002b002b 	.word	0x002b002b
 800f2a4:	017a002b 	.word	0x017a002b
 800f2a8:	002b002b 	.word	0x002b002b
 800f2ac:	002b002b 	.word	0x002b002b
 800f2b0:	002b002b 	.word	0x002b002b
 800f2b4:	002b002b 	.word	0x002b002b
 800f2b8:	002b002b 	.word	0x002b002b
 800f2bc:	002b002b 	.word	0x002b002b
 800f2c0:	002b002b 	.word	0x002b002b
 800f2c4:	019a002b 	.word	0x019a002b
      }
      break;

    case RCC_PERIPHCLK_ADC12:
      /* Get the current ADC12 source */
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 800f2c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f2cc:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
      
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 800f2d0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800f2d4:	f000 8231 	beq.w	800f73a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
            }
          }
          frequency = (pllvco * plln) / pllp;
        }
      }
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 800f2d8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800f2dc:	d051      	beq.n	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
  uint32_t frequency = 0U;
 800f2de:	2000      	movs	r0, #0
 800f2e0:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f2e2:	6812      	ldr	r2, [r2, #0]
        pllvco = HSI_VALUE;
 800f2e4:	4b77      	ldr	r3, [pc, #476]	; (800f4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f2e6:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
 800f2ea:	bf18      	it	ne
 800f2ec:	461a      	movne	r2, r3
 800f2ee:	e7b5      	b.n	800f25c <HAL_RCCEx_GetPeriphCLKFreq+0x20>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800f2f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800f2f4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800f2f8:	0792      	lsls	r2, r2, #30
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800f2fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800f2fe:	f100 80a4 	bmi.w	800f44a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800f302:	4a6f      	ldr	r2, [pc, #444]	; (800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f304:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800f308:	0790      	lsls	r0, r2, #30
 800f30a:	f100 80a5 	bmi.w	800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800f30e:	4a6c      	ldr	r2, [pc, #432]	; (800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f310:	6810      	ldr	r0, [r2, #0]
 800f312:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800f316:	f040 80a6 	bne.w	800f466 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
      break;
    }
  }

  return(frequency);
}
 800f31a:	4770      	bx	lr
    switch(PeriphClk)
 800f31c:	2880      	cmp	r0, #128	; 0x80
 800f31e:	f000 81db 	beq.w	800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 800f322:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800f326:	d12e      	bne.n	800f386 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800f328:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 800f32c:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 800f330:	f000 809f 	beq.w	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 800f334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f338:	d023      	beq.n	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800f33a:	6808      	ldr	r0, [r1, #0]
 800f33c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800f340:	d0eb      	beq.n	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = HSI_VALUE;
 800f342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f346:	485f      	ldr	r0, [pc, #380]	; (800f4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f348:	bf18      	it	ne
 800f34a:	2000      	movne	r0, #0
 800f34c:	4770      	bx	lr
    switch(PeriphClk)
 800f34e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800f352:	d047      	beq.n	800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800f354:	d93d      	bls.n	800f3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800f356:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 800f35a:	f000 8187 	beq.w	800f66c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 800f35e:	d926      	bls.n	800f3ae <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 800f360:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800f364:	d1bb      	bne.n	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 800f366:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800f36a:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 800f36e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800f372:	f000 8157 	beq.w	800f624 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 800f376:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800f37a:	f000 81da 	beq.w	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 800f37e:	2a00      	cmp	r2, #0
 800f380:	d1ad      	bne.n	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        frequency = HAL_RCC_GetSysClockFreq();
 800f382:	f7ff bc43 	b.w	800ec0c <HAL_RCC_GetSysClockFreq>
    switch(PeriphClk)
 800f386:	2840      	cmp	r0, #64	; 0x40
 800f388:	d1a9      	bne.n	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800f38a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800f38e:	f413 5340 	ands.w	r3, r3, #12288	; 0x3000
 800f392:	d06e      	beq.n	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800f394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f398:	d0f3      	beq.n	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800f39a:	6808      	ldr	r0, [r1, #0]
 800f39c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800f3a0:	d0bb      	beq.n	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = HSI_VALUE;
 800f3a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3a6:	4847      	ldr	r0, [pc, #284]	; (800f4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f3a8:	bf18      	it	ne
 800f3aa:	2000      	movne	r0, #0
 800f3ac:	4770      	bx	lr
    switch(PeriphClk)
 800f3ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800f3b2:	d089      	beq.n	800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 800f3b4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800f3b8:	d191      	bne.n	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 800f3ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f3be:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 800f3c2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f3c6:	f000 813a 	beq.w	800f63e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 800f3ca:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800f3ce:	d186      	bne.n	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800f3d0:	e7d7      	b.n	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
    switch(PeriphClk)
 800f3d2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800f3d6:	f000 8111 	beq.w	800f5fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800f3da:	d915      	bls.n	800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
 800f3dc:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800f3e0:	f47f af7d 	bne.w	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800f3e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f3e8:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 800f3ec:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800f3f0:	f000 8118 	beq.w	800f624 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 800f3f4:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
 800f3f8:	f010 0002 	ands.w	r0, r0, #2
 800f3fc:	d08d      	beq.n	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = HSI48_VALUE;
 800f3fe:	2a00      	cmp	r2, #0
 800f400:	4831      	ldr	r0, [pc, #196]	; (800f4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f402:	bf18      	it	ne
 800f404:	2000      	movne	r0, #0
 800f406:	4770      	bx	lr
    switch(PeriphClk)
 800f408:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800f40c:	f000 8179 	beq.w	800f702 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 800f410:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800f414:	f47f af63 	bne.w	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800f418:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 800f41c:	f412 0240 	ands.w	r2, r2, #12582912	; 0xc00000
 800f420:	d0af      	beq.n	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 800f422:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800f426:	f000 819d 	beq.w	800f764 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 800f42a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800f42e:	f000 8182 	beq.w	800f736 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 800f432:	4b23      	ldr	r3, [pc, #140]	; (800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f434:	6818      	ldr	r0, [r3, #0]
 800f436:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800f43a:	f43f af6e 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = HSI_VALUE;
 800f43e:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 800f442:	4820      	ldr	r0, [pc, #128]	; (800f4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f444:	bf18      	it	ne
 800f446:	2000      	movne	r0, #0
 800f448:	4770      	bx	lr
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800f44a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f44e:	f47f af58 	bne.w	800f302 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        frequency = LSE_VALUE;
 800f452:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f456:	4770      	bx	lr
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800f458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f45c:	f47f af57 	bne.w	800f30e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        frequency = LSI_VALUE;
 800f460:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800f464:	4770      	bx	lr
      frequency = HSE_VALUE / 32U;
 800f466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f46a:	4818      	ldr	r0, [pc, #96]	; (800f4cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f46c:	bf18      	it	ne
 800f46e:	2000      	movne	r0, #0
 800f470:	4770      	bx	lr
        frequency = HAL_RCC_GetPCLK1Freq();
 800f472:	f7ff bd15 	b.w	800eea0 <HAL_RCC_GetPCLK1Freq>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f476:	6812      	ldr	r2, [r2, #0]
        pllvco = HSE_VALUE;
 800f478:	4b15      	ldr	r3, [pc, #84]	; (800f4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f47a:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800f47e:	bf18      	it	ne
 800f480:	461a      	movne	r2, r3
 800f482:	e6eb      	b.n	800f25c <HAL_RCCEx_GetPeriphCLKFreq+0x20>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800f484:	4a0e      	ldr	r2, [pc, #56]	; (800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f486:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800f48a:	f013 0303 	ands.w	r3, r3, #3
 800f48e:	f000 8167 	beq.w	800f760 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800f492:	2b01      	cmp	r3, #1
 800f494:	f43f af75 	beq.w	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 800f498:	6812      	ldr	r2, [r2, #0]
 800f49a:	0551      	lsls	r1, r2, #21
 800f49c:	d502      	bpl.n	800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 800f49e:	2b02      	cmp	r3, #2
 800f4a0:	f000 8147 	beq.w	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800f4a4:	4a06      	ldr	r2, [pc, #24]	; (800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800f4a6:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 800f4aa:	f010 0002 	ands.w	r0, r0, #2
 800f4ae:	f43f af34 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = LSE_VALUE;
 800f4b2:	2b03      	cmp	r3, #3
 800f4b4:	bf14      	ite	ne
 800f4b6:	2000      	movne	r0, #0
 800f4b8:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800f4bc:	4770      	bx	lr
 800f4be:	bf00      	nop
 800f4c0:	40021000 	.word	0x40021000
 800f4c4:	00f42400 	.word	0x00f42400
 800f4c8:	02dc6c00 	.word	0x02dc6c00
 800f4cc:	0005dc00 	.word	0x0005dc00
 800f4d0:	00bb8000 	.word	0x00bb8000
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800f4d4:	4aa9      	ldr	r2, [pc, #676]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f4d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800f4da:	f013 030c 	ands.w	r3, r3, #12
 800f4de:	d0c8      	beq.n	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800f4e0:	2b04      	cmp	r3, #4
 800f4e2:	f43f af4e 	beq.w	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800f4e6:	6812      	ldr	r2, [r2, #0]
 800f4e8:	0552      	lsls	r2, r2, #21
 800f4ea:	d502      	bpl.n	800f4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2b6>
 800f4ec:	2b08      	cmp	r3, #8
 800f4ee:	f000 8120 	beq.w	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800f4f2:	4aa2      	ldr	r2, [pc, #648]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f4f4:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 800f4f8:	f010 0002 	ands.w	r0, r0, #2
 800f4fc:	f43f af0d 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = LSE_VALUE;
 800f500:	2b0c      	cmp	r3, #12
 800f502:	bf14      	ite	ne
 800f504:	2000      	movne	r0, #0
 800f506:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800f50a:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800f50c:	4a9b      	ldr	r2, [pc, #620]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f50e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800f512:	f013 0330 	ands.w	r3, r3, #48	; 0x30
 800f516:	d0ac      	beq.n	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800f518:	2b10      	cmp	r3, #16
 800f51a:	f43f af32 	beq.w	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800f51e:	6812      	ldr	r2, [r2, #0]
 800f520:	0550      	lsls	r0, r2, #21
 800f522:	d502      	bpl.n	800f52a <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
 800f524:	2b20      	cmp	r3, #32
 800f526:	f000 8104 	beq.w	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800f52a:	4a94      	ldr	r2, [pc, #592]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f52c:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 800f530:	f010 0002 	ands.w	r0, r0, #2
 800f534:	f43f aef1 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = LSE_VALUE;
 800f538:	2b30      	cmp	r3, #48	; 0x30
 800f53a:	bf14      	ite	ne
 800f53c:	2000      	movne	r0, #0
 800f53e:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800f542:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800f544:	4a8d      	ldr	r2, [pc, #564]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f546:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800f54a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 800f54e:	d090      	beq.n	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800f550:	2b40      	cmp	r3, #64	; 0x40
 800f552:	f43f af16 	beq.w	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800f556:	6812      	ldr	r2, [r2, #0]
 800f558:	0551      	lsls	r1, r2, #21
 800f55a:	d502      	bpl.n	800f562 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800f55c:	2b80      	cmp	r3, #128	; 0x80
 800f55e:	f000 80e8 	beq.w	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800f562:	4a86      	ldr	r2, [pc, #536]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f564:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 800f568:	f010 0002 	ands.w	r0, r0, #2
 800f56c:	f43f aed5 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = LSE_VALUE;
 800f570:	2bc0      	cmp	r3, #192	; 0xc0
 800f572:	bf14      	ite	ne
 800f574:	2000      	movne	r0, #0
 800f576:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800f57a:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800f57c:	4a7f      	ldr	r2, [pc, #508]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f57e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800f582:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800f586:	f43f af74 	beq.w	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800f58a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f58e:	f43f aef8 	beq.w	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800f592:	6812      	ldr	r2, [r2, #0]
 800f594:	0552      	lsls	r2, r2, #21
 800f596:	d503      	bpl.n	800f5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800f598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f59c:	f000 80c9 	beq.w	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800f5a0:	4a76      	ldr	r2, [pc, #472]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f5a2:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 800f5a6:	f010 0002 	ands.w	r0, r0, #2
 800f5aa:	f43f aeb6 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = LSE_VALUE;
 800f5ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f5b2:	bf14      	ite	ne
 800f5b4:	2000      	movne	r0, #0
 800f5b6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800f5ba:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800f5bc:	4a6f      	ldr	r2, [pc, #444]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f5be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 800f5c2:	f413 6340 	ands.w	r3, r3, #3072	; 0xc00
 800f5c6:	f43f af54 	beq.w	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800f5ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5ce:	f43f aed8 	beq.w	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800f5d2:	6812      	ldr	r2, [r2, #0]
 800f5d4:	0550      	lsls	r0, r2, #21
 800f5d6:	d503      	bpl.n	800f5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 800f5d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f5dc:	f000 80a9 	beq.w	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800f5e0:	4a66      	ldr	r2, [pc, #408]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f5e2:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 800f5e6:	f010 0002 	ands.w	r0, r0, #2
 800f5ea:	f43f ae96 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = LSE_VALUE;
 800f5ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f5f2:	bf14      	ite	ne
 800f5f4:	2000      	movne	r0, #0
 800f5f6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800f5fa:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f5fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800f600:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 800f604:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800f608:	f43f af33 	beq.w	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 800f60c:	2a00      	cmp	r2, #0
 800f60e:	f000 8092 	beq.w	800f736 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 800f612:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f616:	f47f ae62 	bne.w	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800f61a:	68c8      	ldr	r0, [r1, #12]
 800f61c:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800f620:	f43f ae7b 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800f624:	68c8      	ldr	r0, [r1, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800f626:	68ca      	ldr	r2, [r1, #12]
 800f628:	f3c2 5241 	ubfx	r2, r2, #21, #2
 800f62c:	3201      	adds	r2, #1
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800f62e:	f3c0 2006 	ubfx	r0, r0, #8, #7
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800f632:	fb03 f000 	mul.w	r0, r3, r0
 800f636:	0053      	lsls	r3, r2, #1
 800f638:	fbb0 f0f3 	udiv	r0, r0, r3
 800f63c:	4770      	bx	lr
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 800f63e:	68c8      	ldr	r0, [r1, #12]
 800f640:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800f644:	f43f ae69 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800f648:	494c      	ldr	r1, [pc, #304]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f64a:	68c8      	ldr	r0, [r1, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800f64c:	68ca      	ldr	r2, [r1, #12]
          if(pllp == 0U)
 800f64e:	0ed2      	lsrs	r2, r2, #27
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800f650:	f3c0 2006 	ubfx	r0, r0, #8, #7
          if(pllp == 0U)
 800f654:	d105      	bne.n	800f662 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800f656:	68ca      	ldr	r2, [r1, #12]
              pllp = 7U;
 800f658:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800f65c:	bf14      	ite	ne
 800f65e:	2211      	movne	r2, #17
 800f660:	2207      	moveq	r2, #7
          frequency = (pllvco * plln) / pllp;
 800f662:	fb00 f303 	mul.w	r3, r0, r3
 800f666:	fbb3 f0f2 	udiv	r0, r3, r2
 800f66a:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800f66c:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
      if(srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800f670:	f013 0303 	ands.w	r3, r3, #3
 800f674:	f43f aefd 	beq.w	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
      else if(srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800f678:	2b01      	cmp	r3, #1
 800f67a:	f43f ae82 	beq.w	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800f67e:	6808      	ldr	r0, [r1, #0]
 800f680:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800f684:	f43f ae49 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = HSI_VALUE;
 800f688:	2b02      	cmp	r3, #2
 800f68a:	483d      	ldr	r0, [pc, #244]	; (800f780 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 800f68c:	bf18      	it	ne
 800f68e:	2000      	movne	r0, #0
 800f690:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800f692:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 800f696:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 800f69a:	f43f aeea 	beq.w	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800f69e:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 800f6a2:	0791      	lsls	r1, r2, #30
 800f6a4:	d503      	bpl.n	800f6ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800f6a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f6aa:	f43f aed9 	beq.w	800f460 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800f6ae:	4a33      	ldr	r2, [pc, #204]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f6b0:	6812      	ldr	r2, [r2, #0]
 800f6b2:	0552      	lsls	r2, r2, #21
 800f6b4:	d502      	bpl.n	800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800f6b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f6ba:	d03a      	beq.n	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800f6bc:	4a2f      	ldr	r2, [pc, #188]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f6be:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 800f6c2:	f010 0002 	ands.w	r0, r0, #2
 800f6c6:	f43f ae28 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = LSE_VALUE;
 800f6ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800f6ce:	bf14      	ite	ne
 800f6d0:	2000      	movne	r0, #0
 800f6d2:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800f6d6:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800f6d8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800f6dc:	f413 4340 	ands.w	r3, r3, #49152	; 0xc000
 800f6e0:	f43f aec7 	beq.w	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800f6e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6e8:	f43f ae4b 	beq.w	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800f6ec:	6808      	ldr	r0, [r1, #0]
 800f6ee:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800f6f2:	f43f ae12 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = HSI_VALUE;
 800f6f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6fa:	4821      	ldr	r0, [pc, #132]	; (800f780 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 800f6fc:	bf18      	it	ne
 800f6fe:	2000      	movne	r0, #0
 800f700:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800f702:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 800f706:	f412 1240 	ands.w	r2, r2, #3145728	; 0x300000
 800f70a:	f43f ae3a 	beq.w	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 800f70e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800f712:	d039      	beq.n	800f788 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 800f714:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800f718:	d00d      	beq.n	800f736 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 800f71a:	4b18      	ldr	r3, [pc, #96]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f71c:	6818      	ldr	r0, [r3, #0]
 800f71e:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800f722:	f43f adfa 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = HSI_VALUE;
 800f726:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800f72a:	4815      	ldr	r0, [pc, #84]	; (800f780 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 800f72c:	bf18      	it	ne
 800f72e:	2000      	movne	r0, #0
 800f730:	4770      	bx	lr
        frequency = HSI_VALUE;
 800f732:	4813      	ldr	r0, [pc, #76]	; (800f780 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
  return(frequency);
 800f734:	e5f1      	b.n	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        frequency = EXTERNAL_CLOCK_VALUE;
 800f736:	4813      	ldr	r0, [pc, #76]	; (800f784 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800f738:	4770      	bx	lr
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 800f73a:	68c8      	ldr	r0, [r1, #12]
 800f73c:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800f740:	f43f adeb 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800f744:	68c8      	ldr	r0, [r1, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800f746:	68ca      	ldr	r2, [r1, #12]
          if(pllp == 0U)
 800f748:	0ed2      	lsrs	r2, r2, #27
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800f74a:	f3c0 2006 	ubfx	r0, r0, #8, #7
          if(pllp == 0U)
 800f74e:	d188      	bne.n	800f662 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800f750:	4a0a      	ldr	r2, [pc, #40]	; (800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f752:	68d2      	ldr	r2, [r2, #12]
              pllp = 7U;
 800f754:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800f758:	bf14      	ite	ne
 800f75a:	2211      	movne	r2, #17
 800f75c:	2207      	moveq	r2, #7
          frequency = (pllvco * plln) / pllp;
 800f75e:	e780      	b.n	800f662 <HAL_RCCEx_GetPeriphCLKFreq+0x426>
        frequency = HAL_RCC_GetPCLK2Freq();
 800f760:	f7ff bbb0 	b.w	800eec4 <HAL_RCC_GetPCLK2Freq>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800f764:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f768:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 800f76c:	68d0      	ldr	r0, [r2, #12]
 800f76e:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800f772:	f43f add2 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800f776:	68d0      	ldr	r0, [r2, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800f778:	68d2      	ldr	r2, [r2, #12]
 800f77a:	e755      	b.n	800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
 800f77c:	40021000 	.word	0x40021000
 800f780:	00f42400 	.word	0x00f42400
 800f784:	00bb8000 	.word	0x00bb8000
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800f788:	68c8      	ldr	r0, [r1, #12]
 800f78a:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800f78e:	f43f adc4 	beq.w	800f31a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800f792:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f796:	f5a2 225f 	sub.w	r2, r2, #913408	; 0xdf000
 800f79a:	68d0      	ldr	r0, [r2, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800f79c:	68d2      	ldr	r2, [r2, #12]
 800f79e:	e743      	b.n	800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>

0800f7a0 <HAL_SAI_MspInit>:
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop

0800f7a4 <HAL_SAI_Init.part.0>:
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800f7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hsai->State == HAL_SAI_STATE_RESET)
 800f7a8:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800f7ac:	4605      	mov	r5, r0
  if (hsai->State == HAL_SAI_STATE_RESET)
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	f000 80fd 	beq.w	800f9ae <HAL_SAI_Init.part.0+0x20a>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800f7b4:	4b9f      	ldr	r3, [pc, #636]	; (800fa34 <HAL_SAI_Init.part.0+0x290>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f7b6:	6829      	ldr	r1, [r5, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	489f      	ldr	r0, [pc, #636]	; (800fa38 <HAL_SAI_Init.part.0+0x294>)
  __HAL_SAI_DISABLE(hsai);
 800f7bc:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800f7be:	fba0 0303 	umull	r0, r3, r0, r3
 800f7c2:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800f7c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800f7c8:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800f7ca:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 809b 	beq.w	800f908 <HAL_SAI_Init.part.0+0x164>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800f7d2:	680c      	ldr	r4, [r1, #0]
 800f7d4:	f414 3480 	ands.w	r4, r4, #65536	; 0x10000
    count--;
 800f7d8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800f7dc:	d1f6      	bne.n	800f7cc <HAL_SAI_Init.part.0+0x28>
  switch (hsai->Init.SynchroExt)
 800f7de:	68eb      	ldr	r3, [r5, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 800f7e0:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 800f7e2:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 800f7e4:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800f7e8:	f000 8097 	beq.w	800f91a <HAL_SAI_Init.part.0+0x176>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800f7ec:	4293      	cmp	r3, r2
  switch (hsai->Init.Synchro)
 800f7ee:	68ab      	ldr	r3, [r5, #8]
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800f7f0:	bf14      	ite	ne
 800f7f2:	2200      	movne	r2, #0
 800f7f4:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
 800f7f6:	2b02      	cmp	r3, #2
 800f7f8:	f000 8095 	beq.w	800f926 <HAL_SAI_Init.part.0+0x182>
 800f7fc:	2b03      	cmp	r3, #3
 800f7fe:	f000 80dd 	beq.w	800f9bc <HAL_SAI_Init.part.0+0x218>
 800f802:	2b01      	cmp	r3, #1
 800f804:	bf14      	ite	ne
 800f806:	2600      	movne	r6, #0
 800f808:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f80c:	4b8b      	ldr	r3, [pc, #556]	; (800fa3c <HAL_SAI_Init.part.0+0x298>)
 800f80e:	4299      	cmp	r1, r3
 800f810:	f000 808f 	beq.w	800f932 <HAL_SAI_Init.part.0+0x18e>
 800f814:	3320      	adds	r3, #32
 800f816:	4299      	cmp	r1, r3
 800f818:	f000 8102 	beq.w	800fa20 <HAL_SAI_Init.part.0+0x27c>
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f81c:	6a2b      	ldr	r3, [r5, #32]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	f040 80d1 	bne.w	800f9c6 <HAL_SAI_Init.part.0+0x222>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f824:	f8d5 e004 	ldr.w	lr, [r5, #4]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f828:	6c6a      	ldr	r2, [r5, #68]	; 0x44
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f82a:	69a8      	ldr	r0, [r5, #24]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f82c:	f8d5 c054 	ldr.w	ip, [r5, #84]	; 0x54
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f830:	f03e 0702 	bics.w	r7, lr, #2
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f834:	e9d5 3909 	ldrd	r3, r9, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f838:	f000 80b2 	beq.w	800f9a0 <HAL_SAI_Init.part.0+0x1fc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800f83c:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 800f83e:	2f01      	cmp	r7, #1
 800f840:	bf08      	it	eq
 800f842:	f44f 7400 	moveq.w	r4, #512	; 0x200
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f846:	6caf      	ldr	r7, [r5, #72]	; 0x48
 800f848:	ea4e 0e07 	orr.w	lr, lr, r7
 800f84c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f84e:	ea4e 0e07 	orr.w	lr, lr, r7
 800f852:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800f854:	ea4e 0e07 	orr.w	lr, lr, r7
 800f858:	696f      	ldr	r7, [r5, #20]
 800f85a:	ea4e 0e07 	orr.w	lr, lr, r7
 800f85e:	692f      	ldr	r7, [r5, #16]
 800f860:	ea4e 0e07 	orr.w	lr, lr, r7
 800f864:	ea4e 0606 	orr.w	r6, lr, r6
 800f868:	4332      	orrs	r2, r6
 800f86a:	4302      	orrs	r2, r0
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f86c:	680e      	ldr	r6, [r1, #0]
 800f86e:	4874      	ldr	r0, [pc, #464]	; (800fa40 <HAL_SAI_Init.part.0+0x29c>)
 800f870:	4030      	ands	r0, r6
 800f872:	6008      	str	r0, [r1, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f874:	680f      	ldr	r7, [r1, #0]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f876:	6b28      	ldr	r0, [r5, #48]	; 0x30
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f878:	ea42 0209 	orr.w	r2, r2, r9
 800f87c:	433a      	orrs	r2, r7
 800f87e:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
 800f882:	4322      	orrs	r2, r4
 800f884:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f886:	684a      	ldr	r2, [r1, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f888:	69eb      	ldr	r3, [r5, #28]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f88a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800f88e:	f022 020f 	bic.w	r2, r2, #15
 800f892:	604a      	str	r2, [r1, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f894:	4303      	orrs	r3, r0
 800f896:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800f898:	684a      	ldr	r2, [r1, #4]
 800f89a:	4303      	orrs	r3, r0
 800f89c:	4313      	orrs	r3, r2
 800f89e:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f8a0:	688b      	ldr	r3, [r1, #8]
 800f8a2:	4a68      	ldr	r2, [pc, #416]	; (800fa44 <HAL_SAI_Init.part.0+0x2a0>)
 800f8a4:	401a      	ands	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f8a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f8a8:	608a      	str	r2, [r1, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f8aa:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800f8ac:	6888      	ldr	r0, [r1, #8]
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800f8b2:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800f8b4:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800f8b6:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f8b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f8bc:	4303      	orrs	r3, r0
 800f8be:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800f8c2:	ea43 030c 	orr.w	r3, r3, ip
 800f8c6:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800f8c8:	68ca      	ldr	r2, [r1, #12]
 800f8ca:	f24f 0420 	movw	r4, #61472	; 0xf020
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f8ce:	e9d5 301a 	ldrd	r3, r0, [r5, #104]	; 0x68
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800f8d2:	4022      	ands	r2, r4
 800f8d4:	60ca      	str	r2, [r1, #12]
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f8d6:	e9d5 241c 	ldrd	r2, r4, [r5, #112]	; 0x70
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f8da:	4303      	orrs	r3, r0
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f8dc:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f8de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f8e2:	68c8      	ldr	r0, [r1, #12]
 800f8e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (hsai->Instance == SAI1_Block_A)
 800f8e8:	4a54      	ldr	r2, [pc, #336]	; (800fa3c <HAL_SAI_Init.part.0+0x298>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f8ea:	4303      	orrs	r3, r0
  if (hsai->Instance == SAI1_Block_A)
 800f8ec:	4291      	cmp	r1, r2
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f8ee:	60cb      	str	r3, [r1, #12]
  if (hsai->Instance == SAI1_Block_A)
 800f8f0:	f000 8081 	beq.w	800f9f6 <HAL_SAI_Init.part.0+0x252>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f8f4:	2000      	movs	r0, #0
  hsai->State = HAL_SAI_STATE_READY;
 800f8f6:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f8f8:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
  __HAL_UNLOCK(hsai);
 800f8fc:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 800f900:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
}
 800f904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f908:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800f90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    return HAL_ERROR;
 800f910:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f912:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
 800f916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  switch (hsai->Init.Synchro)
 800f91a:	68ab      	ldr	r3, [r5, #8]
 800f91c:	2b02      	cmp	r3, #2
  switch (hsai->Init.SynchroExt)
 800f91e:	f04f 0210 	mov.w	r2, #16
  switch (hsai->Init.Synchro)
 800f922:	f47f af6b 	bne.w	800f7fc <HAL_SAI_Init.part.0+0x58>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f926:	4b45      	ldr	r3, [pc, #276]	; (800fa3c <HAL_SAI_Init.part.0+0x298>)
 800f928:	4299      	cmp	r1, r3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f92a:	f44f 6600 	mov.w	r6, #2048	; 0x800
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f92e:	f47f af71 	bne.w	800f814 <HAL_SAI_Init.part.0+0x70>
    SAI1->GCR = tmpregisterGCR;
 800f932:	4b45      	ldr	r3, [pc, #276]	; (800fa48 <HAL_SAI_Init.part.0+0x2a4>)
 800f934:	601a      	str	r2, [r3, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f936:	6a2b      	ldr	r3, [r5, #32]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	f43f af73 	beq.w	800f824 <HAL_SAI_Init.part.0+0x80>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800f93e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f942:	f7ff fc7b 	bl	800f23c <HAL_RCCEx_GetPeriphCLKFreq>
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f946:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f94a:	ea4f 0e40 	mov.w	lr, r0, lsl #1
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f94e:	69a8      	ldr	r0, [r5, #24]
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f950:	6a2b      	ldr	r3, [r5, #32]
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f952:	6829      	ldr	r1, [r5, #0]
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f954:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800f958:	d03b      	beq.n	800f9d2 <HAL_SAI_Init.part.0+0x22e>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800f95a:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f95e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
        tmpframelength = hsai->FrameInit.FrameLength;
 800f960:	f8d5 c054 	ldr.w	ip, [r5, #84]	; 0x54
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800f964:	f1b9 6f80 	cmp.w	r9, #67108864	; 0x4000000
 800f968:	bf08      	it	eq
 800f96a:	005b      	lsleq	r3, r3, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800f96c:	021b      	lsls	r3, r3, #8
 800f96e:	fbbe fef3 	udiv	lr, lr, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 800f972:	4b36      	ldr	r3, [pc, #216]	; (800fa4c <HAL_SAI_Init.part.0+0x2a8>)
 800f974:	fba3 730e 	umull	r7, r3, r3, lr
 800f978:	08db      	lsrs	r3, r3, #3
    if ((tmpval % 10U) > 8U)
 800f97a:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 800f97e:	ebae 0e48 	sub.w	lr, lr, r8, lsl #1
 800f982:	f1be 0f09 	cmp.w	lr, #9
      hsai->Init.Mckdiv += 1U;
 800f986:	bf08      	it	eq
 800f988:	3301      	addeq	r3, #1
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f98a:	f8d5 e004 	ldr.w	lr, [r5, #4]
      hsai->Init.Mckdiv += 1U;
 800f98e:	626b      	str	r3, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f990:	2a04      	cmp	r2, #4
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f992:	bf04      	itt	eq
 800f994:	085b      	lsreq	r3, r3, #1
 800f996:	626b      	streq	r3, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f998:	f03e 0702 	bics.w	r7, lr, #2
 800f99c:	f47f af4e 	bne.w	800f83c <HAL_SAI_Init.part.0+0x98>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800f9a0:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800f9a2:	2c01      	cmp	r4, #1
 800f9a4:	bf14      	ite	ne
 800f9a6:	f44f 7400 	movne.w	r4, #512	; 0x200
 800f9aa:	2400      	moveq	r4, #0
 800f9ac:	e74b      	b.n	800f846 <HAL_SAI_Init.part.0+0xa2>
 800f9ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    hsai->Lock = HAL_UNLOCKED;
 800f9b2:	f880 2090 	strb.w	r2, [r0, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800f9b6:	f7ff fef3 	bl	800f7a0 <HAL_SAI_MspInit>
 800f9ba:	e6fb      	b.n	800f7b4 <HAL_SAI_Init.part.0+0x10>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800f9bc:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f9c0:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 800f9c4:	e722      	b.n	800f80c <HAL_SAI_Init.part.0+0x68>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f9c6:	69a8      	ldr	r0, [r5, #24]
 800f9c8:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f9cc:	f04f 0e00 	mov.w	lr, #0
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f9d0:	d1c3      	bne.n	800f95a <HAL_SAI_Init.part.0+0x1b6>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f9d2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800f9d4:	2a04      	cmp	r2, #4
 800f9d6:	d029      	beq.n	800fa2c <HAL_SAI_Init.part.0+0x288>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800f9d8:	2a08      	cmp	r2, #8
        tmpframelength = hsai->FrameInit.FrameLength;
 800f9da:	bf13      	iteet	ne
 800f9dc:	6d6f      	ldrne	r7, [r5, #84]	; 0x54
 800f9de:	f8d5 c054 	ldreq.w	ip, [r5, #84]	; 0x54
        tmpframelength = 256U;
 800f9e2:	f44f 7780 	moveq.w	r7, #256	; 0x100
        tmpframelength = hsai->FrameInit.FrameLength;
 800f9e6:	46bc      	movne	ip, r7
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f9e8:	fb07 f303 	mul.w	r3, r7, r3
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800f9ec:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f9f0:	fbbe fef3 	udiv	lr, lr, r3
 800f9f4:	e7bd      	b.n	800f972 <HAL_SAI_Init.part.0+0x1ce>
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800f9f6:	4b14      	ldr	r3, [pc, #80]	; (800fa48 <HAL_SAI_Init.part.0+0x2a4>)
 800f9f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9fa:	f022 0201 	bic.w	r2, r2, #1
 800f9fe:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800fa00:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
 800fa04:	2a01      	cmp	r2, #1
 800fa06:	f47f af75 	bne.w	800f8f4 <HAL_SAI_Init.part.0+0x150>
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800fa0a:	e9d5 120f 	ldrd	r1, r2, [r5, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800fa0e:	3901      	subs	r1, #1
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800fa10:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800fa14:	645a      	str	r2, [r3, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800fa16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa18:	f042 0201 	orr.w	r2, r2, #1
 800fa1c:	645a      	str	r2, [r3, #68]	; 0x44
 800fa1e:	e769      	b.n	800f8f4 <HAL_SAI_Init.part.0+0x150>
    SAI1->GCR = tmpregisterGCR;
 800fa20:	4b09      	ldr	r3, [pc, #36]	; (800fa48 <HAL_SAI_Init.part.0+0x2a4>)
 800fa22:	601a      	str	r2, [r3, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800fa24:	6a2b      	ldr	r3, [r5, #32]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d189      	bne.n	800f93e <HAL_SAI_Init.part.0+0x19a>
 800fa2a:	e6fb      	b.n	800f824 <HAL_SAI_Init.part.0+0x80>
        tmpframelength = hsai->FrameInit.FrameLength;
 800fa2c:	f8d5 c054 	ldr.w	ip, [r5, #84]	; 0x54
        tmpframelength = 64U;
 800fa30:	2740      	movs	r7, #64	; 0x40
 800fa32:	e7d9      	b.n	800f9e8 <HAL_SAI_Init.part.0+0x244>
 800fa34:	200003c4 	.word	0x200003c4
 800fa38:	95cbec1b 	.word	0x95cbec1b
 800fa3c:	40015404 	.word	0x40015404
 800fa40:	f005c010 	.word	0xf005c010
 800fa44:	fff88000 	.word	0xfff88000
 800fa48:	40015400 	.word	0x40015400
 800fa4c:	cccccccd 	.word	0xcccccccd

0800fa50 <HAL_SAI_InitProtocol>:
  switch (protocol)
 800fa50:	2902      	cmp	r1, #2
{
 800fa52:	b430      	push	{r4, r5}
  switch (protocol)
 800fa54:	d92c      	bls.n	800fab0 <HAL_SAI_InitProtocol+0x60>
 800fa56:	f1a1 0c03 	sub.w	ip, r1, #3
 800fa5a:	f1bc 0f01 	cmp.w	ip, #1
 800fa5e:	d824      	bhi.n	800faaa <HAL_SAI_InitProtocol+0x5a>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800fa60:	2400      	movs	r4, #0
 800fa62:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800fa64:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800fa66:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 800fa68:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800fa6a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fa6e:	e9c0 341c 	strd	r3, r4, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fa72:	6844      	ldr	r4, [r0, #4]
 800fa74:	f034 0502 	bics.w	r5, r4, #2
 800fa78:	bf0c      	ite	eq
 800fa7a:	2501      	moveq	r5, #1
 800fa7c:	2500      	movne	r5, #0
 800fa7e:	6505      	str	r5, [r0, #80]	; 0x50
    hsai->FrameInit.ActiveFrameLength = 13;
 800fa80:	2904      	cmp	r1, #4
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800fa82:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800fa86:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800fa8a:	e9c0 5118 	strd	r5, r1, [r0, #96]	; 0x60
    hsai->FrameInit.ActiveFrameLength = 13;
 800fa8e:	bf0c      	ite	eq
 800fa90:	2101      	moveq	r1, #1
 800fa92:	210d      	movne	r1, #13
 800fa94:	6581      	str	r1, [r0, #88]	; 0x58
  switch (datasize)
 800fa96:	2a03      	cmp	r2, #3
 800fa98:	d807      	bhi.n	800faaa <HAL_SAI_InitProtocol+0x5a>
 800fa9a:	e8df f002 	tbb	[pc, r2]
 800fa9e:	4033      	.short	0x4033
 800faa0:	4d46      	.short	0x4d46
    if ((hsai->Instance != SAI1_Block_A) ||
 800faa2:	4b42      	ldr	r3, [pc, #264]	; (800fbac <HAL_SAI_InitProtocol+0x15c>)
 800faa4:	6802      	ldr	r2, [r0, #0]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d048      	beq.n	800fb3c <HAL_SAI_InitProtocol+0xec>
}
 800faaa:	2001      	movs	r0, #1
 800faac:	bc30      	pop	{r4, r5}
 800faae:	4770      	bx	lr
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800fab0:	2400      	movs	r4, #0
 800fab2:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800fab4:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 800fab6:	6684      	str	r4, [r0, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fab8:	6844      	ldr	r4, [r0, #4]
  hsai->SlotInit.SlotNumber      = nbslot;
 800faba:	6703      	str	r3, [r0, #112]	; 0x70
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fabc:	f034 0502 	bics.w	r5, r4, #2
 800fac0:	bf14      	ite	ne
 800fac2:	2501      	movne	r5, #1
 800fac4:	2500      	moveq	r5, #0
 800fac6:	6505      	str	r5, [r0, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800fac8:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800facc:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800face:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800fad2:	6745      	str	r5, [r0, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 800fad4:	f013 0501 	ands.w	r5, r3, #1
 800fad8:	d1e7      	bne.n	800faaa <HAL_SAI_InitProtocol+0x5a>
  if (protocol == SAI_I2S_STANDARD)
 800fada:	b949      	cbnz	r1, 800faf0 <HAL_SAI_InitProtocol+0xa0>
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800fadc:	f44f 2580 	mov.w	r5, #262144	; 0x40000
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800fae0:	6601      	str	r1, [r0, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800fae2:	6645      	str	r5, [r0, #100]	; 0x64
  switch (datasize)
 800fae4:	2a03      	cmp	r2, #3
 800fae6:	d8e0      	bhi.n	800faaa <HAL_SAI_InitProtocol+0x5a>
 800fae8:	e8df f002 	tbb	[pc, r2]
 800faec:	2e384655 	.word	0x2e384655
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800faf0:	6645      	str	r5, [r0, #100]	; 0x64
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800faf2:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800faf6:	6605      	str	r5, [r0, #96]	; 0x60
  switch (datasize)
 800faf8:	2a03      	cmp	r2, #3
 800fafa:	d8d6      	bhi.n	800faaa <HAL_SAI_InitProtocol+0x5a>
 800fafc:	e8df f002 	tbb	[pc, r2]
 800fb00:	242e3c4b 	.word	0x242e3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fb04:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800fb06:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800fb08:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fb0a:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800fb0c:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800fb0e:	66c2      	str	r2, [r0, #108]	; 0x6c
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800fb10:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800fb14:	2b01      	cmp	r3, #1
 800fb16:	d0c4      	beq.n	800faa2 <HAL_SAI_InitProtocol+0x52>
}
 800fb18:	bc30      	pop	{r4, r5}
 800fb1a:	f7ff be43 	b.w	800f7a4 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fb1e:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800fb20:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fb22:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800fb24:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fb26:	66c2      	str	r2, [r0, #108]	; 0x6c
  if (status == HAL_OK)
 800fb28:	e7f2      	b.n	800fb10 <HAL_SAI_InitProtocol+0xc0>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800fb2a:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800fb2c:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fb2e:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800fb30:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800fb32:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fb34:	66c2      	str	r2, [r0, #108]	; 0x6c
  if (status == HAL_OK)
 800fb36:	e7eb      	b.n	800fb10 <HAL_SAI_InitProtocol+0xc0>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800fb38:	21e0      	movs	r1, #224	; 0xe0
 800fb3a:	e7f7      	b.n	800fb2c <HAL_SAI_InitProtocol+0xdc>
    if ((hsai->Instance != SAI1_Block_A) ||
 800fb3c:	2c01      	cmp	r4, #1
 800fb3e:	d1b4      	bne.n	800faaa <HAL_SAI_InitProtocol+0x5a>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800fb40:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d0e8      	beq.n	800fb18 <HAL_SAI_InitProtocol+0xc8>
 800fb46:	e7b0      	b.n	800faaa <HAL_SAI_InitProtocol+0x5a>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fb48:	085b      	lsrs	r3, r3, #1
 800fb4a:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800fb4c:	21e0      	movs	r1, #224	; 0xe0
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fb4e:	015b      	lsls	r3, r3, #5
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fb50:	6542      	str	r2, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fb52:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800fb54:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fb56:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fb58:	66c2      	str	r2, [r0, #108]	; 0x6c
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800fb5a:	e7d9      	b.n	800fb10 <HAL_SAI_InitProtocol+0xc0>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fb5c:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800fb5e:	22c0      	movs	r2, #192	; 0xc0
 800fb60:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fb62:	019a      	lsls	r2, r3, #6
 800fb64:	6542      	str	r2, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fb66:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fb68:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800fb6a:	2902      	cmp	r1, #2
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fb6c:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fb6e:	66c2      	str	r2, [r0, #108]	; 0x6c
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800fb70:	d1ce      	bne.n	800fb10 <HAL_SAI_InitProtocol+0xc0>
      hsai->SlotInit.FirstBitOffset = 8;
 800fb72:	2308      	movs	r3, #8
 800fb74:	6683      	str	r3, [r0, #104]	; 0x68
  if (status == HAL_OK)
 800fb76:	e7cb      	b.n	800fb10 <HAL_SAI_InitProtocol+0xc0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fb78:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fb7a:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fb7c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fb7e:	66c2      	str	r2, [r0, #108]	; 0x6c
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800fb80:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fb82:	ea4f 1283 	mov.w	r2, r3, lsl #6
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fb86:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800fb8a:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800fb8e:	d1bf      	bne.n	800fb10 <HAL_SAI_InitProtocol+0xc0>
      hsai->SlotInit.FirstBitOffset = 16;
 800fb90:	2310      	movs	r3, #16
 800fb92:	6683      	str	r3, [r0, #104]	; 0x68
  if (status == HAL_OK)
 800fb94:	e7bc      	b.n	800fb10 <HAL_SAI_InitProtocol+0xc0>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800fb96:	085b      	lsrs	r3, r3, #1
 800fb98:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fb9a:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800fb9c:	011b      	lsls	r3, r3, #4
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800fb9e:	6542      	str	r2, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800fba0:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fba2:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800fba4:	6583      	str	r3, [r0, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800fba6:	66c2      	str	r2, [r0, #108]	; 0x6c
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800fba8:	e7b2      	b.n	800fb10 <HAL_SAI_InitProtocol+0xc0>
 800fbaa:	bf00      	nop
 800fbac:	40015404 	.word	0x40015404

0800fbb0 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	d077      	beq.n	800fca4 <HAL_SPI_Init+0xf4>
{
 800fbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800fbb8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fbba:	4604      	mov	r4, r0
 800fbbc:	2e00      	cmp	r6, #0
 800fbbe:	d058      	beq.n	800fc72 <HAL_SPI_Init+0xc2>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800fbc0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800fbc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fbc6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fbca:	2200      	movs	r2, #0
 800fbcc:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800fbce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d059      	beq.n	800fc8a <HAL_SPI_Init+0xda>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fbd6:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fbd8:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800fbda:	2302      	movs	r3, #2
 800fbdc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800fbe0:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fbe2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800fbe6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800fbea:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fbec:	d947      	bls.n	800fc7e <HAL_SPI_Init+0xce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800fbee:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800fbf2:	d159      	bne.n	800fca8 <HAL_SPI_Init+0xf8>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fbf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800fbf6:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fbf8:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 800fbfc:	68a3      	ldr	r3, [r4, #8]
 800fbfe:	6a27      	ldr	r7, [r4, #32]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fc00:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fc04:	6862      	ldr	r2, [r4, #4]
 800fc06:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800fc0a:	f402 7282 	and.w	r2, r2, #260	; 0x104
 800fc0e:	431a      	orrs	r2, r3
 800fc10:	6923      	ldr	r3, [r4, #16]
 800fc12:	f003 0302 	and.w	r3, r3, #2
 800fc16:	431a      	orrs	r2, r3
 800fc18:	6963      	ldr	r3, [r4, #20]
 800fc1a:	f003 0301 	and.w	r3, r3, #1
 800fc1e:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fc20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc22:	f003 0308 	and.w	r3, r3, #8
 800fc26:	f006 0c10 	and.w	ip, r6, #16
 800fc2a:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fc2e:	69a6      	ldr	r6, [r4, #24]
 800fc30:	69e3      	ldr	r3, [r4, #28]
 800fc32:	f003 0838 	and.w	r8, r3, #56	; 0x38
 800fc36:	f406 7300 	and.w	r3, r6, #512	; 0x200
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	f007 0780 	and.w	r7, r7, #128	; 0x80
 800fc40:	ea43 0308 	orr.w	r3, r3, r8
 800fc44:	433b      	orrs	r3, r7
 800fc46:	432b      	orrs	r3, r5
 800fc48:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fc4a:	0c33      	lsrs	r3, r6, #16
 800fc4c:	f003 0304 	and.w	r3, r3, #4
 800fc50:	ea4e 0303 	orr.w	r3, lr, r3
 800fc54:	ea43 030c 	orr.w	r3, r3, ip
 800fc58:	4303      	orrs	r3, r0
 800fc5a:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fc5c:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fc5e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fc60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800fc64:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fc66:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fc68:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800fc6a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  return HAL_OK;
}
 800fc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fc72:	6843      	ldr	r3, [r0, #4]
 800fc74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc78:	d0a5      	beq.n	800fbc6 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800fc7a:	61c6      	str	r6, [r0, #28]
 800fc7c:	e7a3      	b.n	800fbc6 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800fc7e:	d00b      	beq.n	800fc98 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fc80:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fc84:	2500      	movs	r5, #0
 800fc86:	62a5      	str	r5, [r4, #40]	; 0x28
 800fc88:	e7b8      	b.n	800fbfc <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 800fc8a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800fc8e:	4620      	mov	r0, r4
 800fc90:	f7f2 fe7c 	bl	800298c <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800fc94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fc96:	e79e      	b.n	800fbd6 <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fc98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fc9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800fc9e:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 800fca2:	e7ab      	b.n	800fbfc <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 800fca4:	2001      	movs	r0, #1
}
 800fca6:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800fca8:	2000      	movs	r0, #0
 800fcaa:	e7eb      	b.n	800fc84 <HAL_SPI_Init+0xd4>

0800fcac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fcac:	6a03      	ldr	r3, [r0, #32]
 800fcae:	f023 0301 	bic.w	r3, r3, #1
 800fcb2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcb4:	6a03      	ldr	r3, [r0, #32]
{
 800fcb6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcb8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fcba:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fcbc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fcbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fcc2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800fcc6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fcc8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800fcca:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800fcce:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fcd0:	4d15      	ldr	r5, [pc, #84]	; (800fd28 <TIM_OC1_SetConfig+0x7c>)
 800fcd2:	42a8      	cmp	r0, r5
 800fcd4:	d013      	beq.n	800fcfe <TIM_OC1_SetConfig+0x52>
 800fcd6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800fcda:	42a8      	cmp	r0, r5
 800fcdc:	d00f      	beq.n	800fcfe <TIM_OC1_SetConfig+0x52>
 800fcde:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800fce2:	42a8      	cmp	r0, r5
 800fce4:	d00b      	beq.n	800fcfe <TIM_OC1_SetConfig+0x52>
 800fce6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fcea:	42a8      	cmp	r0, r5
 800fcec:	d007      	beq.n	800fcfe <TIM_OC1_SetConfig+0x52>
 800fcee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fcf2:	42a8      	cmp	r0, r5
 800fcf4:	d003      	beq.n	800fcfe <TIM_OC1_SetConfig+0x52>
 800fcf6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800fcfa:	42a8      	cmp	r0, r5
 800fcfc:	d10d      	bne.n	800fd1a <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fcfe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800fd00:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800fd04:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fd06:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fd0a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800fd0e:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800fd12:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800fd16:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fd1a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800fd1c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800fd1e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800fd20:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800fd22:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800fd24:	6203      	str	r3, [r0, #32]
}
 800fd26:	4770      	bx	lr
 800fd28:	40012c00 	.word	0x40012c00

0800fd2c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fd2c:	6a03      	ldr	r3, [r0, #32]
 800fd2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd32:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd34:	6a03      	ldr	r3, [r0, #32]
{
 800fd36:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd38:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd3a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd3c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fd3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fd42:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800fd46:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fd48:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800fd4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fd4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fd52:	4d1c      	ldr	r5, [pc, #112]	; (800fdc4 <TIM_OC3_SetConfig+0x98>)
 800fd54:	42a8      	cmp	r0, r5
 800fd56:	d017      	beq.n	800fd88 <TIM_OC3_SetConfig+0x5c>
 800fd58:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800fd5c:	42a8      	cmp	r0, r5
 800fd5e:	d013      	beq.n	800fd88 <TIM_OC3_SetConfig+0x5c>
 800fd60:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800fd64:	42a8      	cmp	r0, r5
 800fd66:	d025      	beq.n	800fdb4 <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd68:	4d17      	ldr	r5, [pc, #92]	; (800fdc8 <TIM_OC3_SetConfig+0x9c>)
 800fd6a:	42a8      	cmp	r0, r5
 800fd6c:	d013      	beq.n	800fd96 <TIM_OC3_SetConfig+0x6a>
 800fd6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fd72:	42a8      	cmp	r0, r5
 800fd74:	d00f      	beq.n	800fd96 <TIM_OC3_SetConfig+0x6a>
 800fd76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fd7a:	42a8      	cmp	r0, r5
 800fd7c:	d00b      	beq.n	800fd96 <TIM_OC3_SetConfig+0x6a>
 800fd7e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800fd82:	42a8      	cmp	r0, r5
 800fd84:	d10f      	bne.n	800fda6 <TIM_OC3_SetConfig+0x7a>
 800fd86:	e006      	b.n	800fd96 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fd88:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800fd8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fd8e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800fd92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fd96:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fd9a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fd9e:	ea46 0c05 	orr.w	ip, r6, r5
 800fda2:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fda6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800fda8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800fdaa:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800fdac:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 800fdae:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800fdb0:	6203      	str	r3, [r0, #32]
}
 800fdb2:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fdb4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800fdb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fdba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800fdbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fdc2:	e7d1      	b.n	800fd68 <TIM_OC3_SetConfig+0x3c>
 800fdc4:	40012c00 	.word	0x40012c00
 800fdc8:	40014000 	.word	0x40014000

0800fdcc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fdcc:	6a03      	ldr	r3, [r0, #32]
 800fdce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fdd2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdd4:	6a03      	ldr	r3, [r0, #32]
{
 800fdd6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdd8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fdda:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fddc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fdde:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800fde2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fde6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fdea:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800fdec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fdf0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800fdf4:	4d1c      	ldr	r5, [pc, #112]	; (800fe68 <TIM_OC4_SetConfig+0x9c>)
 800fdf6:	42a8      	cmp	r0, r5
 800fdf8:	d017      	beq.n	800fe2a <TIM_OC4_SetConfig+0x5e>
 800fdfa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800fdfe:	42a8      	cmp	r0, r5
 800fe00:	d013      	beq.n	800fe2a <TIM_OC4_SetConfig+0x5e>
 800fe02:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800fe06:	42a8      	cmp	r0, r5
 800fe08:	d025      	beq.n	800fe56 <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe0a:	4d18      	ldr	r5, [pc, #96]	; (800fe6c <TIM_OC4_SetConfig+0xa0>)
 800fe0c:	42a8      	cmp	r0, r5
 800fe0e:	d013      	beq.n	800fe38 <TIM_OC4_SetConfig+0x6c>
 800fe10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fe14:	42a8      	cmp	r0, r5
 800fe16:	d00f      	beq.n	800fe38 <TIM_OC4_SetConfig+0x6c>
 800fe18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800fe1c:	42a8      	cmp	r0, r5
 800fe1e:	d00b      	beq.n	800fe38 <TIM_OC4_SetConfig+0x6c>
 800fe20:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800fe24:	42a8      	cmp	r0, r5
 800fe26:	d10f      	bne.n	800fe48 <TIM_OC4_SetConfig+0x7c>
 800fe28:	e006      	b.n	800fe38 <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800fe2a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800fe2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800fe30:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800fe34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800fe38:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800fe3c:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800fe40:	ea46 0c05 	orr.w	ip, r6, r5
 800fe44:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fe48:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800fe4a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800fe4c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800fe4e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 800fe50:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800fe52:	6203      	str	r3, [r0, #32]
}
 800fe54:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800fe56:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800fe58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800fe5c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800fe60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe64:	e7d1      	b.n	800fe0a <TIM_OC4_SetConfig+0x3e>
 800fe66:	bf00      	nop
 800fe68:	40012c00 	.word	0x40012c00
 800fe6c:	40014000 	.word	0x40014000

0800fe70 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fe70:	6a03      	ldr	r3, [r0, #32]
 800fe72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fe76:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe78:	6a03      	ldr	r3, [r0, #32]
{
 800fe7a:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe7c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fe7e:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe80:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fe82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fe86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800fe8a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fe8c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800fe8e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fe92:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe96:	4d11      	ldr	r5, [pc, #68]	; (800fedc <TIM_OC5_SetConfig+0x6c>)
 800fe98:	42a8      	cmp	r0, r5
 800fe9a:	d013      	beq.n	800fec4 <TIM_OC5_SetConfig+0x54>
 800fe9c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800fea0:	42a8      	cmp	r0, r5
 800fea2:	d00f      	beq.n	800fec4 <TIM_OC5_SetConfig+0x54>
 800fea4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800fea8:	42a8      	cmp	r0, r5
 800feaa:	d00b      	beq.n	800fec4 <TIM_OC5_SetConfig+0x54>
 800feac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800feb0:	42a8      	cmp	r0, r5
 800feb2:	d007      	beq.n	800fec4 <TIM_OC5_SetConfig+0x54>
 800feb4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800feb8:	42a8      	cmp	r0, r5
 800feba:	d003      	beq.n	800fec4 <TIM_OC5_SetConfig+0x54>
 800febc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800fec0:	42a8      	cmp	r0, r5
 800fec2:	d104      	bne.n	800fece <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fec4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fec6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800feca:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fece:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800fed0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800fed2:	6502      	str	r2, [r0, #80]	; 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800fed4:	bc30      	pop	{r4, r5}
  TIMx->CCR5 = OC_Config->Pulse;
 800fed6:	6481      	str	r1, [r0, #72]	; 0x48
  TIMx->CCER = tmpccer;
 800fed8:	6203      	str	r3, [r0, #32]
}
 800feda:	4770      	bx	lr
 800fedc:	40012c00 	.word	0x40012c00

0800fee0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fee0:	6a03      	ldr	r3, [r0, #32]
 800fee2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fee6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fee8:	6a03      	ldr	r3, [r0, #32]
{
 800feea:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800feec:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800feee:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fef0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fef2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800fef6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fefa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fefe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ff00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ff04:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff08:	4d11      	ldr	r5, [pc, #68]	; (800ff50 <TIM_OC6_SetConfig+0x70>)
 800ff0a:	42a8      	cmp	r0, r5
 800ff0c:	d013      	beq.n	800ff36 <TIM_OC6_SetConfig+0x56>
 800ff0e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800ff12:	42a8      	cmp	r0, r5
 800ff14:	d00f      	beq.n	800ff36 <TIM_OC6_SetConfig+0x56>
 800ff16:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800ff1a:	42a8      	cmp	r0, r5
 800ff1c:	d00b      	beq.n	800ff36 <TIM_OC6_SetConfig+0x56>
 800ff1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ff22:	42a8      	cmp	r0, r5
 800ff24:	d007      	beq.n	800ff36 <TIM_OC6_SetConfig+0x56>
 800ff26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ff2a:	42a8      	cmp	r0, r5
 800ff2c:	d003      	beq.n	800ff36 <TIM_OC6_SetConfig+0x56>
 800ff2e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800ff32:	42a8      	cmp	r0, r5
 800ff34:	d104      	bne.n	800ff40 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ff36:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ff38:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ff3c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ff40:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800ff42:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800ff44:	6502      	str	r2, [r0, #80]	; 0x50

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800ff46:	bc30      	pop	{r4, r5}
  TIMx->CCR6 = OC_Config->Pulse;
 800ff48:	64c1      	str	r1, [r0, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 800ff4a:	6203      	str	r3, [r0, #32]
}
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	40012c00 	.word	0x40012c00

0800ff54 <HAL_TIM_Base_MspInit>:
}
 800ff54:	4770      	bx	lr
 800ff56:	bf00      	nop

0800ff58 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800ff58:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d12f      	bne.n	800ffc0 <HAL_TIM_Base_Start+0x68>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff60:	6803      	ldr	r3, [r0, #0]
 800ff62:	4a19      	ldr	r2, [pc, #100]	; (800ffc8 <HAL_TIM_Base_Start+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ff64:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff66:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 800ff68:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff6c:	d01a      	beq.n	800ffa4 <HAL_TIM_Base_Start+0x4c>
 800ff6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff72:	d017      	beq.n	800ffa4 <HAL_TIM_Base_Start+0x4c>
 800ff74:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d013      	beq.n	800ffa4 <HAL_TIM_Base_Start+0x4c>
 800ff7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d00f      	beq.n	800ffa4 <HAL_TIM_Base_Start+0x4c>
 800ff84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d00b      	beq.n	800ffa4 <HAL_TIM_Base_Start+0x4c>
 800ff8c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800ff90:	4293      	cmp	r3, r2
 800ff92:	d007      	beq.n	800ffa4 <HAL_TIM_Base_Start+0x4c>
 800ff94:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d003      	beq.n	800ffa4 <HAL_TIM_Base_Start+0x4c>
 800ff9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d107      	bne.n	800ffb4 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ffa4:	6899      	ldr	r1, [r3, #8]
 800ffa6:	4a09      	ldr	r2, [pc, #36]	; (800ffcc <HAL_TIM_Base_Start+0x74>)
 800ffa8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ffaa:	2a06      	cmp	r2, #6
 800ffac:	d00a      	beq.n	800ffc4 <HAL_TIM_Base_Start+0x6c>
 800ffae:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ffb2:	d007      	beq.n	800ffc4 <HAL_TIM_Base_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800ffba:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800ffbc:	601a      	str	r2, [r3, #0]
 800ffbe:	4770      	bx	lr
    return HAL_ERROR;
 800ffc0:	2001      	movs	r0, #1
 800ffc2:	4770      	bx	lr
  return HAL_OK;
 800ffc4:	2000      	movs	r0, #0
}
 800ffc6:	4770      	bx	lr
 800ffc8:	40012c00 	.word	0x40012c00
 800ffcc:	00010007 	.word	0x00010007

0800ffd0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800ffd0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d132      	bne.n	801003e <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ffd8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffda:	491b      	ldr	r1, [pc, #108]	; (8010048 <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ffdc:	2202      	movs	r2, #2
 800ffde:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ffe2:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffe4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ffe6:	f042 0201 	orr.w	r2, r2, #1
 800ffea:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffec:	d019      	beq.n	8010022 <HAL_TIM_Base_Start_IT+0x52>
 800ffee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fff2:	d016      	beq.n	8010022 <HAL_TIM_Base_Start_IT+0x52>
 800fff4:	4a15      	ldr	r2, [pc, #84]	; (801004c <HAL_TIM_Base_Start_IT+0x7c>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d013      	beq.n	8010022 <HAL_TIM_Base_Start_IT+0x52>
 800fffa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fffe:	4293      	cmp	r3, r2
 8010000:	d00f      	beq.n	8010022 <HAL_TIM_Base_Start_IT+0x52>
 8010002:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010006:	4293      	cmp	r3, r2
 8010008:	d00b      	beq.n	8010022 <HAL_TIM_Base_Start_IT+0x52>
 801000a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 801000e:	4293      	cmp	r3, r2
 8010010:	d007      	beq.n	8010022 <HAL_TIM_Base_Start_IT+0x52>
 8010012:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8010016:	4293      	cmp	r3, r2
 8010018:	d003      	beq.n	8010022 <HAL_TIM_Base_Start_IT+0x52>
 801001a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801001e:	4293      	cmp	r3, r2
 8010020:	d107      	bne.n	8010032 <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010022:	6899      	ldr	r1, [r3, #8]
 8010024:	4a0a      	ldr	r2, [pc, #40]	; (8010050 <HAL_TIM_Base_Start_IT+0x80>)
 8010026:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010028:	2a06      	cmp	r2, #6
 801002a:	d00a      	beq.n	8010042 <HAL_TIM_Base_Start_IT+0x72>
 801002c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8010030:	d007      	beq.n	8010042 <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8010038:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 801003a:	601a      	str	r2, [r3, #0]
 801003c:	4770      	bx	lr
    return HAL_ERROR;
 801003e:	2001      	movs	r0, #1
 8010040:	4770      	bx	lr
  return HAL_OK;
 8010042:	2000      	movs	r0, #0
}
 8010044:	4770      	bx	lr
 8010046:	bf00      	nop
 8010048:	40012c00 	.word	0x40012c00
 801004c:	40000400 	.word	0x40000400
 8010050:	00010007 	.word	0x00010007

08010054 <HAL_TIM_PWM_MspInit>:
 8010054:	4770      	bx	lr
 8010056:	bf00      	nop

08010058 <HAL_TIM_PeriodElapsedCallback>:
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop

0801005c <HAL_TIM_OC_DelayElapsedCallback>:
 801005c:	4770      	bx	lr
 801005e:	bf00      	nop

08010060 <HAL_TIM_IC_CaptureCallback>:
 8010060:	4770      	bx	lr
 8010062:	bf00      	nop

08010064 <HAL_TIM_PWM_PulseFinishedCallback>:
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop

08010068 <HAL_TIM_TriggerCallback>:
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop

0801006c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801006c:	6803      	ldr	r3, [r0, #0]
 801006e:	691a      	ldr	r2, [r3, #16]
 8010070:	0791      	lsls	r1, r2, #30
{
 8010072:	b510      	push	{r4, lr}
 8010074:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010076:	d503      	bpl.n	8010080 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010078:	68da      	ldr	r2, [r3, #12]
 801007a:	0792      	lsls	r2, r2, #30
 801007c:	f100 808a 	bmi.w	8010194 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010080:	691a      	ldr	r2, [r3, #16]
 8010082:	0752      	lsls	r2, r2, #29
 8010084:	d502      	bpl.n	801008c <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010086:	68da      	ldr	r2, [r3, #12]
 8010088:	0750      	lsls	r0, r2, #29
 801008a:	d470      	bmi.n	801016e <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801008c:	691a      	ldr	r2, [r3, #16]
 801008e:	0711      	lsls	r1, r2, #28
 8010090:	d502      	bpl.n	8010098 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010092:	68da      	ldr	r2, [r3, #12]
 8010094:	0712      	lsls	r2, r2, #28
 8010096:	d458      	bmi.n	801014a <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010098:	691a      	ldr	r2, [r3, #16]
 801009a:	06d1      	lsls	r1, r2, #27
 801009c:	d502      	bpl.n	80100a4 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801009e:	68da      	ldr	r2, [r3, #12]
 80100a0:	06d2      	lsls	r2, r2, #27
 80100a2:	d43e      	bmi.n	8010122 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80100a4:	691a      	ldr	r2, [r3, #16]
 80100a6:	07d0      	lsls	r0, r2, #31
 80100a8:	d503      	bpl.n	80100b2 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80100aa:	68da      	ldr	r2, [r3, #12]
 80100ac:	07d1      	lsls	r1, r2, #31
 80100ae:	f100 808a 	bmi.w	80101c6 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80100b2:	691a      	ldr	r2, [r3, #16]
 80100b4:	0612      	lsls	r2, r2, #24
 80100b6:	d503      	bpl.n	80100c0 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80100b8:	68da      	ldr	r2, [r3, #12]
 80100ba:	0610      	lsls	r0, r2, #24
 80100bc:	f100 808b 	bmi.w	80101d6 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80100c0:	691a      	ldr	r2, [r3, #16]
 80100c2:	05d1      	lsls	r1, r2, #23
 80100c4:	d503      	bpl.n	80100ce <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80100c6:	68da      	ldr	r2, [r3, #12]
 80100c8:	0612      	lsls	r2, r2, #24
 80100ca:	f100 808c 	bmi.w	80101e6 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80100ce:	691a      	ldr	r2, [r3, #16]
 80100d0:	0650      	lsls	r0, r2, #25
 80100d2:	d503      	bpl.n	80100dc <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80100d4:	68da      	ldr	r2, [r3, #12]
 80100d6:	0651      	lsls	r1, r2, #25
 80100d8:	f100 808d 	bmi.w	80101f6 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80100dc:	691a      	ldr	r2, [r3, #16]
 80100de:	0692      	lsls	r2, r2, #26
 80100e0:	d503      	bpl.n	80100ea <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80100e2:	68da      	ldr	r2, [r3, #12]
 80100e4:	0690      	lsls	r0, r2, #26
 80100e6:	f100 808e 	bmi.w	8010206 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80100ea:	691a      	ldr	r2, [r3, #16]
 80100ec:	02d1      	lsls	r1, r2, #11
 80100ee:	d503      	bpl.n	80100f8 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80100f0:	68da      	ldr	r2, [r3, #12]
 80100f2:	02d2      	lsls	r2, r2, #11
 80100f4:	f100 808f 	bmi.w	8010216 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80100f8:	691a      	ldr	r2, [r3, #16]
 80100fa:	0290      	lsls	r0, r2, #10
 80100fc:	d503      	bpl.n	8010106 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80100fe:	68da      	ldr	r2, [r3, #12]
 8010100:	0291      	lsls	r1, r2, #10
 8010102:	f100 8090 	bmi.w	8010226 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8010106:	691a      	ldr	r2, [r3, #16]
 8010108:	0252      	lsls	r2, r2, #9
 801010a:	d503      	bpl.n	8010114 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801010c:	68da      	ldr	r2, [r3, #12]
 801010e:	0250      	lsls	r0, r2, #9
 8010110:	f100 8091 	bmi.w	8010236 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8010114:	691a      	ldr	r2, [r3, #16]
 8010116:	0211      	lsls	r1, r2, #8
 8010118:	d502      	bpl.n	8010120 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801011a:	68da      	ldr	r2, [r3, #12]
 801011c:	0212      	lsls	r2, r2, #8
 801011e:	d44a      	bmi.n	80101b6 <HAL_TIM_IRQHandler+0x14a>
}
 8010120:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010122:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010126:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010128:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801012a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801012c:	69db      	ldr	r3, [r3, #28]
 801012e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8010132:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010134:	f040 8090 	bne.w	8010258 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010138:	f7ff ff90 	bl	801005c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801013c:	4620      	mov	r0, r4
 801013e:	f7ff ff91 	bl	8010064 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010142:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010144:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010146:	7722      	strb	r2, [r4, #28]
 8010148:	e7ac      	b.n	80100a4 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801014a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801014e:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010150:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010152:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010154:	69db      	ldr	r3, [r3, #28]
 8010156:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8010158:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801015a:	d17a      	bne.n	8010252 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801015c:	f7ff ff7e 	bl	801005c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010160:	4620      	mov	r0, r4
 8010162:	f7ff ff7f 	bl	8010064 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010166:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010168:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801016a:	7722      	strb	r2, [r4, #28]
 801016c:	e794      	b.n	8010098 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801016e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010172:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010174:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010176:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010178:	699b      	ldr	r3, [r3, #24]
 801017a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 801017e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010180:	d164      	bne.n	801024c <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010182:	f7ff ff6b 	bl	801005c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010186:	4620      	mov	r0, r4
 8010188:	f7ff ff6c 	bl	8010064 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801018c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801018e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010190:	7722      	strb	r2, [r4, #28]
 8010192:	e77b      	b.n	801008c <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010194:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010198:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801019a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801019c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801019e:	699b      	ldr	r3, [r3, #24]
 80101a0:	0799      	lsls	r1, r3, #30
 80101a2:	d150      	bne.n	8010246 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80101a4:	f7ff ff5a 	bl	801005c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101a8:	4620      	mov	r0, r4
 80101aa:	f7ff ff5b 	bl	8010064 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101ae:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80101b0:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101b2:	7722      	strb	r2, [r4, #28]
 80101b4:	e764      	b.n	8010080 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80101b6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 80101ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80101bc:	611a      	str	r2, [r3, #16]
}
 80101be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 80101c2:	f000 ba7d 	b.w	80106c0 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80101c6:	f06f 0201 	mvn.w	r2, #1
 80101ca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80101cc:	4620      	mov	r0, r4
 80101ce:	f7ff ff43 	bl	8010058 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80101d2:	6823      	ldr	r3, [r4, #0]
 80101d4:	e76d      	b.n	80100b2 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80101d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80101da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80101dc:	4620      	mov	r0, r4
 80101de:	f000 fa65 	bl	80106ac <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80101e2:	6823      	ldr	r3, [r4, #0]
 80101e4:	e76c      	b.n	80100c0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80101e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80101ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80101ec:	4620      	mov	r0, r4
 80101ee:	f000 fa5f 	bl	80106b0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80101f2:	6823      	ldr	r3, [r4, #0]
 80101f4:	e76b      	b.n	80100ce <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80101f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80101fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80101fc:	4620      	mov	r0, r4
 80101fe:	f7ff ff33 	bl	8010068 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010202:	6823      	ldr	r3, [r4, #0]
 8010204:	e76a      	b.n	80100dc <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010206:	f06f 0220 	mvn.w	r2, #32
 801020a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 801020c:	4620      	mov	r0, r4
 801020e:	f000 fa4b 	bl	80106a8 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8010212:	6823      	ldr	r3, [r4, #0]
 8010214:	e769      	b.n	80100ea <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8010216:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801021a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 801021c:	4620      	mov	r0, r4
 801021e:	f000 fa49 	bl	80106b4 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8010222:	6823      	ldr	r3, [r4, #0]
 8010224:	e768      	b.n	80100f8 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8010226:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801022a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 801022c:	4620      	mov	r0, r4
 801022e:	f000 fa43 	bl	80106b8 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8010232:	6823      	ldr	r3, [r4, #0]
 8010234:	e767      	b.n	8010106 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8010236:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801023a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 801023c:	4620      	mov	r0, r4
 801023e:	f000 fa3d 	bl	80106bc <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8010242:	6823      	ldr	r3, [r4, #0]
 8010244:	e766      	b.n	8010114 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8010246:	f7ff ff0b 	bl	8010060 <HAL_TIM_IC_CaptureCallback>
 801024a:	e7b0      	b.n	80101ae <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 801024c:	f7ff ff08 	bl	8010060 <HAL_TIM_IC_CaptureCallback>
 8010250:	e79c      	b.n	801018c <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8010252:	f7ff ff05 	bl	8010060 <HAL_TIM_IC_CaptureCallback>
 8010256:	e786      	b.n	8010166 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8010258:	f7ff ff02 	bl	8010060 <HAL_TIM_IC_CaptureCallback>
 801025c:	e771      	b.n	8010142 <HAL_TIM_IRQHandler+0xd6>
 801025e:	bf00      	nop

08010260 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010260:	4a3a      	ldr	r2, [pc, #232]	; (801034c <TIM_Base_SetConfig+0xec>)
  tmpcr1 = TIMx->CR1;
 8010262:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010264:	4290      	cmp	r0, r2
{
 8010266:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010268:	d044      	beq.n	80102f4 <TIM_Base_SetConfig+0x94>
 801026a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801026e:	d02c      	beq.n	80102ca <TIM_Base_SetConfig+0x6a>
 8010270:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8010274:	4290      	cmp	r0, r2
 8010276:	d028      	beq.n	80102ca <TIM_Base_SetConfig+0x6a>
 8010278:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801027c:	4290      	cmp	r0, r2
 801027e:	d024      	beq.n	80102ca <TIM_Base_SetConfig+0x6a>
 8010280:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010284:	4290      	cmp	r0, r2
 8010286:	d020      	beq.n	80102ca <TIM_Base_SetConfig+0x6a>
 8010288:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 801028c:	4290      	cmp	r0, r2
 801028e:	d04e      	beq.n	801032e <TIM_Base_SetConfig+0xce>
 8010290:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8010294:	4290      	cmp	r0, r2
 8010296:	d054      	beq.n	8010342 <TIM_Base_SetConfig+0xe2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010298:	4a2d      	ldr	r2, [pc, #180]	; (8010350 <TIM_Base_SetConfig+0xf0>)
 801029a:	4290      	cmp	r0, r2
 801029c:	d041      	beq.n	8010322 <TIM_Base_SetConfig+0xc2>
 801029e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80102a2:	4290      	cmp	r0, r2
 80102a4:	d03d      	beq.n	8010322 <TIM_Base_SetConfig+0xc2>
 80102a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80102aa:	4290      	cmp	r0, r2
 80102ac:	d039      	beq.n	8010322 <TIM_Base_SetConfig+0xc2>
 80102ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80102b2:	4290      	cmp	r0, r2
 80102b4:	d035      	beq.n	8010322 <TIM_Base_SetConfig+0xc2>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80102b6:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80102b8:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80102ba:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80102bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102c0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80102c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80102c4:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80102c6:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80102c8:	e010      	b.n	80102ec <TIM_Base_SetConfig+0x8c>
    tmpcr1 |= Structure->CounterMode;
 80102ca:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80102cc:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80102ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80102d2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80102d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80102d8:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80102da:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80102dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80102e0:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80102e2:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80102e4:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80102e6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80102e8:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80102ea:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80102ec:	2301      	movs	r3, #1
}
 80102ee:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 80102f0:	6143      	str	r3, [r0, #20]
}
 80102f2:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80102f4:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80102f6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80102f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80102fc:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80102fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010302:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010304:	694a      	ldr	r2, [r1, #20]
 8010306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801030a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801030c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801030e:	688b      	ldr	r3, [r1, #8]
 8010310:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010312:	680b      	ldr	r3, [r1, #0]
 8010314:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8010316:	690b      	ldr	r3, [r1, #16]
 8010318:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 801031a:	2301      	movs	r3, #1
}
 801031c:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 801031e:	6143      	str	r3, [r0, #20]
}
 8010320:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010322:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010324:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8010326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801032a:	4323      	orrs	r3, r4
 801032c:	e7eb      	b.n	8010306 <TIM_Base_SetConfig+0xa6>
    tmpcr1 |= Structure->CounterMode;
 801032e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010330:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010336:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8010338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801033c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801033e:	694a      	ldr	r2, [r1, #20]
 8010340:	e7e1      	b.n	8010306 <TIM_Base_SetConfig+0xa6>
    tmpcr1 |= Structure->CounterMode;
 8010342:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010348:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801034a:	e7a5      	b.n	8010298 <TIM_Base_SetConfig+0x38>
 801034c:	40012c00 	.word	0x40012c00
 8010350:	40014000 	.word	0x40014000

08010354 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8010354:	b370      	cbz	r0, 80103b4 <HAL_TIM_Base_Init+0x60>
{
 8010356:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8010358:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 801035c:	4604      	mov	r4, r0
 801035e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010362:	b313      	cbz	r3, 80103aa <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010364:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8010366:	2302      	movs	r3, #2
 8010368:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801036c:	f851 0b04 	ldr.w	r0, [r1], #4
 8010370:	f7ff ff76 	bl	8010260 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010374:	2301      	movs	r3, #1
 8010376:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801037a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 801037e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8010382:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010386:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 801038a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801038e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010392:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801039a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 801039e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80103a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80103a6:	2000      	movs	r0, #0
}
 80103a8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80103aa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80103ae:	f7ff fdd1 	bl	800ff54 <HAL_TIM_Base_MspInit>
 80103b2:	e7d7      	b.n	8010364 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80103b4:	2001      	movs	r0, #1
}
 80103b6:	4770      	bx	lr

080103b8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80103b8:	b370      	cbz	r0, 8010418 <HAL_TIM_PWM_Init+0x60>
{
 80103ba:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80103bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80103c0:	4604      	mov	r4, r0
 80103c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80103c6:	b313      	cbz	r3, 801040e <HAL_TIM_PWM_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80103c8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80103ca:	2302      	movs	r3, #2
 80103cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80103d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80103d4:	f7ff ff44 	bl	8010260 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80103d8:	2301      	movs	r3, #1
 80103da:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80103e2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80103e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80103ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80103ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80103fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80103fe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010402:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8010406:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 801040a:	2000      	movs	r0, #0
}
 801040c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 801040e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8010412:	f7ff fe1f 	bl	8010054 <HAL_TIM_PWM_MspInit>
 8010416:	e7d7      	b.n	80103c8 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8010418:	2001      	movs	r0, #1
}
 801041a:	4770      	bx	lr

0801041c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801041c:	6a03      	ldr	r3, [r0, #32]
 801041e:	f023 0310 	bic.w	r3, r3, #16
 8010422:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8010424:	6a03      	ldr	r3, [r0, #32]
{
 8010426:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8010428:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 801042a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801042c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801042e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8010432:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010436:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801043a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 801043c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010440:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010444:	4d1c      	ldr	r5, [pc, #112]	; (80104b8 <TIM_OC2_SetConfig+0x9c>)
 8010446:	42a8      	cmp	r0, r5
 8010448:	d017      	beq.n	801047a <TIM_OC2_SetConfig+0x5e>
 801044a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 801044e:	42a8      	cmp	r0, r5
 8010450:	d013      	beq.n	801047a <TIM_OC2_SetConfig+0x5e>
 8010452:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8010456:	42a8      	cmp	r0, r5
 8010458:	d025      	beq.n	80104a6 <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801045a:	4d18      	ldr	r5, [pc, #96]	; (80104bc <TIM_OC2_SetConfig+0xa0>)
 801045c:	42a8      	cmp	r0, r5
 801045e:	d013      	beq.n	8010488 <TIM_OC2_SetConfig+0x6c>
 8010460:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010464:	42a8      	cmp	r0, r5
 8010466:	d00f      	beq.n	8010488 <TIM_OC2_SetConfig+0x6c>
 8010468:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801046c:	42a8      	cmp	r0, r5
 801046e:	d00b      	beq.n	8010488 <TIM_OC2_SetConfig+0x6c>
 8010470:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8010474:	42a8      	cmp	r0, r5
 8010476:	d10f      	bne.n	8010498 <TIM_OC2_SetConfig+0x7c>
 8010478:	e006      	b.n	8010488 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801047a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 801047c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010480:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8010484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010488:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801048c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010490:	ea46 0c05 	orr.w	ip, r6, r5
 8010494:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8010498:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 801049a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 801049c:	6182      	str	r2, [r0, #24]
}
 801049e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80104a0:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80104a2:	6203      	str	r3, [r0, #32]
}
 80104a4:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80104a6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80104a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80104ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80104b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104b4:	e7d1      	b.n	801045a <TIM_OC2_SetConfig+0x3e>
 80104b6:	bf00      	nop
 80104b8:	40012c00 	.word	0x40012c00
 80104bc:	40014000 	.word	0x40014000

080104c0 <HAL_TIM_PWM_ConfigChannel>:
{
 80104c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80104c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	f000 808f 	beq.w	80105ea <HAL_TIM_PWM_ConfigChannel+0x12a>
 80104cc:	2301      	movs	r3, #1
 80104ce:	4604      	mov	r4, r0
 80104d0:	460d      	mov	r5, r1
 80104d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80104d6:	2a14      	cmp	r2, #20
 80104d8:	d81c      	bhi.n	8010514 <HAL_TIM_PWM_ConfigChannel+0x54>
 80104da:	e8df f002 	tbb	[pc, r2]
 80104de:	1b0b      	.short	0x1b0b
 80104e0:	1b341b1b 	.word	0x1b341b1b
 80104e4:	1b491b1b 	.word	0x1b491b1b
 80104e8:	1b5d1b1b 	.word	0x1b5d1b1b
 80104ec:	1b721b1b 	.word	0x1b721b1b
 80104f0:	1b1b      	.short	0x1b1b
 80104f2:	1f          	.byte	0x1f
 80104f3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80104f4:	6800      	ldr	r0, [r0, #0]
 80104f6:	f7ff fbd9 	bl	800fcac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80104fa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80104fc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80104fe:	6999      	ldr	r1, [r3, #24]
 8010500:	f041 0108 	orr.w	r1, r1, #8
 8010504:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010506:	6999      	ldr	r1, [r3, #24]
 8010508:	f021 0104 	bic.w	r1, r1, #4
 801050c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801050e:	699a      	ldr	r2, [r3, #24]
 8010510:	4302      	orrs	r2, r0
 8010512:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8010514:	2000      	movs	r0, #0
 8010516:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 801051a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801051c:	6800      	ldr	r0, [r0, #0]
 801051e:	f7ff fcdf 	bl	800fee0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010522:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010524:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010526:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010528:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 801052c:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801052e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010530:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8010534:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010538:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 801053c:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801053e:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8010540:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8010544:	e7e9      	b.n	801051a <HAL_TIM_PWM_ConfigChannel+0x5a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010546:	6800      	ldr	r0, [r0, #0]
 8010548:	f7ff ff68 	bl	801041c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801054c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801054e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010550:	6999      	ldr	r1, [r3, #24]
 8010552:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010556:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010558:	6999      	ldr	r1, [r3, #24]
 801055a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 801055e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010560:	699a      	ldr	r2, [r3, #24]
 8010562:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8010566:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010568:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 801056a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 801056e:	e7d4      	b.n	801051a <HAL_TIM_PWM_ConfigChannel+0x5a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010570:	6800      	ldr	r0, [r0, #0]
 8010572:	f7ff fbdb 	bl	800fd2c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010576:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010578:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801057a:	69d9      	ldr	r1, [r3, #28]
 801057c:	f041 0108 	orr.w	r1, r1, #8
 8010580:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010582:	69d9      	ldr	r1, [r3, #28]
 8010584:	f021 0104 	bic.w	r1, r1, #4
 8010588:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801058a:	69da      	ldr	r2, [r3, #28]
 801058c:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 801058e:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010590:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8010592:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8010596:	e7c0      	b.n	801051a <HAL_TIM_PWM_ConfigChannel+0x5a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010598:	6800      	ldr	r0, [r0, #0]
 801059a:	f7ff fc17 	bl	800fdcc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801059e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80105a0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80105a2:	69d9      	ldr	r1, [r3, #28]
 80105a4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80105a8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80105aa:	69d9      	ldr	r1, [r3, #28]
 80105ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80105b0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80105b2:	69da      	ldr	r2, [r3, #28]
 80105b4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 80105b8:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80105ba:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80105bc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80105c0:	e7ab      	b.n	801051a <HAL_TIM_PWM_ConfigChannel+0x5a>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80105c2:	6800      	ldr	r0, [r0, #0]
 80105c4:	f7ff fc54 	bl	800fe70 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80105c8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80105ca:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80105cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80105ce:	f041 0108 	orr.w	r1, r1, #8
 80105d2:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80105d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80105d6:	f021 0104 	bic.w	r1, r1, #4
 80105da:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80105dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105de:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 80105e0:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80105e2:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 80105e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80105e8:	e797      	b.n	801051a <HAL_TIM_PWM_ConfigChannel+0x5a>
  __HAL_LOCK(htim);
 80105ea:	2002      	movs	r0, #2
}
 80105ec:	bd38      	pop	{r3, r4, r5, pc}
 80105ee:	bf00      	nop

080105f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80105f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d051      	beq.n	801069c <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 80105f8:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80105fa:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80105fc:	4d28      	ldr	r5, [pc, #160]	; (80106a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80105fe:	2302      	movs	r3, #2
 8010600:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010604:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8010606:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8010608:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801060a:	d03b      	beq.n	8010684 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 801060c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8010610:	42aa      	cmp	r2, r5
 8010612:	d032      	beq.n	801067a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8010614:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8010618:	42aa      	cmp	r2, r5
 801061a:	d02e      	beq.n	801067a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801061c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 801061e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8010622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010626:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010628:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 801062c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801062e:	d016      	beq.n	801065e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8010630:	4b1c      	ldr	r3, [pc, #112]	; (80106a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8010632:	429a      	cmp	r2, r3
 8010634:	d013      	beq.n	801065e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8010636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801063a:	429a      	cmp	r2, r3
 801063c:	d00f      	beq.n	801065e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 801063e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010642:	429a      	cmp	r2, r3
 8010644:	d00b      	beq.n	801065e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8010646:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 801064a:	429a      	cmp	r2, r3
 801064c:	d007      	beq.n	801065e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 801064e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8010652:	429a      	cmp	r2, r3
 8010654:	d003      	beq.n	801065e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8010656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801065a:	429a      	cmp	r2, r3
 801065c:	d104      	bne.n	8010668 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801065e:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010660:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010664:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010666:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8010668:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 801066a:	2201      	movs	r2, #1
 801066c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8010670:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8010674:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8010676:	4618      	mov	r0, r3
}
 8010678:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801067a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 801067c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010680:	432b      	orrs	r3, r5
 8010682:	e7cb      	b.n	801061c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8010684:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010686:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801068a:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 801068c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010690:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8010692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010696:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8010698:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801069a:	e7e0      	b.n	801065e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 801069c:	2002      	movs	r0, #2
}
 801069e:	4770      	bx	lr
 80106a0:	40012c00 	.word	0x40012c00
 80106a4:	40000400 	.word	0x40000400

080106a8 <HAL_TIMEx_CommutCallback>:
 80106a8:	4770      	bx	lr
 80106aa:	bf00      	nop

080106ac <HAL_TIMEx_BreakCallback>:
 80106ac:	4770      	bx	lr
 80106ae:	bf00      	nop

080106b0 <HAL_TIMEx_Break2Callback>:
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop

080106b4 <HAL_TIMEx_EncoderIndexCallback>:
 80106b4:	4770      	bx	lr
 80106b6:	bf00      	nop

080106b8 <HAL_TIMEx_DirectionChangeCallback>:
 80106b8:	4770      	bx	lr
 80106ba:	bf00      	nop

080106bc <HAL_TIMEx_IndexErrorCallback>:
 80106bc:	4770      	bx	lr
 80106be:	bf00      	nop

080106c0 <HAL_TIMEx_TransitionErrorCallback>:
 80106c0:	4770      	bx	lr
 80106c2:	bf00      	nop

080106c4 <HAL_UART_ErrorCallback>:
 80106c4:	4770      	bx	lr
 80106c6:	bf00      	nop

080106c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80106c8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80106ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80106cc:	2300      	movs	r3, #0
 80106ce:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80106d2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80106d6:	f7ff fff5 	bl	80106c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80106da:	bd08      	pop	{r3, pc}

080106dc <HAL_UARTEx_RxEventCallback>:
}
 80106dc:	4770      	bx	lr
 80106de:	bf00      	nop

080106e0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80106e0:	6802      	ldr	r2, [r0, #0]
 80106e2:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80106e4:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 80106e8:	ea13 0f0c 	tst.w	r3, ip
{
 80106ec:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80106ee:	6815      	ldr	r5, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80106f0:	6891      	ldr	r1, [r2, #8]
{
 80106f2:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80106f4:	f000 80c4 	beq.w	8010880 <HAL_UART_IRQHandler+0x1a0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80106f8:	4ea0      	ldr	r6, [pc, #640]	; (801097c <HAL_UART_IRQHandler+0x29c>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80106fa:	48a1      	ldr	r0, [pc, #644]	; (8010980 <HAL_UART_IRQHandler+0x2a0>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80106fc:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010700:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010702:	ea5c 0600 	orrs.w	r6, ip, r0
 8010706:	d144      	bne.n	8010792 <HAL_UART_IRQHandler+0xb2>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010708:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801070a:	2801      	cmp	r0, #1
 801070c:	d01d      	beq.n	801074a <HAL_UART_IRQHandler+0x6a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801070e:	02d8      	lsls	r0, r3, #11
 8010710:	d502      	bpl.n	8010718 <HAL_UART_IRQHandler+0x38>
 8010712:	024e      	lsls	r6, r1, #9
 8010714:	f100 80db 	bmi.w	80108ce <HAL_UART_IRQHandler+0x1ee>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010718:	0618      	lsls	r0, r3, #24
 801071a:	d506      	bpl.n	801072a <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801071c:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010720:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010724:	4301      	orrs	r1, r0
 8010726:	f040 80ca 	bne.w	80108be <HAL_UART_IRQHandler+0x1de>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801072a:	065e      	lsls	r6, r3, #25
 801072c:	d502      	bpl.n	8010734 <HAL_UART_IRQHandler+0x54>
 801072e:	0668      	lsls	r0, r5, #25
 8010730:	f100 80d9 	bmi.w	80108e6 <HAL_UART_IRQHandler+0x206>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010734:	0219      	lsls	r1, r3, #8
 8010736:	d502      	bpl.n	801073e <HAL_UART_IRQHandler+0x5e>
 8010738:	006a      	lsls	r2, r5, #1
 801073a:	f100 80e1 	bmi.w	8010900 <HAL_UART_IRQHandler+0x220>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801073e:	01db      	lsls	r3, r3, #7
 8010740:	d502      	bpl.n	8010748 <HAL_UART_IRQHandler+0x68>
 8010742:	2d00      	cmp	r5, #0
 8010744:	f2c0 810f 	blt.w	8010966 <HAL_UART_IRQHandler+0x286>
}
 8010748:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801074a:	06d8      	lsls	r0, r3, #27
 801074c:	d5df      	bpl.n	801070e <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801074e:	06ee      	lsls	r6, r5, #27
 8010750:	d5dd      	bpl.n	801070e <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010752:	2310      	movs	r3, #16
 8010754:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010756:	6893      	ldr	r3, [r2, #8]
 8010758:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 801075c:	f000 80dc 	beq.w	8010918 <HAL_UART_IRQHandler+0x238>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010760:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8010762:	6801      	ldr	r1, [r0, #0]
 8010764:	684b      	ldr	r3, [r1, #4]
 8010766:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8010768:	2b00      	cmp	r3, #0
 801076a:	d0ed      	beq.n	8010748 <HAL_UART_IRQHandler+0x68>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801076c:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8010770:	429d      	cmp	r5, r3
 8010772:	d9e9      	bls.n	8010748 <HAL_UART_IRQHandler+0x68>
        huart->RxXferCount = nb_remaining_rx_data;
 8010774:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010778:	680b      	ldr	r3, [r1, #0]
 801077a:	f013 0320 	ands.w	r3, r3, #32
 801077e:	f000 8103 	beq.w	8010988 <HAL_UART_IRQHandler+0x2a8>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010782:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8010786:	1a69      	subs	r1, r5, r1
 8010788:	4620      	mov	r0, r4
 801078a:	b289      	uxth	r1, r1
 801078c:	f7ff ffa6 	bl	80106dc <HAL_UARTEx_RxEventCallback>
}
 8010790:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010792:	07de      	lsls	r6, r3, #31
 8010794:	d509      	bpl.n	80107aa <HAL_UART_IRQHandler+0xca>
 8010796:	05ee      	lsls	r6, r5, #23
 8010798:	d507      	bpl.n	80107aa <HAL_UART_IRQHandler+0xca>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801079a:	2601      	movs	r6, #1
 801079c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801079e:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 80107a2:	f046 0601 	orr.w	r6, r6, #1
 80107a6:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107aa:	079e      	lsls	r6, r3, #30
 80107ac:	d57a      	bpl.n	80108a4 <HAL_UART_IRQHandler+0x1c4>
 80107ae:	07ce      	lsls	r6, r1, #31
 80107b0:	d509      	bpl.n	80107c6 <HAL_UART_IRQHandler+0xe6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80107b2:	2602      	movs	r6, #2
 80107b4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80107b6:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 80107ba:	f046 0604 	orr.w	r6, r6, #4
 80107be:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107c2:	075e      	lsls	r6, r3, #29
 80107c4:	d472      	bmi.n	80108ac <HAL_UART_IRQHandler+0x1cc>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80107c6:	071e      	lsls	r6, r3, #28
 80107c8:	d50b      	bpl.n	80107e2 <HAL_UART_IRQHandler+0x102>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80107ca:	f005 0620 	and.w	r6, r5, #32
 80107ce:	4330      	orrs	r0, r6
 80107d0:	d007      	beq.n	80107e2 <HAL_UART_IRQHandler+0x102>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80107d2:	2008      	movs	r0, #8
 80107d4:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80107d6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80107da:	f040 0008 	orr.w	r0, r0, #8
 80107de:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80107e2:	051e      	lsls	r6, r3, #20
 80107e4:	d50a      	bpl.n	80107fc <HAL_UART_IRQHandler+0x11c>
 80107e6:	0168      	lsls	r0, r5, #5
 80107e8:	d508      	bpl.n	80107fc <HAL_UART_IRQHandler+0x11c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80107ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80107ee:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80107f0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80107f4:	f040 0020 	orr.w	r0, r0, #32
 80107f8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80107fc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8010800:	2800      	cmp	r0, #0
 8010802:	d0a1      	beq.n	8010748 <HAL_UART_IRQHandler+0x68>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010804:	069e      	lsls	r6, r3, #26
 8010806:	d506      	bpl.n	8010816 <HAL_UART_IRQHandler+0x136>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010808:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801080c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8010810:	ea55 0301 	orrs.w	r3, r5, r1
 8010814:	d179      	bne.n	801090a <HAL_UART_IRQHandler+0x22a>
      errorcode = huart->ErrorCode;
 8010816:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801081a:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801081c:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010824:	431d      	orrs	r5, r3
 8010826:	f000 80a3 	beq.w	8010970 <HAL_UART_IRQHandler+0x290>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801082a:	6813      	ldr	r3, [r2, #0]
 801082c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010830:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010832:	6893      	ldr	r3, [r2, #8]
 8010834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010838:	f023 0301 	bic.w	r3, r3, #1
 801083c:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801083e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010840:	2b01      	cmp	r3, #1
 8010842:	d103      	bne.n	801084c <HAL_UART_IRQHandler+0x16c>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010844:	6813      	ldr	r3, [r2, #0]
 8010846:	f023 0310 	bic.w	r3, r3, #16
 801084a:	6013      	str	r3, [r2, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801084c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 801084e:	2120      	movs	r1, #32
 8010850:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010854:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010856:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 8010858:	6723      	str	r3, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801085a:	064d      	lsls	r5, r1, #25
 801085c:	d53f      	bpl.n	80108de <HAL_UART_IRQHandler+0x1fe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801085e:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8010860:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010866:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8010868:	2800      	cmp	r0, #0
 801086a:	d038      	beq.n	80108de <HAL_UART_IRQHandler+0x1fe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801086c:	4b45      	ldr	r3, [pc, #276]	; (8010984 <HAL_UART_IRQHandler+0x2a4>)
 801086e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010870:	f7fc f9bc 	bl	800cbec <HAL_DMA_Abort_IT>
 8010874:	2800      	cmp	r0, #0
 8010876:	f43f af67 	beq.w	8010748 <HAL_UART_IRQHandler+0x68>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801087a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801087c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801087e:	e00e      	b.n	801089e <HAL_UART_IRQHandler+0x1be>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010880:	069e      	lsls	r6, r3, #26
 8010882:	f57f af41 	bpl.w	8010708 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010886:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801088a:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 801088e:	ea56 060c 	orrs.w	r6, r6, ip
 8010892:	f43f af39 	beq.w	8010708 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 8010896:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8010898:	2b00      	cmp	r3, #0
 801089a:	f43f af55 	beq.w	8010748 <HAL_UART_IRQHandler+0x68>
}
 801089e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80108a2:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108a4:	075e      	lsls	r6, r3, #29
 80108a6:	d58e      	bpl.n	80107c6 <HAL_UART_IRQHandler+0xe6>
 80108a8:	07ce      	lsls	r6, r1, #31
 80108aa:	d58c      	bpl.n	80107c6 <HAL_UART_IRQHandler+0xe6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80108ac:	2604      	movs	r6, #4
 80108ae:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80108b0:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 80108b4:	f046 0602 	orr.w	r6, r6, #2
 80108b8:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 80108bc:	e783      	b.n	80107c6 <HAL_UART_IRQHandler+0xe6>
    if (huart->TxISR != NULL)
 80108be:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	f43f af41 	beq.w	8010748 <HAL_UART_IRQHandler+0x68>
      huart->TxISR(huart);
 80108c6:	4620      	mov	r0, r4
}
 80108c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80108cc:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80108ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80108d2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80108d4:	6213      	str	r3, [r2, #32]
}
 80108d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80108da:	f000 bb35 	b.w	8010f48 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 80108de:	4620      	mov	r0, r4
 80108e0:	f7ff fef0 	bl	80106c4 <HAL_UART_ErrorCallback>
}
 80108e4:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80108e6:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80108e8:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80108ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80108ee:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80108f0:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80108f2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 80108f6:	6761      	str	r1, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80108f8:	4620      	mov	r0, r4
 80108fa:	f7f2 f8dd 	bl	8002ab8 <HAL_UART_TxCpltCallback>
}
 80108fe:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010900:	4620      	mov	r0, r4
}
 8010902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010906:	f000 bb23 	b.w	8010f50 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 801090a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801090c:	2b00      	cmp	r3, #0
 801090e:	d082      	beq.n	8010816 <HAL_UART_IRQHandler+0x136>
          huart->RxISR(huart);
 8010910:	4620      	mov	r0, r4
 8010912:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010914:	6822      	ldr	r2, [r4, #0]
 8010916:	e77e      	b.n	8010816 <HAL_UART_IRQHandler+0x136>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010918:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 801091c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8010920:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010922:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8010924:	2900      	cmp	r1, #0
 8010926:	f43f af0f 	beq.w	8010748 <HAL_UART_IRQHandler+0x68>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801092a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801092e:	1a08      	subs	r0, r1, r0
 8010930:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 8010932:	2900      	cmp	r1, #0
 8010934:	f43f af08 	beq.w	8010748 <HAL_UART_IRQHandler+0x68>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010938:	6810      	ldr	r0, [r2, #0]
 801093a:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 801093e:	6010      	str	r0, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010940:	6890      	ldr	r0, [r2, #8]
 8010942:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 8010946:	f020 0001 	bic.w	r0, r0, #1
 801094a:	6090      	str	r0, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 801094c:	2020      	movs	r0, #32
 801094e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010952:	66e3      	str	r3, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010954:	6810      	ldr	r0, [r2, #0]
        huart->RxISR = NULL;
 8010956:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010958:	f020 0010 	bic.w	r0, r0, #16
 801095c:	6010      	str	r0, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801095e:	4620      	mov	r0, r4
 8010960:	f7ff febc 	bl	80106dc <HAL_UARTEx_RxEventCallback>
}
 8010964:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010966:	4620      	mov	r0, r4
}
 8010968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 801096c:	f000 baee 	b.w	8010f4c <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8010970:	4620      	mov	r0, r4
 8010972:	f7ff fea7 	bl	80106c4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010976:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 801097a:	bd70      	pop	{r4, r5, r6, pc}
 801097c:	04000120 	.word	0x04000120
 8010980:	10000001 	.word	0x10000001
 8010984:	080106c9 	.word	0x080106c9
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010988:	6811      	ldr	r1, [r2, #0]
 801098a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 801098e:	6011      	str	r1, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010990:	6891      	ldr	r1, [r2, #8]
 8010992:	f021 0101 	bic.w	r1, r1, #1
 8010996:	6091      	str	r1, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010998:	6891      	ldr	r1, [r2, #8]
 801099a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 801099e:	6091      	str	r1, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80109a0:	2120      	movs	r1, #32
 80109a2:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109a6:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109a8:	6813      	ldr	r3, [r2, #0]
 80109aa:	f023 0310 	bic.w	r3, r3, #16
 80109ae:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80109b0:	f7fc f8e2 	bl	800cb78 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80109b4:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 80109b8:	e6e3      	b.n	8010782 <HAL_UART_IRQHandler+0xa2>
 80109ba:	bf00      	nop

080109bc <UART_SetConfig>:
{
 80109bc:	b538      	push	{r3, r4, r5, lr}
 80109be:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80109c0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80109c2:	6882      	ldr	r2, [r0, #8]
 80109c4:	6900      	ldr	r0, [r0, #16]
 80109c6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80109c8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80109ca:	4302      	orrs	r2, r0
 80109cc:	430a      	orrs	r2, r1
 80109ce:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80109d0:	49b2      	ldr	r1, [pc, #712]	; (8010c9c <UART_SetConfig+0x2e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80109d2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80109d4:	4029      	ands	r1, r5
 80109d6:	430a      	orrs	r2, r1
 80109d8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80109da:	685a      	ldr	r2, [r3, #4]
 80109dc:	68e1      	ldr	r1, [r4, #12]
 80109de:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80109e2:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80109e4:	49ae      	ldr	r1, [pc, #696]	; (8010ca0 <UART_SetConfig+0x2e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80109e6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80109e8:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80109ea:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80109ec:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80109ee:	f000 8081 	beq.w	8010af4 <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 80109f2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80109f4:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80109f8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80109fc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80109fe:	430a      	orrs	r2, r1
 8010a00:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010a06:	f022 020f 	bic.w	r2, r2, #15
 8010a0a:	430a      	orrs	r2, r1
 8010a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a0e:	4aa5      	ldr	r2, [pc, #660]	; (8010ca4 <UART_SetConfig+0x2e8>)
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d027      	beq.n	8010a64 <UART_SetConfig+0xa8>
 8010a14:	4aa4      	ldr	r2, [pc, #656]	; (8010ca8 <UART_SetConfig+0x2ec>)
 8010a16:	4293      	cmp	r3, r2
 8010a18:	d04b      	beq.n	8010ab2 <UART_SetConfig+0xf6>
 8010a1a:	4aa4      	ldr	r2, [pc, #656]	; (8010cac <UART_SetConfig+0x2f0>)
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	f000 8112 	beq.w	8010c46 <UART_SetConfig+0x28a>
 8010a22:	4aa3      	ldr	r2, [pc, #652]	; (8010cb0 <UART_SetConfig+0x2f4>)
 8010a24:	4293      	cmp	r3, r2
 8010a26:	f000 80b9 	beq.w	8010b9c <UART_SetConfig+0x1e0>
 8010a2a:	4aa2      	ldr	r2, [pc, #648]	; (8010cb4 <UART_SetConfig+0x2f8>)
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d111      	bne.n	8010a54 <UART_SetConfig+0x98>
 8010a30:	4ba1      	ldr	r3, [pc, #644]	; (8010cb8 <UART_SetConfig+0x2fc>)
 8010a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a3e:	f000 8127 	beq.w	8010c90 <UART_SetConfig+0x2d4>
 8010a42:	f200 80d5 	bhi.w	8010bf0 <UART_SetConfig+0x234>
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	f000 80d9 	beq.w	8010bfe <UART_SetConfig+0x242>
 8010a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a50:	f000 80b0 	beq.w	8010bb4 <UART_SetConfig+0x1f8>
        ret = HAL_ERROR;
 8010a54:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8010a56:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8010a58:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8010a5c:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8010a60:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8010a62:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a64:	4b94      	ldr	r3, [pc, #592]	; (8010cb8 <UART_SetConfig+0x2fc>)
 8010a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a6a:	f003 0303 	and.w	r3, r3, #3
 8010a6e:	3b01      	subs	r3, #1
 8010a70:	2b02      	cmp	r3, #2
 8010a72:	f240 808d 	bls.w	8010b90 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010a76:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010a7a:	f000 8104 	beq.w	8010c86 <UART_SetConfig+0x2ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 8010a7e:	f7fe fa21 	bl	800eec4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8010a82:	2800      	cmp	r0, #0
 8010a84:	d054      	beq.n	8010b30 <UART_SetConfig+0x174>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010a88:	6862      	ldr	r2, [r4, #4]
 8010a8a:	4b8c      	ldr	r3, [pc, #560]	; (8010cbc <UART_SetConfig+0x300>)
 8010a8c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8010a90:	fbb0 f3f3 	udiv	r3, r0, r3
 8010a94:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8010a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a9c:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010a9e:	f1a3 0110 	sub.w	r1, r3, #16
 8010aa2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8010aa6:	4291      	cmp	r1, r2
 8010aa8:	d8d4      	bhi.n	8010a54 <UART_SetConfig+0x98>
        huart->Instance->BRR = usartdiv;
 8010aaa:	6822      	ldr	r2, [r4, #0]
 8010aac:	2000      	movs	r0, #0
 8010aae:	60d3      	str	r3, [r2, #12]
 8010ab0:	e7d1      	b.n	8010a56 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010ab2:	4b81      	ldr	r3, [pc, #516]	; (8010cb8 <UART_SetConfig+0x2fc>)
 8010ab4:	4a82      	ldr	r2, [pc, #520]	; (8010cc0 <UART_SetConfig+0x304>)
 8010ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010aba:	f003 030c 	and.w	r3, r3, #12
 8010abe:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ac0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010ac4:	d07c      	beq.n	8010bc0 <UART_SetConfig+0x204>
    switch (clocksource)
 8010ac6:	2b08      	cmp	r3, #8
 8010ac8:	d8c4      	bhi.n	8010a54 <UART_SetConfig+0x98>
 8010aca:	a201      	add	r2, pc, #4	; (adr r2, 8010ad0 <UART_SetConfig+0x114>)
 8010acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ad0:	08010bf9 	.word	0x08010bf9
 8010ad4:	08010a7f 	.word	0x08010a7f
 8010ad8:	08010c7d 	.word	0x08010c7d
 8010adc:	08010a55 	.word	0x08010a55
 8010ae0:	08010bbb 	.word	0x08010bbb
 8010ae4:	08010a55 	.word	0x08010a55
 8010ae8:	08010a55 	.word	0x08010a55
 8010aec:	08010a55 	.word	0x08010a55
 8010af0:	08010c6d 	.word	0x08010c6d
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010af4:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8010af8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8010afc:	430a      	orrs	r2, r1
 8010afe:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b02:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010b04:	486c      	ldr	r0, [pc, #432]	; (8010cb8 <UART_SetConfig+0x2fc>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010b06:	f022 020f 	bic.w	r2, r2, #15
 8010b0a:	430a      	orrs	r2, r1
 8010b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010b0e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8010b12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b1a:	f000 80ad 	beq.w	8010c78 <UART_SetConfig+0x2bc>
 8010b1e:	d809      	bhi.n	8010b34 <UART_SetConfig+0x178>
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d038      	beq.n	8010b96 <UART_SetConfig+0x1da>
 8010b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b28:	d194      	bne.n	8010a54 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 8010b2a:	f7fe f86f 	bl	800ec0c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8010b2e:	b930      	cbnz	r0, 8010b3e <UART_SetConfig+0x182>
 8010b30:	2000      	movs	r0, #0
 8010b32:	e790      	b.n	8010a56 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010b34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010b38:	d18c      	bne.n	8010a54 <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 8010b3a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010b3e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010b40:	4b5e      	ldr	r3, [pc, #376]	; (8010cbc <UART_SetConfig+0x300>)
 8010b42:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010b44:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010b48:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8010b4c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010b50:	4299      	cmp	r1, r3
 8010b52:	f63f af7f 	bhi.w	8010a54 <UART_SetConfig+0x98>
 8010b56:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8010b5a:	f63f af7b 	bhi.w	8010a54 <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b5e:	2300      	movs	r3, #0
 8010b60:	4619      	mov	r1, r3
 8010b62:	f7f0 f89b 	bl	8000c9c <__aeabi_uldivmod>
 8010b66:	0209      	lsls	r1, r1, #8
 8010b68:	0203      	lsls	r3, r0, #8
 8010b6a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8010b6e:	0868      	lsrs	r0, r5, #1
 8010b70:	1818      	adds	r0, r3, r0
 8010b72:	462a      	mov	r2, r5
 8010b74:	f04f 0300 	mov.w	r3, #0
 8010b78:	f141 0100 	adc.w	r1, r1, #0
 8010b7c:	f7f0 f88e 	bl	8000c9c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010b80:	4a50      	ldr	r2, [pc, #320]	; (8010cc4 <UART_SetConfig+0x308>)
 8010b82:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8010b86:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b88:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010b8a:	f63f af63 	bhi.w	8010a54 <UART_SetConfig+0x98>
 8010b8e:	e78c      	b.n	8010aaa <UART_SetConfig+0xee>
 8010b90:	4a4d      	ldr	r2, [pc, #308]	; (8010cc8 <UART_SetConfig+0x30c>)
 8010b92:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8010b94:	e794      	b.n	8010ac0 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b96:	f7fe f983 	bl	800eea0 <HAL_RCC_GetPCLK1Freq>
        break;
 8010b9a:	e7c8      	b.n	8010b2e <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010b9c:	4b46      	ldr	r3, [pc, #280]	; (8010cb8 <UART_SetConfig+0x2fc>)
 8010b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ba2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010ba6:	2b80      	cmp	r3, #128	; 0x80
 8010ba8:	d072      	beq.n	8010c90 <UART_SetConfig+0x2d4>
 8010baa:	d862      	bhi.n	8010c72 <UART_SetConfig+0x2b6>
 8010bac:	b33b      	cbz	r3, 8010bfe <UART_SetConfig+0x242>
 8010bae:	2b40      	cmp	r3, #64	; 0x40
 8010bb0:	f47f af50 	bne.w	8010a54 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010bb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010bb8:	d062      	beq.n	8010c80 <UART_SetConfig+0x2c4>
        pclk = HAL_RCC_GetSysClockFreq();
 8010bba:	f7fe f827 	bl	800ec0c <HAL_RCC_GetSysClockFreq>
        break;
 8010bbe:	e760      	b.n	8010a82 <UART_SetConfig+0xc6>
    switch (clocksource)
 8010bc0:	2b08      	cmp	r3, #8
 8010bc2:	f63f af47 	bhi.w	8010a54 <UART_SetConfig+0x98>
 8010bc6:	a201      	add	r2, pc, #4	; (adr r2, 8010bcc <UART_SetConfig+0x210>)
 8010bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bcc:	08010c05 	.word	0x08010c05
 8010bd0:	08010c87 	.word	0x08010c87
 8010bd4:	08010c8d 	.word	0x08010c8d
 8010bd8:	08010a55 	.word	0x08010a55
 8010bdc:	08010c81 	.word	0x08010c81
 8010be0:	08010a55 	.word	0x08010a55
 8010be4:	08010a55 	.word	0x08010a55
 8010be8:	08010a55 	.word	0x08010a55
 8010bec:	08010c0f 	.word	0x08010c0f
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010bf4:	d037      	beq.n	8010c66 <UART_SetConfig+0x2aa>
 8010bf6:	e72d      	b.n	8010a54 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 8010bf8:	f7fe f952 	bl	800eea0 <HAL_RCC_GetPCLK1Freq>
        break;
 8010bfc:	e741      	b.n	8010a82 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010bfe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010c02:	d1f9      	bne.n	8010bf8 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c04:	f7fe f94c 	bl	800eea0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8010c08:	2800      	cmp	r0, #0
 8010c0a:	d091      	beq.n	8010b30 <UART_SetConfig+0x174>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010c0e:	6862      	ldr	r2, [r4, #4]
 8010c10:	4b2a      	ldr	r3, [pc, #168]	; (8010cbc <UART_SetConfig+0x300>)
 8010c12:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8010c16:	fbb0 f0f1 	udiv	r0, r0, r1
 8010c1a:	0853      	lsrs	r3, r2, #1
 8010c1c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010c20:	fbb0 f0f2 	udiv	r0, r0, r2
 8010c24:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c26:	f1a3 0110 	sub.w	r1, r3, #16
 8010c2a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8010c2e:	4291      	cmp	r1, r2
 8010c30:	f63f af10 	bhi.w	8010a54 <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010c34:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8010c38:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010c3a:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010c3c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8010c40:	4318      	orrs	r0, r3
 8010c42:	60d0      	str	r0, [r2, #12]
 8010c44:	e774      	b.n	8010b30 <UART_SetConfig+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010c46:	4b1c      	ldr	r3, [pc, #112]	; (8010cb8 <UART_SetConfig+0x2fc>)
 8010c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010c50:	2b20      	cmp	r3, #32
 8010c52:	d01d      	beq.n	8010c90 <UART_SetConfig+0x2d4>
 8010c54:	d804      	bhi.n	8010c60 <UART_SetConfig+0x2a4>
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d0d1      	beq.n	8010bfe <UART_SetConfig+0x242>
 8010c5a:	2b10      	cmp	r3, #16
 8010c5c:	d0aa      	beq.n	8010bb4 <UART_SetConfig+0x1f8>
 8010c5e:	e6f9      	b.n	8010a54 <UART_SetConfig+0x98>
 8010c60:	2b30      	cmp	r3, #48	; 0x30
 8010c62:	f47f aef7 	bne.w	8010a54 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c66:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010c6a:	d0d0      	beq.n	8010c0e <UART_SetConfig+0x252>
    switch (clocksource)
 8010c6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010c70:	e70a      	b.n	8010a88 <UART_SetConfig+0xcc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010c72:	2bc0      	cmp	r3, #192	; 0xc0
 8010c74:	d0f7      	beq.n	8010c66 <UART_SetConfig+0x2aa>
 8010c76:	e6ed      	b.n	8010a54 <UART_SetConfig+0x98>
 8010c78:	4814      	ldr	r0, [pc, #80]	; (8010ccc <UART_SetConfig+0x310>)
 8010c7a:	e760      	b.n	8010b3e <UART_SetConfig+0x182>
        pclk = (uint32_t) HSI_VALUE;
 8010c7c:	4813      	ldr	r0, [pc, #76]	; (8010ccc <UART_SetConfig+0x310>)
 8010c7e:	e703      	b.n	8010a88 <UART_SetConfig+0xcc>
        pclk = HAL_RCC_GetSysClockFreq();
 8010c80:	f7fd ffc4 	bl	800ec0c <HAL_RCC_GetSysClockFreq>
        break;
 8010c84:	e7c0      	b.n	8010c08 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c86:	f7fe f91d 	bl	800eec4 <HAL_RCC_GetPCLK2Freq>
        break;
 8010c8a:	e7bd      	b.n	8010c08 <UART_SetConfig+0x24c>
        pclk = (uint32_t) HSI_VALUE;
 8010c8c:	480f      	ldr	r0, [pc, #60]	; (8010ccc <UART_SetConfig+0x310>)
 8010c8e:	e7be      	b.n	8010c0e <UART_SetConfig+0x252>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c90:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8010c94:	480d      	ldr	r0, [pc, #52]	; (8010ccc <UART_SetConfig+0x310>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c96:	f47f aef7 	bne.w	8010a88 <UART_SetConfig+0xcc>
 8010c9a:	e7b8      	b.n	8010c0e <UART_SetConfig+0x252>
 8010c9c:	cfff69f3 	.word	0xcfff69f3
 8010ca0:	40008000 	.word	0x40008000
 8010ca4:	40013800 	.word	0x40013800
 8010ca8:	40004400 	.word	0x40004400
 8010cac:	40004800 	.word	0x40004800
 8010cb0:	40004c00 	.word	0x40004c00
 8010cb4:	40005000 	.word	0x40005000
 8010cb8:	40021000 	.word	0x40021000
 8010cbc:	08014994 	.word	0x08014994
 8010cc0:	08014984 	.word	0x08014984
 8010cc4:	000ffcff 	.word	0x000ffcff
 8010cc8:	08014980 	.word	0x08014980
 8010ccc:	00f42400 	.word	0x00f42400

08010cd0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010cd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010cd2:	07da      	lsls	r2, r3, #31
{
 8010cd4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010cd6:	d506      	bpl.n	8010ce6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010cd8:	6801      	ldr	r1, [r0, #0]
 8010cda:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8010cdc:	684a      	ldr	r2, [r1, #4]
 8010cde:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010ce2:	4322      	orrs	r2, r4
 8010ce4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010ce6:	079c      	lsls	r4, r3, #30
 8010ce8:	d506      	bpl.n	8010cf8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010cea:	6801      	ldr	r1, [r0, #0]
 8010cec:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8010cee:	684a      	ldr	r2, [r1, #4]
 8010cf0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010cf4:	4322      	orrs	r2, r4
 8010cf6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010cf8:	0759      	lsls	r1, r3, #29
 8010cfa:	d506      	bpl.n	8010d0a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010cfc:	6801      	ldr	r1, [r0, #0]
 8010cfe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8010d00:	684a      	ldr	r2, [r1, #4]
 8010d02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010d06:	4322      	orrs	r2, r4
 8010d08:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010d0a:	071a      	lsls	r2, r3, #28
 8010d0c:	d506      	bpl.n	8010d1c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010d0e:	6801      	ldr	r1, [r0, #0]
 8010d10:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8010d12:	684a      	ldr	r2, [r1, #4]
 8010d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010d18:	4322      	orrs	r2, r4
 8010d1a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010d1c:	06dc      	lsls	r4, r3, #27
 8010d1e:	d506      	bpl.n	8010d2e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010d20:	6801      	ldr	r1, [r0, #0]
 8010d22:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8010d24:	688a      	ldr	r2, [r1, #8]
 8010d26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010d2a:	4322      	orrs	r2, r4
 8010d2c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010d2e:	0699      	lsls	r1, r3, #26
 8010d30:	d506      	bpl.n	8010d40 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010d32:	6801      	ldr	r1, [r0, #0]
 8010d34:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8010d36:	688a      	ldr	r2, [r1, #8]
 8010d38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010d3c:	4322      	orrs	r2, r4
 8010d3e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010d40:	065a      	lsls	r2, r3, #25
 8010d42:	d509      	bpl.n	8010d58 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010d44:	6801      	ldr	r1, [r0, #0]
 8010d46:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8010d48:	684a      	ldr	r2, [r1, #4]
 8010d4a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8010d4e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010d50:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010d54:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010d56:	d00b      	beq.n	8010d70 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010d58:	061b      	lsls	r3, r3, #24
 8010d5a:	d506      	bpl.n	8010d6a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010d5c:	6802      	ldr	r2, [r0, #0]
 8010d5e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8010d60:	6853      	ldr	r3, [r2, #4]
 8010d62:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8010d66:	430b      	orrs	r3, r1
 8010d68:	6053      	str	r3, [r2, #4]
}
 8010d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d6e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010d70:	684a      	ldr	r2, [r1, #4]
 8010d72:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8010d74:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8010d78:	4322      	orrs	r2, r4
 8010d7a:	604a      	str	r2, [r1, #4]
 8010d7c:	e7ec      	b.n	8010d58 <UART_AdvFeatureConfig+0x88>
 8010d7e:	bf00      	nop

08010d80 <UART_WaitOnFlagUntilTimeout>:
{
 8010d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010d88:	6805      	ldr	r5, [r0, #0]
{
 8010d8a:	4681      	mov	r9, r0
 8010d8c:	460f      	mov	r7, r1
 8010d8e:	4616      	mov	r6, r2
 8010d90:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010d92:	e002      	b.n	8010d9a <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8010d94:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8010d98:	d10c      	bne.n	8010db4 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010d9a:	69ec      	ldr	r4, [r5, #28]
 8010d9c:	ea37 0304 	bics.w	r3, r7, r4
 8010da0:	bf0c      	ite	eq
 8010da2:	f04f 0c01 	moveq.w	ip, #1
 8010da6:	f04f 0c00 	movne.w	ip, #0
 8010daa:	45b4      	cmp	ip, r6
 8010dac:	d0f2      	beq.n	8010d94 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8010dae:	2000      	movs	r0, #0
}
 8010db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010db4:	f7fb fd88 	bl	800c8c8 <HAL_GetTick>
 8010db8:	eba0 000a 	sub.w	r0, r0, sl
 8010dbc:	4540      	cmp	r0, r8
 8010dbe:	d821      	bhi.n	8010e04 <UART_WaitOnFlagUntilTimeout+0x84>
 8010dc0:	f1b8 0f00 	cmp.w	r8, #0
 8010dc4:	d01e      	beq.n	8010e04 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010dc6:	f8d9 5000 	ldr.w	r5, [r9]
 8010dca:	682b      	ldr	r3, [r5, #0]
 8010dcc:	075a      	lsls	r2, r3, #29
 8010dce:	d5e4      	bpl.n	8010d9a <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010dd0:	69eb      	ldr	r3, [r5, #28]
 8010dd2:	051b      	lsls	r3, r3, #20
 8010dd4:	d5e1      	bpl.n	8010d9a <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010dd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010dda:	622b      	str	r3, [r5, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010ddc:	682a      	ldr	r2, [r5, #0]
 8010dde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010de2:	602a      	str	r2, [r5, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010de4:	68aa      	ldr	r2, [r5, #8]
          huart->gState = HAL_UART_STATE_READY;
 8010de6:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8010de8:	2100      	movs	r1, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010dea:	f022 0201 	bic.w	r2, r2, #1
 8010dee:	60aa      	str	r2, [r5, #8]
          return HAL_TIMEOUT;
 8010df0:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8010df2:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8010df6:	f889 1080 	strb.w	r1, [r9, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8010dfa:	f8c9 3088 	str.w	r3, [r9, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010dfe:	f8c9 308c 	str.w	r3, [r9, #140]	; 0x8c
          return HAL_TIMEOUT;
 8010e02:	e7d5      	b.n	8010db0 <UART_WaitOnFlagUntilTimeout+0x30>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010e04:	f8d9 3000 	ldr.w	r3, [r9]
 8010e08:	681a      	ldr	r2, [r3, #0]
 8010e0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010e0e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e10:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8010e12:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8010e14:	2400      	movs	r4, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e16:	f022 0201 	bic.w	r2, r2, #1
 8010e1a:	609a      	str	r2, [r3, #8]
        return HAL_TIMEOUT;
 8010e1c:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8010e1e:	f8c9 1084 	str.w	r1, [r9, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8010e22:	f889 4080 	strb.w	r4, [r9, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8010e26:	f8c9 1088 	str.w	r1, [r9, #136]	; 0x88
        return HAL_TIMEOUT;
 8010e2a:	e7c1      	b.n	8010db0 <UART_WaitOnFlagUntilTimeout+0x30>

08010e2c <UART_CheckIdleState>:
{
 8010e2c:	b570      	push	{r4, r5, r6, lr}
 8010e2e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e30:	2600      	movs	r6, #0
{
 8010e32:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e34:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8010e38:	f7fb fd46 	bl	800c8c8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010e3c:	6823      	ldr	r3, [r4, #0]
 8010e3e:	681a      	ldr	r2, [r3, #0]
 8010e40:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8010e42:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010e44:	d40e      	bmi.n	8010e64 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	075b      	lsls	r3, r3, #29
 8010e4a:	d41a      	bmi.n	8010e82 <UART_CheckIdleState+0x56>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e4c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8010e4e:	2220      	movs	r2, #32
  return HAL_OK;
 8010e50:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8010e52:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8010e56:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8010e5a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e5e:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8010e60:	b002      	add	sp, #8
 8010e62:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010e68:	9300      	str	r3, [sp, #0]
 8010e6a:	4632      	mov	r2, r6
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010e72:	4620      	mov	r0, r4
 8010e74:	f7ff ff84 	bl	8010d80 <UART_WaitOnFlagUntilTimeout>
 8010e78:	b978      	cbnz	r0, 8010e9a <UART_CheckIdleState+0x6e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010e7a:	6823      	ldr	r3, [r4, #0]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	075b      	lsls	r3, r3, #29
 8010e80:	d5e4      	bpl.n	8010e4c <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010e86:	9300      	str	r3, [sp, #0]
 8010e88:	2200      	movs	r2, #0
 8010e8a:	462b      	mov	r3, r5
 8010e8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010e90:	4620      	mov	r0, r4
 8010e92:	f7ff ff75 	bl	8010d80 <UART_WaitOnFlagUntilTimeout>
 8010e96:	2800      	cmp	r0, #0
 8010e98:	d0d8      	beq.n	8010e4c <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8010e9a:	2003      	movs	r0, #3
}
 8010e9c:	b002      	add	sp, #8
 8010e9e:	bd70      	pop	{r4, r5, r6, pc}

08010ea0 <HAL_UART_Init>:
  if (huart == NULL)
 8010ea0:	b380      	cbz	r0, 8010f04 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8010ea2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8010ea6:	b510      	push	{r4, lr}
 8010ea8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8010eaa:	b333      	cbz	r3, 8010efa <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8010eac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8010eae:	2324      	movs	r3, #36	; 0x24
 8010eb0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8010eb4:	6813      	ldr	r3, [r2, #0]
 8010eb6:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010eba:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8010ebc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010ebe:	f7ff fd7d 	bl	80109bc <UART_SetConfig>
 8010ec2:	2801      	cmp	r0, #1
 8010ec4:	d017      	beq.n	8010ef6 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010ec6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010ec8:	b98b      	cbnz	r3, 8010eee <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010eca:	6823      	ldr	r3, [r4, #0]
 8010ecc:	685a      	ldr	r2, [r3, #4]
 8010ece:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010ed4:	689a      	ldr	r2, [r3, #8]
 8010ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010eda:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8010edc:	681a      	ldr	r2, [r3, #0]
 8010ede:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8010ee2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8010ee4:	601a      	str	r2, [r3, #0]
}
 8010ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8010eea:	f7ff bf9f 	b.w	8010e2c <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8010eee:	4620      	mov	r0, r4
 8010ef0:	f7ff feee 	bl	8010cd0 <UART_AdvFeatureConfig>
 8010ef4:	e7e9      	b.n	8010eca <HAL_UART_Init+0x2a>
}
 8010ef6:	2001      	movs	r0, #1
 8010ef8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8010efa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8010efe:	f7f1 fded 	bl	8002adc <HAL_UART_MspInit>
 8010f02:	e7d3      	b.n	8010eac <HAL_UART_Init+0xc>
}
 8010f04:	2001      	movs	r0, #1
 8010f06:	4770      	bx	lr

08010f08 <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010f08:	6803      	ldr	r3, [r0, #0]
 8010f0a:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010f0c:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 8010f0e:	b430      	push	{r4, r5}
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010f10:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f14:	4d0a      	ldr	r5, [pc, #40]	; (8010f40 <UARTEx_SetNbDataToProcess.part.0+0x38>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8010f16:	4c0b      	ldr	r4, [pc, #44]	; (8010f44 <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f18:	f815 200c 	ldrb.w	r2, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010f1c:	f3c1 6142 	ubfx	r1, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f20:	00d2      	lsls	r2, r2, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010f22:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8010f24:	f814 500c 	ldrb.w	r5, [r4, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 8010f28:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f2a:	fbb2 f2f5 	udiv	r2, r2, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010f2e:	00db      	lsls	r3, r3, #3
  }
}
 8010f30:	bc30      	pop	{r4, r5}
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010f32:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f36:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010f3a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8010f3e:	4770      	bx	lr
 8010f40:	080149b4 	.word	0x080149b4
 8010f44:	080149ac 	.word	0x080149ac

08010f48 <HAL_UARTEx_WakeupCallback>:
}
 8010f48:	4770      	bx	lr
 8010f4a:	bf00      	nop

08010f4c <HAL_UARTEx_RxFifoFullCallback>:
 8010f4c:	4770      	bx	lr
 8010f4e:	bf00      	nop

08010f50 <HAL_UARTEx_TxFifoEmptyCallback>:
 8010f50:	4770      	bx	lr
 8010f52:	bf00      	nop

08010f54 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8010f54:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d017      	beq.n	8010f8c <HAL_UARTEx_DisableFifoMode+0x38>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f5c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8010f5e:	2324      	movs	r3, #36	; 0x24
{
 8010f60:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8010f62:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f66:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8010f68:	6814      	ldr	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010f6a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8010f6c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010f70:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8010f74:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010f76:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f78:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(huart);
 8010f7a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8010f7e:	2220      	movs	r2, #32
 8010f80:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 8010f84:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8010f88:	4618      	mov	r0, r3
}
 8010f8a:	4770      	bx	lr
  __HAL_LOCK(huart);
 8010f8c:	2002      	movs	r0, #2
}
 8010f8e:	4770      	bx	lr

08010f90 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8010f90:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8010f92:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d022      	beq.n	8010fe0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010fa0:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8010fa2:	2224      	movs	r2, #36	; 0x24
 8010fa4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010fa8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8010faa:	681a      	ldr	r2, [r3, #0]
 8010fac:	f022 0201 	bic.w	r2, r2, #1
 8010fb0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010fb2:	689a      	ldr	r2, [r3, #8]
 8010fb4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8010fb8:	4311      	orrs	r1, r2
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010fba:	6e42      	ldr	r2, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010fbc:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	b152      	cbz	r2, 8010fd8 <HAL_UARTEx_SetTxFifoThreshold+0x48>
 8010fc2:	f7ff ffa1 	bl	8010f08 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fc6:	6803      	ldr	r3, [r0, #0]
 8010fc8:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 8010fca:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8010fcc:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8010fce:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8010fd2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8010fd6:	bd38      	pop	{r3, r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8010fd8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8010fdc:	6682      	str	r2, [r0, #104]	; 0x68
 8010fde:	e7f3      	b.n	8010fc8 <HAL_UARTEx_SetTxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 8010fe0:	2002      	movs	r0, #2
}
 8010fe2:	bd38      	pop	{r3, r4, r5, pc}

08010fe4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8010fe4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8010fe6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d022      	beq.n	8011034 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8010fee:	2201      	movs	r2, #1
 8010ff0:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ff4:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8010ff6:	2224      	movs	r2, #36	; 0x24
 8010ff8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ffc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	f022 0201 	bic.w	r2, r2, #1
 8011004:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011006:	689a      	ldr	r2, [r3, #8]
 8011008:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 801100c:	4311      	orrs	r1, r2
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801100e:	6e42      	ldr	r2, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011010:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011012:	4604      	mov	r4, r0
 8011014:	b152      	cbz	r2, 801102c <HAL_UARTEx_SetRxFifoThreshold+0x48>
 8011016:	f7ff ff77 	bl	8010f08 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801101a:	6803      	ldr	r3, [r0, #0]
 801101c:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 801101e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8011020:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8011022:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8011026:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 801102a:	bd38      	pop	{r3, r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 801102c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8011030:	6682      	str	r2, [r0, #104]	; 0x68
 8011032:	e7f3      	b.n	801101c <HAL_UARTEx_SetRxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 8011034:	2002      	movs	r0, #2
}
 8011036:	bd38      	pop	{r3, r4, r5, pc}

08011038 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8011038:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801103a:	f64b 7280 	movw	r2, #49024	; 0xbf80
  USBx->ISTR = 0U;
 801103e:	2000      	movs	r0, #0
 8011040:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8011044:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8011048:	4770      	bx	lr
 801104a:	bf00      	nop

0801104c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801104c:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
{
 8011050:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8011052:	f244 027f 	movw	r2, #16511	; 0x407f
 8011056:	400a      	ands	r2, r1

  return HAL_OK;
}
 8011058:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801105a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 801105e:	4770      	bx	lr

08011060 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8011060:	b084      	sub	sp, #16
 8011062:	4684      	mov	ip, r0
 8011064:	a801      	add	r0, sp, #4
 8011066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801106a:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801106c:	2301      	movs	r3, #1
 801106e:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8011072:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 8011074:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40
  USBx->ISTR = 0U;
 8011078:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 801107c:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50
}
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop

08011084 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011084:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011086:	f891 e000 	ldrb.w	lr, [r1]

  /* initialize Endpoint */
  switch (ep->type)
 801108a:	78cc      	ldrb	r4, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801108c:	fa0f fc8e 	sxth.w	ip, lr
{
 8011090:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011092:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8011096:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 801109a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801109e:	0412      	lsls	r2, r2, #16
 80110a0:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80110a2:	2c03      	cmp	r4, #3
 80110a4:	f200 814c 	bhi.w	8011340 <USB_ActivateEndpoint+0x2bc>
 80110a8:	e8df f004 	tbb	[pc, r4]
 80110ac:	0204494d 	.word	0x0204494d
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80110b0:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80110b4:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80110b6:	f248 0680 	movw	r6, #32896	; 0x8080
 80110ba:	4332      	orrs	r2, r6
 80110bc:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80110c0:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80110c4:	4d9f      	ldr	r5, [pc, #636]	; (8011344 <USB_ActivateEndpoint+0x2c0>)
 80110c6:	b292      	uxth	r2, r2
 80110c8:	402a      	ands	r2, r5
 80110ca:	ea42 020e 	orr.w	r2, r2, lr
 80110ce:	4332      	orrs	r2, r6
 80110d0:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 80110d4:	7b0a      	ldrb	r2, [r1, #12]
 80110d6:	2a00      	cmp	r2, #0
 80110d8:	d17a      	bne.n	80111d0 <USB_ActivateEndpoint+0x14c>
  {
    if (ep->is_in != 0U)
 80110da:	784a      	ldrb	r2, [r1, #1]
 80110dc:	2a00      	cmp	r2, #0
 80110de:	f000 80d3 	beq.w	8011288 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80110e2:	88ca      	ldrh	r2, [r1, #6]
 80110e4:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80110e8:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 80110ec:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80110f0:	0852      	lsrs	r2, r2, #1
 80110f2:	b289      	uxth	r1, r1
 80110f4:	0052      	lsls	r2, r2, #1
 80110f6:	f82e 2001 	strh.w	r2, [lr, r1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80110fa:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80110fe:	0656      	lsls	r6, r2, #25
 8011100:	d509      	bpl.n	8011116 <USB_ActivateEndpoint+0x92>
 8011102:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8011106:	b292      	uxth	r2, r2
 8011108:	4015      	ands	r5, r2
 801110a:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 801110e:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
 8011112:	f823 502c 	strh.w	r5, [r3, ip, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011116:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 801111a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801111e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011122:	0412      	lsls	r2, r2, #16
      if (ep->type != EP_TYPE_ISOC)
 8011124:	2c01      	cmp	r4, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011126:	ea4f 4212 	mov.w	r2, r2, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 801112a:	d04a      	beq.n	80111c2 <USB_ActivateEndpoint+0x13e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801112c:	f082 0220 	eor.w	r2, r2, #32
 8011130:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011134:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011138:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 801113c:	bd70      	pop	{r4, r5, r6, pc}
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801113e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8011142:	2000      	movs	r0, #0
      break;
 8011144:	e7b7      	b.n	80110b6 <USB_ActivateEndpoint+0x32>
      wEpRegVal |= USB_EP_CONTROL;
 8011146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 801114a:	4620      	mov	r0, r4
      break;
 801114c:	e7b3      	b.n	80110b6 <USB_ActivateEndpoint+0x32>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801114e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8011152:	0451      	lsls	r1, r2, #17
 8011154:	d509      	bpl.n	801116a <USB_ActivateEndpoint+0xe6>
 8011156:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 801115a:	b292      	uxth	r2, r2
 801115c:	4015      	ands	r5, r2
 801115e:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 8011162:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8011166:	f823 502c 	strh.w	r5, [r3, ip, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801116a:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 801116e:	0652      	lsls	r2, r2, #25
 8011170:	d50d      	bpl.n	801118e <USB_ActivateEndpoint+0x10a>
 8011172:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8011176:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801117a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801117e:	0412      	lsls	r2, r2, #16
 8011180:	0c12      	lsrs	r2, r2, #16
 8011182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011186:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 801118a:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801118e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8011192:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8011196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801119a:	0412      	lsls	r2, r2, #16
 801119c:	0c12      	lsrs	r2, r2, #16
      if (ep->type != EP_TYPE_ISOC)
 801119e:	2c01      	cmp	r4, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80111a0:	bf18      	it	ne
 80111a2:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80111a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80111aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80111ae:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80111b2:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80111b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80111ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80111be:	0412      	lsls	r2, r2, #16
 80111c0:	0c12      	lsrs	r2, r2, #16
 80111c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80111c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80111ca:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
}
 80111ce:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EP_DBUF(USBx, ep->num);
 80111d0:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80111d4:	b292      	uxth	r2, r2
 80111d6:	402a      	ands	r2, r5
 80111d8:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80111dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80111e0:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80111e4:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80111e8:	890a      	ldrh	r2, [r1, #8]
 80111ea:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 80111ee:	fa1e f686 	uxtah	r6, lr, r6
 80111f2:	0852      	lsrs	r2, r2, #1
 80111f4:	0052      	lsls	r2, r2, #1
 80111f6:	f8a6 2400 	strh.w	r2, [r6, #1024]	; 0x400
 80111fa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80111fe:	fa1e fe82 	uxtah	lr, lr, r2
 8011202:	894a      	ldrh	r2, [r1, #10]
 8011204:	0852      	lsrs	r2, r2, #1
 8011206:	0052      	lsls	r2, r2, #1
 8011208:	f8ae 2404 	strh.w	r2, [lr, #1028]	; 0x404
    if (ep->is_in == 0U)
 801120c:	784a      	ldrb	r2, [r1, #1]
 801120e:	2a00      	cmp	r2, #0
 8011210:	d19d      	bne.n	801114e <USB_ActivateEndpoint+0xca>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011212:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8011216:	0456      	lsls	r6, r2, #17
 8011218:	d509      	bpl.n	801122e <USB_ActivateEndpoint+0x1aa>
 801121a:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 801121e:	b292      	uxth	r2, r2
 8011220:	4015      	ands	r5, r2
 8011222:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 8011226:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 801122a:	f823 502c 	strh.w	r5, [r3, ip, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801122e:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8011232:	0654      	lsls	r4, r2, #25
 8011234:	d50d      	bpl.n	8011252 <USB_ActivateEndpoint+0x1ce>
 8011236:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 801123a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 801123e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8011242:	0412      	lsls	r2, r2, #16
 8011244:	0c12      	lsrs	r2, r2, #16
 8011246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801124a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 801124e:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011252:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8011256:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801125a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801125e:	0412      	lsls	r2, r2, #16
 8011260:	0c12      	lsrs	r2, r2, #16
 8011262:	f248 0180 	movw	r1, #32896	; 0x8080
 8011266:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 801126a:	430a      	orrs	r2, r1
 801126c:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011270:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8011274:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8011278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801127c:	0412      	lsls	r2, r2, #16
 801127e:	0c12      	lsrs	r2, r2, #16
 8011280:	430a      	orrs	r2, r1
 8011282:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
}
 8011286:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011288:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 801128c:	88ca      	ldrh	r2, [r1, #6]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801128e:	6909      	ldr	r1, [r1, #16]
 8011290:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011294:	fa1e f484 	uxtah	r4, lr, r4
 8011298:	0852      	lsrs	r2, r2, #1
 801129a:	0052      	lsls	r2, r2, #1
 801129c:	f8a4 2404 	strh.w	r2, [r4, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80112a0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80112a4:	fa1e fe82 	uxtah	lr, lr, r2
 80112a8:	b361      	cbz	r1, 8011304 <USB_ActivateEndpoint+0x280>
 80112aa:	293e      	cmp	r1, #62	; 0x3e
 80112ac:	d83c      	bhi.n	8011328 <USB_ActivateEndpoint+0x2a4>
 80112ae:	084a      	lsrs	r2, r1, #1
 80112b0:	07cc      	lsls	r4, r1, #31
 80112b2:	bf48      	it	mi
 80112b4:	3201      	addmi	r2, #1
 80112b6:	0292      	lsls	r2, r2, #10
 80112b8:	b292      	uxth	r2, r2
 80112ba:	f8ae 2406 	strh.w	r2, [lr, #1030]	; 0x406
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80112be:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80112c2:	0452      	lsls	r2, r2, #17
 80112c4:	d50d      	bpl.n	80112e2 <USB_ActivateEndpoint+0x25e>
 80112c6:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80112ca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80112ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80112d2:	0412      	lsls	r2, r2, #16
 80112d4:	0c12      	lsrs	r2, r2, #16
 80112d6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80112da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80112de:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80112e2:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80112e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80112ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80112ee:	0412      	lsls	r2, r2, #16
 80112f0:	0c12      	lsrs	r2, r2, #16
 80112f2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80112f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80112fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80112fe:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
}
 8011302:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011304:	f8be 2406 	ldrh.w	r2, [lr, #1030]	; 0x406
 8011308:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 801130c:	0412      	lsls	r2, r2, #16
 801130e:	0c12      	lsrs	r2, r2, #16
 8011310:	f8ae 2406 	strh.w	r2, [lr, #1030]	; 0x406
 8011314:	f8be 2406 	ldrh.w	r2, [lr, #1030]	; 0x406
 8011318:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 801131c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8011320:	b292      	uxth	r2, r2
 8011322:	f8ae 2406 	strh.w	r2, [lr, #1030]	; 0x406
 8011326:	e7ca      	b.n	80112be <USB_ActivateEndpoint+0x23a>
 8011328:	094c      	lsrs	r4, r1, #5
 801132a:	4a07      	ldr	r2, [pc, #28]	; (8011348 <USB_ActivateEndpoint+0x2c4>)
 801132c:	06c9      	lsls	r1, r1, #27
 801132e:	bf08      	it	eq
 8011330:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8011334:	ea42 2284 	orr.w	r2, r2, r4, lsl #10
 8011338:	b292      	uxth	r2, r2
 801133a:	f8ae 2406 	strh.w	r2, [lr, #1030]	; 0x406
 801133e:	e7be      	b.n	80112be <USB_ActivateEndpoint+0x23a>
  switch (ep->type)
 8011340:	2001      	movs	r0, #1
 8011342:	e6b8      	b.n	80110b6 <USB_ActivateEndpoint+0x32>
 8011344:	ffff8f8f 	.word	0xffff8f8f
 8011348:	ffff8000 	.word	0xffff8000

0801134c <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 801134c:	7b0b      	ldrb	r3, [r1, #12]
 801134e:	b9cb      	cbnz	r3, 8011384 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 8011350:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011352:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8011354:	2b00      	cmp	r3, #0
 8011356:	f000 80b1 	beq.w	80114bc <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801135a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801135e:	0659      	lsls	r1, r3, #25
 8011360:	f100 80c5 	bmi.w	80114ee <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011364:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801136c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011370:	041b      	lsls	r3, r3, #16
 8011372:	0c1b      	lsrs	r3, r3, #16
 8011374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801137c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8011380:	2000      	movs	r0, #0
 8011382:	4770      	bx	lr
    if (ep->is_in == 0U)
 8011384:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011386:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8011388:	2b00      	cmp	r3, #0
 801138a:	d14b      	bne.n	8011424 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801138c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011390:	0459      	lsls	r1, r3, #17
 8011392:	d50d      	bpl.n	80113b0 <USB_DeactivateEndpoint+0x64>
 8011394:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801139c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113a0:	041b      	lsls	r3, r3, #16
 80113a2:	0c1b      	lsrs	r3, r3, #16
 80113a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80113a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80113b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80113b4:	065b      	lsls	r3, r3, #25
 80113b6:	d50d      	bpl.n	80113d4 <USB_DeactivateEndpoint+0x88>
 80113b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80113bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113c4:	041b      	lsls	r3, r3, #16
 80113c6:	0c1b      	lsrs	r3, r3, #16
 80113c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80113cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80113d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80113d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80113d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113e0:	041b      	lsls	r3, r3, #16
 80113e2:	0c1b      	lsrs	r3, r3, #16
 80113e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80113e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80113ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80113f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80113f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80113f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113fc:	041b      	lsls	r3, r3, #16
 80113fe:	f248 0180 	movw	r1, #32896	; 0x8080
 8011402:	0c1b      	lsrs	r3, r3, #16
 8011404:	430b      	orrs	r3, r1
 8011406:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801140a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801140e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011416:	041b      	lsls	r3, r3, #16
 8011418:	0c1b      	lsrs	r3, r3, #16
 801141a:	430b      	orrs	r3, r1
 801141c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8011420:	2000      	movs	r0, #0
 8011422:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011424:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011428:	0459      	lsls	r1, r3, #17
 801142a:	d50d      	bpl.n	8011448 <USB_DeactivateEndpoint+0xfc>
 801142c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011438:	041b      	lsls	r3, r3, #16
 801143a:	0c1b      	lsrs	r3, r3, #16
 801143c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011444:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011448:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801144c:	065b      	lsls	r3, r3, #25
 801144e:	d50d      	bpl.n	801146c <USB_DeactivateEndpoint+0x120>
 8011450:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801145c:	041b      	lsls	r3, r3, #16
 801145e:	0c1b      	lsrs	r3, r3, #16
 8011460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011464:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011468:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 801146c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011478:	041b      	lsls	r3, r3, #16
 801147a:	0c1b      	lsrs	r3, r3, #16
 801147c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011484:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011488:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801148c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011494:	041b      	lsls	r3, r3, #16
 8011496:	f248 0180 	movw	r1, #32896	; 0x8080
 801149a:	0c1b      	lsrs	r3, r3, #16
 801149c:	430b      	orrs	r3, r1
 801149e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80114a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80114a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80114aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114ae:	041b      	lsls	r3, r3, #16
 80114b0:	0c1b      	lsrs	r3, r3, #16
 80114b2:	430b      	orrs	r3, r1
 80114b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80114b8:	2000      	movs	r0, #0
 80114ba:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80114bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80114c0:	045b      	lsls	r3, r3, #17
 80114c2:	d50d      	bpl.n	80114e0 <USB_DeactivateEndpoint+0x194>
 80114c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80114c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80114cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114d0:	041b      	lsls	r3, r3, #16
 80114d2:	0c1b      	lsrs	r3, r3, #16
 80114d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80114d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80114e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80114e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80114e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114ec:	e740      	b.n	8011370 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80114ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80114f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80114f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114fa:	041b      	lsls	r3, r3, #16
 80114fc:	0c1b      	lsrs	r3, r3, #16
 80114fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011502:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011506:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 801150a:	e72b      	b.n	8011364 <USB_DeactivateEndpoint+0x18>

0801150c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801150c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011510:	784b      	ldrb	r3, [r1, #1]
 8011512:	2b01      	cmp	r3, #1
{
 8011514:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 8011516:	d06b      	beq.n	80115f0 <USB_EPStartXfer+0xe4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011518:	7b08      	ldrb	r0, [r1, #12]
 801151a:	2800      	cmp	r0, #0
 801151c:	d036      	beq.n	801158c <USB_EPStartXfer+0x80>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801151e:	78c8      	ldrb	r0, [r1, #3]
 8011520:	2802      	cmp	r0, #2
 8011522:	f000 818a 	beq.w	801183a <USB_EPStartXfer+0x32e>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011526:	2801      	cmp	r0, #1
 8011528:	f040 80da 	bne.w	80116e0 <USB_EPStartXfer+0x1d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801152c:	6988      	ldr	r0, [r1, #24]
 801152e:	690c      	ldr	r4, [r1, #16]
 8011530:	42a0      	cmp	r0, r4
        {
          len = ep->maxpacket;
          ep->xfer_len -= len;
 8011532:	bf8a      	itet	hi
 8011534:	1b05      	subhi	r5, r0, r4
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 8011536:	2500      	movls	r5, #0
 8011538:	4620      	movhi	r0, r4
 801153a:	618d      	str	r5, [r1, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801153c:	2b00      	cmp	r3, #0
 801153e:	f040 8147 	bne.w	80117d0 <USB_EPStartXfer+0x2c4>
 8011542:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8011546:	780b      	ldrb	r3, [r1, #0]
 8011548:	f202 4402 	addw	r4, r2, #1026	; 0x402
 801154c:	fa14 f585 	uxtah	r5, r4, r5
 8011550:	2800      	cmp	r0, #0
 8011552:	f000 8233 	beq.w	80119bc <USB_EPStartXfer+0x4b0>
 8011556:	283e      	cmp	r0, #62	; 0x3e
 8011558:	f200 811e 	bhi.w	8011798 <USB_EPStartXfer+0x28c>
 801155c:	0844      	lsrs	r4, r0, #1
 801155e:	f010 0001 	ands.w	r0, r0, #1
 8011562:	4626      	mov	r6, r4
 8011564:	bf18      	it	ne
 8011566:	1c66      	addne	r6, r4, #1
 8011568:	02b6      	lsls	r6, r6, #10
 801156a:	b2b6      	uxth	r6, r6
 801156c:	f825 6033 	strh.w	r6, [r5, r3, lsl #3]
 8011570:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8011574:	f202 4606 	addw	r6, r2, #1030	; 0x406
 8011578:	fa16 f585 	uxtah	r5, r6, r5
 801157c:	b100      	cbz	r0, 8011580 <USB_EPStartXfer+0x74>
 801157e:	3401      	adds	r4, #1
 8011580:	02a4      	lsls	r4, r4, #10
 8011582:	b2a0      	uxth	r0, r4
 8011584:	f825 0033 	strh.w	r0, [r5, r3, lsl #3]
 8011588:	780b      	ldrb	r3, [r1, #0]
 801158a:	e01d      	b.n	80115c8 <USB_EPStartXfer+0xbc>
      if (ep->xfer_len > ep->maxpacket)
 801158c:	698c      	ldr	r4, [r1, #24]
 801158e:	690b      	ldr	r3, [r1, #16]
 8011590:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 8011592:	bf84      	itt	hi
 8011594:	1ae0      	subhi	r0, r4, r3
 8011596:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8011598:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 801159c:	6188      	str	r0, [r1, #24]
 801159e:	f202 4506 	addw	r5, r2, #1030	; 0x406
 80115a2:	7808      	ldrb	r0, [r1, #0]
 80115a4:	fa15 f383 	uxtah	r3, r5, r3
 80115a8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80115ac:	2c00      	cmp	r4, #0
 80115ae:	f000 8088 	beq.w	80116c2 <USB_EPStartXfer+0x1b6>
 80115b2:	2c3e      	cmp	r4, #62	; 0x3e
 80115b4:	f200 8186 	bhi.w	80118c4 <USB_EPStartXfer+0x3b8>
 80115b8:	0860      	lsrs	r0, r4, #1
 80115ba:	07e4      	lsls	r4, r4, #31
 80115bc:	bf48      	it	mi
 80115be:	3001      	addmi	r0, #1
 80115c0:	0280      	lsls	r0, r0, #10
 80115c2:	b280      	uxth	r0, r0
 80115c4:	8018      	strh	r0, [r3, #0]
 80115c6:	780b      	ldrb	r3, [r1, #0]
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80115c8:	b219      	sxth	r1, r3
  }

  return HAL_OK;
 80115ca:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80115cc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80115d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80115d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115d8:	041b      	lsls	r3, r3, #16
 80115da:	0c1b      	lsrs	r3, r3, #16
 80115dc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80115e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80115e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115e8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 80115ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 80115f0:	690e      	ldr	r6, [r1, #16]
 80115f2:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 80115f4:	7b0b      	ldrb	r3, [r1, #12]
 80115f6:	42b0      	cmp	r0, r6
 80115f8:	bf28      	it	cs
 80115fa:	4630      	movcs	r0, r6
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	f000 80e9 	beq.w	80117d4 <USB_EPStartXfer+0x2c8>
      if (ep->type == EP_TYPE_BULK)
 8011602:	78cb      	ldrb	r3, [r1, #3]
 8011604:	2b02      	cmp	r3, #2
 8011606:	d06e      	beq.n	80116e6 <USB_EPStartXfer+0x1da>
        PCD_SET_EP_DBUF(USBx, ep->num);
 8011608:	f891 c000 	ldrb.w	ip, [r1]
        ep->xfer_len_db -= len;
 801160c:	6a0c      	ldr	r4, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 801160e:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 8011612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801161a:	041b      	lsls	r3, r3, #16
 801161c:	0c1b      	lsrs	r3, r3, #16
 801161e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011626:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801162a:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
        ep->xfer_len_db -= len;
 801162e:	1a24      	subs	r4, r4, r0
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011630:	f013 0f40 	tst.w	r3, #64	; 0x40
        ep->xfer_len_db -= len;
 8011634:	620c      	str	r4, [r1, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011636:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801163a:	f000 814f 	beq.w	80118dc <USB_EPStartXfer+0x3d0>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801163e:	f202 4506 	addw	r5, r2, #1030	; 0x406
 8011642:	fa15 f383 	uxtah	r3, r5, r3
 8011646:	b285      	uxth	r5, r0
 8011648:	f823 503c 	strh.w	r5, [r3, ip, lsl #3]
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801164c:	462f      	mov	r7, r5
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801164e:	f8b1 900a 	ldrh.w	r9, [r1, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011652:	694d      	ldr	r5, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011654:	3701      	adds	r7, #1
 8011656:	f502 6880 	add.w	r8, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 801165a:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801165c:	44c1      	add	r9, r8
  for (i = n; i != 0U; i--)
 801165e:	d00b      	beq.n	8011678 <USB_EPStartXfer+0x16c>
 8011660:	eb05 0747 	add.w	r7, r5, r7, lsl #1
 8011664:	eba9 0905 	sub.w	r9, r9, r5
  uint8_t *pBuf = pbUsrBuf;
 8011668:	462b      	mov	r3, r5
  {
    temp1 = *pBuf;
 801166a:	f8b3 e000 	ldrh.w	lr, [r3]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 801166e:	f823 e009 	strh.w	lr, [r3, r9]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8011672:	3302      	adds	r3, #2
  for (i = n; i != 0U; i--)
 8011674:	429f      	cmp	r7, r3
 8011676:	d1f8      	bne.n	801166a <USB_EPStartXfer+0x15e>
          ep->xfer_buff += len;
 8011678:	182b      	adds	r3, r5, r0
          if (ep->xfer_len_db > ep->maxpacket)
 801167a:	42a6      	cmp	r6, r4
          ep->xfer_buff += len;
 801167c:	614b      	str	r3, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 801167e:	f0c0 8171 	bcc.w	8011964 <USB_EPStartXfer+0x458>
            ep->xfer_len_db = 0U;
 8011682:	2500      	movs	r5, #0
 8011684:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 8011686:	2c00      	cmp	r4, #0
 8011688:	f000 80c3 	beq.w	8011812 <USB_EPStartXfer+0x306>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801168c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8011690:	f202 4502 	addw	r5, r2, #1026	; 0x402
 8011694:	fa15 f080 	uxtah	r0, r5, r0
 8011698:	b2a5      	uxth	r5, r4
 801169a:	f820 503c 	strh.w	r5, [r0, ip, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801169e:	462c      	mov	r4, r5
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80116a0:	8908      	ldrh	r0, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80116a2:	3401      	adds	r4, #1
  for (i = n; i != 0U; i--)
 80116a4:	0864      	lsrs	r4, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80116a6:	4480      	add	r8, r0
  for (i = n; i != 0U; i--)
 80116a8:	f000 80b3 	beq.w	8011812 <USB_EPStartXfer+0x306>
 80116ac:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80116b0:	eba8 0803 	sub.w	r8, r8, r3
    temp1 = *pBuf;
 80116b4:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (uint16_t)temp2;
 80116b6:	f823 0008 	strh.w	r0, [r3, r8]
    pBuf++;
 80116ba:	3302      	adds	r3, #2
  for (i = n; i != 0U; i--)
 80116bc:	429c      	cmp	r4, r3
 80116be:	d1f9      	bne.n	80116b4 <USB_EPStartXfer+0x1a8>
 80116c0:	e0a7      	b.n	8011812 <USB_EPStartXfer+0x306>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80116c2:	8818      	ldrh	r0, [r3, #0]
 80116c4:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 80116c8:	0400      	lsls	r0, r0, #16
 80116ca:	0c00      	lsrs	r0, r0, #16
 80116cc:	8018      	strh	r0, [r3, #0]
 80116ce:	8818      	ldrh	r0, [r3, #0]
 80116d0:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80116d4:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80116d8:	b280      	uxth	r0, r0
 80116da:	8018      	strh	r0, [r3, #0]
 80116dc:	780b      	ldrb	r3, [r1, #0]
 80116de:	e773      	b.n	80115c8 <USB_EPStartXfer+0xbc>
        return HAL_ERROR;
 80116e0:	2001      	movs	r0, #1
}
 80116e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep->xfer_len_db > ep->maxpacket)
 80116e6:	6a0d      	ldr	r5, [r1, #32]
 80116e8:	42ae      	cmp	r6, r5
 80116ea:	f080 81cf 	bcs.w	8011a8c <USB_EPStartXfer+0x580>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80116ee:	780f      	ldrb	r7, [r1, #0]
 80116f0:	f832 3027 	ldrh.w	r3, [r2, r7, lsl #2]
 80116f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80116f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80116fc:	041b      	lsls	r3, r3, #16
 80116fe:	0c1b      	lsrs	r3, r3, #16
 8011700:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011708:	f822 3027 	strh.w	r3, [r2, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801170c:	f832 3027 	ldrh.w	r3, [r2, r7, lsl #2]
          ep->xfer_len_db -= len;
 8011710:	1a2d      	subs	r5, r5, r0
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011712:	f013 0f40 	tst.w	r3, #64	; 0x40
          ep->xfer_len_db -= len;
 8011716:	620d      	str	r5, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011718:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801171c:	f000 8178 	beq.w	8011a10 <USB_EPStartXfer+0x504>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011720:	f202 4406 	addw	r4, r2, #1030	; 0x406
 8011724:	fa14 f383 	uxtah	r3, r4, r3
 8011728:	fa1f f980 	uxth.w	r9, r0
 801172c:	f823 9037 	strh.w	r9, [r3, r7, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011730:	f109 0c01 	add.w	ip, r9, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011734:	f8b1 a00a 	ldrh.w	sl, [r1, #10]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011738:	694b      	ldr	r3, [r1, #20]
 801173a:	f502 6880 	add.w	r8, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 801173e:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011742:	44c2      	add	sl, r8
  for (i = n; i != 0U; i--)
 8011744:	d00b      	beq.n	801175e <USB_EPStartXfer+0x252>
 8011746:	ebaa 0a03 	sub.w	sl, sl, r3
 801174a:	eb03 0b4c 	add.w	fp, r3, ip, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 801174e:	461c      	mov	r4, r3
    temp1 = *pBuf;
 8011750:	f8b4 e000 	ldrh.w	lr, [r4]
    *pdwVal = (uint16_t)temp2;
 8011754:	f824 e00a 	strh.w	lr, [r4, sl]
    pBuf++;
 8011758:	3402      	adds	r4, #2
  for (i = n; i != 0U; i--)
 801175a:	45a3      	cmp	fp, r4
 801175c:	d1f8      	bne.n	8011750 <USB_EPStartXfer+0x244>
            ep->xfer_buff += len;
 801175e:	4403      	add	r3, r0
            if (ep->xfer_len_db > ep->maxpacket)
 8011760:	42ae      	cmp	r6, r5
            ep->xfer_buff += len;
 8011762:	614b      	str	r3, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8011764:	f080 81dc 	bcs.w	8011b20 <USB_EPStartXfer+0x614>
              ep->xfer_len_db -= len;
 8011768:	1a28      	subs	r0, r5, r0
 801176a:	6208      	str	r0, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801176c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8011770:	f202 4402 	addw	r4, r2, #1026	; 0x402
 8011774:	fa14 f080 	uxtah	r0, r4, r0
 8011778:	f820 9037 	strh.w	r9, [r0, r7, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801177c:	890c      	ldrh	r4, [r1, #8]
 801177e:	4444      	add	r4, r8
  for (i = n; i != 0U; i--)
 8011780:	f1bc 0f00 	cmp.w	ip, #0
 8011784:	d045      	beq.n	8011812 <USB_EPStartXfer+0x306>
 8011786:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801178a:	1ae4      	subs	r4, r4, r3
    temp1 = *pBuf;
 801178c:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (uint16_t)temp2;
 801178e:	5318      	strh	r0, [r3, r4]
    pBuf++;
 8011790:	3302      	adds	r3, #2
  for (i = n; i != 0U; i--)
 8011792:	4563      	cmp	r3, ip
 8011794:	d1fa      	bne.n	801178c <USB_EPStartXfer+0x280>
 8011796:	e03c      	b.n	8011812 <USB_EPStartXfer+0x306>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8011798:	0944      	lsrs	r4, r0, #5
 801179a:	f010 001f 	ands.w	r0, r0, #31
 801179e:	4627      	mov	r7, r4
 80117a0:	4626      	mov	r6, r4
 80117a2:	bf08      	it	eq
 80117a4:	f104 37ff 	addeq.w	r7, r4, #4294967295	; 0xffffffff
 80117a8:	4cb7      	ldr	r4, [pc, #732]	; (8011a88 <USB_EPStartXfer+0x57c>)
 80117aa:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 80117ae:	b2a4      	uxth	r4, r4
 80117b0:	f825 4033 	strh.w	r4, [r5, r3, lsl #3]
 80117b4:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 80117b8:	f202 4406 	addw	r4, r2, #1030	; 0x406
 80117bc:	fa14 f485 	uxtah	r4, r4, r5
 80117c0:	b900      	cbnz	r0, 80117c4 <USB_EPStartXfer+0x2b8>
 80117c2:	3e01      	subs	r6, #1
 80117c4:	48b0      	ldr	r0, [pc, #704]	; (8011a88 <USB_EPStartXfer+0x57c>)
 80117c6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80117ca:	b280      	uxth	r0, r0
 80117cc:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80117d0:	780b      	ldrb	r3, [r1, #0]
 80117d2:	e6f9      	b.n	80115c8 <USB_EPStartXfer+0xbc>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80117d4:	b285      	uxth	r5, r0
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80117d6:	4628      	mov	r0, r5
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80117d8:	f8b1 c006 	ldrh.w	ip, [r1, #6]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80117dc:	694b      	ldr	r3, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80117de:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80117e0:	f502 6480 	add.w	r4, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80117e4:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80117e6:	44a4      	add	ip, r4
  for (i = n; i != 0U; i--)
 80117e8:	d009      	beq.n	80117fe <USB_EPStartXfer+0x2f2>
 80117ea:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 80117ee:	ebac 0c03 	sub.w	ip, ip, r3
    temp1 = *pBuf;
 80117f2:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (uint16_t)temp2;
 80117f4:	f823 000c 	strh.w	r0, [r3, ip]
    pBuf++;
 80117f8:	3302      	adds	r3, #2
  for (i = n; i != 0U; i--)
 80117fa:	42a3      	cmp	r3, r4
 80117fc:	d1f9      	bne.n	80117f2 <USB_EPStartXfer+0x2e6>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80117fe:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8011802:	7808      	ldrb	r0, [r1, #0]
 8011804:	f202 4402 	addw	r4, r2, #1026	; 0x402
 8011808:	fa14 f383 	uxtah	r3, r4, r3
 801180c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8011810:	801d      	strh	r5, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011812:	7809      	ldrb	r1, [r1, #0]
 8011814:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8011818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801181c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011820:	041b      	lsls	r3, r3, #16
 8011822:	0c1b      	lsrs	r3, r3, #16
 8011824:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8011828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801182c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011830:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  return HAL_OK;
 8011834:	2000      	movs	r0, #0
}
 8011836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801183a:	bb1b      	cbnz	r3, 8011884 <USB_EPStartXfer+0x378>
 801183c:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8011840:	690c      	ldr	r4, [r1, #16]
 8011842:	780b      	ldrb	r3, [r1, #0]
 8011844:	f202 4002 	addw	r0, r2, #1026	; 0x402
 8011848:	fa10 f085 	uxtah	r0, r0, r5
 801184c:	2c00      	cmp	r4, #0
 801184e:	f000 808c 	beq.w	801196a <USB_EPStartXfer+0x45e>
 8011852:	2c3e      	cmp	r4, #62	; 0x3e
 8011854:	f200 8147 	bhi.w	8011ae6 <USB_EPStartXfer+0x5da>
 8011858:	0865      	lsrs	r5, r4, #1
 801185a:	f014 0401 	ands.w	r4, r4, #1
 801185e:	462e      	mov	r6, r5
 8011860:	bf18      	it	ne
 8011862:	1c6e      	addne	r6, r5, #1
 8011864:	02b6      	lsls	r6, r6, #10
 8011866:	b2b6      	uxth	r6, r6
 8011868:	f820 6033 	strh.w	r6, [r0, r3, lsl #3]
 801186c:	f8b2 6050 	ldrh.w	r6, [r2, #80]	; 0x50
 8011870:	f202 4006 	addw	r0, r2, #1030	; 0x406
 8011874:	fa10 f686 	uxtah	r6, r0, r6
 8011878:	b104      	cbz	r4, 801187c <USB_EPStartXfer+0x370>
 801187a:	3501      	adds	r5, #1
 801187c:	02ad      	lsls	r5, r5, #10
 801187e:	b2a8      	uxth	r0, r5
 8011880:	f826 0033 	strh.w	r0, [r6, r3, lsl #3]
        if (ep->xfer_count != 0U)
 8011884:	69cb      	ldr	r3, [r1, #28]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d0a2      	beq.n	80117d0 <USB_EPStartXfer+0x2c4>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801188a:	780b      	ldrb	r3, [r1, #0]
 801188c:	b218      	sxth	r0, r3
 801188e:	f244 0440 	movw	r4, #16448	; 0x4040
 8011892:	f832 5020 	ldrh.w	r5, [r2, r0, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011896:	ea04 0605 	and.w	r6, r4, r5
 801189a:	43ac      	bics	r4, r5
 801189c:	d002      	beq.n	80118a4 <USB_EPStartXfer+0x398>
 801189e:	2e00      	cmp	r6, #0
 80118a0:	f47f ae92 	bne.w	80115c8 <USB_EPStartXfer+0xbc>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80118a4:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 80118a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80118ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80118b0:	041b      	lsls	r3, r3, #16
 80118b2:	0c1b      	lsrs	r3, r3, #16
 80118b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80118b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80118bc:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
 80118c0:	780b      	ldrb	r3, [r1, #0]
 80118c2:	e681      	b.n	80115c8 <USB_EPStartXfer+0xbc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80118c4:	0965      	lsrs	r5, r4, #5
 80118c6:	06e0      	lsls	r0, r4, #27
 80118c8:	486f      	ldr	r0, [pc, #444]	; (8011a88 <USB_EPStartXfer+0x57c>)
 80118ca:	bf08      	it	eq
 80118cc:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 80118d0:	ea40 2085 	orr.w	r0, r0, r5, lsl #10
 80118d4:	b280      	uxth	r0, r0
 80118d6:	8018      	strh	r0, [r3, #0]
 80118d8:	780b      	ldrb	r3, [r1, #0]
 80118da:	e675      	b.n	80115c8 <USB_EPStartXfer+0xbc>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80118dc:	f202 4502 	addw	r5, r2, #1026	; 0x402
 80118e0:	fa15 f383 	uxtah	r3, r5, r3
 80118e4:	b285      	uxth	r5, r0
 80118e6:	f823 503c 	strh.w	r5, [r3, ip, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80118ea:	462f      	mov	r7, r5
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80118ec:	f8b1 9008 	ldrh.w	r9, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80118f0:	694d      	ldr	r5, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80118f2:	3701      	adds	r7, #1
 80118f4:	f502 6880 	add.w	r8, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80118f8:	087f      	lsrs	r7, r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80118fa:	44c1      	add	r9, r8
  for (i = n; i != 0U; i--)
 80118fc:	d00b      	beq.n	8011916 <USB_EPStartXfer+0x40a>
 80118fe:	eb05 0747 	add.w	r7, r5, r7, lsl #1
 8011902:	eba9 0905 	sub.w	r9, r9, r5
  uint8_t *pBuf = pbUsrBuf;
 8011906:	462b      	mov	r3, r5
    temp1 = *pBuf;
 8011908:	f8b3 e000 	ldrh.w	lr, [r3]
    *pdwVal = (uint16_t)temp2;
 801190c:	f823 e009 	strh.w	lr, [r3, r9]
    pBuf++;
 8011910:	3302      	adds	r3, #2
  for (i = n; i != 0U; i--)
 8011912:	42bb      	cmp	r3, r7
 8011914:	d1f8      	bne.n	8011908 <USB_EPStartXfer+0x3fc>
          ep->xfer_buff += len;
 8011916:	182b      	adds	r3, r5, r0
          if (ep->xfer_len_db > ep->maxpacket)
 8011918:	42a6      	cmp	r6, r4
          ep->xfer_buff += len;
 801191a:	614b      	str	r3, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 801191c:	d31f      	bcc.n	801195e <USB_EPStartXfer+0x452>
            ep->xfer_len_db = 0U;
 801191e:	2500      	movs	r5, #0
 8011920:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 8011922:	2c00      	cmp	r4, #0
 8011924:	f43f af75 	beq.w	8011812 <USB_EPStartXfer+0x306>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011928:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 801192c:	f202 4506 	addw	r5, r2, #1030	; 0x406
 8011930:	fa15 f080 	uxtah	r0, r5, r0
 8011934:	b2a5      	uxth	r5, r4
 8011936:	f820 503c 	strh.w	r5, [r0, ip, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801193a:	462c      	mov	r4, r5
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801193c:	8948      	ldrh	r0, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801193e:	3401      	adds	r4, #1
  for (i = n; i != 0U; i--)
 8011940:	0864      	lsrs	r4, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011942:	4480      	add	r8, r0
  for (i = n; i != 0U; i--)
 8011944:	f43f af65 	beq.w	8011812 <USB_EPStartXfer+0x306>
 8011948:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801194c:	eba8 0803 	sub.w	r8, r8, r3
    temp1 = *pBuf;
 8011950:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (uint16_t)temp2;
 8011952:	f823 0008 	strh.w	r0, [r3, r8]
    pBuf++;
 8011956:	3302      	adds	r3, #2
  for (i = n; i != 0U; i--)
 8011958:	42a3      	cmp	r3, r4
 801195a:	d1f9      	bne.n	8011950 <USB_EPStartXfer+0x444>
 801195c:	e759      	b.n	8011812 <USB_EPStartXfer+0x306>
            ep->xfer_len_db -= len;
 801195e:	1a25      	subs	r5, r4, r0
 8011960:	4604      	mov	r4, r0
 8011962:	e7dd      	b.n	8011920 <USB_EPStartXfer+0x414>
            ep->xfer_len_db -= len;
 8011964:	1a25      	subs	r5, r4, r0
 8011966:	4604      	mov	r4, r0
 8011968:	e68c      	b.n	8011684 <USB_EPStartXfer+0x178>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801196a:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 801196e:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8011972:	0424      	lsls	r4, r4, #16
 8011974:	0c24      	lsrs	r4, r4, #16
 8011976:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 801197a:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 801197e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8011982:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8011986:	b2a4      	uxth	r4, r4
 8011988:	f820 4033 	strh.w	r4, [r0, r3, lsl #3]
 801198c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8011990:	f202 4406 	addw	r4, r2, #1030	; 0x406
 8011994:	fa14 f480 	uxtah	r4, r4, r0
 8011998:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 801199c:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 80119a0:	0400      	lsls	r0, r0, #16
 80119a2:	0c00      	lsrs	r0, r0, #16
 80119a4:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80119a8:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80119ac:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80119b0:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80119b4:	b280      	uxth	r0, r0
 80119b6:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80119ba:	e763      	b.n	8011884 <USB_EPStartXfer+0x378>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80119bc:	f835 0033 	ldrh.w	r0, [r5, r3, lsl #3]
 80119c0:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 80119c4:	0400      	lsls	r0, r0, #16
 80119c6:	0c00      	lsrs	r0, r0, #16
 80119c8:	f825 0033 	strh.w	r0, [r5, r3, lsl #3]
 80119cc:	f835 0033 	ldrh.w	r0, [r5, r3, lsl #3]
 80119d0:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80119d4:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80119d8:	b280      	uxth	r0, r0
 80119da:	f825 0033 	strh.w	r0, [r5, r3, lsl #3]
 80119de:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80119e2:	f202 4406 	addw	r4, r2, #1030	; 0x406
 80119e6:	fa14 f480 	uxtah	r4, r4, r0
 80119ea:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80119ee:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 80119f2:	0400      	lsls	r0, r0, #16
 80119f4:	0c00      	lsrs	r0, r0, #16
 80119f6:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 80119fa:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
 80119fe:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8011a02:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8011a06:	b280      	uxth	r0, r0
 8011a08:	f824 0033 	strh.w	r0, [r4, r3, lsl #3]
 8011a0c:	780b      	ldrb	r3, [r1, #0]
 8011a0e:	e5db      	b.n	80115c8 <USB_EPStartXfer+0xbc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011a10:	f202 4402 	addw	r4, r2, #1026	; 0x402
 8011a14:	fa14 f383 	uxtah	r3, r4, r3
 8011a18:	fa1f fa80 	uxth.w	sl, r0
 8011a1c:	f823 a037 	strh.w	sl, [r3, r7, lsl #3]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011a20:	f10a 0c01 	add.w	ip, sl, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011a24:	f8b1 8008 	ldrh.w	r8, [r1, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011a28:	694b      	ldr	r3, [r1, #20]
 8011a2a:	f502 6980 	add.w	r9, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8011a2e:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011a32:	44c8      	add	r8, r9
  for (i = n; i != 0U; i--)
 8011a34:	d00b      	beq.n	8011a4e <USB_EPStartXfer+0x542>
 8011a36:	eba8 0803 	sub.w	r8, r8, r3
 8011a3a:	eb03 0b4c 	add.w	fp, r3, ip, lsl #1
  uint8_t *pBuf = pbUsrBuf;
 8011a3e:	461c      	mov	r4, r3
    temp1 = *pBuf;
 8011a40:	f8b4 e000 	ldrh.w	lr, [r4]
    *pdwVal = (uint16_t)temp2;
 8011a44:	f824 e008 	strh.w	lr, [r4, r8]
    pBuf++;
 8011a48:	3402      	adds	r4, #2
  for (i = n; i != 0U; i--)
 8011a4a:	45a3      	cmp	fp, r4
 8011a4c:	d1f8      	bne.n	8011a40 <USB_EPStartXfer+0x534>
            ep->xfer_buff += len;
 8011a4e:	4403      	add	r3, r0
            if (ep->xfer_len_db > ep->maxpacket)
 8011a50:	42ae      	cmp	r6, r5
            ep->xfer_buff += len;
 8011a52:	614b      	str	r3, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8011a54:	d26e      	bcs.n	8011b34 <USB_EPStartXfer+0x628>
              ep->xfer_len_db -= len;
 8011a56:	1a28      	subs	r0, r5, r0
 8011a58:	6208      	str	r0, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011a5a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8011a5e:	f202 4406 	addw	r4, r2, #1030	; 0x406
 8011a62:	fa14 f080 	uxtah	r0, r4, r0
 8011a66:	f820 a037 	strh.w	sl, [r0, r7, lsl #3]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011a6a:	894c      	ldrh	r4, [r1, #10]
 8011a6c:	444c      	add	r4, r9
  for (i = n; i != 0U; i--)
 8011a6e:	f1bc 0f00 	cmp.w	ip, #0
 8011a72:	f43f aece 	beq.w	8011812 <USB_EPStartXfer+0x306>
 8011a76:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8011a7a:	1ae4      	subs	r4, r4, r3
    temp1 = *pBuf;
 8011a7c:	8818      	ldrh	r0, [r3, #0]
    *pdwVal = (uint16_t)temp2;
 8011a7e:	5318      	strh	r0, [r3, r4]
    pBuf++;
 8011a80:	3302      	adds	r3, #2
  for (i = n; i != 0U; i--)
 8011a82:	4563      	cmp	r3, ip
 8011a84:	d1fa      	bne.n	8011a7c <USB_EPStartXfer+0x570>
 8011a86:	e6c4      	b.n	8011812 <USB_EPStartXfer+0x306>
 8011a88:	ffff8000 	.word	0xffff8000
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8011a8c:	780e      	ldrb	r6, [r1, #0]
 8011a8e:	b230      	sxth	r0, r6
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011a90:	f202 4402 	addw	r4, r2, #1026	; 0x402
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8011a94:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 8011a98:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8011a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011aa0:	041b      	lsls	r3, r3, #16
 8011aa2:	0c1b      	lsrs	r3, r3, #16
 8011aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011aac:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011ab0:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8011ab4:	fa14 f380 	uxtah	r3, r4, r0
 8011ab8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011abc:	b2af      	uxth	r7, r5
 8011abe:	801f      	strh	r7, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011ac0:	463d      	mov	r5, r7
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011ac2:	8908      	ldrh	r0, [r1, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011ac4:	694b      	ldr	r3, [r1, #20]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011ac6:	3501      	adds	r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011ac8:	f502 6480 	add.w	r4, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8011acc:	086d      	lsrs	r5, r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011ace:	4404      	add	r4, r0
  for (i = n; i != 0U; i--)
 8011ad0:	f43f ae9f 	beq.w	8011812 <USB_EPStartXfer+0x306>
 8011ad4:	eb03 0045 	add.w	r0, r3, r5, lsl #1
 8011ad8:	1ae5      	subs	r5, r4, r3
    temp1 = *pBuf;
 8011ada:	881c      	ldrh	r4, [r3, #0]
    *pdwVal = (uint16_t)temp2;
 8011adc:	535c      	strh	r4, [r3, r5]
    pBuf++;
 8011ade:	3302      	adds	r3, #2
  for (i = n; i != 0U; i--)
 8011ae0:	4298      	cmp	r0, r3
 8011ae2:	d1fa      	bne.n	8011ada <USB_EPStartXfer+0x5ce>
 8011ae4:	e695      	b.n	8011812 <USB_EPStartXfer+0x306>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011ae6:	0965      	lsrs	r5, r4, #5
 8011ae8:	f014 041f 	ands.w	r4, r4, #31
 8011aec:	462f      	mov	r7, r5
 8011aee:	462e      	mov	r6, r5
 8011af0:	bf08      	it	eq
 8011af2:	f105 37ff 	addeq.w	r7, r5, #4294967295	; 0xffffffff
 8011af6:	4d14      	ldr	r5, [pc, #80]	; (8011b48 <USB_EPStartXfer+0x63c>)
 8011af8:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8011afc:	b2ad      	uxth	r5, r5
 8011afe:	f820 5033 	strh.w	r5, [r0, r3, lsl #3]
 8011b02:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8011b06:	f202 4506 	addw	r5, r2, #1030	; 0x406
 8011b0a:	fa15 f580 	uxtah	r5, r5, r0
 8011b0e:	b904      	cbnz	r4, 8011b12 <USB_EPStartXfer+0x606>
 8011b10:	3e01      	subs	r6, #1
 8011b12:	480d      	ldr	r0, [pc, #52]	; (8011b48 <USB_EPStartXfer+0x63c>)
 8011b14:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8011b18:	b280      	uxth	r0, r0
 8011b1a:	f825 0033 	strh.w	r0, [r5, r3, lsl #3]
 8011b1e:	e6b1      	b.n	8011884 <USB_EPStartXfer+0x378>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011b20:	fa1f fc85 	uxth.w	ip, r5
 8011b24:	f10c 0c01 	add.w	ip, ip, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011b28:	fa1f f985 	uxth.w	r9, r5
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011b2c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
              ep->xfer_len_db = 0U;
 8011b30:	2000      	movs	r0, #0
 8011b32:	e61a      	b.n	801176a <USB_EPStartXfer+0x25e>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011b34:	fa1f fc85 	uxth.w	ip, r5
 8011b38:	f10c 0c01 	add.w	ip, ip, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011b3c:	fa1f fa85 	uxth.w	sl, r5
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011b40:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
              ep->xfer_len_db = 0U;
 8011b44:	2000      	movs	r0, #0
 8011b46:	e787      	b.n	8011a58 <USB_EPStartXfer+0x54c>
 8011b48:	ffff8000 	.word	0xffff8000

08011b4c <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8011b4c:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011b4e:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8011b50:	b18b      	cbz	r3, 8011b76 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011b52:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b5e:	041b      	lsls	r3, r3, #16
 8011b60:	0c1b      	lsrs	r3, r3, #16
 8011b62:	f083 0310 	eor.w	r3, r3, #16
 8011b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b6e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8011b72:	2000      	movs	r0, #0
 8011b74:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011b76:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b82:	041b      	lsls	r3, r3, #16
 8011b84:	0c1b      	lsrs	r3, r3, #16
 8011b86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b92:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8011b96:	2000      	movs	r0, #0
 8011b98:	4770      	bx	lr
 8011b9a:	bf00      	nop

08011b9c <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8011b9c:	7b0b      	ldrb	r3, [r1, #12]
 8011b9e:	bb3b      	cbnz	r3, 8011bf0 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 8011ba0:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011ba2:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8011ba4:	b333      	cbz	r3, 8011bf4 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011ba6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011baa:	065b      	lsls	r3, r3, #25
 8011bac:	d50d      	bpl.n	8011bca <USB_EPClearStall+0x2e>
 8011bae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011bba:	041b      	lsls	r3, r3, #16
 8011bbc:	0c1b      	lsrs	r3, r3, #16
 8011bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011bc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011bc6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8011bca:	78cb      	ldrb	r3, [r1, #3]
 8011bcc:	2b01      	cmp	r3, #1
 8011bce:	d00f      	beq.n	8011bf0 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011bd0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011bdc:	041b      	lsls	r3, r3, #16
 8011bde:	0c1b      	lsrs	r3, r3, #16
 8011be0:	f083 0320 	eor.w	r3, r3, #32
 8011be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8011bf0:	2000      	movs	r0, #0
 8011bf2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011bf4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011bf8:	045b      	lsls	r3, r3, #17
 8011bfa:	d50d      	bpl.n	8011c18 <USB_EPClearStall+0x7c>
 8011bfc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c08:	041b      	lsls	r3, r3, #16
 8011c0a:	0c1b      	lsrs	r3, r3, #16
 8011c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011c18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8011c1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c24:	041b      	lsls	r3, r3, #16
 8011c26:	0c1b      	lsrs	r3, r3, #16
 8011c28:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8011c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c34:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8011c38:	2000      	movs	r0, #0
 8011c3a:	4770      	bx	lr

08011c3c <USB_StopDevice>:
{
 8011c3c:	4603      	mov	r3, r0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8011c3e:	2101      	movs	r1, #1
  USBx->ISTR = 0U;
 8011c40:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 8011c42:	2203      	movs	r2, #3
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8011c44:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 8011c48:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 8011c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8011c50:	4770      	bx	lr
 8011c52:	bf00      	nop

08011c54 <USB_SetDevAddress>:
  if (address == 0U)
 8011c54:	b911      	cbnz	r1, 8011c5c <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011c56:	2380      	movs	r3, #128	; 0x80
 8011c58:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8011c5c:	2000      	movs	r0, #0
 8011c5e:	4770      	bx	lr

08011c60 <USB_DevConnect>:
{
 8011c60:	4602      	mov	r2, r0
}
 8011c62:	2000      	movs	r0, #0
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011c64:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8011c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
}
 8011c76:	4770      	bx	lr

08011c78 <USB_DevDisconnect>:
{
 8011c78:	4603      	mov	r3, r0
}
 8011c7a:	2000      	movs	r0, #0
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8011c7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8011c80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011c84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
}
 8011c88:	4770      	bx	lr
 8011c8a:	bf00      	nop

08011c8c <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8011c8c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 8011c90:	b280      	uxth	r0, r0
 8011c92:	4770      	bx	lr

08011c94 <USB_WritePMA>:
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011c94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011c98:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011c9a:	4410      	add	r0, r2
  for (i = n; i != 0U; i--)
 8011c9c:	085a      	lsrs	r2, r3, #1
 8011c9e:	d008      	beq.n	8011cb2 <USB_WritePMA+0x1e>
  uint8_t *pBuf = pbUsrBuf;
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	1ac0      	subs	r0, r0, r3
 8011ca4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8011ca8:	881a      	ldrh	r2, [r3, #0]
    *pdwVal = (uint16_t)temp2;
 8011caa:	521a      	strh	r2, [r3, r0]
    pBuf++;
 8011cac:	3302      	adds	r3, #2
  for (i = n; i != 0U; i--)
 8011cae:	4299      	cmp	r1, r3
 8011cb0:	d1fa      	bne.n	8011ca8 <USB_WritePMA+0x14>
  }
}
 8011cb2:	4770      	bx	lr

08011cb4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011cb4:	b570      	push	{r4, r5, r6, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011cb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8011cba:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011cbc:	4410      	add	r0, r2
  for (i = n; i != 0U; i--)
 8011cbe:	d01c      	beq.n	8011cfa <USB_ReadPMA+0x46>
 8011cc0:	f06f 0501 	mvn.w	r5, #1
 8011cc4:	1a6d      	subs	r5, r5, r1
 8011cc6:	1c8a      	adds	r2, r1, #2
 8011cc8:	4405      	add	r5, r0
 8011cca:	46b6      	mov	lr, r6
  {
    temp = *(__IO uint16_t *)pdwVal;
 8011ccc:	f835 c002 	ldrh.w	ip, [r5, r2]
  for (i = n; i != 0U; i--)
 8011cd0:	3202      	adds	r2, #2
    temp = *(__IO uint16_t *)pdwVal;
 8011cd2:	fa1f fc8c 	uxth.w	ip, ip
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8011cd6:	ea4f 241c 	mov.w	r4, ip, lsr #8
  for (i = n; i != 0U; i--)
 8011cda:	f1be 0e01 	subs.w	lr, lr, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8011cde:	f802 cc04 	strb.w	ip, [r2, #-4]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8011ce2:	f802 4c03 	strb.w	r4, [r2, #-3]
  for (i = n; i != 0U; i--)
 8011ce6:	d1f1      	bne.n	8011ccc <USB_ReadPMA+0x18>
    pdwVal++;
 8011ce8:	eb00 0246 	add.w	r2, r0, r6, lsl #1
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8011cec:	07db      	lsls	r3, r3, #31
    pBuf++;
 8011cee:	eb01 0146 	add.w	r1, r1, r6, lsl #1
  {
    temp = *pdwVal;
 8011cf2:	bf44      	itt	mi
 8011cf4:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8011cf6:	700b      	strbmi	r3, [r1, #0]
  }
}
 8011cf8:	bd70      	pop	{r4, r5, r6, pc}
 8011cfa:	4602      	mov	r2, r0
  if ((wNBytes % 2U) != 0U)
 8011cfc:	07db      	lsls	r3, r3, #31
    temp = *pdwVal;
 8011cfe:	bf44      	itt	mi
 8011d00:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8011d02:	700b      	strbmi	r3, [r1, #0]
}
 8011d04:	bd70      	pop	{r4, r5, r6, pc}
 8011d06:	bf00      	nop

08011d08 <__errno>:
 8011d08:	4b01      	ldr	r3, [pc, #4]	; (8011d10 <__errno+0x8>)
 8011d0a:	6818      	ldr	r0, [r3, #0]
 8011d0c:	4770      	bx	lr
 8011d0e:	bf00      	nop
 8011d10:	200006b8 	.word	0x200006b8

08011d14 <__libc_init_array>:
 8011d14:	b570      	push	{r4, r5, r6, lr}
 8011d16:	4d0d      	ldr	r5, [pc, #52]	; (8011d4c <__libc_init_array+0x38>)
 8011d18:	4c0d      	ldr	r4, [pc, #52]	; (8011d50 <__libc_init_array+0x3c>)
 8011d1a:	1b64      	subs	r4, r4, r5
 8011d1c:	10a4      	asrs	r4, r4, #2
 8011d1e:	2600      	movs	r6, #0
 8011d20:	42a6      	cmp	r6, r4
 8011d22:	d109      	bne.n	8011d38 <__libc_init_array+0x24>
 8011d24:	4d0b      	ldr	r5, [pc, #44]	; (8011d54 <__libc_init_array+0x40>)
 8011d26:	4c0c      	ldr	r4, [pc, #48]	; (8011d58 <__libc_init_array+0x44>)
 8011d28:	f002 fac0 	bl	80142ac <_init>
 8011d2c:	1b64      	subs	r4, r4, r5
 8011d2e:	10a4      	asrs	r4, r4, #2
 8011d30:	2600      	movs	r6, #0
 8011d32:	42a6      	cmp	r6, r4
 8011d34:	d105      	bne.n	8011d42 <__libc_init_array+0x2e>
 8011d36:	bd70      	pop	{r4, r5, r6, pc}
 8011d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d3c:	4798      	blx	r3
 8011d3e:	3601      	adds	r6, #1
 8011d40:	e7ee      	b.n	8011d20 <__libc_init_array+0xc>
 8011d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d46:	4798      	blx	r3
 8011d48:	3601      	adds	r6, #1
 8011d4a:	e7f2      	b.n	8011d32 <__libc_init_array+0x1e>
 8011d4c:	08014ce8 	.word	0x08014ce8
 8011d50:	08014ce8 	.word	0x08014ce8
 8011d54:	08014ce8 	.word	0x08014ce8
 8011d58:	08014cec 	.word	0x08014cec

08011d5c <malloc>:
 8011d5c:	4b02      	ldr	r3, [pc, #8]	; (8011d68 <malloc+0xc>)
 8011d5e:	4601      	mov	r1, r0
 8011d60:	6818      	ldr	r0, [r3, #0]
 8011d62:	f000 b89f 	b.w	8011ea4 <_malloc_r>
 8011d66:	bf00      	nop
 8011d68:	200006b8 	.word	0x200006b8

08011d6c <memcpy>:
 8011d6c:	440a      	add	r2, r1
 8011d6e:	4291      	cmp	r1, r2
 8011d70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011d74:	d100      	bne.n	8011d78 <memcpy+0xc>
 8011d76:	4770      	bx	lr
 8011d78:	b510      	push	{r4, lr}
 8011d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d82:	4291      	cmp	r1, r2
 8011d84:	d1f9      	bne.n	8011d7a <memcpy+0xe>
 8011d86:	bd10      	pop	{r4, pc}

08011d88 <memmove>:
 8011d88:	4288      	cmp	r0, r1
 8011d8a:	b510      	push	{r4, lr}
 8011d8c:	eb01 0402 	add.w	r4, r1, r2
 8011d90:	d902      	bls.n	8011d98 <memmove+0x10>
 8011d92:	4284      	cmp	r4, r0
 8011d94:	4623      	mov	r3, r4
 8011d96:	d807      	bhi.n	8011da8 <memmove+0x20>
 8011d98:	1e43      	subs	r3, r0, #1
 8011d9a:	42a1      	cmp	r1, r4
 8011d9c:	d008      	beq.n	8011db0 <memmove+0x28>
 8011d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011da2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011da6:	e7f8      	b.n	8011d9a <memmove+0x12>
 8011da8:	4402      	add	r2, r0
 8011daa:	4601      	mov	r1, r0
 8011dac:	428a      	cmp	r2, r1
 8011dae:	d100      	bne.n	8011db2 <memmove+0x2a>
 8011db0:	bd10      	pop	{r4, pc}
 8011db2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011db6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011dba:	e7f7      	b.n	8011dac <memmove+0x24>

08011dbc <memset>:
 8011dbc:	4402      	add	r2, r0
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	4293      	cmp	r3, r2
 8011dc2:	d100      	bne.n	8011dc6 <memset+0xa>
 8011dc4:	4770      	bx	lr
 8011dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8011dca:	e7f9      	b.n	8011dc0 <memset+0x4>

08011dcc <_free_r>:
 8011dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011dce:	2900      	cmp	r1, #0
 8011dd0:	d044      	beq.n	8011e5c <_free_r+0x90>
 8011dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dd6:	9001      	str	r0, [sp, #4]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	f1a1 0404 	sub.w	r4, r1, #4
 8011dde:	bfb8      	it	lt
 8011de0:	18e4      	addlt	r4, r4, r3
 8011de2:	f000 f9b3 	bl	801214c <__malloc_lock>
 8011de6:	4a1e      	ldr	r2, [pc, #120]	; (8011e60 <_free_r+0x94>)
 8011de8:	9801      	ldr	r0, [sp, #4]
 8011dea:	6813      	ldr	r3, [r2, #0]
 8011dec:	b933      	cbnz	r3, 8011dfc <_free_r+0x30>
 8011dee:	6063      	str	r3, [r4, #4]
 8011df0:	6014      	str	r4, [r2, #0]
 8011df2:	b003      	add	sp, #12
 8011df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011df8:	f000 b9ae 	b.w	8012158 <__malloc_unlock>
 8011dfc:	42a3      	cmp	r3, r4
 8011dfe:	d908      	bls.n	8011e12 <_free_r+0x46>
 8011e00:	6825      	ldr	r5, [r4, #0]
 8011e02:	1961      	adds	r1, r4, r5
 8011e04:	428b      	cmp	r3, r1
 8011e06:	bf01      	itttt	eq
 8011e08:	6819      	ldreq	r1, [r3, #0]
 8011e0a:	685b      	ldreq	r3, [r3, #4]
 8011e0c:	1949      	addeq	r1, r1, r5
 8011e0e:	6021      	streq	r1, [r4, #0]
 8011e10:	e7ed      	b.n	8011dee <_free_r+0x22>
 8011e12:	461a      	mov	r2, r3
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	b10b      	cbz	r3, 8011e1c <_free_r+0x50>
 8011e18:	42a3      	cmp	r3, r4
 8011e1a:	d9fa      	bls.n	8011e12 <_free_r+0x46>
 8011e1c:	6811      	ldr	r1, [r2, #0]
 8011e1e:	1855      	adds	r5, r2, r1
 8011e20:	42a5      	cmp	r5, r4
 8011e22:	d10b      	bne.n	8011e3c <_free_r+0x70>
 8011e24:	6824      	ldr	r4, [r4, #0]
 8011e26:	4421      	add	r1, r4
 8011e28:	1854      	adds	r4, r2, r1
 8011e2a:	42a3      	cmp	r3, r4
 8011e2c:	6011      	str	r1, [r2, #0]
 8011e2e:	d1e0      	bne.n	8011df2 <_free_r+0x26>
 8011e30:	681c      	ldr	r4, [r3, #0]
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	6053      	str	r3, [r2, #4]
 8011e36:	4421      	add	r1, r4
 8011e38:	6011      	str	r1, [r2, #0]
 8011e3a:	e7da      	b.n	8011df2 <_free_r+0x26>
 8011e3c:	d902      	bls.n	8011e44 <_free_r+0x78>
 8011e3e:	230c      	movs	r3, #12
 8011e40:	6003      	str	r3, [r0, #0]
 8011e42:	e7d6      	b.n	8011df2 <_free_r+0x26>
 8011e44:	6825      	ldr	r5, [r4, #0]
 8011e46:	1961      	adds	r1, r4, r5
 8011e48:	428b      	cmp	r3, r1
 8011e4a:	bf04      	itt	eq
 8011e4c:	6819      	ldreq	r1, [r3, #0]
 8011e4e:	685b      	ldreq	r3, [r3, #4]
 8011e50:	6063      	str	r3, [r4, #4]
 8011e52:	bf04      	itt	eq
 8011e54:	1949      	addeq	r1, r1, r5
 8011e56:	6021      	streq	r1, [r4, #0]
 8011e58:	6054      	str	r4, [r2, #4]
 8011e5a:	e7ca      	b.n	8011df2 <_free_r+0x26>
 8011e5c:	b003      	add	sp, #12
 8011e5e:	bd30      	pop	{r4, r5, pc}
 8011e60:	20006190 	.word	0x20006190

08011e64 <sbrk_aligned>:
 8011e64:	b570      	push	{r4, r5, r6, lr}
 8011e66:	4e0e      	ldr	r6, [pc, #56]	; (8011ea0 <sbrk_aligned+0x3c>)
 8011e68:	460c      	mov	r4, r1
 8011e6a:	6831      	ldr	r1, [r6, #0]
 8011e6c:	4605      	mov	r5, r0
 8011e6e:	b911      	cbnz	r1, 8011e76 <sbrk_aligned+0x12>
 8011e70:	f000 f8f8 	bl	8012064 <_sbrk_r>
 8011e74:	6030      	str	r0, [r6, #0]
 8011e76:	4621      	mov	r1, r4
 8011e78:	4628      	mov	r0, r5
 8011e7a:	f000 f8f3 	bl	8012064 <_sbrk_r>
 8011e7e:	1c43      	adds	r3, r0, #1
 8011e80:	d00a      	beq.n	8011e98 <sbrk_aligned+0x34>
 8011e82:	1cc4      	adds	r4, r0, #3
 8011e84:	f024 0403 	bic.w	r4, r4, #3
 8011e88:	42a0      	cmp	r0, r4
 8011e8a:	d007      	beq.n	8011e9c <sbrk_aligned+0x38>
 8011e8c:	1a21      	subs	r1, r4, r0
 8011e8e:	4628      	mov	r0, r5
 8011e90:	f000 f8e8 	bl	8012064 <_sbrk_r>
 8011e94:	3001      	adds	r0, #1
 8011e96:	d101      	bne.n	8011e9c <sbrk_aligned+0x38>
 8011e98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	bd70      	pop	{r4, r5, r6, pc}
 8011ea0:	20006194 	.word	0x20006194

08011ea4 <_malloc_r>:
 8011ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea8:	1ccd      	adds	r5, r1, #3
 8011eaa:	f025 0503 	bic.w	r5, r5, #3
 8011eae:	3508      	adds	r5, #8
 8011eb0:	2d0c      	cmp	r5, #12
 8011eb2:	bf38      	it	cc
 8011eb4:	250c      	movcc	r5, #12
 8011eb6:	2d00      	cmp	r5, #0
 8011eb8:	4607      	mov	r7, r0
 8011eba:	db01      	blt.n	8011ec0 <_malloc_r+0x1c>
 8011ebc:	42a9      	cmp	r1, r5
 8011ebe:	d905      	bls.n	8011ecc <_malloc_r+0x28>
 8011ec0:	230c      	movs	r3, #12
 8011ec2:	603b      	str	r3, [r7, #0]
 8011ec4:	2600      	movs	r6, #0
 8011ec6:	4630      	mov	r0, r6
 8011ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ecc:	4e2e      	ldr	r6, [pc, #184]	; (8011f88 <_malloc_r+0xe4>)
 8011ece:	f000 f93d 	bl	801214c <__malloc_lock>
 8011ed2:	6833      	ldr	r3, [r6, #0]
 8011ed4:	461c      	mov	r4, r3
 8011ed6:	bb34      	cbnz	r4, 8011f26 <_malloc_r+0x82>
 8011ed8:	4629      	mov	r1, r5
 8011eda:	4638      	mov	r0, r7
 8011edc:	f7ff ffc2 	bl	8011e64 <sbrk_aligned>
 8011ee0:	1c43      	adds	r3, r0, #1
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	d14d      	bne.n	8011f82 <_malloc_r+0xde>
 8011ee6:	6834      	ldr	r4, [r6, #0]
 8011ee8:	4626      	mov	r6, r4
 8011eea:	2e00      	cmp	r6, #0
 8011eec:	d140      	bne.n	8011f70 <_malloc_r+0xcc>
 8011eee:	6823      	ldr	r3, [r4, #0]
 8011ef0:	4631      	mov	r1, r6
 8011ef2:	4638      	mov	r0, r7
 8011ef4:	eb04 0803 	add.w	r8, r4, r3
 8011ef8:	f000 f8b4 	bl	8012064 <_sbrk_r>
 8011efc:	4580      	cmp	r8, r0
 8011efe:	d13a      	bne.n	8011f76 <_malloc_r+0xd2>
 8011f00:	6821      	ldr	r1, [r4, #0]
 8011f02:	3503      	adds	r5, #3
 8011f04:	1a6d      	subs	r5, r5, r1
 8011f06:	f025 0503 	bic.w	r5, r5, #3
 8011f0a:	3508      	adds	r5, #8
 8011f0c:	2d0c      	cmp	r5, #12
 8011f0e:	bf38      	it	cc
 8011f10:	250c      	movcc	r5, #12
 8011f12:	4629      	mov	r1, r5
 8011f14:	4638      	mov	r0, r7
 8011f16:	f7ff ffa5 	bl	8011e64 <sbrk_aligned>
 8011f1a:	3001      	adds	r0, #1
 8011f1c:	d02b      	beq.n	8011f76 <_malloc_r+0xd2>
 8011f1e:	6823      	ldr	r3, [r4, #0]
 8011f20:	442b      	add	r3, r5
 8011f22:	6023      	str	r3, [r4, #0]
 8011f24:	e00e      	b.n	8011f44 <_malloc_r+0xa0>
 8011f26:	6822      	ldr	r2, [r4, #0]
 8011f28:	1b52      	subs	r2, r2, r5
 8011f2a:	d41e      	bmi.n	8011f6a <_malloc_r+0xc6>
 8011f2c:	2a0b      	cmp	r2, #11
 8011f2e:	d916      	bls.n	8011f5e <_malloc_r+0xba>
 8011f30:	1961      	adds	r1, r4, r5
 8011f32:	42a3      	cmp	r3, r4
 8011f34:	6025      	str	r5, [r4, #0]
 8011f36:	bf18      	it	ne
 8011f38:	6059      	strne	r1, [r3, #4]
 8011f3a:	6863      	ldr	r3, [r4, #4]
 8011f3c:	bf08      	it	eq
 8011f3e:	6031      	streq	r1, [r6, #0]
 8011f40:	5162      	str	r2, [r4, r5]
 8011f42:	604b      	str	r3, [r1, #4]
 8011f44:	4638      	mov	r0, r7
 8011f46:	f104 060b 	add.w	r6, r4, #11
 8011f4a:	f000 f905 	bl	8012158 <__malloc_unlock>
 8011f4e:	f026 0607 	bic.w	r6, r6, #7
 8011f52:	1d23      	adds	r3, r4, #4
 8011f54:	1af2      	subs	r2, r6, r3
 8011f56:	d0b6      	beq.n	8011ec6 <_malloc_r+0x22>
 8011f58:	1b9b      	subs	r3, r3, r6
 8011f5a:	50a3      	str	r3, [r4, r2]
 8011f5c:	e7b3      	b.n	8011ec6 <_malloc_r+0x22>
 8011f5e:	6862      	ldr	r2, [r4, #4]
 8011f60:	42a3      	cmp	r3, r4
 8011f62:	bf0c      	ite	eq
 8011f64:	6032      	streq	r2, [r6, #0]
 8011f66:	605a      	strne	r2, [r3, #4]
 8011f68:	e7ec      	b.n	8011f44 <_malloc_r+0xa0>
 8011f6a:	4623      	mov	r3, r4
 8011f6c:	6864      	ldr	r4, [r4, #4]
 8011f6e:	e7b2      	b.n	8011ed6 <_malloc_r+0x32>
 8011f70:	4634      	mov	r4, r6
 8011f72:	6876      	ldr	r6, [r6, #4]
 8011f74:	e7b9      	b.n	8011eea <_malloc_r+0x46>
 8011f76:	230c      	movs	r3, #12
 8011f78:	603b      	str	r3, [r7, #0]
 8011f7a:	4638      	mov	r0, r7
 8011f7c:	f000 f8ec 	bl	8012158 <__malloc_unlock>
 8011f80:	e7a1      	b.n	8011ec6 <_malloc_r+0x22>
 8011f82:	6025      	str	r5, [r4, #0]
 8011f84:	e7de      	b.n	8011f44 <_malloc_r+0xa0>
 8011f86:	bf00      	nop
 8011f88:	20006190 	.word	0x20006190

08011f8c <srand>:
 8011f8c:	b538      	push	{r3, r4, r5, lr}
 8011f8e:	4b10      	ldr	r3, [pc, #64]	; (8011fd0 <srand+0x44>)
 8011f90:	681d      	ldr	r5, [r3, #0]
 8011f92:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011f94:	4604      	mov	r4, r0
 8011f96:	b9b3      	cbnz	r3, 8011fc6 <srand+0x3a>
 8011f98:	2018      	movs	r0, #24
 8011f9a:	f7ff fedf 	bl	8011d5c <malloc>
 8011f9e:	4602      	mov	r2, r0
 8011fa0:	63a8      	str	r0, [r5, #56]	; 0x38
 8011fa2:	b920      	cbnz	r0, 8011fae <srand+0x22>
 8011fa4:	4b0b      	ldr	r3, [pc, #44]	; (8011fd4 <srand+0x48>)
 8011fa6:	480c      	ldr	r0, [pc, #48]	; (8011fd8 <srand+0x4c>)
 8011fa8:	2142      	movs	r1, #66	; 0x42
 8011faa:	f000 f89f 	bl	80120ec <__assert_func>
 8011fae:	490b      	ldr	r1, [pc, #44]	; (8011fdc <srand+0x50>)
 8011fb0:	4b0b      	ldr	r3, [pc, #44]	; (8011fe0 <srand+0x54>)
 8011fb2:	e9c0 1300 	strd	r1, r3, [r0]
 8011fb6:	4b0b      	ldr	r3, [pc, #44]	; (8011fe4 <srand+0x58>)
 8011fb8:	6083      	str	r3, [r0, #8]
 8011fba:	230b      	movs	r3, #11
 8011fbc:	8183      	strh	r3, [r0, #12]
 8011fbe:	2100      	movs	r1, #0
 8011fc0:	2001      	movs	r0, #1
 8011fc2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011fc6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011fc8:	2200      	movs	r2, #0
 8011fca:	611c      	str	r4, [r3, #16]
 8011fcc:	615a      	str	r2, [r3, #20]
 8011fce:	bd38      	pop	{r3, r4, r5, pc}
 8011fd0:	200006b8 	.word	0x200006b8
 8011fd4:	080149c0 	.word	0x080149c0
 8011fd8:	080149d7 	.word	0x080149d7
 8011fdc:	abcd330e 	.word	0xabcd330e
 8011fe0:	e66d1234 	.word	0xe66d1234
 8011fe4:	0005deec 	.word	0x0005deec

08011fe8 <rand>:
 8011fe8:	4b16      	ldr	r3, [pc, #88]	; (8012044 <rand+0x5c>)
 8011fea:	b510      	push	{r4, lr}
 8011fec:	681c      	ldr	r4, [r3, #0]
 8011fee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011ff0:	b9b3      	cbnz	r3, 8012020 <rand+0x38>
 8011ff2:	2018      	movs	r0, #24
 8011ff4:	f7ff feb2 	bl	8011d5c <malloc>
 8011ff8:	63a0      	str	r0, [r4, #56]	; 0x38
 8011ffa:	b928      	cbnz	r0, 8012008 <rand+0x20>
 8011ffc:	4602      	mov	r2, r0
 8011ffe:	4b12      	ldr	r3, [pc, #72]	; (8012048 <rand+0x60>)
 8012000:	4812      	ldr	r0, [pc, #72]	; (801204c <rand+0x64>)
 8012002:	214e      	movs	r1, #78	; 0x4e
 8012004:	f000 f872 	bl	80120ec <__assert_func>
 8012008:	4a11      	ldr	r2, [pc, #68]	; (8012050 <rand+0x68>)
 801200a:	4b12      	ldr	r3, [pc, #72]	; (8012054 <rand+0x6c>)
 801200c:	e9c0 2300 	strd	r2, r3, [r0]
 8012010:	4b11      	ldr	r3, [pc, #68]	; (8012058 <rand+0x70>)
 8012012:	6083      	str	r3, [r0, #8]
 8012014:	230b      	movs	r3, #11
 8012016:	8183      	strh	r3, [r0, #12]
 8012018:	2201      	movs	r2, #1
 801201a:	2300      	movs	r3, #0
 801201c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012020:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012022:	4a0e      	ldr	r2, [pc, #56]	; (801205c <rand+0x74>)
 8012024:	6920      	ldr	r0, [r4, #16]
 8012026:	6963      	ldr	r3, [r4, #20]
 8012028:	490d      	ldr	r1, [pc, #52]	; (8012060 <rand+0x78>)
 801202a:	4342      	muls	r2, r0
 801202c:	fb01 2203 	mla	r2, r1, r3, r2
 8012030:	fba0 0101 	umull	r0, r1, r0, r1
 8012034:	1c43      	adds	r3, r0, #1
 8012036:	eb42 0001 	adc.w	r0, r2, r1
 801203a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801203e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012042:	bd10      	pop	{r4, pc}
 8012044:	200006b8 	.word	0x200006b8
 8012048:	080149c0 	.word	0x080149c0
 801204c:	080149d7 	.word	0x080149d7
 8012050:	abcd330e 	.word	0xabcd330e
 8012054:	e66d1234 	.word	0xe66d1234
 8012058:	0005deec 	.word	0x0005deec
 801205c:	5851f42d 	.word	0x5851f42d
 8012060:	4c957f2d 	.word	0x4c957f2d

08012064 <_sbrk_r>:
 8012064:	b538      	push	{r3, r4, r5, lr}
 8012066:	4d06      	ldr	r5, [pc, #24]	; (8012080 <_sbrk_r+0x1c>)
 8012068:	2300      	movs	r3, #0
 801206a:	4604      	mov	r4, r0
 801206c:	4608      	mov	r0, r1
 801206e:	602b      	str	r3, [r5, #0]
 8012070:	f7f0 fe24 	bl	8002cbc <_sbrk>
 8012074:	1c43      	adds	r3, r0, #1
 8012076:	d102      	bne.n	801207e <_sbrk_r+0x1a>
 8012078:	682b      	ldr	r3, [r5, #0]
 801207a:	b103      	cbz	r3, 801207e <_sbrk_r+0x1a>
 801207c:	6023      	str	r3, [r4, #0]
 801207e:	bd38      	pop	{r3, r4, r5, pc}
 8012080:	20006198 	.word	0x20006198

08012084 <sniprintf>:
 8012084:	b40c      	push	{r2, r3}
 8012086:	b530      	push	{r4, r5, lr}
 8012088:	4b17      	ldr	r3, [pc, #92]	; (80120e8 <sniprintf+0x64>)
 801208a:	1e0c      	subs	r4, r1, #0
 801208c:	681d      	ldr	r5, [r3, #0]
 801208e:	b09d      	sub	sp, #116	; 0x74
 8012090:	da08      	bge.n	80120a4 <sniprintf+0x20>
 8012092:	238b      	movs	r3, #139	; 0x8b
 8012094:	602b      	str	r3, [r5, #0]
 8012096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801209a:	b01d      	add	sp, #116	; 0x74
 801209c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80120a0:	b002      	add	sp, #8
 80120a2:	4770      	bx	lr
 80120a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80120a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80120ac:	bf14      	ite	ne
 80120ae:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80120b2:	4623      	moveq	r3, r4
 80120b4:	9304      	str	r3, [sp, #16]
 80120b6:	9307      	str	r3, [sp, #28]
 80120b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80120bc:	9002      	str	r0, [sp, #8]
 80120be:	9006      	str	r0, [sp, #24]
 80120c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80120c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80120c6:	ab21      	add	r3, sp, #132	; 0x84
 80120c8:	a902      	add	r1, sp, #8
 80120ca:	4628      	mov	r0, r5
 80120cc:	9301      	str	r3, [sp, #4]
 80120ce:	f000 f8a5 	bl	801221c <_svfiprintf_r>
 80120d2:	1c43      	adds	r3, r0, #1
 80120d4:	bfbc      	itt	lt
 80120d6:	238b      	movlt	r3, #139	; 0x8b
 80120d8:	602b      	strlt	r3, [r5, #0]
 80120da:	2c00      	cmp	r4, #0
 80120dc:	d0dd      	beq.n	801209a <sniprintf+0x16>
 80120de:	9b02      	ldr	r3, [sp, #8]
 80120e0:	2200      	movs	r2, #0
 80120e2:	701a      	strb	r2, [r3, #0]
 80120e4:	e7d9      	b.n	801209a <sniprintf+0x16>
 80120e6:	bf00      	nop
 80120e8:	200006b8 	.word	0x200006b8

080120ec <__assert_func>:
 80120ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120ee:	4614      	mov	r4, r2
 80120f0:	461a      	mov	r2, r3
 80120f2:	4b09      	ldr	r3, [pc, #36]	; (8012118 <__assert_func+0x2c>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	4605      	mov	r5, r0
 80120f8:	68d8      	ldr	r0, [r3, #12]
 80120fa:	b14c      	cbz	r4, 8012110 <__assert_func+0x24>
 80120fc:	4b07      	ldr	r3, [pc, #28]	; (801211c <__assert_func+0x30>)
 80120fe:	9100      	str	r1, [sp, #0]
 8012100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012104:	4906      	ldr	r1, [pc, #24]	; (8012120 <__assert_func+0x34>)
 8012106:	462b      	mov	r3, r5
 8012108:	f000 f80e 	bl	8012128 <fiprintf>
 801210c:	f000 fd34 	bl	8012b78 <abort>
 8012110:	4b04      	ldr	r3, [pc, #16]	; (8012124 <__assert_func+0x38>)
 8012112:	461c      	mov	r4, r3
 8012114:	e7f3      	b.n	80120fe <__assert_func+0x12>
 8012116:	bf00      	nop
 8012118:	200006b8 	.word	0x200006b8
 801211c:	08014a32 	.word	0x08014a32
 8012120:	08014a3f 	.word	0x08014a3f
 8012124:	08014a6d 	.word	0x08014a6d

08012128 <fiprintf>:
 8012128:	b40e      	push	{r1, r2, r3}
 801212a:	b503      	push	{r0, r1, lr}
 801212c:	4601      	mov	r1, r0
 801212e:	ab03      	add	r3, sp, #12
 8012130:	4805      	ldr	r0, [pc, #20]	; (8012148 <fiprintf+0x20>)
 8012132:	f853 2b04 	ldr.w	r2, [r3], #4
 8012136:	6800      	ldr	r0, [r0, #0]
 8012138:	9301      	str	r3, [sp, #4]
 801213a:	f000 f999 	bl	8012470 <_vfiprintf_r>
 801213e:	b002      	add	sp, #8
 8012140:	f85d eb04 	ldr.w	lr, [sp], #4
 8012144:	b003      	add	sp, #12
 8012146:	4770      	bx	lr
 8012148:	200006b8 	.word	0x200006b8

0801214c <__malloc_lock>:
 801214c:	4801      	ldr	r0, [pc, #4]	; (8012154 <__malloc_lock+0x8>)
 801214e:	f000 bed3 	b.w	8012ef8 <__retarget_lock_acquire_recursive>
 8012152:	bf00      	nop
 8012154:	2000619c 	.word	0x2000619c

08012158 <__malloc_unlock>:
 8012158:	4801      	ldr	r0, [pc, #4]	; (8012160 <__malloc_unlock+0x8>)
 801215a:	f000 bece 	b.w	8012efa <__retarget_lock_release_recursive>
 801215e:	bf00      	nop
 8012160:	2000619c 	.word	0x2000619c

08012164 <__ssputs_r>:
 8012164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012168:	688e      	ldr	r6, [r1, #8]
 801216a:	429e      	cmp	r6, r3
 801216c:	4682      	mov	sl, r0
 801216e:	460c      	mov	r4, r1
 8012170:	4690      	mov	r8, r2
 8012172:	461f      	mov	r7, r3
 8012174:	d838      	bhi.n	80121e8 <__ssputs_r+0x84>
 8012176:	898a      	ldrh	r2, [r1, #12]
 8012178:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801217c:	d032      	beq.n	80121e4 <__ssputs_r+0x80>
 801217e:	6825      	ldr	r5, [r4, #0]
 8012180:	6909      	ldr	r1, [r1, #16]
 8012182:	eba5 0901 	sub.w	r9, r5, r1
 8012186:	6965      	ldr	r5, [r4, #20]
 8012188:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801218c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012190:	3301      	adds	r3, #1
 8012192:	444b      	add	r3, r9
 8012194:	106d      	asrs	r5, r5, #1
 8012196:	429d      	cmp	r5, r3
 8012198:	bf38      	it	cc
 801219a:	461d      	movcc	r5, r3
 801219c:	0553      	lsls	r3, r2, #21
 801219e:	d531      	bpl.n	8012204 <__ssputs_r+0xa0>
 80121a0:	4629      	mov	r1, r5
 80121a2:	f7ff fe7f 	bl	8011ea4 <_malloc_r>
 80121a6:	4606      	mov	r6, r0
 80121a8:	b950      	cbnz	r0, 80121c0 <__ssputs_r+0x5c>
 80121aa:	230c      	movs	r3, #12
 80121ac:	f8ca 3000 	str.w	r3, [sl]
 80121b0:	89a3      	ldrh	r3, [r4, #12]
 80121b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121b6:	81a3      	strh	r3, [r4, #12]
 80121b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121c0:	6921      	ldr	r1, [r4, #16]
 80121c2:	464a      	mov	r2, r9
 80121c4:	f7ff fdd2 	bl	8011d6c <memcpy>
 80121c8:	89a3      	ldrh	r3, [r4, #12]
 80121ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80121ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121d2:	81a3      	strh	r3, [r4, #12]
 80121d4:	6126      	str	r6, [r4, #16]
 80121d6:	6165      	str	r5, [r4, #20]
 80121d8:	444e      	add	r6, r9
 80121da:	eba5 0509 	sub.w	r5, r5, r9
 80121de:	6026      	str	r6, [r4, #0]
 80121e0:	60a5      	str	r5, [r4, #8]
 80121e2:	463e      	mov	r6, r7
 80121e4:	42be      	cmp	r6, r7
 80121e6:	d900      	bls.n	80121ea <__ssputs_r+0x86>
 80121e8:	463e      	mov	r6, r7
 80121ea:	6820      	ldr	r0, [r4, #0]
 80121ec:	4632      	mov	r2, r6
 80121ee:	4641      	mov	r1, r8
 80121f0:	f7ff fdca 	bl	8011d88 <memmove>
 80121f4:	68a3      	ldr	r3, [r4, #8]
 80121f6:	1b9b      	subs	r3, r3, r6
 80121f8:	60a3      	str	r3, [r4, #8]
 80121fa:	6823      	ldr	r3, [r4, #0]
 80121fc:	4433      	add	r3, r6
 80121fe:	6023      	str	r3, [r4, #0]
 8012200:	2000      	movs	r0, #0
 8012202:	e7db      	b.n	80121bc <__ssputs_r+0x58>
 8012204:	462a      	mov	r2, r5
 8012206:	f000 fedf 	bl	8012fc8 <_realloc_r>
 801220a:	4606      	mov	r6, r0
 801220c:	2800      	cmp	r0, #0
 801220e:	d1e1      	bne.n	80121d4 <__ssputs_r+0x70>
 8012210:	6921      	ldr	r1, [r4, #16]
 8012212:	4650      	mov	r0, sl
 8012214:	f7ff fdda 	bl	8011dcc <_free_r>
 8012218:	e7c7      	b.n	80121aa <__ssputs_r+0x46>
	...

0801221c <_svfiprintf_r>:
 801221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012220:	4698      	mov	r8, r3
 8012222:	898b      	ldrh	r3, [r1, #12]
 8012224:	061b      	lsls	r3, r3, #24
 8012226:	b09d      	sub	sp, #116	; 0x74
 8012228:	4607      	mov	r7, r0
 801222a:	460d      	mov	r5, r1
 801222c:	4614      	mov	r4, r2
 801222e:	d50e      	bpl.n	801224e <_svfiprintf_r+0x32>
 8012230:	690b      	ldr	r3, [r1, #16]
 8012232:	b963      	cbnz	r3, 801224e <_svfiprintf_r+0x32>
 8012234:	2140      	movs	r1, #64	; 0x40
 8012236:	f7ff fe35 	bl	8011ea4 <_malloc_r>
 801223a:	6028      	str	r0, [r5, #0]
 801223c:	6128      	str	r0, [r5, #16]
 801223e:	b920      	cbnz	r0, 801224a <_svfiprintf_r+0x2e>
 8012240:	230c      	movs	r3, #12
 8012242:	603b      	str	r3, [r7, #0]
 8012244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012248:	e0d1      	b.n	80123ee <_svfiprintf_r+0x1d2>
 801224a:	2340      	movs	r3, #64	; 0x40
 801224c:	616b      	str	r3, [r5, #20]
 801224e:	2300      	movs	r3, #0
 8012250:	9309      	str	r3, [sp, #36]	; 0x24
 8012252:	2320      	movs	r3, #32
 8012254:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012258:	f8cd 800c 	str.w	r8, [sp, #12]
 801225c:	2330      	movs	r3, #48	; 0x30
 801225e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012408 <_svfiprintf_r+0x1ec>
 8012262:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012266:	f04f 0901 	mov.w	r9, #1
 801226a:	4623      	mov	r3, r4
 801226c:	469a      	mov	sl, r3
 801226e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012272:	b10a      	cbz	r2, 8012278 <_svfiprintf_r+0x5c>
 8012274:	2a25      	cmp	r2, #37	; 0x25
 8012276:	d1f9      	bne.n	801226c <_svfiprintf_r+0x50>
 8012278:	ebba 0b04 	subs.w	fp, sl, r4
 801227c:	d00b      	beq.n	8012296 <_svfiprintf_r+0x7a>
 801227e:	465b      	mov	r3, fp
 8012280:	4622      	mov	r2, r4
 8012282:	4629      	mov	r1, r5
 8012284:	4638      	mov	r0, r7
 8012286:	f7ff ff6d 	bl	8012164 <__ssputs_r>
 801228a:	3001      	adds	r0, #1
 801228c:	f000 80aa 	beq.w	80123e4 <_svfiprintf_r+0x1c8>
 8012290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012292:	445a      	add	r2, fp
 8012294:	9209      	str	r2, [sp, #36]	; 0x24
 8012296:	f89a 3000 	ldrb.w	r3, [sl]
 801229a:	2b00      	cmp	r3, #0
 801229c:	f000 80a2 	beq.w	80123e4 <_svfiprintf_r+0x1c8>
 80122a0:	2300      	movs	r3, #0
 80122a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80122a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122aa:	f10a 0a01 	add.w	sl, sl, #1
 80122ae:	9304      	str	r3, [sp, #16]
 80122b0:	9307      	str	r3, [sp, #28]
 80122b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122b6:	931a      	str	r3, [sp, #104]	; 0x68
 80122b8:	4654      	mov	r4, sl
 80122ba:	2205      	movs	r2, #5
 80122bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122c0:	4851      	ldr	r0, [pc, #324]	; (8012408 <_svfiprintf_r+0x1ec>)
 80122c2:	f7ed ffad 	bl	8000220 <memchr>
 80122c6:	9a04      	ldr	r2, [sp, #16]
 80122c8:	b9d8      	cbnz	r0, 8012302 <_svfiprintf_r+0xe6>
 80122ca:	06d0      	lsls	r0, r2, #27
 80122cc:	bf44      	itt	mi
 80122ce:	2320      	movmi	r3, #32
 80122d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122d4:	0711      	lsls	r1, r2, #28
 80122d6:	bf44      	itt	mi
 80122d8:	232b      	movmi	r3, #43	; 0x2b
 80122da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122de:	f89a 3000 	ldrb.w	r3, [sl]
 80122e2:	2b2a      	cmp	r3, #42	; 0x2a
 80122e4:	d015      	beq.n	8012312 <_svfiprintf_r+0xf6>
 80122e6:	9a07      	ldr	r2, [sp, #28]
 80122e8:	4654      	mov	r4, sl
 80122ea:	2000      	movs	r0, #0
 80122ec:	f04f 0c0a 	mov.w	ip, #10
 80122f0:	4621      	mov	r1, r4
 80122f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122f6:	3b30      	subs	r3, #48	; 0x30
 80122f8:	2b09      	cmp	r3, #9
 80122fa:	d94e      	bls.n	801239a <_svfiprintf_r+0x17e>
 80122fc:	b1b0      	cbz	r0, 801232c <_svfiprintf_r+0x110>
 80122fe:	9207      	str	r2, [sp, #28]
 8012300:	e014      	b.n	801232c <_svfiprintf_r+0x110>
 8012302:	eba0 0308 	sub.w	r3, r0, r8
 8012306:	fa09 f303 	lsl.w	r3, r9, r3
 801230a:	4313      	orrs	r3, r2
 801230c:	9304      	str	r3, [sp, #16]
 801230e:	46a2      	mov	sl, r4
 8012310:	e7d2      	b.n	80122b8 <_svfiprintf_r+0x9c>
 8012312:	9b03      	ldr	r3, [sp, #12]
 8012314:	1d19      	adds	r1, r3, #4
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	9103      	str	r1, [sp, #12]
 801231a:	2b00      	cmp	r3, #0
 801231c:	bfbb      	ittet	lt
 801231e:	425b      	neglt	r3, r3
 8012320:	f042 0202 	orrlt.w	r2, r2, #2
 8012324:	9307      	strge	r3, [sp, #28]
 8012326:	9307      	strlt	r3, [sp, #28]
 8012328:	bfb8      	it	lt
 801232a:	9204      	strlt	r2, [sp, #16]
 801232c:	7823      	ldrb	r3, [r4, #0]
 801232e:	2b2e      	cmp	r3, #46	; 0x2e
 8012330:	d10c      	bne.n	801234c <_svfiprintf_r+0x130>
 8012332:	7863      	ldrb	r3, [r4, #1]
 8012334:	2b2a      	cmp	r3, #42	; 0x2a
 8012336:	d135      	bne.n	80123a4 <_svfiprintf_r+0x188>
 8012338:	9b03      	ldr	r3, [sp, #12]
 801233a:	1d1a      	adds	r2, r3, #4
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	9203      	str	r2, [sp, #12]
 8012340:	2b00      	cmp	r3, #0
 8012342:	bfb8      	it	lt
 8012344:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012348:	3402      	adds	r4, #2
 801234a:	9305      	str	r3, [sp, #20]
 801234c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012418 <_svfiprintf_r+0x1fc>
 8012350:	7821      	ldrb	r1, [r4, #0]
 8012352:	2203      	movs	r2, #3
 8012354:	4650      	mov	r0, sl
 8012356:	f7ed ff63 	bl	8000220 <memchr>
 801235a:	b140      	cbz	r0, 801236e <_svfiprintf_r+0x152>
 801235c:	2340      	movs	r3, #64	; 0x40
 801235e:	eba0 000a 	sub.w	r0, r0, sl
 8012362:	fa03 f000 	lsl.w	r0, r3, r0
 8012366:	9b04      	ldr	r3, [sp, #16]
 8012368:	4303      	orrs	r3, r0
 801236a:	3401      	adds	r4, #1
 801236c:	9304      	str	r3, [sp, #16]
 801236e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012372:	4826      	ldr	r0, [pc, #152]	; (801240c <_svfiprintf_r+0x1f0>)
 8012374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012378:	2206      	movs	r2, #6
 801237a:	f7ed ff51 	bl	8000220 <memchr>
 801237e:	2800      	cmp	r0, #0
 8012380:	d038      	beq.n	80123f4 <_svfiprintf_r+0x1d8>
 8012382:	4b23      	ldr	r3, [pc, #140]	; (8012410 <_svfiprintf_r+0x1f4>)
 8012384:	bb1b      	cbnz	r3, 80123ce <_svfiprintf_r+0x1b2>
 8012386:	9b03      	ldr	r3, [sp, #12]
 8012388:	3307      	adds	r3, #7
 801238a:	f023 0307 	bic.w	r3, r3, #7
 801238e:	3308      	adds	r3, #8
 8012390:	9303      	str	r3, [sp, #12]
 8012392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012394:	4433      	add	r3, r6
 8012396:	9309      	str	r3, [sp, #36]	; 0x24
 8012398:	e767      	b.n	801226a <_svfiprintf_r+0x4e>
 801239a:	fb0c 3202 	mla	r2, ip, r2, r3
 801239e:	460c      	mov	r4, r1
 80123a0:	2001      	movs	r0, #1
 80123a2:	e7a5      	b.n	80122f0 <_svfiprintf_r+0xd4>
 80123a4:	2300      	movs	r3, #0
 80123a6:	3401      	adds	r4, #1
 80123a8:	9305      	str	r3, [sp, #20]
 80123aa:	4619      	mov	r1, r3
 80123ac:	f04f 0c0a 	mov.w	ip, #10
 80123b0:	4620      	mov	r0, r4
 80123b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123b6:	3a30      	subs	r2, #48	; 0x30
 80123b8:	2a09      	cmp	r2, #9
 80123ba:	d903      	bls.n	80123c4 <_svfiprintf_r+0x1a8>
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d0c5      	beq.n	801234c <_svfiprintf_r+0x130>
 80123c0:	9105      	str	r1, [sp, #20]
 80123c2:	e7c3      	b.n	801234c <_svfiprintf_r+0x130>
 80123c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80123c8:	4604      	mov	r4, r0
 80123ca:	2301      	movs	r3, #1
 80123cc:	e7f0      	b.n	80123b0 <_svfiprintf_r+0x194>
 80123ce:	ab03      	add	r3, sp, #12
 80123d0:	9300      	str	r3, [sp, #0]
 80123d2:	462a      	mov	r2, r5
 80123d4:	4b0f      	ldr	r3, [pc, #60]	; (8012414 <_svfiprintf_r+0x1f8>)
 80123d6:	a904      	add	r1, sp, #16
 80123d8:	4638      	mov	r0, r7
 80123da:	f3af 8000 	nop.w
 80123de:	1c42      	adds	r2, r0, #1
 80123e0:	4606      	mov	r6, r0
 80123e2:	d1d6      	bne.n	8012392 <_svfiprintf_r+0x176>
 80123e4:	89ab      	ldrh	r3, [r5, #12]
 80123e6:	065b      	lsls	r3, r3, #25
 80123e8:	f53f af2c 	bmi.w	8012244 <_svfiprintf_r+0x28>
 80123ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123ee:	b01d      	add	sp, #116	; 0x74
 80123f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f4:	ab03      	add	r3, sp, #12
 80123f6:	9300      	str	r3, [sp, #0]
 80123f8:	462a      	mov	r2, r5
 80123fa:	4b06      	ldr	r3, [pc, #24]	; (8012414 <_svfiprintf_r+0x1f8>)
 80123fc:	a904      	add	r1, sp, #16
 80123fe:	4638      	mov	r0, r7
 8012400:	f000 f9d4 	bl	80127ac <_printf_i>
 8012404:	e7eb      	b.n	80123de <_svfiprintf_r+0x1c2>
 8012406:	bf00      	nop
 8012408:	08014a6e 	.word	0x08014a6e
 801240c:	08014a78 	.word	0x08014a78
 8012410:	00000000 	.word	0x00000000
 8012414:	08012165 	.word	0x08012165
 8012418:	08014a74 	.word	0x08014a74

0801241c <__sfputc_r>:
 801241c:	6893      	ldr	r3, [r2, #8]
 801241e:	3b01      	subs	r3, #1
 8012420:	2b00      	cmp	r3, #0
 8012422:	b410      	push	{r4}
 8012424:	6093      	str	r3, [r2, #8]
 8012426:	da08      	bge.n	801243a <__sfputc_r+0x1e>
 8012428:	6994      	ldr	r4, [r2, #24]
 801242a:	42a3      	cmp	r3, r4
 801242c:	db01      	blt.n	8012432 <__sfputc_r+0x16>
 801242e:	290a      	cmp	r1, #10
 8012430:	d103      	bne.n	801243a <__sfputc_r+0x1e>
 8012432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012436:	f000 badf 	b.w	80129f8 <__swbuf_r>
 801243a:	6813      	ldr	r3, [r2, #0]
 801243c:	1c58      	adds	r0, r3, #1
 801243e:	6010      	str	r0, [r2, #0]
 8012440:	7019      	strb	r1, [r3, #0]
 8012442:	4608      	mov	r0, r1
 8012444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012448:	4770      	bx	lr

0801244a <__sfputs_r>:
 801244a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801244c:	4606      	mov	r6, r0
 801244e:	460f      	mov	r7, r1
 8012450:	4614      	mov	r4, r2
 8012452:	18d5      	adds	r5, r2, r3
 8012454:	42ac      	cmp	r4, r5
 8012456:	d101      	bne.n	801245c <__sfputs_r+0x12>
 8012458:	2000      	movs	r0, #0
 801245a:	e007      	b.n	801246c <__sfputs_r+0x22>
 801245c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012460:	463a      	mov	r2, r7
 8012462:	4630      	mov	r0, r6
 8012464:	f7ff ffda 	bl	801241c <__sfputc_r>
 8012468:	1c43      	adds	r3, r0, #1
 801246a:	d1f3      	bne.n	8012454 <__sfputs_r+0xa>
 801246c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012470 <_vfiprintf_r>:
 8012470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012474:	460d      	mov	r5, r1
 8012476:	b09d      	sub	sp, #116	; 0x74
 8012478:	4614      	mov	r4, r2
 801247a:	4698      	mov	r8, r3
 801247c:	4606      	mov	r6, r0
 801247e:	b118      	cbz	r0, 8012488 <_vfiprintf_r+0x18>
 8012480:	6983      	ldr	r3, [r0, #24]
 8012482:	b90b      	cbnz	r3, 8012488 <_vfiprintf_r+0x18>
 8012484:	f000 fc9a 	bl	8012dbc <__sinit>
 8012488:	4b89      	ldr	r3, [pc, #548]	; (80126b0 <_vfiprintf_r+0x240>)
 801248a:	429d      	cmp	r5, r3
 801248c:	d11b      	bne.n	80124c6 <_vfiprintf_r+0x56>
 801248e:	6875      	ldr	r5, [r6, #4]
 8012490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012492:	07d9      	lsls	r1, r3, #31
 8012494:	d405      	bmi.n	80124a2 <_vfiprintf_r+0x32>
 8012496:	89ab      	ldrh	r3, [r5, #12]
 8012498:	059a      	lsls	r2, r3, #22
 801249a:	d402      	bmi.n	80124a2 <_vfiprintf_r+0x32>
 801249c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801249e:	f000 fd2b 	bl	8012ef8 <__retarget_lock_acquire_recursive>
 80124a2:	89ab      	ldrh	r3, [r5, #12]
 80124a4:	071b      	lsls	r3, r3, #28
 80124a6:	d501      	bpl.n	80124ac <_vfiprintf_r+0x3c>
 80124a8:	692b      	ldr	r3, [r5, #16]
 80124aa:	b9eb      	cbnz	r3, 80124e8 <_vfiprintf_r+0x78>
 80124ac:	4629      	mov	r1, r5
 80124ae:	4630      	mov	r0, r6
 80124b0:	f000 faf4 	bl	8012a9c <__swsetup_r>
 80124b4:	b1c0      	cbz	r0, 80124e8 <_vfiprintf_r+0x78>
 80124b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124b8:	07dc      	lsls	r4, r3, #31
 80124ba:	d50e      	bpl.n	80124da <_vfiprintf_r+0x6a>
 80124bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124c0:	b01d      	add	sp, #116	; 0x74
 80124c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c6:	4b7b      	ldr	r3, [pc, #492]	; (80126b4 <_vfiprintf_r+0x244>)
 80124c8:	429d      	cmp	r5, r3
 80124ca:	d101      	bne.n	80124d0 <_vfiprintf_r+0x60>
 80124cc:	68b5      	ldr	r5, [r6, #8]
 80124ce:	e7df      	b.n	8012490 <_vfiprintf_r+0x20>
 80124d0:	4b79      	ldr	r3, [pc, #484]	; (80126b8 <_vfiprintf_r+0x248>)
 80124d2:	429d      	cmp	r5, r3
 80124d4:	bf08      	it	eq
 80124d6:	68f5      	ldreq	r5, [r6, #12]
 80124d8:	e7da      	b.n	8012490 <_vfiprintf_r+0x20>
 80124da:	89ab      	ldrh	r3, [r5, #12]
 80124dc:	0598      	lsls	r0, r3, #22
 80124de:	d4ed      	bmi.n	80124bc <_vfiprintf_r+0x4c>
 80124e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124e2:	f000 fd0a 	bl	8012efa <__retarget_lock_release_recursive>
 80124e6:	e7e9      	b.n	80124bc <_vfiprintf_r+0x4c>
 80124e8:	2300      	movs	r3, #0
 80124ea:	9309      	str	r3, [sp, #36]	; 0x24
 80124ec:	2320      	movs	r3, #32
 80124ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80124f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80124f6:	2330      	movs	r3, #48	; 0x30
 80124f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80126bc <_vfiprintf_r+0x24c>
 80124fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012500:	f04f 0901 	mov.w	r9, #1
 8012504:	4623      	mov	r3, r4
 8012506:	469a      	mov	sl, r3
 8012508:	f813 2b01 	ldrb.w	r2, [r3], #1
 801250c:	b10a      	cbz	r2, 8012512 <_vfiprintf_r+0xa2>
 801250e:	2a25      	cmp	r2, #37	; 0x25
 8012510:	d1f9      	bne.n	8012506 <_vfiprintf_r+0x96>
 8012512:	ebba 0b04 	subs.w	fp, sl, r4
 8012516:	d00b      	beq.n	8012530 <_vfiprintf_r+0xc0>
 8012518:	465b      	mov	r3, fp
 801251a:	4622      	mov	r2, r4
 801251c:	4629      	mov	r1, r5
 801251e:	4630      	mov	r0, r6
 8012520:	f7ff ff93 	bl	801244a <__sfputs_r>
 8012524:	3001      	adds	r0, #1
 8012526:	f000 80aa 	beq.w	801267e <_vfiprintf_r+0x20e>
 801252a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801252c:	445a      	add	r2, fp
 801252e:	9209      	str	r2, [sp, #36]	; 0x24
 8012530:	f89a 3000 	ldrb.w	r3, [sl]
 8012534:	2b00      	cmp	r3, #0
 8012536:	f000 80a2 	beq.w	801267e <_vfiprintf_r+0x20e>
 801253a:	2300      	movs	r3, #0
 801253c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012544:	f10a 0a01 	add.w	sl, sl, #1
 8012548:	9304      	str	r3, [sp, #16]
 801254a:	9307      	str	r3, [sp, #28]
 801254c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012550:	931a      	str	r3, [sp, #104]	; 0x68
 8012552:	4654      	mov	r4, sl
 8012554:	2205      	movs	r2, #5
 8012556:	f814 1b01 	ldrb.w	r1, [r4], #1
 801255a:	4858      	ldr	r0, [pc, #352]	; (80126bc <_vfiprintf_r+0x24c>)
 801255c:	f7ed fe60 	bl	8000220 <memchr>
 8012560:	9a04      	ldr	r2, [sp, #16]
 8012562:	b9d8      	cbnz	r0, 801259c <_vfiprintf_r+0x12c>
 8012564:	06d1      	lsls	r1, r2, #27
 8012566:	bf44      	itt	mi
 8012568:	2320      	movmi	r3, #32
 801256a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801256e:	0713      	lsls	r3, r2, #28
 8012570:	bf44      	itt	mi
 8012572:	232b      	movmi	r3, #43	; 0x2b
 8012574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012578:	f89a 3000 	ldrb.w	r3, [sl]
 801257c:	2b2a      	cmp	r3, #42	; 0x2a
 801257e:	d015      	beq.n	80125ac <_vfiprintf_r+0x13c>
 8012580:	9a07      	ldr	r2, [sp, #28]
 8012582:	4654      	mov	r4, sl
 8012584:	2000      	movs	r0, #0
 8012586:	f04f 0c0a 	mov.w	ip, #10
 801258a:	4621      	mov	r1, r4
 801258c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012590:	3b30      	subs	r3, #48	; 0x30
 8012592:	2b09      	cmp	r3, #9
 8012594:	d94e      	bls.n	8012634 <_vfiprintf_r+0x1c4>
 8012596:	b1b0      	cbz	r0, 80125c6 <_vfiprintf_r+0x156>
 8012598:	9207      	str	r2, [sp, #28]
 801259a:	e014      	b.n	80125c6 <_vfiprintf_r+0x156>
 801259c:	eba0 0308 	sub.w	r3, r0, r8
 80125a0:	fa09 f303 	lsl.w	r3, r9, r3
 80125a4:	4313      	orrs	r3, r2
 80125a6:	9304      	str	r3, [sp, #16]
 80125a8:	46a2      	mov	sl, r4
 80125aa:	e7d2      	b.n	8012552 <_vfiprintf_r+0xe2>
 80125ac:	9b03      	ldr	r3, [sp, #12]
 80125ae:	1d19      	adds	r1, r3, #4
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	9103      	str	r1, [sp, #12]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	bfbb      	ittet	lt
 80125b8:	425b      	neglt	r3, r3
 80125ba:	f042 0202 	orrlt.w	r2, r2, #2
 80125be:	9307      	strge	r3, [sp, #28]
 80125c0:	9307      	strlt	r3, [sp, #28]
 80125c2:	bfb8      	it	lt
 80125c4:	9204      	strlt	r2, [sp, #16]
 80125c6:	7823      	ldrb	r3, [r4, #0]
 80125c8:	2b2e      	cmp	r3, #46	; 0x2e
 80125ca:	d10c      	bne.n	80125e6 <_vfiprintf_r+0x176>
 80125cc:	7863      	ldrb	r3, [r4, #1]
 80125ce:	2b2a      	cmp	r3, #42	; 0x2a
 80125d0:	d135      	bne.n	801263e <_vfiprintf_r+0x1ce>
 80125d2:	9b03      	ldr	r3, [sp, #12]
 80125d4:	1d1a      	adds	r2, r3, #4
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	9203      	str	r2, [sp, #12]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	bfb8      	it	lt
 80125de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80125e2:	3402      	adds	r4, #2
 80125e4:	9305      	str	r3, [sp, #20]
 80125e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80126cc <_vfiprintf_r+0x25c>
 80125ea:	7821      	ldrb	r1, [r4, #0]
 80125ec:	2203      	movs	r2, #3
 80125ee:	4650      	mov	r0, sl
 80125f0:	f7ed fe16 	bl	8000220 <memchr>
 80125f4:	b140      	cbz	r0, 8012608 <_vfiprintf_r+0x198>
 80125f6:	2340      	movs	r3, #64	; 0x40
 80125f8:	eba0 000a 	sub.w	r0, r0, sl
 80125fc:	fa03 f000 	lsl.w	r0, r3, r0
 8012600:	9b04      	ldr	r3, [sp, #16]
 8012602:	4303      	orrs	r3, r0
 8012604:	3401      	adds	r4, #1
 8012606:	9304      	str	r3, [sp, #16]
 8012608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801260c:	482c      	ldr	r0, [pc, #176]	; (80126c0 <_vfiprintf_r+0x250>)
 801260e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012612:	2206      	movs	r2, #6
 8012614:	f7ed fe04 	bl	8000220 <memchr>
 8012618:	2800      	cmp	r0, #0
 801261a:	d03f      	beq.n	801269c <_vfiprintf_r+0x22c>
 801261c:	4b29      	ldr	r3, [pc, #164]	; (80126c4 <_vfiprintf_r+0x254>)
 801261e:	bb1b      	cbnz	r3, 8012668 <_vfiprintf_r+0x1f8>
 8012620:	9b03      	ldr	r3, [sp, #12]
 8012622:	3307      	adds	r3, #7
 8012624:	f023 0307 	bic.w	r3, r3, #7
 8012628:	3308      	adds	r3, #8
 801262a:	9303      	str	r3, [sp, #12]
 801262c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801262e:	443b      	add	r3, r7
 8012630:	9309      	str	r3, [sp, #36]	; 0x24
 8012632:	e767      	b.n	8012504 <_vfiprintf_r+0x94>
 8012634:	fb0c 3202 	mla	r2, ip, r2, r3
 8012638:	460c      	mov	r4, r1
 801263a:	2001      	movs	r0, #1
 801263c:	e7a5      	b.n	801258a <_vfiprintf_r+0x11a>
 801263e:	2300      	movs	r3, #0
 8012640:	3401      	adds	r4, #1
 8012642:	9305      	str	r3, [sp, #20]
 8012644:	4619      	mov	r1, r3
 8012646:	f04f 0c0a 	mov.w	ip, #10
 801264a:	4620      	mov	r0, r4
 801264c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012650:	3a30      	subs	r2, #48	; 0x30
 8012652:	2a09      	cmp	r2, #9
 8012654:	d903      	bls.n	801265e <_vfiprintf_r+0x1ee>
 8012656:	2b00      	cmp	r3, #0
 8012658:	d0c5      	beq.n	80125e6 <_vfiprintf_r+0x176>
 801265a:	9105      	str	r1, [sp, #20]
 801265c:	e7c3      	b.n	80125e6 <_vfiprintf_r+0x176>
 801265e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012662:	4604      	mov	r4, r0
 8012664:	2301      	movs	r3, #1
 8012666:	e7f0      	b.n	801264a <_vfiprintf_r+0x1da>
 8012668:	ab03      	add	r3, sp, #12
 801266a:	9300      	str	r3, [sp, #0]
 801266c:	462a      	mov	r2, r5
 801266e:	4b16      	ldr	r3, [pc, #88]	; (80126c8 <_vfiprintf_r+0x258>)
 8012670:	a904      	add	r1, sp, #16
 8012672:	4630      	mov	r0, r6
 8012674:	f3af 8000 	nop.w
 8012678:	4607      	mov	r7, r0
 801267a:	1c78      	adds	r0, r7, #1
 801267c:	d1d6      	bne.n	801262c <_vfiprintf_r+0x1bc>
 801267e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012680:	07d9      	lsls	r1, r3, #31
 8012682:	d405      	bmi.n	8012690 <_vfiprintf_r+0x220>
 8012684:	89ab      	ldrh	r3, [r5, #12]
 8012686:	059a      	lsls	r2, r3, #22
 8012688:	d402      	bmi.n	8012690 <_vfiprintf_r+0x220>
 801268a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801268c:	f000 fc35 	bl	8012efa <__retarget_lock_release_recursive>
 8012690:	89ab      	ldrh	r3, [r5, #12]
 8012692:	065b      	lsls	r3, r3, #25
 8012694:	f53f af12 	bmi.w	80124bc <_vfiprintf_r+0x4c>
 8012698:	9809      	ldr	r0, [sp, #36]	; 0x24
 801269a:	e711      	b.n	80124c0 <_vfiprintf_r+0x50>
 801269c:	ab03      	add	r3, sp, #12
 801269e:	9300      	str	r3, [sp, #0]
 80126a0:	462a      	mov	r2, r5
 80126a2:	4b09      	ldr	r3, [pc, #36]	; (80126c8 <_vfiprintf_r+0x258>)
 80126a4:	a904      	add	r1, sp, #16
 80126a6:	4630      	mov	r0, r6
 80126a8:	f000 f880 	bl	80127ac <_printf_i>
 80126ac:	e7e4      	b.n	8012678 <_vfiprintf_r+0x208>
 80126ae:	bf00      	nop
 80126b0:	08014ac4 	.word	0x08014ac4
 80126b4:	08014ae4 	.word	0x08014ae4
 80126b8:	08014aa4 	.word	0x08014aa4
 80126bc:	08014a6e 	.word	0x08014a6e
 80126c0:	08014a78 	.word	0x08014a78
 80126c4:	00000000 	.word	0x00000000
 80126c8:	0801244b 	.word	0x0801244b
 80126cc:	08014a74 	.word	0x08014a74

080126d0 <_printf_common>:
 80126d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126d4:	4616      	mov	r6, r2
 80126d6:	4699      	mov	r9, r3
 80126d8:	688a      	ldr	r2, [r1, #8]
 80126da:	690b      	ldr	r3, [r1, #16]
 80126dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80126e0:	4293      	cmp	r3, r2
 80126e2:	bfb8      	it	lt
 80126e4:	4613      	movlt	r3, r2
 80126e6:	6033      	str	r3, [r6, #0]
 80126e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80126ec:	4607      	mov	r7, r0
 80126ee:	460c      	mov	r4, r1
 80126f0:	b10a      	cbz	r2, 80126f6 <_printf_common+0x26>
 80126f2:	3301      	adds	r3, #1
 80126f4:	6033      	str	r3, [r6, #0]
 80126f6:	6823      	ldr	r3, [r4, #0]
 80126f8:	0699      	lsls	r1, r3, #26
 80126fa:	bf42      	ittt	mi
 80126fc:	6833      	ldrmi	r3, [r6, #0]
 80126fe:	3302      	addmi	r3, #2
 8012700:	6033      	strmi	r3, [r6, #0]
 8012702:	6825      	ldr	r5, [r4, #0]
 8012704:	f015 0506 	ands.w	r5, r5, #6
 8012708:	d106      	bne.n	8012718 <_printf_common+0x48>
 801270a:	f104 0a19 	add.w	sl, r4, #25
 801270e:	68e3      	ldr	r3, [r4, #12]
 8012710:	6832      	ldr	r2, [r6, #0]
 8012712:	1a9b      	subs	r3, r3, r2
 8012714:	42ab      	cmp	r3, r5
 8012716:	dc26      	bgt.n	8012766 <_printf_common+0x96>
 8012718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801271c:	1e13      	subs	r3, r2, #0
 801271e:	6822      	ldr	r2, [r4, #0]
 8012720:	bf18      	it	ne
 8012722:	2301      	movne	r3, #1
 8012724:	0692      	lsls	r2, r2, #26
 8012726:	d42b      	bmi.n	8012780 <_printf_common+0xb0>
 8012728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801272c:	4649      	mov	r1, r9
 801272e:	4638      	mov	r0, r7
 8012730:	47c0      	blx	r8
 8012732:	3001      	adds	r0, #1
 8012734:	d01e      	beq.n	8012774 <_printf_common+0xa4>
 8012736:	6823      	ldr	r3, [r4, #0]
 8012738:	68e5      	ldr	r5, [r4, #12]
 801273a:	6832      	ldr	r2, [r6, #0]
 801273c:	f003 0306 	and.w	r3, r3, #6
 8012740:	2b04      	cmp	r3, #4
 8012742:	bf08      	it	eq
 8012744:	1aad      	subeq	r5, r5, r2
 8012746:	68a3      	ldr	r3, [r4, #8]
 8012748:	6922      	ldr	r2, [r4, #16]
 801274a:	bf0c      	ite	eq
 801274c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012750:	2500      	movne	r5, #0
 8012752:	4293      	cmp	r3, r2
 8012754:	bfc4      	itt	gt
 8012756:	1a9b      	subgt	r3, r3, r2
 8012758:	18ed      	addgt	r5, r5, r3
 801275a:	2600      	movs	r6, #0
 801275c:	341a      	adds	r4, #26
 801275e:	42b5      	cmp	r5, r6
 8012760:	d11a      	bne.n	8012798 <_printf_common+0xc8>
 8012762:	2000      	movs	r0, #0
 8012764:	e008      	b.n	8012778 <_printf_common+0xa8>
 8012766:	2301      	movs	r3, #1
 8012768:	4652      	mov	r2, sl
 801276a:	4649      	mov	r1, r9
 801276c:	4638      	mov	r0, r7
 801276e:	47c0      	blx	r8
 8012770:	3001      	adds	r0, #1
 8012772:	d103      	bne.n	801277c <_printf_common+0xac>
 8012774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801277c:	3501      	adds	r5, #1
 801277e:	e7c6      	b.n	801270e <_printf_common+0x3e>
 8012780:	18e1      	adds	r1, r4, r3
 8012782:	1c5a      	adds	r2, r3, #1
 8012784:	2030      	movs	r0, #48	; 0x30
 8012786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801278a:	4422      	add	r2, r4
 801278c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012794:	3302      	adds	r3, #2
 8012796:	e7c7      	b.n	8012728 <_printf_common+0x58>
 8012798:	2301      	movs	r3, #1
 801279a:	4622      	mov	r2, r4
 801279c:	4649      	mov	r1, r9
 801279e:	4638      	mov	r0, r7
 80127a0:	47c0      	blx	r8
 80127a2:	3001      	adds	r0, #1
 80127a4:	d0e6      	beq.n	8012774 <_printf_common+0xa4>
 80127a6:	3601      	adds	r6, #1
 80127a8:	e7d9      	b.n	801275e <_printf_common+0x8e>
	...

080127ac <_printf_i>:
 80127ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80127b0:	7e0f      	ldrb	r7, [r1, #24]
 80127b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80127b4:	2f78      	cmp	r7, #120	; 0x78
 80127b6:	4691      	mov	r9, r2
 80127b8:	4680      	mov	r8, r0
 80127ba:	460c      	mov	r4, r1
 80127bc:	469a      	mov	sl, r3
 80127be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80127c2:	d807      	bhi.n	80127d4 <_printf_i+0x28>
 80127c4:	2f62      	cmp	r7, #98	; 0x62
 80127c6:	d80a      	bhi.n	80127de <_printf_i+0x32>
 80127c8:	2f00      	cmp	r7, #0
 80127ca:	f000 80d8 	beq.w	801297e <_printf_i+0x1d2>
 80127ce:	2f58      	cmp	r7, #88	; 0x58
 80127d0:	f000 80a3 	beq.w	801291a <_printf_i+0x16e>
 80127d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80127d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80127dc:	e03a      	b.n	8012854 <_printf_i+0xa8>
 80127de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80127e2:	2b15      	cmp	r3, #21
 80127e4:	d8f6      	bhi.n	80127d4 <_printf_i+0x28>
 80127e6:	a101      	add	r1, pc, #4	; (adr r1, 80127ec <_printf_i+0x40>)
 80127e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80127ec:	08012845 	.word	0x08012845
 80127f0:	08012859 	.word	0x08012859
 80127f4:	080127d5 	.word	0x080127d5
 80127f8:	080127d5 	.word	0x080127d5
 80127fc:	080127d5 	.word	0x080127d5
 8012800:	080127d5 	.word	0x080127d5
 8012804:	08012859 	.word	0x08012859
 8012808:	080127d5 	.word	0x080127d5
 801280c:	080127d5 	.word	0x080127d5
 8012810:	080127d5 	.word	0x080127d5
 8012814:	080127d5 	.word	0x080127d5
 8012818:	08012965 	.word	0x08012965
 801281c:	08012889 	.word	0x08012889
 8012820:	08012947 	.word	0x08012947
 8012824:	080127d5 	.word	0x080127d5
 8012828:	080127d5 	.word	0x080127d5
 801282c:	08012987 	.word	0x08012987
 8012830:	080127d5 	.word	0x080127d5
 8012834:	08012889 	.word	0x08012889
 8012838:	080127d5 	.word	0x080127d5
 801283c:	080127d5 	.word	0x080127d5
 8012840:	0801294f 	.word	0x0801294f
 8012844:	682b      	ldr	r3, [r5, #0]
 8012846:	1d1a      	adds	r2, r3, #4
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	602a      	str	r2, [r5, #0]
 801284c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012854:	2301      	movs	r3, #1
 8012856:	e0a3      	b.n	80129a0 <_printf_i+0x1f4>
 8012858:	6820      	ldr	r0, [r4, #0]
 801285a:	6829      	ldr	r1, [r5, #0]
 801285c:	0606      	lsls	r6, r0, #24
 801285e:	f101 0304 	add.w	r3, r1, #4
 8012862:	d50a      	bpl.n	801287a <_printf_i+0xce>
 8012864:	680e      	ldr	r6, [r1, #0]
 8012866:	602b      	str	r3, [r5, #0]
 8012868:	2e00      	cmp	r6, #0
 801286a:	da03      	bge.n	8012874 <_printf_i+0xc8>
 801286c:	232d      	movs	r3, #45	; 0x2d
 801286e:	4276      	negs	r6, r6
 8012870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012874:	485e      	ldr	r0, [pc, #376]	; (80129f0 <_printf_i+0x244>)
 8012876:	230a      	movs	r3, #10
 8012878:	e019      	b.n	80128ae <_printf_i+0x102>
 801287a:	680e      	ldr	r6, [r1, #0]
 801287c:	602b      	str	r3, [r5, #0]
 801287e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012882:	bf18      	it	ne
 8012884:	b236      	sxthne	r6, r6
 8012886:	e7ef      	b.n	8012868 <_printf_i+0xbc>
 8012888:	682b      	ldr	r3, [r5, #0]
 801288a:	6820      	ldr	r0, [r4, #0]
 801288c:	1d19      	adds	r1, r3, #4
 801288e:	6029      	str	r1, [r5, #0]
 8012890:	0601      	lsls	r1, r0, #24
 8012892:	d501      	bpl.n	8012898 <_printf_i+0xec>
 8012894:	681e      	ldr	r6, [r3, #0]
 8012896:	e002      	b.n	801289e <_printf_i+0xf2>
 8012898:	0646      	lsls	r6, r0, #25
 801289a:	d5fb      	bpl.n	8012894 <_printf_i+0xe8>
 801289c:	881e      	ldrh	r6, [r3, #0]
 801289e:	4854      	ldr	r0, [pc, #336]	; (80129f0 <_printf_i+0x244>)
 80128a0:	2f6f      	cmp	r7, #111	; 0x6f
 80128a2:	bf0c      	ite	eq
 80128a4:	2308      	moveq	r3, #8
 80128a6:	230a      	movne	r3, #10
 80128a8:	2100      	movs	r1, #0
 80128aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80128ae:	6865      	ldr	r5, [r4, #4]
 80128b0:	60a5      	str	r5, [r4, #8]
 80128b2:	2d00      	cmp	r5, #0
 80128b4:	bfa2      	ittt	ge
 80128b6:	6821      	ldrge	r1, [r4, #0]
 80128b8:	f021 0104 	bicge.w	r1, r1, #4
 80128bc:	6021      	strge	r1, [r4, #0]
 80128be:	b90e      	cbnz	r6, 80128c4 <_printf_i+0x118>
 80128c0:	2d00      	cmp	r5, #0
 80128c2:	d04d      	beq.n	8012960 <_printf_i+0x1b4>
 80128c4:	4615      	mov	r5, r2
 80128c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80128ca:	fb03 6711 	mls	r7, r3, r1, r6
 80128ce:	5dc7      	ldrb	r7, [r0, r7]
 80128d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80128d4:	4637      	mov	r7, r6
 80128d6:	42bb      	cmp	r3, r7
 80128d8:	460e      	mov	r6, r1
 80128da:	d9f4      	bls.n	80128c6 <_printf_i+0x11a>
 80128dc:	2b08      	cmp	r3, #8
 80128de:	d10b      	bne.n	80128f8 <_printf_i+0x14c>
 80128e0:	6823      	ldr	r3, [r4, #0]
 80128e2:	07de      	lsls	r6, r3, #31
 80128e4:	d508      	bpl.n	80128f8 <_printf_i+0x14c>
 80128e6:	6923      	ldr	r3, [r4, #16]
 80128e8:	6861      	ldr	r1, [r4, #4]
 80128ea:	4299      	cmp	r1, r3
 80128ec:	bfde      	ittt	le
 80128ee:	2330      	movle	r3, #48	; 0x30
 80128f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80128f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80128f8:	1b52      	subs	r2, r2, r5
 80128fa:	6122      	str	r2, [r4, #16]
 80128fc:	f8cd a000 	str.w	sl, [sp]
 8012900:	464b      	mov	r3, r9
 8012902:	aa03      	add	r2, sp, #12
 8012904:	4621      	mov	r1, r4
 8012906:	4640      	mov	r0, r8
 8012908:	f7ff fee2 	bl	80126d0 <_printf_common>
 801290c:	3001      	adds	r0, #1
 801290e:	d14c      	bne.n	80129aa <_printf_i+0x1fe>
 8012910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012914:	b004      	add	sp, #16
 8012916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801291a:	4835      	ldr	r0, [pc, #212]	; (80129f0 <_printf_i+0x244>)
 801291c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012920:	6829      	ldr	r1, [r5, #0]
 8012922:	6823      	ldr	r3, [r4, #0]
 8012924:	f851 6b04 	ldr.w	r6, [r1], #4
 8012928:	6029      	str	r1, [r5, #0]
 801292a:	061d      	lsls	r5, r3, #24
 801292c:	d514      	bpl.n	8012958 <_printf_i+0x1ac>
 801292e:	07df      	lsls	r7, r3, #31
 8012930:	bf44      	itt	mi
 8012932:	f043 0320 	orrmi.w	r3, r3, #32
 8012936:	6023      	strmi	r3, [r4, #0]
 8012938:	b91e      	cbnz	r6, 8012942 <_printf_i+0x196>
 801293a:	6823      	ldr	r3, [r4, #0]
 801293c:	f023 0320 	bic.w	r3, r3, #32
 8012940:	6023      	str	r3, [r4, #0]
 8012942:	2310      	movs	r3, #16
 8012944:	e7b0      	b.n	80128a8 <_printf_i+0xfc>
 8012946:	6823      	ldr	r3, [r4, #0]
 8012948:	f043 0320 	orr.w	r3, r3, #32
 801294c:	6023      	str	r3, [r4, #0]
 801294e:	2378      	movs	r3, #120	; 0x78
 8012950:	4828      	ldr	r0, [pc, #160]	; (80129f4 <_printf_i+0x248>)
 8012952:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012956:	e7e3      	b.n	8012920 <_printf_i+0x174>
 8012958:	0659      	lsls	r1, r3, #25
 801295a:	bf48      	it	mi
 801295c:	b2b6      	uxthmi	r6, r6
 801295e:	e7e6      	b.n	801292e <_printf_i+0x182>
 8012960:	4615      	mov	r5, r2
 8012962:	e7bb      	b.n	80128dc <_printf_i+0x130>
 8012964:	682b      	ldr	r3, [r5, #0]
 8012966:	6826      	ldr	r6, [r4, #0]
 8012968:	6961      	ldr	r1, [r4, #20]
 801296a:	1d18      	adds	r0, r3, #4
 801296c:	6028      	str	r0, [r5, #0]
 801296e:	0635      	lsls	r5, r6, #24
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	d501      	bpl.n	8012978 <_printf_i+0x1cc>
 8012974:	6019      	str	r1, [r3, #0]
 8012976:	e002      	b.n	801297e <_printf_i+0x1d2>
 8012978:	0670      	lsls	r0, r6, #25
 801297a:	d5fb      	bpl.n	8012974 <_printf_i+0x1c8>
 801297c:	8019      	strh	r1, [r3, #0]
 801297e:	2300      	movs	r3, #0
 8012980:	6123      	str	r3, [r4, #16]
 8012982:	4615      	mov	r5, r2
 8012984:	e7ba      	b.n	80128fc <_printf_i+0x150>
 8012986:	682b      	ldr	r3, [r5, #0]
 8012988:	1d1a      	adds	r2, r3, #4
 801298a:	602a      	str	r2, [r5, #0]
 801298c:	681d      	ldr	r5, [r3, #0]
 801298e:	6862      	ldr	r2, [r4, #4]
 8012990:	2100      	movs	r1, #0
 8012992:	4628      	mov	r0, r5
 8012994:	f7ed fc44 	bl	8000220 <memchr>
 8012998:	b108      	cbz	r0, 801299e <_printf_i+0x1f2>
 801299a:	1b40      	subs	r0, r0, r5
 801299c:	6060      	str	r0, [r4, #4]
 801299e:	6863      	ldr	r3, [r4, #4]
 80129a0:	6123      	str	r3, [r4, #16]
 80129a2:	2300      	movs	r3, #0
 80129a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129a8:	e7a8      	b.n	80128fc <_printf_i+0x150>
 80129aa:	6923      	ldr	r3, [r4, #16]
 80129ac:	462a      	mov	r2, r5
 80129ae:	4649      	mov	r1, r9
 80129b0:	4640      	mov	r0, r8
 80129b2:	47d0      	blx	sl
 80129b4:	3001      	adds	r0, #1
 80129b6:	d0ab      	beq.n	8012910 <_printf_i+0x164>
 80129b8:	6823      	ldr	r3, [r4, #0]
 80129ba:	079b      	lsls	r3, r3, #30
 80129bc:	d413      	bmi.n	80129e6 <_printf_i+0x23a>
 80129be:	68e0      	ldr	r0, [r4, #12]
 80129c0:	9b03      	ldr	r3, [sp, #12]
 80129c2:	4298      	cmp	r0, r3
 80129c4:	bfb8      	it	lt
 80129c6:	4618      	movlt	r0, r3
 80129c8:	e7a4      	b.n	8012914 <_printf_i+0x168>
 80129ca:	2301      	movs	r3, #1
 80129cc:	4632      	mov	r2, r6
 80129ce:	4649      	mov	r1, r9
 80129d0:	4640      	mov	r0, r8
 80129d2:	47d0      	blx	sl
 80129d4:	3001      	adds	r0, #1
 80129d6:	d09b      	beq.n	8012910 <_printf_i+0x164>
 80129d8:	3501      	adds	r5, #1
 80129da:	68e3      	ldr	r3, [r4, #12]
 80129dc:	9903      	ldr	r1, [sp, #12]
 80129de:	1a5b      	subs	r3, r3, r1
 80129e0:	42ab      	cmp	r3, r5
 80129e2:	dcf2      	bgt.n	80129ca <_printf_i+0x21e>
 80129e4:	e7eb      	b.n	80129be <_printf_i+0x212>
 80129e6:	2500      	movs	r5, #0
 80129e8:	f104 0619 	add.w	r6, r4, #25
 80129ec:	e7f5      	b.n	80129da <_printf_i+0x22e>
 80129ee:	bf00      	nop
 80129f0:	08014a7f 	.word	0x08014a7f
 80129f4:	08014a90 	.word	0x08014a90

080129f8 <__swbuf_r>:
 80129f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129fa:	460e      	mov	r6, r1
 80129fc:	4614      	mov	r4, r2
 80129fe:	4605      	mov	r5, r0
 8012a00:	b118      	cbz	r0, 8012a0a <__swbuf_r+0x12>
 8012a02:	6983      	ldr	r3, [r0, #24]
 8012a04:	b90b      	cbnz	r3, 8012a0a <__swbuf_r+0x12>
 8012a06:	f000 f9d9 	bl	8012dbc <__sinit>
 8012a0a:	4b21      	ldr	r3, [pc, #132]	; (8012a90 <__swbuf_r+0x98>)
 8012a0c:	429c      	cmp	r4, r3
 8012a0e:	d12b      	bne.n	8012a68 <__swbuf_r+0x70>
 8012a10:	686c      	ldr	r4, [r5, #4]
 8012a12:	69a3      	ldr	r3, [r4, #24]
 8012a14:	60a3      	str	r3, [r4, #8]
 8012a16:	89a3      	ldrh	r3, [r4, #12]
 8012a18:	071a      	lsls	r2, r3, #28
 8012a1a:	d52f      	bpl.n	8012a7c <__swbuf_r+0x84>
 8012a1c:	6923      	ldr	r3, [r4, #16]
 8012a1e:	b36b      	cbz	r3, 8012a7c <__swbuf_r+0x84>
 8012a20:	6923      	ldr	r3, [r4, #16]
 8012a22:	6820      	ldr	r0, [r4, #0]
 8012a24:	1ac0      	subs	r0, r0, r3
 8012a26:	6963      	ldr	r3, [r4, #20]
 8012a28:	b2f6      	uxtb	r6, r6
 8012a2a:	4283      	cmp	r3, r0
 8012a2c:	4637      	mov	r7, r6
 8012a2e:	dc04      	bgt.n	8012a3a <__swbuf_r+0x42>
 8012a30:	4621      	mov	r1, r4
 8012a32:	4628      	mov	r0, r5
 8012a34:	f000 f92e 	bl	8012c94 <_fflush_r>
 8012a38:	bb30      	cbnz	r0, 8012a88 <__swbuf_r+0x90>
 8012a3a:	68a3      	ldr	r3, [r4, #8]
 8012a3c:	3b01      	subs	r3, #1
 8012a3e:	60a3      	str	r3, [r4, #8]
 8012a40:	6823      	ldr	r3, [r4, #0]
 8012a42:	1c5a      	adds	r2, r3, #1
 8012a44:	6022      	str	r2, [r4, #0]
 8012a46:	701e      	strb	r6, [r3, #0]
 8012a48:	6963      	ldr	r3, [r4, #20]
 8012a4a:	3001      	adds	r0, #1
 8012a4c:	4283      	cmp	r3, r0
 8012a4e:	d004      	beq.n	8012a5a <__swbuf_r+0x62>
 8012a50:	89a3      	ldrh	r3, [r4, #12]
 8012a52:	07db      	lsls	r3, r3, #31
 8012a54:	d506      	bpl.n	8012a64 <__swbuf_r+0x6c>
 8012a56:	2e0a      	cmp	r6, #10
 8012a58:	d104      	bne.n	8012a64 <__swbuf_r+0x6c>
 8012a5a:	4621      	mov	r1, r4
 8012a5c:	4628      	mov	r0, r5
 8012a5e:	f000 f919 	bl	8012c94 <_fflush_r>
 8012a62:	b988      	cbnz	r0, 8012a88 <__swbuf_r+0x90>
 8012a64:	4638      	mov	r0, r7
 8012a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a68:	4b0a      	ldr	r3, [pc, #40]	; (8012a94 <__swbuf_r+0x9c>)
 8012a6a:	429c      	cmp	r4, r3
 8012a6c:	d101      	bne.n	8012a72 <__swbuf_r+0x7a>
 8012a6e:	68ac      	ldr	r4, [r5, #8]
 8012a70:	e7cf      	b.n	8012a12 <__swbuf_r+0x1a>
 8012a72:	4b09      	ldr	r3, [pc, #36]	; (8012a98 <__swbuf_r+0xa0>)
 8012a74:	429c      	cmp	r4, r3
 8012a76:	bf08      	it	eq
 8012a78:	68ec      	ldreq	r4, [r5, #12]
 8012a7a:	e7ca      	b.n	8012a12 <__swbuf_r+0x1a>
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	4628      	mov	r0, r5
 8012a80:	f000 f80c 	bl	8012a9c <__swsetup_r>
 8012a84:	2800      	cmp	r0, #0
 8012a86:	d0cb      	beq.n	8012a20 <__swbuf_r+0x28>
 8012a88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012a8c:	e7ea      	b.n	8012a64 <__swbuf_r+0x6c>
 8012a8e:	bf00      	nop
 8012a90:	08014ac4 	.word	0x08014ac4
 8012a94:	08014ae4 	.word	0x08014ae4
 8012a98:	08014aa4 	.word	0x08014aa4

08012a9c <__swsetup_r>:
 8012a9c:	4b32      	ldr	r3, [pc, #200]	; (8012b68 <__swsetup_r+0xcc>)
 8012a9e:	b570      	push	{r4, r5, r6, lr}
 8012aa0:	681d      	ldr	r5, [r3, #0]
 8012aa2:	4606      	mov	r6, r0
 8012aa4:	460c      	mov	r4, r1
 8012aa6:	b125      	cbz	r5, 8012ab2 <__swsetup_r+0x16>
 8012aa8:	69ab      	ldr	r3, [r5, #24]
 8012aaa:	b913      	cbnz	r3, 8012ab2 <__swsetup_r+0x16>
 8012aac:	4628      	mov	r0, r5
 8012aae:	f000 f985 	bl	8012dbc <__sinit>
 8012ab2:	4b2e      	ldr	r3, [pc, #184]	; (8012b6c <__swsetup_r+0xd0>)
 8012ab4:	429c      	cmp	r4, r3
 8012ab6:	d10f      	bne.n	8012ad8 <__swsetup_r+0x3c>
 8012ab8:	686c      	ldr	r4, [r5, #4]
 8012aba:	89a3      	ldrh	r3, [r4, #12]
 8012abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012ac0:	0719      	lsls	r1, r3, #28
 8012ac2:	d42c      	bmi.n	8012b1e <__swsetup_r+0x82>
 8012ac4:	06dd      	lsls	r5, r3, #27
 8012ac6:	d411      	bmi.n	8012aec <__swsetup_r+0x50>
 8012ac8:	2309      	movs	r3, #9
 8012aca:	6033      	str	r3, [r6, #0]
 8012acc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012ad0:	81a3      	strh	r3, [r4, #12]
 8012ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ad6:	e03e      	b.n	8012b56 <__swsetup_r+0xba>
 8012ad8:	4b25      	ldr	r3, [pc, #148]	; (8012b70 <__swsetup_r+0xd4>)
 8012ada:	429c      	cmp	r4, r3
 8012adc:	d101      	bne.n	8012ae2 <__swsetup_r+0x46>
 8012ade:	68ac      	ldr	r4, [r5, #8]
 8012ae0:	e7eb      	b.n	8012aba <__swsetup_r+0x1e>
 8012ae2:	4b24      	ldr	r3, [pc, #144]	; (8012b74 <__swsetup_r+0xd8>)
 8012ae4:	429c      	cmp	r4, r3
 8012ae6:	bf08      	it	eq
 8012ae8:	68ec      	ldreq	r4, [r5, #12]
 8012aea:	e7e6      	b.n	8012aba <__swsetup_r+0x1e>
 8012aec:	0758      	lsls	r0, r3, #29
 8012aee:	d512      	bpl.n	8012b16 <__swsetup_r+0x7a>
 8012af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012af2:	b141      	cbz	r1, 8012b06 <__swsetup_r+0x6a>
 8012af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012af8:	4299      	cmp	r1, r3
 8012afa:	d002      	beq.n	8012b02 <__swsetup_r+0x66>
 8012afc:	4630      	mov	r0, r6
 8012afe:	f7ff f965 	bl	8011dcc <_free_r>
 8012b02:	2300      	movs	r3, #0
 8012b04:	6363      	str	r3, [r4, #52]	; 0x34
 8012b06:	89a3      	ldrh	r3, [r4, #12]
 8012b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b0c:	81a3      	strh	r3, [r4, #12]
 8012b0e:	2300      	movs	r3, #0
 8012b10:	6063      	str	r3, [r4, #4]
 8012b12:	6923      	ldr	r3, [r4, #16]
 8012b14:	6023      	str	r3, [r4, #0]
 8012b16:	89a3      	ldrh	r3, [r4, #12]
 8012b18:	f043 0308 	orr.w	r3, r3, #8
 8012b1c:	81a3      	strh	r3, [r4, #12]
 8012b1e:	6923      	ldr	r3, [r4, #16]
 8012b20:	b94b      	cbnz	r3, 8012b36 <__swsetup_r+0x9a>
 8012b22:	89a3      	ldrh	r3, [r4, #12]
 8012b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b2c:	d003      	beq.n	8012b36 <__swsetup_r+0x9a>
 8012b2e:	4621      	mov	r1, r4
 8012b30:	4630      	mov	r0, r6
 8012b32:	f000 fa09 	bl	8012f48 <__smakebuf_r>
 8012b36:	89a0      	ldrh	r0, [r4, #12]
 8012b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b3c:	f010 0301 	ands.w	r3, r0, #1
 8012b40:	d00a      	beq.n	8012b58 <__swsetup_r+0xbc>
 8012b42:	2300      	movs	r3, #0
 8012b44:	60a3      	str	r3, [r4, #8]
 8012b46:	6963      	ldr	r3, [r4, #20]
 8012b48:	425b      	negs	r3, r3
 8012b4a:	61a3      	str	r3, [r4, #24]
 8012b4c:	6923      	ldr	r3, [r4, #16]
 8012b4e:	b943      	cbnz	r3, 8012b62 <__swsetup_r+0xc6>
 8012b50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b54:	d1ba      	bne.n	8012acc <__swsetup_r+0x30>
 8012b56:	bd70      	pop	{r4, r5, r6, pc}
 8012b58:	0781      	lsls	r1, r0, #30
 8012b5a:	bf58      	it	pl
 8012b5c:	6963      	ldrpl	r3, [r4, #20]
 8012b5e:	60a3      	str	r3, [r4, #8]
 8012b60:	e7f4      	b.n	8012b4c <__swsetup_r+0xb0>
 8012b62:	2000      	movs	r0, #0
 8012b64:	e7f7      	b.n	8012b56 <__swsetup_r+0xba>
 8012b66:	bf00      	nop
 8012b68:	200006b8 	.word	0x200006b8
 8012b6c:	08014ac4 	.word	0x08014ac4
 8012b70:	08014ae4 	.word	0x08014ae4
 8012b74:	08014aa4 	.word	0x08014aa4

08012b78 <abort>:
 8012b78:	b508      	push	{r3, lr}
 8012b7a:	2006      	movs	r0, #6
 8012b7c:	f000 fa7c 	bl	8013078 <raise>
 8012b80:	2001      	movs	r0, #1
 8012b82:	f7f0 f879 	bl	8002c78 <_exit>
	...

08012b88 <__sflush_r>:
 8012b88:	898a      	ldrh	r2, [r1, #12]
 8012b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b8e:	4605      	mov	r5, r0
 8012b90:	0710      	lsls	r0, r2, #28
 8012b92:	460c      	mov	r4, r1
 8012b94:	d458      	bmi.n	8012c48 <__sflush_r+0xc0>
 8012b96:	684b      	ldr	r3, [r1, #4]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	dc05      	bgt.n	8012ba8 <__sflush_r+0x20>
 8012b9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	dc02      	bgt.n	8012ba8 <__sflush_r+0x20>
 8012ba2:	2000      	movs	r0, #0
 8012ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012baa:	2e00      	cmp	r6, #0
 8012bac:	d0f9      	beq.n	8012ba2 <__sflush_r+0x1a>
 8012bae:	2300      	movs	r3, #0
 8012bb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012bb4:	682f      	ldr	r7, [r5, #0]
 8012bb6:	602b      	str	r3, [r5, #0]
 8012bb8:	d032      	beq.n	8012c20 <__sflush_r+0x98>
 8012bba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012bbc:	89a3      	ldrh	r3, [r4, #12]
 8012bbe:	075a      	lsls	r2, r3, #29
 8012bc0:	d505      	bpl.n	8012bce <__sflush_r+0x46>
 8012bc2:	6863      	ldr	r3, [r4, #4]
 8012bc4:	1ac0      	subs	r0, r0, r3
 8012bc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012bc8:	b10b      	cbz	r3, 8012bce <__sflush_r+0x46>
 8012bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012bcc:	1ac0      	subs	r0, r0, r3
 8012bce:	2300      	movs	r3, #0
 8012bd0:	4602      	mov	r2, r0
 8012bd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012bd4:	6a21      	ldr	r1, [r4, #32]
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	47b0      	blx	r6
 8012bda:	1c43      	adds	r3, r0, #1
 8012bdc:	89a3      	ldrh	r3, [r4, #12]
 8012bde:	d106      	bne.n	8012bee <__sflush_r+0x66>
 8012be0:	6829      	ldr	r1, [r5, #0]
 8012be2:	291d      	cmp	r1, #29
 8012be4:	d82c      	bhi.n	8012c40 <__sflush_r+0xb8>
 8012be6:	4a2a      	ldr	r2, [pc, #168]	; (8012c90 <__sflush_r+0x108>)
 8012be8:	40ca      	lsrs	r2, r1
 8012bea:	07d6      	lsls	r6, r2, #31
 8012bec:	d528      	bpl.n	8012c40 <__sflush_r+0xb8>
 8012bee:	2200      	movs	r2, #0
 8012bf0:	6062      	str	r2, [r4, #4]
 8012bf2:	04d9      	lsls	r1, r3, #19
 8012bf4:	6922      	ldr	r2, [r4, #16]
 8012bf6:	6022      	str	r2, [r4, #0]
 8012bf8:	d504      	bpl.n	8012c04 <__sflush_r+0x7c>
 8012bfa:	1c42      	adds	r2, r0, #1
 8012bfc:	d101      	bne.n	8012c02 <__sflush_r+0x7a>
 8012bfe:	682b      	ldr	r3, [r5, #0]
 8012c00:	b903      	cbnz	r3, 8012c04 <__sflush_r+0x7c>
 8012c02:	6560      	str	r0, [r4, #84]	; 0x54
 8012c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c06:	602f      	str	r7, [r5, #0]
 8012c08:	2900      	cmp	r1, #0
 8012c0a:	d0ca      	beq.n	8012ba2 <__sflush_r+0x1a>
 8012c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c10:	4299      	cmp	r1, r3
 8012c12:	d002      	beq.n	8012c1a <__sflush_r+0x92>
 8012c14:	4628      	mov	r0, r5
 8012c16:	f7ff f8d9 	bl	8011dcc <_free_r>
 8012c1a:	2000      	movs	r0, #0
 8012c1c:	6360      	str	r0, [r4, #52]	; 0x34
 8012c1e:	e7c1      	b.n	8012ba4 <__sflush_r+0x1c>
 8012c20:	6a21      	ldr	r1, [r4, #32]
 8012c22:	2301      	movs	r3, #1
 8012c24:	4628      	mov	r0, r5
 8012c26:	47b0      	blx	r6
 8012c28:	1c41      	adds	r1, r0, #1
 8012c2a:	d1c7      	bne.n	8012bbc <__sflush_r+0x34>
 8012c2c:	682b      	ldr	r3, [r5, #0]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d0c4      	beq.n	8012bbc <__sflush_r+0x34>
 8012c32:	2b1d      	cmp	r3, #29
 8012c34:	d001      	beq.n	8012c3a <__sflush_r+0xb2>
 8012c36:	2b16      	cmp	r3, #22
 8012c38:	d101      	bne.n	8012c3e <__sflush_r+0xb6>
 8012c3a:	602f      	str	r7, [r5, #0]
 8012c3c:	e7b1      	b.n	8012ba2 <__sflush_r+0x1a>
 8012c3e:	89a3      	ldrh	r3, [r4, #12]
 8012c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c44:	81a3      	strh	r3, [r4, #12]
 8012c46:	e7ad      	b.n	8012ba4 <__sflush_r+0x1c>
 8012c48:	690f      	ldr	r7, [r1, #16]
 8012c4a:	2f00      	cmp	r7, #0
 8012c4c:	d0a9      	beq.n	8012ba2 <__sflush_r+0x1a>
 8012c4e:	0793      	lsls	r3, r2, #30
 8012c50:	680e      	ldr	r6, [r1, #0]
 8012c52:	bf08      	it	eq
 8012c54:	694b      	ldreq	r3, [r1, #20]
 8012c56:	600f      	str	r7, [r1, #0]
 8012c58:	bf18      	it	ne
 8012c5a:	2300      	movne	r3, #0
 8012c5c:	eba6 0807 	sub.w	r8, r6, r7
 8012c60:	608b      	str	r3, [r1, #8]
 8012c62:	f1b8 0f00 	cmp.w	r8, #0
 8012c66:	dd9c      	ble.n	8012ba2 <__sflush_r+0x1a>
 8012c68:	6a21      	ldr	r1, [r4, #32]
 8012c6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012c6c:	4643      	mov	r3, r8
 8012c6e:	463a      	mov	r2, r7
 8012c70:	4628      	mov	r0, r5
 8012c72:	47b0      	blx	r6
 8012c74:	2800      	cmp	r0, #0
 8012c76:	dc06      	bgt.n	8012c86 <__sflush_r+0xfe>
 8012c78:	89a3      	ldrh	r3, [r4, #12]
 8012c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c7e:	81a3      	strh	r3, [r4, #12]
 8012c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c84:	e78e      	b.n	8012ba4 <__sflush_r+0x1c>
 8012c86:	4407      	add	r7, r0
 8012c88:	eba8 0800 	sub.w	r8, r8, r0
 8012c8c:	e7e9      	b.n	8012c62 <__sflush_r+0xda>
 8012c8e:	bf00      	nop
 8012c90:	20400001 	.word	0x20400001

08012c94 <_fflush_r>:
 8012c94:	b538      	push	{r3, r4, r5, lr}
 8012c96:	690b      	ldr	r3, [r1, #16]
 8012c98:	4605      	mov	r5, r0
 8012c9a:	460c      	mov	r4, r1
 8012c9c:	b913      	cbnz	r3, 8012ca4 <_fflush_r+0x10>
 8012c9e:	2500      	movs	r5, #0
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	bd38      	pop	{r3, r4, r5, pc}
 8012ca4:	b118      	cbz	r0, 8012cae <_fflush_r+0x1a>
 8012ca6:	6983      	ldr	r3, [r0, #24]
 8012ca8:	b90b      	cbnz	r3, 8012cae <_fflush_r+0x1a>
 8012caa:	f000 f887 	bl	8012dbc <__sinit>
 8012cae:	4b14      	ldr	r3, [pc, #80]	; (8012d00 <_fflush_r+0x6c>)
 8012cb0:	429c      	cmp	r4, r3
 8012cb2:	d11b      	bne.n	8012cec <_fflush_r+0x58>
 8012cb4:	686c      	ldr	r4, [r5, #4]
 8012cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d0ef      	beq.n	8012c9e <_fflush_r+0xa>
 8012cbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012cc0:	07d0      	lsls	r0, r2, #31
 8012cc2:	d404      	bmi.n	8012cce <_fflush_r+0x3a>
 8012cc4:	0599      	lsls	r1, r3, #22
 8012cc6:	d402      	bmi.n	8012cce <_fflush_r+0x3a>
 8012cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012cca:	f000 f915 	bl	8012ef8 <__retarget_lock_acquire_recursive>
 8012cce:	4628      	mov	r0, r5
 8012cd0:	4621      	mov	r1, r4
 8012cd2:	f7ff ff59 	bl	8012b88 <__sflush_r>
 8012cd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012cd8:	07da      	lsls	r2, r3, #31
 8012cda:	4605      	mov	r5, r0
 8012cdc:	d4e0      	bmi.n	8012ca0 <_fflush_r+0xc>
 8012cde:	89a3      	ldrh	r3, [r4, #12]
 8012ce0:	059b      	lsls	r3, r3, #22
 8012ce2:	d4dd      	bmi.n	8012ca0 <_fflush_r+0xc>
 8012ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ce6:	f000 f908 	bl	8012efa <__retarget_lock_release_recursive>
 8012cea:	e7d9      	b.n	8012ca0 <_fflush_r+0xc>
 8012cec:	4b05      	ldr	r3, [pc, #20]	; (8012d04 <_fflush_r+0x70>)
 8012cee:	429c      	cmp	r4, r3
 8012cf0:	d101      	bne.n	8012cf6 <_fflush_r+0x62>
 8012cf2:	68ac      	ldr	r4, [r5, #8]
 8012cf4:	e7df      	b.n	8012cb6 <_fflush_r+0x22>
 8012cf6:	4b04      	ldr	r3, [pc, #16]	; (8012d08 <_fflush_r+0x74>)
 8012cf8:	429c      	cmp	r4, r3
 8012cfa:	bf08      	it	eq
 8012cfc:	68ec      	ldreq	r4, [r5, #12]
 8012cfe:	e7da      	b.n	8012cb6 <_fflush_r+0x22>
 8012d00:	08014ac4 	.word	0x08014ac4
 8012d04:	08014ae4 	.word	0x08014ae4
 8012d08:	08014aa4 	.word	0x08014aa4

08012d0c <std>:
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	b510      	push	{r4, lr}
 8012d10:	4604      	mov	r4, r0
 8012d12:	e9c0 3300 	strd	r3, r3, [r0]
 8012d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d1a:	6083      	str	r3, [r0, #8]
 8012d1c:	8181      	strh	r1, [r0, #12]
 8012d1e:	6643      	str	r3, [r0, #100]	; 0x64
 8012d20:	81c2      	strh	r2, [r0, #14]
 8012d22:	6183      	str	r3, [r0, #24]
 8012d24:	4619      	mov	r1, r3
 8012d26:	2208      	movs	r2, #8
 8012d28:	305c      	adds	r0, #92	; 0x5c
 8012d2a:	f7ff f847 	bl	8011dbc <memset>
 8012d2e:	4b05      	ldr	r3, [pc, #20]	; (8012d44 <std+0x38>)
 8012d30:	6263      	str	r3, [r4, #36]	; 0x24
 8012d32:	4b05      	ldr	r3, [pc, #20]	; (8012d48 <std+0x3c>)
 8012d34:	62a3      	str	r3, [r4, #40]	; 0x28
 8012d36:	4b05      	ldr	r3, [pc, #20]	; (8012d4c <std+0x40>)
 8012d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012d3a:	4b05      	ldr	r3, [pc, #20]	; (8012d50 <std+0x44>)
 8012d3c:	6224      	str	r4, [r4, #32]
 8012d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8012d40:	bd10      	pop	{r4, pc}
 8012d42:	bf00      	nop
 8012d44:	080130b1 	.word	0x080130b1
 8012d48:	080130d3 	.word	0x080130d3
 8012d4c:	0801310b 	.word	0x0801310b
 8012d50:	0801312f 	.word	0x0801312f

08012d54 <_cleanup_r>:
 8012d54:	4901      	ldr	r1, [pc, #4]	; (8012d5c <_cleanup_r+0x8>)
 8012d56:	f000 b8af 	b.w	8012eb8 <_fwalk_reent>
 8012d5a:	bf00      	nop
 8012d5c:	08012c95 	.word	0x08012c95

08012d60 <__sfmoreglue>:
 8012d60:	b570      	push	{r4, r5, r6, lr}
 8012d62:	2268      	movs	r2, #104	; 0x68
 8012d64:	1e4d      	subs	r5, r1, #1
 8012d66:	4355      	muls	r5, r2
 8012d68:	460e      	mov	r6, r1
 8012d6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012d6e:	f7ff f899 	bl	8011ea4 <_malloc_r>
 8012d72:	4604      	mov	r4, r0
 8012d74:	b140      	cbz	r0, 8012d88 <__sfmoreglue+0x28>
 8012d76:	2100      	movs	r1, #0
 8012d78:	e9c0 1600 	strd	r1, r6, [r0]
 8012d7c:	300c      	adds	r0, #12
 8012d7e:	60a0      	str	r0, [r4, #8]
 8012d80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012d84:	f7ff f81a 	bl	8011dbc <memset>
 8012d88:	4620      	mov	r0, r4
 8012d8a:	bd70      	pop	{r4, r5, r6, pc}

08012d8c <__sfp_lock_acquire>:
 8012d8c:	4801      	ldr	r0, [pc, #4]	; (8012d94 <__sfp_lock_acquire+0x8>)
 8012d8e:	f000 b8b3 	b.w	8012ef8 <__retarget_lock_acquire_recursive>
 8012d92:	bf00      	nop
 8012d94:	2000619d 	.word	0x2000619d

08012d98 <__sfp_lock_release>:
 8012d98:	4801      	ldr	r0, [pc, #4]	; (8012da0 <__sfp_lock_release+0x8>)
 8012d9a:	f000 b8ae 	b.w	8012efa <__retarget_lock_release_recursive>
 8012d9e:	bf00      	nop
 8012da0:	2000619d 	.word	0x2000619d

08012da4 <__sinit_lock_acquire>:
 8012da4:	4801      	ldr	r0, [pc, #4]	; (8012dac <__sinit_lock_acquire+0x8>)
 8012da6:	f000 b8a7 	b.w	8012ef8 <__retarget_lock_acquire_recursive>
 8012daa:	bf00      	nop
 8012dac:	2000619e 	.word	0x2000619e

08012db0 <__sinit_lock_release>:
 8012db0:	4801      	ldr	r0, [pc, #4]	; (8012db8 <__sinit_lock_release+0x8>)
 8012db2:	f000 b8a2 	b.w	8012efa <__retarget_lock_release_recursive>
 8012db6:	bf00      	nop
 8012db8:	2000619e 	.word	0x2000619e

08012dbc <__sinit>:
 8012dbc:	b510      	push	{r4, lr}
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	f7ff fff0 	bl	8012da4 <__sinit_lock_acquire>
 8012dc4:	69a3      	ldr	r3, [r4, #24]
 8012dc6:	b11b      	cbz	r3, 8012dd0 <__sinit+0x14>
 8012dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dcc:	f7ff bff0 	b.w	8012db0 <__sinit_lock_release>
 8012dd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012dd4:	6523      	str	r3, [r4, #80]	; 0x50
 8012dd6:	4b13      	ldr	r3, [pc, #76]	; (8012e24 <__sinit+0x68>)
 8012dd8:	4a13      	ldr	r2, [pc, #76]	; (8012e28 <__sinit+0x6c>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	62a2      	str	r2, [r4, #40]	; 0x28
 8012dde:	42a3      	cmp	r3, r4
 8012de0:	bf04      	itt	eq
 8012de2:	2301      	moveq	r3, #1
 8012de4:	61a3      	streq	r3, [r4, #24]
 8012de6:	4620      	mov	r0, r4
 8012de8:	f000 f820 	bl	8012e2c <__sfp>
 8012dec:	6060      	str	r0, [r4, #4]
 8012dee:	4620      	mov	r0, r4
 8012df0:	f000 f81c 	bl	8012e2c <__sfp>
 8012df4:	60a0      	str	r0, [r4, #8]
 8012df6:	4620      	mov	r0, r4
 8012df8:	f000 f818 	bl	8012e2c <__sfp>
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	60e0      	str	r0, [r4, #12]
 8012e00:	2104      	movs	r1, #4
 8012e02:	6860      	ldr	r0, [r4, #4]
 8012e04:	f7ff ff82 	bl	8012d0c <std>
 8012e08:	68a0      	ldr	r0, [r4, #8]
 8012e0a:	2201      	movs	r2, #1
 8012e0c:	2109      	movs	r1, #9
 8012e0e:	f7ff ff7d 	bl	8012d0c <std>
 8012e12:	68e0      	ldr	r0, [r4, #12]
 8012e14:	2202      	movs	r2, #2
 8012e16:	2112      	movs	r1, #18
 8012e18:	f7ff ff78 	bl	8012d0c <std>
 8012e1c:	2301      	movs	r3, #1
 8012e1e:	61a3      	str	r3, [r4, #24]
 8012e20:	e7d2      	b.n	8012dc8 <__sinit+0xc>
 8012e22:	bf00      	nop
 8012e24:	080149bc 	.word	0x080149bc
 8012e28:	08012d55 	.word	0x08012d55

08012e2c <__sfp>:
 8012e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e2e:	4607      	mov	r7, r0
 8012e30:	f7ff ffac 	bl	8012d8c <__sfp_lock_acquire>
 8012e34:	4b1e      	ldr	r3, [pc, #120]	; (8012eb0 <__sfp+0x84>)
 8012e36:	681e      	ldr	r6, [r3, #0]
 8012e38:	69b3      	ldr	r3, [r6, #24]
 8012e3a:	b913      	cbnz	r3, 8012e42 <__sfp+0x16>
 8012e3c:	4630      	mov	r0, r6
 8012e3e:	f7ff ffbd 	bl	8012dbc <__sinit>
 8012e42:	3648      	adds	r6, #72	; 0x48
 8012e44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012e48:	3b01      	subs	r3, #1
 8012e4a:	d503      	bpl.n	8012e54 <__sfp+0x28>
 8012e4c:	6833      	ldr	r3, [r6, #0]
 8012e4e:	b30b      	cbz	r3, 8012e94 <__sfp+0x68>
 8012e50:	6836      	ldr	r6, [r6, #0]
 8012e52:	e7f7      	b.n	8012e44 <__sfp+0x18>
 8012e54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012e58:	b9d5      	cbnz	r5, 8012e90 <__sfp+0x64>
 8012e5a:	4b16      	ldr	r3, [pc, #88]	; (8012eb4 <__sfp+0x88>)
 8012e5c:	60e3      	str	r3, [r4, #12]
 8012e5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012e62:	6665      	str	r5, [r4, #100]	; 0x64
 8012e64:	f000 f847 	bl	8012ef6 <__retarget_lock_init_recursive>
 8012e68:	f7ff ff96 	bl	8012d98 <__sfp_lock_release>
 8012e6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012e70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012e74:	6025      	str	r5, [r4, #0]
 8012e76:	61a5      	str	r5, [r4, #24]
 8012e78:	2208      	movs	r2, #8
 8012e7a:	4629      	mov	r1, r5
 8012e7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012e80:	f7fe ff9c 	bl	8011dbc <memset>
 8012e84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012e88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e90:	3468      	adds	r4, #104	; 0x68
 8012e92:	e7d9      	b.n	8012e48 <__sfp+0x1c>
 8012e94:	2104      	movs	r1, #4
 8012e96:	4638      	mov	r0, r7
 8012e98:	f7ff ff62 	bl	8012d60 <__sfmoreglue>
 8012e9c:	4604      	mov	r4, r0
 8012e9e:	6030      	str	r0, [r6, #0]
 8012ea0:	2800      	cmp	r0, #0
 8012ea2:	d1d5      	bne.n	8012e50 <__sfp+0x24>
 8012ea4:	f7ff ff78 	bl	8012d98 <__sfp_lock_release>
 8012ea8:	230c      	movs	r3, #12
 8012eaa:	603b      	str	r3, [r7, #0]
 8012eac:	e7ee      	b.n	8012e8c <__sfp+0x60>
 8012eae:	bf00      	nop
 8012eb0:	080149bc 	.word	0x080149bc
 8012eb4:	ffff0001 	.word	0xffff0001

08012eb8 <_fwalk_reent>:
 8012eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ebc:	4606      	mov	r6, r0
 8012ebe:	4688      	mov	r8, r1
 8012ec0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012ec4:	2700      	movs	r7, #0
 8012ec6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012eca:	f1b9 0901 	subs.w	r9, r9, #1
 8012ece:	d505      	bpl.n	8012edc <_fwalk_reent+0x24>
 8012ed0:	6824      	ldr	r4, [r4, #0]
 8012ed2:	2c00      	cmp	r4, #0
 8012ed4:	d1f7      	bne.n	8012ec6 <_fwalk_reent+0xe>
 8012ed6:	4638      	mov	r0, r7
 8012ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012edc:	89ab      	ldrh	r3, [r5, #12]
 8012ede:	2b01      	cmp	r3, #1
 8012ee0:	d907      	bls.n	8012ef2 <_fwalk_reent+0x3a>
 8012ee2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ee6:	3301      	adds	r3, #1
 8012ee8:	d003      	beq.n	8012ef2 <_fwalk_reent+0x3a>
 8012eea:	4629      	mov	r1, r5
 8012eec:	4630      	mov	r0, r6
 8012eee:	47c0      	blx	r8
 8012ef0:	4307      	orrs	r7, r0
 8012ef2:	3568      	adds	r5, #104	; 0x68
 8012ef4:	e7e9      	b.n	8012eca <_fwalk_reent+0x12>

08012ef6 <__retarget_lock_init_recursive>:
 8012ef6:	4770      	bx	lr

08012ef8 <__retarget_lock_acquire_recursive>:
 8012ef8:	4770      	bx	lr

08012efa <__retarget_lock_release_recursive>:
 8012efa:	4770      	bx	lr

08012efc <__swhatbuf_r>:
 8012efc:	b570      	push	{r4, r5, r6, lr}
 8012efe:	460e      	mov	r6, r1
 8012f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f04:	2900      	cmp	r1, #0
 8012f06:	b096      	sub	sp, #88	; 0x58
 8012f08:	4614      	mov	r4, r2
 8012f0a:	461d      	mov	r5, r3
 8012f0c:	da08      	bge.n	8012f20 <__swhatbuf_r+0x24>
 8012f0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012f12:	2200      	movs	r2, #0
 8012f14:	602a      	str	r2, [r5, #0]
 8012f16:	061a      	lsls	r2, r3, #24
 8012f18:	d410      	bmi.n	8012f3c <__swhatbuf_r+0x40>
 8012f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f1e:	e00e      	b.n	8012f3e <__swhatbuf_r+0x42>
 8012f20:	466a      	mov	r2, sp
 8012f22:	f000 f92b 	bl	801317c <_fstat_r>
 8012f26:	2800      	cmp	r0, #0
 8012f28:	dbf1      	blt.n	8012f0e <__swhatbuf_r+0x12>
 8012f2a:	9a01      	ldr	r2, [sp, #4]
 8012f2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012f30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012f34:	425a      	negs	r2, r3
 8012f36:	415a      	adcs	r2, r3
 8012f38:	602a      	str	r2, [r5, #0]
 8012f3a:	e7ee      	b.n	8012f1a <__swhatbuf_r+0x1e>
 8012f3c:	2340      	movs	r3, #64	; 0x40
 8012f3e:	2000      	movs	r0, #0
 8012f40:	6023      	str	r3, [r4, #0]
 8012f42:	b016      	add	sp, #88	; 0x58
 8012f44:	bd70      	pop	{r4, r5, r6, pc}
	...

08012f48 <__smakebuf_r>:
 8012f48:	898b      	ldrh	r3, [r1, #12]
 8012f4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f4c:	079d      	lsls	r5, r3, #30
 8012f4e:	4606      	mov	r6, r0
 8012f50:	460c      	mov	r4, r1
 8012f52:	d507      	bpl.n	8012f64 <__smakebuf_r+0x1c>
 8012f54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012f58:	6023      	str	r3, [r4, #0]
 8012f5a:	6123      	str	r3, [r4, #16]
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	6163      	str	r3, [r4, #20]
 8012f60:	b002      	add	sp, #8
 8012f62:	bd70      	pop	{r4, r5, r6, pc}
 8012f64:	ab01      	add	r3, sp, #4
 8012f66:	466a      	mov	r2, sp
 8012f68:	f7ff ffc8 	bl	8012efc <__swhatbuf_r>
 8012f6c:	9900      	ldr	r1, [sp, #0]
 8012f6e:	4605      	mov	r5, r0
 8012f70:	4630      	mov	r0, r6
 8012f72:	f7fe ff97 	bl	8011ea4 <_malloc_r>
 8012f76:	b948      	cbnz	r0, 8012f8c <__smakebuf_r+0x44>
 8012f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f7c:	059a      	lsls	r2, r3, #22
 8012f7e:	d4ef      	bmi.n	8012f60 <__smakebuf_r+0x18>
 8012f80:	f023 0303 	bic.w	r3, r3, #3
 8012f84:	f043 0302 	orr.w	r3, r3, #2
 8012f88:	81a3      	strh	r3, [r4, #12]
 8012f8a:	e7e3      	b.n	8012f54 <__smakebuf_r+0xc>
 8012f8c:	4b0d      	ldr	r3, [pc, #52]	; (8012fc4 <__smakebuf_r+0x7c>)
 8012f8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012f90:	89a3      	ldrh	r3, [r4, #12]
 8012f92:	6020      	str	r0, [r4, #0]
 8012f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f98:	81a3      	strh	r3, [r4, #12]
 8012f9a:	9b00      	ldr	r3, [sp, #0]
 8012f9c:	6163      	str	r3, [r4, #20]
 8012f9e:	9b01      	ldr	r3, [sp, #4]
 8012fa0:	6120      	str	r0, [r4, #16]
 8012fa2:	b15b      	cbz	r3, 8012fbc <__smakebuf_r+0x74>
 8012fa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fa8:	4630      	mov	r0, r6
 8012faa:	f000 f8f9 	bl	80131a0 <_isatty_r>
 8012fae:	b128      	cbz	r0, 8012fbc <__smakebuf_r+0x74>
 8012fb0:	89a3      	ldrh	r3, [r4, #12]
 8012fb2:	f023 0303 	bic.w	r3, r3, #3
 8012fb6:	f043 0301 	orr.w	r3, r3, #1
 8012fba:	81a3      	strh	r3, [r4, #12]
 8012fbc:	89a0      	ldrh	r0, [r4, #12]
 8012fbe:	4305      	orrs	r5, r0
 8012fc0:	81a5      	strh	r5, [r4, #12]
 8012fc2:	e7cd      	b.n	8012f60 <__smakebuf_r+0x18>
 8012fc4:	08012d55 	.word	0x08012d55

08012fc8 <_realloc_r>:
 8012fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fcc:	4680      	mov	r8, r0
 8012fce:	4614      	mov	r4, r2
 8012fd0:	460e      	mov	r6, r1
 8012fd2:	b921      	cbnz	r1, 8012fde <_realloc_r+0x16>
 8012fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd8:	4611      	mov	r1, r2
 8012fda:	f7fe bf63 	b.w	8011ea4 <_malloc_r>
 8012fde:	b92a      	cbnz	r2, 8012fec <_realloc_r+0x24>
 8012fe0:	f7fe fef4 	bl	8011dcc <_free_r>
 8012fe4:	4625      	mov	r5, r4
 8012fe6:	4628      	mov	r0, r5
 8012fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fec:	f000 f8fa 	bl	80131e4 <_malloc_usable_size_r>
 8012ff0:	4284      	cmp	r4, r0
 8012ff2:	4607      	mov	r7, r0
 8012ff4:	d802      	bhi.n	8012ffc <_realloc_r+0x34>
 8012ff6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012ffa:	d812      	bhi.n	8013022 <_realloc_r+0x5a>
 8012ffc:	4621      	mov	r1, r4
 8012ffe:	4640      	mov	r0, r8
 8013000:	f7fe ff50 	bl	8011ea4 <_malloc_r>
 8013004:	4605      	mov	r5, r0
 8013006:	2800      	cmp	r0, #0
 8013008:	d0ed      	beq.n	8012fe6 <_realloc_r+0x1e>
 801300a:	42bc      	cmp	r4, r7
 801300c:	4622      	mov	r2, r4
 801300e:	4631      	mov	r1, r6
 8013010:	bf28      	it	cs
 8013012:	463a      	movcs	r2, r7
 8013014:	f7fe feaa 	bl	8011d6c <memcpy>
 8013018:	4631      	mov	r1, r6
 801301a:	4640      	mov	r0, r8
 801301c:	f7fe fed6 	bl	8011dcc <_free_r>
 8013020:	e7e1      	b.n	8012fe6 <_realloc_r+0x1e>
 8013022:	4635      	mov	r5, r6
 8013024:	e7df      	b.n	8012fe6 <_realloc_r+0x1e>

08013026 <_raise_r>:
 8013026:	291f      	cmp	r1, #31
 8013028:	b538      	push	{r3, r4, r5, lr}
 801302a:	4604      	mov	r4, r0
 801302c:	460d      	mov	r5, r1
 801302e:	d904      	bls.n	801303a <_raise_r+0x14>
 8013030:	2316      	movs	r3, #22
 8013032:	6003      	str	r3, [r0, #0]
 8013034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013038:	bd38      	pop	{r3, r4, r5, pc}
 801303a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801303c:	b112      	cbz	r2, 8013044 <_raise_r+0x1e>
 801303e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013042:	b94b      	cbnz	r3, 8013058 <_raise_r+0x32>
 8013044:	4620      	mov	r0, r4
 8013046:	f000 f831 	bl	80130ac <_getpid_r>
 801304a:	462a      	mov	r2, r5
 801304c:	4601      	mov	r1, r0
 801304e:	4620      	mov	r0, r4
 8013050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013054:	f000 b818 	b.w	8013088 <_kill_r>
 8013058:	2b01      	cmp	r3, #1
 801305a:	d00a      	beq.n	8013072 <_raise_r+0x4c>
 801305c:	1c59      	adds	r1, r3, #1
 801305e:	d103      	bne.n	8013068 <_raise_r+0x42>
 8013060:	2316      	movs	r3, #22
 8013062:	6003      	str	r3, [r0, #0]
 8013064:	2001      	movs	r0, #1
 8013066:	e7e7      	b.n	8013038 <_raise_r+0x12>
 8013068:	2400      	movs	r4, #0
 801306a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801306e:	4628      	mov	r0, r5
 8013070:	4798      	blx	r3
 8013072:	2000      	movs	r0, #0
 8013074:	e7e0      	b.n	8013038 <_raise_r+0x12>
	...

08013078 <raise>:
 8013078:	4b02      	ldr	r3, [pc, #8]	; (8013084 <raise+0xc>)
 801307a:	4601      	mov	r1, r0
 801307c:	6818      	ldr	r0, [r3, #0]
 801307e:	f7ff bfd2 	b.w	8013026 <_raise_r>
 8013082:	bf00      	nop
 8013084:	200006b8 	.word	0x200006b8

08013088 <_kill_r>:
 8013088:	b538      	push	{r3, r4, r5, lr}
 801308a:	4d07      	ldr	r5, [pc, #28]	; (80130a8 <_kill_r+0x20>)
 801308c:	2300      	movs	r3, #0
 801308e:	4604      	mov	r4, r0
 8013090:	4608      	mov	r0, r1
 8013092:	4611      	mov	r1, r2
 8013094:	602b      	str	r3, [r5, #0]
 8013096:	f7ef fde7 	bl	8002c68 <_kill>
 801309a:	1c43      	adds	r3, r0, #1
 801309c:	d102      	bne.n	80130a4 <_kill_r+0x1c>
 801309e:	682b      	ldr	r3, [r5, #0]
 80130a0:	b103      	cbz	r3, 80130a4 <_kill_r+0x1c>
 80130a2:	6023      	str	r3, [r4, #0]
 80130a4:	bd38      	pop	{r3, r4, r5, pc}
 80130a6:	bf00      	nop
 80130a8:	20006198 	.word	0x20006198

080130ac <_getpid_r>:
 80130ac:	f7ef bdda 	b.w	8002c64 <_getpid>

080130b0 <__sread>:
 80130b0:	b510      	push	{r4, lr}
 80130b2:	460c      	mov	r4, r1
 80130b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130b8:	f000 f89c 	bl	80131f4 <_read_r>
 80130bc:	2800      	cmp	r0, #0
 80130be:	bfab      	itete	ge
 80130c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80130c2:	89a3      	ldrhlt	r3, [r4, #12]
 80130c4:	181b      	addge	r3, r3, r0
 80130c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80130ca:	bfac      	ite	ge
 80130cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80130ce:	81a3      	strhlt	r3, [r4, #12]
 80130d0:	bd10      	pop	{r4, pc}

080130d2 <__swrite>:
 80130d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130d6:	461f      	mov	r7, r3
 80130d8:	898b      	ldrh	r3, [r1, #12]
 80130da:	05db      	lsls	r3, r3, #23
 80130dc:	4605      	mov	r5, r0
 80130de:	460c      	mov	r4, r1
 80130e0:	4616      	mov	r6, r2
 80130e2:	d505      	bpl.n	80130f0 <__swrite+0x1e>
 80130e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130e8:	2302      	movs	r3, #2
 80130ea:	2200      	movs	r2, #0
 80130ec:	f000 f868 	bl	80131c0 <_lseek_r>
 80130f0:	89a3      	ldrh	r3, [r4, #12]
 80130f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80130fa:	81a3      	strh	r3, [r4, #12]
 80130fc:	4632      	mov	r2, r6
 80130fe:	463b      	mov	r3, r7
 8013100:	4628      	mov	r0, r5
 8013102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013106:	f000 b817 	b.w	8013138 <_write_r>

0801310a <__sseek>:
 801310a:	b510      	push	{r4, lr}
 801310c:	460c      	mov	r4, r1
 801310e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013112:	f000 f855 	bl	80131c0 <_lseek_r>
 8013116:	1c43      	adds	r3, r0, #1
 8013118:	89a3      	ldrh	r3, [r4, #12]
 801311a:	bf15      	itete	ne
 801311c:	6560      	strne	r0, [r4, #84]	; 0x54
 801311e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013122:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013126:	81a3      	strheq	r3, [r4, #12]
 8013128:	bf18      	it	ne
 801312a:	81a3      	strhne	r3, [r4, #12]
 801312c:	bd10      	pop	{r4, pc}

0801312e <__sclose>:
 801312e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013132:	f000 b813 	b.w	801315c <_close_r>
	...

08013138 <_write_r>:
 8013138:	b538      	push	{r3, r4, r5, lr}
 801313a:	4d07      	ldr	r5, [pc, #28]	; (8013158 <_write_r+0x20>)
 801313c:	4604      	mov	r4, r0
 801313e:	4608      	mov	r0, r1
 8013140:	4611      	mov	r1, r2
 8013142:	2200      	movs	r2, #0
 8013144:	602a      	str	r2, [r5, #0]
 8013146:	461a      	mov	r2, r3
 8013148:	f7ef fdaa 	bl	8002ca0 <_write>
 801314c:	1c43      	adds	r3, r0, #1
 801314e:	d102      	bne.n	8013156 <_write_r+0x1e>
 8013150:	682b      	ldr	r3, [r5, #0]
 8013152:	b103      	cbz	r3, 8013156 <_write_r+0x1e>
 8013154:	6023      	str	r3, [r4, #0]
 8013156:	bd38      	pop	{r3, r4, r5, pc}
 8013158:	20006198 	.word	0x20006198

0801315c <_close_r>:
 801315c:	b538      	push	{r3, r4, r5, lr}
 801315e:	4d06      	ldr	r5, [pc, #24]	; (8013178 <_close_r+0x1c>)
 8013160:	2300      	movs	r3, #0
 8013162:	4604      	mov	r4, r0
 8013164:	4608      	mov	r0, r1
 8013166:	602b      	str	r3, [r5, #0]
 8013168:	f7ef fdc4 	bl	8002cf4 <_close>
 801316c:	1c43      	adds	r3, r0, #1
 801316e:	d102      	bne.n	8013176 <_close_r+0x1a>
 8013170:	682b      	ldr	r3, [r5, #0]
 8013172:	b103      	cbz	r3, 8013176 <_close_r+0x1a>
 8013174:	6023      	str	r3, [r4, #0]
 8013176:	bd38      	pop	{r3, r4, r5, pc}
 8013178:	20006198 	.word	0x20006198

0801317c <_fstat_r>:
 801317c:	b538      	push	{r3, r4, r5, lr}
 801317e:	4d07      	ldr	r5, [pc, #28]	; (801319c <_fstat_r+0x20>)
 8013180:	2300      	movs	r3, #0
 8013182:	4604      	mov	r4, r0
 8013184:	4608      	mov	r0, r1
 8013186:	4611      	mov	r1, r2
 8013188:	602b      	str	r3, [r5, #0]
 801318a:	f7ef fdb7 	bl	8002cfc <_fstat>
 801318e:	1c43      	adds	r3, r0, #1
 8013190:	d102      	bne.n	8013198 <_fstat_r+0x1c>
 8013192:	682b      	ldr	r3, [r5, #0]
 8013194:	b103      	cbz	r3, 8013198 <_fstat_r+0x1c>
 8013196:	6023      	str	r3, [r4, #0]
 8013198:	bd38      	pop	{r3, r4, r5, pc}
 801319a:	bf00      	nop
 801319c:	20006198 	.word	0x20006198

080131a0 <_isatty_r>:
 80131a0:	b538      	push	{r3, r4, r5, lr}
 80131a2:	4d06      	ldr	r5, [pc, #24]	; (80131bc <_isatty_r+0x1c>)
 80131a4:	2300      	movs	r3, #0
 80131a6:	4604      	mov	r4, r0
 80131a8:	4608      	mov	r0, r1
 80131aa:	602b      	str	r3, [r5, #0]
 80131ac:	f7ef fdac 	bl	8002d08 <_isatty>
 80131b0:	1c43      	adds	r3, r0, #1
 80131b2:	d102      	bne.n	80131ba <_isatty_r+0x1a>
 80131b4:	682b      	ldr	r3, [r5, #0]
 80131b6:	b103      	cbz	r3, 80131ba <_isatty_r+0x1a>
 80131b8:	6023      	str	r3, [r4, #0]
 80131ba:	bd38      	pop	{r3, r4, r5, pc}
 80131bc:	20006198 	.word	0x20006198

080131c0 <_lseek_r>:
 80131c0:	b538      	push	{r3, r4, r5, lr}
 80131c2:	4d07      	ldr	r5, [pc, #28]	; (80131e0 <_lseek_r+0x20>)
 80131c4:	4604      	mov	r4, r0
 80131c6:	4608      	mov	r0, r1
 80131c8:	4611      	mov	r1, r2
 80131ca:	2200      	movs	r2, #0
 80131cc:	602a      	str	r2, [r5, #0]
 80131ce:	461a      	mov	r2, r3
 80131d0:	f7ef fd9c 	bl	8002d0c <_lseek>
 80131d4:	1c43      	adds	r3, r0, #1
 80131d6:	d102      	bne.n	80131de <_lseek_r+0x1e>
 80131d8:	682b      	ldr	r3, [r5, #0]
 80131da:	b103      	cbz	r3, 80131de <_lseek_r+0x1e>
 80131dc:	6023      	str	r3, [r4, #0]
 80131de:	bd38      	pop	{r3, r4, r5, pc}
 80131e0:	20006198 	.word	0x20006198

080131e4 <_malloc_usable_size_r>:
 80131e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80131e8:	1f18      	subs	r0, r3, #4
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	bfbc      	itt	lt
 80131ee:	580b      	ldrlt	r3, [r1, r0]
 80131f0:	18c0      	addlt	r0, r0, r3
 80131f2:	4770      	bx	lr

080131f4 <_read_r>:
 80131f4:	b538      	push	{r3, r4, r5, lr}
 80131f6:	4d07      	ldr	r5, [pc, #28]	; (8013214 <_read_r+0x20>)
 80131f8:	4604      	mov	r4, r0
 80131fa:	4608      	mov	r0, r1
 80131fc:	4611      	mov	r1, r2
 80131fe:	2200      	movs	r2, #0
 8013200:	602a      	str	r2, [r5, #0]
 8013202:	461a      	mov	r2, r3
 8013204:	f7ef fd3e 	bl	8002c84 <_read>
 8013208:	1c43      	adds	r3, r0, #1
 801320a:	d102      	bne.n	8013212 <_read_r+0x1e>
 801320c:	682b      	ldr	r3, [r5, #0]
 801320e:	b103      	cbz	r3, 8013212 <_read_r+0x1e>
 8013210:	6023      	str	r3, [r4, #0]
 8013212:	bd38      	pop	{r3, r4, r5, pc}
 8013214:	20006198 	.word	0x20006198

08013218 <sin>:
 8013218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801321a:	ec53 2b10 	vmov	r2, r3, d0
 801321e:	4828      	ldr	r0, [pc, #160]	; (80132c0 <sin+0xa8>)
 8013220:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013224:	4281      	cmp	r1, r0
 8013226:	dc07      	bgt.n	8013238 <sin+0x20>
 8013228:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80132b8 <sin+0xa0>
 801322c:	2000      	movs	r0, #0
 801322e:	b005      	add	sp, #20
 8013230:	f85d eb04 	ldr.w	lr, [sp], #4
 8013234:	f000 be6c 	b.w	8013f10 <__kernel_sin>
 8013238:	4822      	ldr	r0, [pc, #136]	; (80132c4 <sin+0xac>)
 801323a:	4281      	cmp	r1, r0
 801323c:	dd09      	ble.n	8013252 <sin+0x3a>
 801323e:	ee10 0a10 	vmov	r0, s0
 8013242:	4619      	mov	r1, r3
 8013244:	f7ed f840 	bl	80002c8 <__aeabi_dsub>
 8013248:	ec41 0b10 	vmov	d0, r0, r1
 801324c:	b005      	add	sp, #20
 801324e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013252:	4668      	mov	r0, sp
 8013254:	f000 f838 	bl	80132c8 <__ieee754_rem_pio2>
 8013258:	f000 0003 	and.w	r0, r0, #3
 801325c:	2801      	cmp	r0, #1
 801325e:	d00c      	beq.n	801327a <sin+0x62>
 8013260:	2802      	cmp	r0, #2
 8013262:	d011      	beq.n	8013288 <sin+0x70>
 8013264:	b9f0      	cbnz	r0, 80132a4 <sin+0x8c>
 8013266:	ed9d 1b02 	vldr	d1, [sp, #8]
 801326a:	ed9d 0b00 	vldr	d0, [sp]
 801326e:	2001      	movs	r0, #1
 8013270:	f000 fe4e 	bl	8013f10 <__kernel_sin>
 8013274:	ec51 0b10 	vmov	r0, r1, d0
 8013278:	e7e6      	b.n	8013248 <sin+0x30>
 801327a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801327e:	ed9d 0b00 	vldr	d0, [sp]
 8013282:	f000 fa2d 	bl	80136e0 <__kernel_cos>
 8013286:	e7f5      	b.n	8013274 <sin+0x5c>
 8013288:	ed9d 1b02 	vldr	d1, [sp, #8]
 801328c:	ed9d 0b00 	vldr	d0, [sp]
 8013290:	2001      	movs	r0, #1
 8013292:	f000 fe3d 	bl	8013f10 <__kernel_sin>
 8013296:	ec53 2b10 	vmov	r2, r3, d0
 801329a:	ee10 0a10 	vmov	r0, s0
 801329e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80132a2:	e7d1      	b.n	8013248 <sin+0x30>
 80132a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80132a8:	ed9d 0b00 	vldr	d0, [sp]
 80132ac:	f000 fa18 	bl	80136e0 <__kernel_cos>
 80132b0:	e7f1      	b.n	8013296 <sin+0x7e>
 80132b2:	bf00      	nop
 80132b4:	f3af 8000 	nop.w
	...
 80132c0:	3fe921fb 	.word	0x3fe921fb
 80132c4:	7fefffff 	.word	0x7fefffff

080132c8 <__ieee754_rem_pio2>:
 80132c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132cc:	ed2d 8b02 	vpush	{d8}
 80132d0:	ec55 4b10 	vmov	r4, r5, d0
 80132d4:	4bca      	ldr	r3, [pc, #808]	; (8013600 <__ieee754_rem_pio2+0x338>)
 80132d6:	b08b      	sub	sp, #44	; 0x2c
 80132d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80132dc:	4598      	cmp	r8, r3
 80132de:	4682      	mov	sl, r0
 80132e0:	9502      	str	r5, [sp, #8]
 80132e2:	dc08      	bgt.n	80132f6 <__ieee754_rem_pio2+0x2e>
 80132e4:	2200      	movs	r2, #0
 80132e6:	2300      	movs	r3, #0
 80132e8:	ed80 0b00 	vstr	d0, [r0]
 80132ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80132f0:	f04f 0b00 	mov.w	fp, #0
 80132f4:	e028      	b.n	8013348 <__ieee754_rem_pio2+0x80>
 80132f6:	4bc3      	ldr	r3, [pc, #780]	; (8013604 <__ieee754_rem_pio2+0x33c>)
 80132f8:	4598      	cmp	r8, r3
 80132fa:	dc78      	bgt.n	80133ee <__ieee754_rem_pio2+0x126>
 80132fc:	9b02      	ldr	r3, [sp, #8]
 80132fe:	4ec2      	ldr	r6, [pc, #776]	; (8013608 <__ieee754_rem_pio2+0x340>)
 8013300:	2b00      	cmp	r3, #0
 8013302:	ee10 0a10 	vmov	r0, s0
 8013306:	a3b0      	add	r3, pc, #704	; (adr r3, 80135c8 <__ieee754_rem_pio2+0x300>)
 8013308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330c:	4629      	mov	r1, r5
 801330e:	dd39      	ble.n	8013384 <__ieee754_rem_pio2+0xbc>
 8013310:	f7ec ffda 	bl	80002c8 <__aeabi_dsub>
 8013314:	45b0      	cmp	r8, r6
 8013316:	4604      	mov	r4, r0
 8013318:	460d      	mov	r5, r1
 801331a:	d01b      	beq.n	8013354 <__ieee754_rem_pio2+0x8c>
 801331c:	a3ac      	add	r3, pc, #688	; (adr r3, 80135d0 <__ieee754_rem_pio2+0x308>)
 801331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013322:	f7ec ffd1 	bl	80002c8 <__aeabi_dsub>
 8013326:	4602      	mov	r2, r0
 8013328:	460b      	mov	r3, r1
 801332a:	e9ca 2300 	strd	r2, r3, [sl]
 801332e:	4620      	mov	r0, r4
 8013330:	4629      	mov	r1, r5
 8013332:	f7ec ffc9 	bl	80002c8 <__aeabi_dsub>
 8013336:	a3a6      	add	r3, pc, #664	; (adr r3, 80135d0 <__ieee754_rem_pio2+0x308>)
 8013338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333c:	f7ec ffc4 	bl	80002c8 <__aeabi_dsub>
 8013340:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013344:	f04f 0b01 	mov.w	fp, #1
 8013348:	4658      	mov	r0, fp
 801334a:	b00b      	add	sp, #44	; 0x2c
 801334c:	ecbd 8b02 	vpop	{d8}
 8013350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013354:	a3a0      	add	r3, pc, #640	; (adr r3, 80135d8 <__ieee754_rem_pio2+0x310>)
 8013356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335a:	f7ec ffb5 	bl	80002c8 <__aeabi_dsub>
 801335e:	a3a0      	add	r3, pc, #640	; (adr r3, 80135e0 <__ieee754_rem_pio2+0x318>)
 8013360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013364:	4604      	mov	r4, r0
 8013366:	460d      	mov	r5, r1
 8013368:	f7ec ffae 	bl	80002c8 <__aeabi_dsub>
 801336c:	4602      	mov	r2, r0
 801336e:	460b      	mov	r3, r1
 8013370:	e9ca 2300 	strd	r2, r3, [sl]
 8013374:	4620      	mov	r0, r4
 8013376:	4629      	mov	r1, r5
 8013378:	f7ec ffa6 	bl	80002c8 <__aeabi_dsub>
 801337c:	a398      	add	r3, pc, #608	; (adr r3, 80135e0 <__ieee754_rem_pio2+0x318>)
 801337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013382:	e7db      	b.n	801333c <__ieee754_rem_pio2+0x74>
 8013384:	f7ec ffa2 	bl	80002cc <__adddf3>
 8013388:	45b0      	cmp	r8, r6
 801338a:	4604      	mov	r4, r0
 801338c:	460d      	mov	r5, r1
 801338e:	d016      	beq.n	80133be <__ieee754_rem_pio2+0xf6>
 8013390:	a38f      	add	r3, pc, #572	; (adr r3, 80135d0 <__ieee754_rem_pio2+0x308>)
 8013392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013396:	f7ec ff99 	bl	80002cc <__adddf3>
 801339a:	4602      	mov	r2, r0
 801339c:	460b      	mov	r3, r1
 801339e:	e9ca 2300 	strd	r2, r3, [sl]
 80133a2:	4620      	mov	r0, r4
 80133a4:	4629      	mov	r1, r5
 80133a6:	f7ec ff8f 	bl	80002c8 <__aeabi_dsub>
 80133aa:	a389      	add	r3, pc, #548	; (adr r3, 80135d0 <__ieee754_rem_pio2+0x308>)
 80133ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b0:	f7ec ff8c 	bl	80002cc <__adddf3>
 80133b4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80133b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80133bc:	e7c4      	b.n	8013348 <__ieee754_rem_pio2+0x80>
 80133be:	a386      	add	r3, pc, #536	; (adr r3, 80135d8 <__ieee754_rem_pio2+0x310>)
 80133c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c4:	f7ec ff82 	bl	80002cc <__adddf3>
 80133c8:	a385      	add	r3, pc, #532	; (adr r3, 80135e0 <__ieee754_rem_pio2+0x318>)
 80133ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ce:	4604      	mov	r4, r0
 80133d0:	460d      	mov	r5, r1
 80133d2:	f7ec ff7b 	bl	80002cc <__adddf3>
 80133d6:	4602      	mov	r2, r0
 80133d8:	460b      	mov	r3, r1
 80133da:	e9ca 2300 	strd	r2, r3, [sl]
 80133de:	4620      	mov	r0, r4
 80133e0:	4629      	mov	r1, r5
 80133e2:	f7ec ff71 	bl	80002c8 <__aeabi_dsub>
 80133e6:	a37e      	add	r3, pc, #504	; (adr r3, 80135e0 <__ieee754_rem_pio2+0x318>)
 80133e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ec:	e7e0      	b.n	80133b0 <__ieee754_rem_pio2+0xe8>
 80133ee:	4b87      	ldr	r3, [pc, #540]	; (801360c <__ieee754_rem_pio2+0x344>)
 80133f0:	4598      	cmp	r8, r3
 80133f2:	f300 80d9 	bgt.w	80135a8 <__ieee754_rem_pio2+0x2e0>
 80133f6:	f000 fe49 	bl	801408c <fabs>
 80133fa:	ec55 4b10 	vmov	r4, r5, d0
 80133fe:	ee10 0a10 	vmov	r0, s0
 8013402:	a379      	add	r3, pc, #484	; (adr r3, 80135e8 <__ieee754_rem_pio2+0x320>)
 8013404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013408:	4629      	mov	r1, r5
 801340a:	f7ed f915 	bl	8000638 <__aeabi_dmul>
 801340e:	4b80      	ldr	r3, [pc, #512]	; (8013610 <__ieee754_rem_pio2+0x348>)
 8013410:	2200      	movs	r2, #0
 8013412:	f7ec ff5b 	bl	80002cc <__adddf3>
 8013416:	f7ed fba9 	bl	8000b6c <__aeabi_d2iz>
 801341a:	4683      	mov	fp, r0
 801341c:	f7ed f8a2 	bl	8000564 <__aeabi_i2d>
 8013420:	4602      	mov	r2, r0
 8013422:	460b      	mov	r3, r1
 8013424:	ec43 2b18 	vmov	d8, r2, r3
 8013428:	a367      	add	r3, pc, #412	; (adr r3, 80135c8 <__ieee754_rem_pio2+0x300>)
 801342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801342e:	f7ed f903 	bl	8000638 <__aeabi_dmul>
 8013432:	4602      	mov	r2, r0
 8013434:	460b      	mov	r3, r1
 8013436:	4620      	mov	r0, r4
 8013438:	4629      	mov	r1, r5
 801343a:	f7ec ff45 	bl	80002c8 <__aeabi_dsub>
 801343e:	a364      	add	r3, pc, #400	; (adr r3, 80135d0 <__ieee754_rem_pio2+0x308>)
 8013440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013444:	4606      	mov	r6, r0
 8013446:	460f      	mov	r7, r1
 8013448:	ec51 0b18 	vmov	r0, r1, d8
 801344c:	f7ed f8f4 	bl	8000638 <__aeabi_dmul>
 8013450:	f1bb 0f1f 	cmp.w	fp, #31
 8013454:	4604      	mov	r4, r0
 8013456:	460d      	mov	r5, r1
 8013458:	dc0d      	bgt.n	8013476 <__ieee754_rem_pio2+0x1ae>
 801345a:	4b6e      	ldr	r3, [pc, #440]	; (8013614 <__ieee754_rem_pio2+0x34c>)
 801345c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8013460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013464:	4543      	cmp	r3, r8
 8013466:	d006      	beq.n	8013476 <__ieee754_rem_pio2+0x1ae>
 8013468:	4622      	mov	r2, r4
 801346a:	462b      	mov	r3, r5
 801346c:	4630      	mov	r0, r6
 801346e:	4639      	mov	r1, r7
 8013470:	f7ec ff2a 	bl	80002c8 <__aeabi_dsub>
 8013474:	e00f      	b.n	8013496 <__ieee754_rem_pio2+0x1ce>
 8013476:	462b      	mov	r3, r5
 8013478:	4622      	mov	r2, r4
 801347a:	4630      	mov	r0, r6
 801347c:	4639      	mov	r1, r7
 801347e:	f7ec ff23 	bl	80002c8 <__aeabi_dsub>
 8013482:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013486:	9303      	str	r3, [sp, #12]
 8013488:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801348c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8013490:	f1b8 0f10 	cmp.w	r8, #16
 8013494:	dc02      	bgt.n	801349c <__ieee754_rem_pio2+0x1d4>
 8013496:	e9ca 0100 	strd	r0, r1, [sl]
 801349a:	e039      	b.n	8013510 <__ieee754_rem_pio2+0x248>
 801349c:	a34e      	add	r3, pc, #312	; (adr r3, 80135d8 <__ieee754_rem_pio2+0x310>)
 801349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a2:	ec51 0b18 	vmov	r0, r1, d8
 80134a6:	f7ed f8c7 	bl	8000638 <__aeabi_dmul>
 80134aa:	4604      	mov	r4, r0
 80134ac:	460d      	mov	r5, r1
 80134ae:	4602      	mov	r2, r0
 80134b0:	460b      	mov	r3, r1
 80134b2:	4630      	mov	r0, r6
 80134b4:	4639      	mov	r1, r7
 80134b6:	f7ec ff07 	bl	80002c8 <__aeabi_dsub>
 80134ba:	4602      	mov	r2, r0
 80134bc:	460b      	mov	r3, r1
 80134be:	4680      	mov	r8, r0
 80134c0:	4689      	mov	r9, r1
 80134c2:	4630      	mov	r0, r6
 80134c4:	4639      	mov	r1, r7
 80134c6:	f7ec feff 	bl	80002c8 <__aeabi_dsub>
 80134ca:	4622      	mov	r2, r4
 80134cc:	462b      	mov	r3, r5
 80134ce:	f7ec fefb 	bl	80002c8 <__aeabi_dsub>
 80134d2:	a343      	add	r3, pc, #268	; (adr r3, 80135e0 <__ieee754_rem_pio2+0x318>)
 80134d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d8:	4604      	mov	r4, r0
 80134da:	460d      	mov	r5, r1
 80134dc:	ec51 0b18 	vmov	r0, r1, d8
 80134e0:	f7ed f8aa 	bl	8000638 <__aeabi_dmul>
 80134e4:	4622      	mov	r2, r4
 80134e6:	462b      	mov	r3, r5
 80134e8:	f7ec feee 	bl	80002c8 <__aeabi_dsub>
 80134ec:	4602      	mov	r2, r0
 80134ee:	460b      	mov	r3, r1
 80134f0:	4604      	mov	r4, r0
 80134f2:	460d      	mov	r5, r1
 80134f4:	4640      	mov	r0, r8
 80134f6:	4649      	mov	r1, r9
 80134f8:	f7ec fee6 	bl	80002c8 <__aeabi_dsub>
 80134fc:	9a03      	ldr	r2, [sp, #12]
 80134fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013502:	1ad3      	subs	r3, r2, r3
 8013504:	2b31      	cmp	r3, #49	; 0x31
 8013506:	dc24      	bgt.n	8013552 <__ieee754_rem_pio2+0x28a>
 8013508:	e9ca 0100 	strd	r0, r1, [sl]
 801350c:	4646      	mov	r6, r8
 801350e:	464f      	mov	r7, r9
 8013510:	e9da 8900 	ldrd	r8, r9, [sl]
 8013514:	4630      	mov	r0, r6
 8013516:	4642      	mov	r2, r8
 8013518:	464b      	mov	r3, r9
 801351a:	4639      	mov	r1, r7
 801351c:	f7ec fed4 	bl	80002c8 <__aeabi_dsub>
 8013520:	462b      	mov	r3, r5
 8013522:	4622      	mov	r2, r4
 8013524:	f7ec fed0 	bl	80002c8 <__aeabi_dsub>
 8013528:	9b02      	ldr	r3, [sp, #8]
 801352a:	2b00      	cmp	r3, #0
 801352c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013530:	f6bf af0a 	bge.w	8013348 <__ieee754_rem_pio2+0x80>
 8013534:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013538:	f8ca 3004 	str.w	r3, [sl, #4]
 801353c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013540:	f8ca 8000 	str.w	r8, [sl]
 8013544:	f8ca 0008 	str.w	r0, [sl, #8]
 8013548:	f8ca 300c 	str.w	r3, [sl, #12]
 801354c:	f1cb 0b00 	rsb	fp, fp, #0
 8013550:	e6fa      	b.n	8013348 <__ieee754_rem_pio2+0x80>
 8013552:	a327      	add	r3, pc, #156	; (adr r3, 80135f0 <__ieee754_rem_pio2+0x328>)
 8013554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013558:	ec51 0b18 	vmov	r0, r1, d8
 801355c:	f7ed f86c 	bl	8000638 <__aeabi_dmul>
 8013560:	4604      	mov	r4, r0
 8013562:	460d      	mov	r5, r1
 8013564:	4602      	mov	r2, r0
 8013566:	460b      	mov	r3, r1
 8013568:	4640      	mov	r0, r8
 801356a:	4649      	mov	r1, r9
 801356c:	f7ec feac 	bl	80002c8 <__aeabi_dsub>
 8013570:	4602      	mov	r2, r0
 8013572:	460b      	mov	r3, r1
 8013574:	4606      	mov	r6, r0
 8013576:	460f      	mov	r7, r1
 8013578:	4640      	mov	r0, r8
 801357a:	4649      	mov	r1, r9
 801357c:	f7ec fea4 	bl	80002c8 <__aeabi_dsub>
 8013580:	4622      	mov	r2, r4
 8013582:	462b      	mov	r3, r5
 8013584:	f7ec fea0 	bl	80002c8 <__aeabi_dsub>
 8013588:	a31b      	add	r3, pc, #108	; (adr r3, 80135f8 <__ieee754_rem_pio2+0x330>)
 801358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358e:	4604      	mov	r4, r0
 8013590:	460d      	mov	r5, r1
 8013592:	ec51 0b18 	vmov	r0, r1, d8
 8013596:	f7ed f84f 	bl	8000638 <__aeabi_dmul>
 801359a:	4622      	mov	r2, r4
 801359c:	462b      	mov	r3, r5
 801359e:	f7ec fe93 	bl	80002c8 <__aeabi_dsub>
 80135a2:	4604      	mov	r4, r0
 80135a4:	460d      	mov	r5, r1
 80135a6:	e75f      	b.n	8013468 <__ieee754_rem_pio2+0x1a0>
 80135a8:	4b1b      	ldr	r3, [pc, #108]	; (8013618 <__ieee754_rem_pio2+0x350>)
 80135aa:	4598      	cmp	r8, r3
 80135ac:	dd36      	ble.n	801361c <__ieee754_rem_pio2+0x354>
 80135ae:	ee10 2a10 	vmov	r2, s0
 80135b2:	462b      	mov	r3, r5
 80135b4:	4620      	mov	r0, r4
 80135b6:	4629      	mov	r1, r5
 80135b8:	f7ec fe86 	bl	80002c8 <__aeabi_dsub>
 80135bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80135c0:	e9ca 0100 	strd	r0, r1, [sl]
 80135c4:	e694      	b.n	80132f0 <__ieee754_rem_pio2+0x28>
 80135c6:	bf00      	nop
 80135c8:	54400000 	.word	0x54400000
 80135cc:	3ff921fb 	.word	0x3ff921fb
 80135d0:	1a626331 	.word	0x1a626331
 80135d4:	3dd0b461 	.word	0x3dd0b461
 80135d8:	1a600000 	.word	0x1a600000
 80135dc:	3dd0b461 	.word	0x3dd0b461
 80135e0:	2e037073 	.word	0x2e037073
 80135e4:	3ba3198a 	.word	0x3ba3198a
 80135e8:	6dc9c883 	.word	0x6dc9c883
 80135ec:	3fe45f30 	.word	0x3fe45f30
 80135f0:	2e000000 	.word	0x2e000000
 80135f4:	3ba3198a 	.word	0x3ba3198a
 80135f8:	252049c1 	.word	0x252049c1
 80135fc:	397b839a 	.word	0x397b839a
 8013600:	3fe921fb 	.word	0x3fe921fb
 8013604:	4002d97b 	.word	0x4002d97b
 8013608:	3ff921fb 	.word	0x3ff921fb
 801360c:	413921fb 	.word	0x413921fb
 8013610:	3fe00000 	.word	0x3fe00000
 8013614:	08014b04 	.word	0x08014b04
 8013618:	7fefffff 	.word	0x7fefffff
 801361c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8013620:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8013624:	ee10 0a10 	vmov	r0, s0
 8013628:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801362c:	ee10 6a10 	vmov	r6, s0
 8013630:	460f      	mov	r7, r1
 8013632:	f7ed fa9b 	bl	8000b6c <__aeabi_d2iz>
 8013636:	f7ec ff95 	bl	8000564 <__aeabi_i2d>
 801363a:	4602      	mov	r2, r0
 801363c:	460b      	mov	r3, r1
 801363e:	4630      	mov	r0, r6
 8013640:	4639      	mov	r1, r7
 8013642:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013646:	f7ec fe3f 	bl	80002c8 <__aeabi_dsub>
 801364a:	4b23      	ldr	r3, [pc, #140]	; (80136d8 <__ieee754_rem_pio2+0x410>)
 801364c:	2200      	movs	r2, #0
 801364e:	f7ec fff3 	bl	8000638 <__aeabi_dmul>
 8013652:	460f      	mov	r7, r1
 8013654:	4606      	mov	r6, r0
 8013656:	f7ed fa89 	bl	8000b6c <__aeabi_d2iz>
 801365a:	f7ec ff83 	bl	8000564 <__aeabi_i2d>
 801365e:	4602      	mov	r2, r0
 8013660:	460b      	mov	r3, r1
 8013662:	4630      	mov	r0, r6
 8013664:	4639      	mov	r1, r7
 8013666:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801366a:	f7ec fe2d 	bl	80002c8 <__aeabi_dsub>
 801366e:	4b1a      	ldr	r3, [pc, #104]	; (80136d8 <__ieee754_rem_pio2+0x410>)
 8013670:	2200      	movs	r2, #0
 8013672:	f7ec ffe1 	bl	8000638 <__aeabi_dmul>
 8013676:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801367a:	ad04      	add	r5, sp, #16
 801367c:	f04f 0803 	mov.w	r8, #3
 8013680:	46a9      	mov	r9, r5
 8013682:	2600      	movs	r6, #0
 8013684:	2700      	movs	r7, #0
 8013686:	4632      	mov	r2, r6
 8013688:	463b      	mov	r3, r7
 801368a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801368e:	46c3      	mov	fp, r8
 8013690:	3d08      	subs	r5, #8
 8013692:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8013696:	f7ed fa37 	bl	8000b08 <__aeabi_dcmpeq>
 801369a:	2800      	cmp	r0, #0
 801369c:	d1f3      	bne.n	8013686 <__ieee754_rem_pio2+0x3be>
 801369e:	4b0f      	ldr	r3, [pc, #60]	; (80136dc <__ieee754_rem_pio2+0x414>)
 80136a0:	9301      	str	r3, [sp, #4]
 80136a2:	2302      	movs	r3, #2
 80136a4:	9300      	str	r3, [sp, #0]
 80136a6:	4622      	mov	r2, r4
 80136a8:	465b      	mov	r3, fp
 80136aa:	4651      	mov	r1, sl
 80136ac:	4648      	mov	r0, r9
 80136ae:	f000 f8df 	bl	8013870 <__kernel_rem_pio2>
 80136b2:	9b02      	ldr	r3, [sp, #8]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	4683      	mov	fp, r0
 80136b8:	f6bf ae46 	bge.w	8013348 <__ieee754_rem_pio2+0x80>
 80136bc:	e9da 2100 	ldrd	r2, r1, [sl]
 80136c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80136c4:	e9ca 2300 	strd	r2, r3, [sl]
 80136c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80136cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80136d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80136d4:	e73a      	b.n	801354c <__ieee754_rem_pio2+0x284>
 80136d6:	bf00      	nop
 80136d8:	41700000 	.word	0x41700000
 80136dc:	08014b84 	.word	0x08014b84

080136e0 <__kernel_cos>:
 80136e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e4:	ec57 6b10 	vmov	r6, r7, d0
 80136e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80136ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80136f0:	ed8d 1b00 	vstr	d1, [sp]
 80136f4:	da07      	bge.n	8013706 <__kernel_cos+0x26>
 80136f6:	ee10 0a10 	vmov	r0, s0
 80136fa:	4639      	mov	r1, r7
 80136fc:	f7ed fa36 	bl	8000b6c <__aeabi_d2iz>
 8013700:	2800      	cmp	r0, #0
 8013702:	f000 8088 	beq.w	8013816 <__kernel_cos+0x136>
 8013706:	4632      	mov	r2, r6
 8013708:	463b      	mov	r3, r7
 801370a:	4630      	mov	r0, r6
 801370c:	4639      	mov	r1, r7
 801370e:	f7ec ff93 	bl	8000638 <__aeabi_dmul>
 8013712:	4b51      	ldr	r3, [pc, #324]	; (8013858 <__kernel_cos+0x178>)
 8013714:	2200      	movs	r2, #0
 8013716:	4604      	mov	r4, r0
 8013718:	460d      	mov	r5, r1
 801371a:	f7ec ff8d 	bl	8000638 <__aeabi_dmul>
 801371e:	a340      	add	r3, pc, #256	; (adr r3, 8013820 <__kernel_cos+0x140>)
 8013720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013724:	4682      	mov	sl, r0
 8013726:	468b      	mov	fp, r1
 8013728:	4620      	mov	r0, r4
 801372a:	4629      	mov	r1, r5
 801372c:	f7ec ff84 	bl	8000638 <__aeabi_dmul>
 8013730:	a33d      	add	r3, pc, #244	; (adr r3, 8013828 <__kernel_cos+0x148>)
 8013732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013736:	f7ec fdc9 	bl	80002cc <__adddf3>
 801373a:	4622      	mov	r2, r4
 801373c:	462b      	mov	r3, r5
 801373e:	f7ec ff7b 	bl	8000638 <__aeabi_dmul>
 8013742:	a33b      	add	r3, pc, #236	; (adr r3, 8013830 <__kernel_cos+0x150>)
 8013744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013748:	f7ec fdbe 	bl	80002c8 <__aeabi_dsub>
 801374c:	4622      	mov	r2, r4
 801374e:	462b      	mov	r3, r5
 8013750:	f7ec ff72 	bl	8000638 <__aeabi_dmul>
 8013754:	a338      	add	r3, pc, #224	; (adr r3, 8013838 <__kernel_cos+0x158>)
 8013756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801375a:	f7ec fdb7 	bl	80002cc <__adddf3>
 801375e:	4622      	mov	r2, r4
 8013760:	462b      	mov	r3, r5
 8013762:	f7ec ff69 	bl	8000638 <__aeabi_dmul>
 8013766:	a336      	add	r3, pc, #216	; (adr r3, 8013840 <__kernel_cos+0x160>)
 8013768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801376c:	f7ec fdac 	bl	80002c8 <__aeabi_dsub>
 8013770:	4622      	mov	r2, r4
 8013772:	462b      	mov	r3, r5
 8013774:	f7ec ff60 	bl	8000638 <__aeabi_dmul>
 8013778:	a333      	add	r3, pc, #204	; (adr r3, 8013848 <__kernel_cos+0x168>)
 801377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377e:	f7ec fda5 	bl	80002cc <__adddf3>
 8013782:	4622      	mov	r2, r4
 8013784:	462b      	mov	r3, r5
 8013786:	f7ec ff57 	bl	8000638 <__aeabi_dmul>
 801378a:	4622      	mov	r2, r4
 801378c:	462b      	mov	r3, r5
 801378e:	f7ec ff53 	bl	8000638 <__aeabi_dmul>
 8013792:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013796:	4604      	mov	r4, r0
 8013798:	460d      	mov	r5, r1
 801379a:	4630      	mov	r0, r6
 801379c:	4639      	mov	r1, r7
 801379e:	f7ec ff4b 	bl	8000638 <__aeabi_dmul>
 80137a2:	460b      	mov	r3, r1
 80137a4:	4602      	mov	r2, r0
 80137a6:	4629      	mov	r1, r5
 80137a8:	4620      	mov	r0, r4
 80137aa:	f7ec fd8d 	bl	80002c8 <__aeabi_dsub>
 80137ae:	4b2b      	ldr	r3, [pc, #172]	; (801385c <__kernel_cos+0x17c>)
 80137b0:	4598      	cmp	r8, r3
 80137b2:	4606      	mov	r6, r0
 80137b4:	460f      	mov	r7, r1
 80137b6:	dc10      	bgt.n	80137da <__kernel_cos+0xfa>
 80137b8:	4602      	mov	r2, r0
 80137ba:	460b      	mov	r3, r1
 80137bc:	4650      	mov	r0, sl
 80137be:	4659      	mov	r1, fp
 80137c0:	f7ec fd82 	bl	80002c8 <__aeabi_dsub>
 80137c4:	460b      	mov	r3, r1
 80137c6:	4926      	ldr	r1, [pc, #152]	; (8013860 <__kernel_cos+0x180>)
 80137c8:	4602      	mov	r2, r0
 80137ca:	2000      	movs	r0, #0
 80137cc:	f7ec fd7c 	bl	80002c8 <__aeabi_dsub>
 80137d0:	ec41 0b10 	vmov	d0, r0, r1
 80137d4:	b003      	add	sp, #12
 80137d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137da:	4b22      	ldr	r3, [pc, #136]	; (8013864 <__kernel_cos+0x184>)
 80137dc:	4920      	ldr	r1, [pc, #128]	; (8013860 <__kernel_cos+0x180>)
 80137de:	4598      	cmp	r8, r3
 80137e0:	bfcc      	ite	gt
 80137e2:	4d21      	ldrgt	r5, [pc, #132]	; (8013868 <__kernel_cos+0x188>)
 80137e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80137e8:	2400      	movs	r4, #0
 80137ea:	4622      	mov	r2, r4
 80137ec:	462b      	mov	r3, r5
 80137ee:	2000      	movs	r0, #0
 80137f0:	f7ec fd6a 	bl	80002c8 <__aeabi_dsub>
 80137f4:	4622      	mov	r2, r4
 80137f6:	4680      	mov	r8, r0
 80137f8:	4689      	mov	r9, r1
 80137fa:	462b      	mov	r3, r5
 80137fc:	4650      	mov	r0, sl
 80137fe:	4659      	mov	r1, fp
 8013800:	f7ec fd62 	bl	80002c8 <__aeabi_dsub>
 8013804:	4632      	mov	r2, r6
 8013806:	463b      	mov	r3, r7
 8013808:	f7ec fd5e 	bl	80002c8 <__aeabi_dsub>
 801380c:	4602      	mov	r2, r0
 801380e:	460b      	mov	r3, r1
 8013810:	4640      	mov	r0, r8
 8013812:	4649      	mov	r1, r9
 8013814:	e7da      	b.n	80137cc <__kernel_cos+0xec>
 8013816:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013850 <__kernel_cos+0x170>
 801381a:	e7db      	b.n	80137d4 <__kernel_cos+0xf4>
 801381c:	f3af 8000 	nop.w
 8013820:	be8838d4 	.word	0xbe8838d4
 8013824:	bda8fae9 	.word	0xbda8fae9
 8013828:	bdb4b1c4 	.word	0xbdb4b1c4
 801382c:	3e21ee9e 	.word	0x3e21ee9e
 8013830:	809c52ad 	.word	0x809c52ad
 8013834:	3e927e4f 	.word	0x3e927e4f
 8013838:	19cb1590 	.word	0x19cb1590
 801383c:	3efa01a0 	.word	0x3efa01a0
 8013840:	16c15177 	.word	0x16c15177
 8013844:	3f56c16c 	.word	0x3f56c16c
 8013848:	5555554c 	.word	0x5555554c
 801384c:	3fa55555 	.word	0x3fa55555
 8013850:	00000000 	.word	0x00000000
 8013854:	3ff00000 	.word	0x3ff00000
 8013858:	3fe00000 	.word	0x3fe00000
 801385c:	3fd33332 	.word	0x3fd33332
 8013860:	3ff00000 	.word	0x3ff00000
 8013864:	3fe90000 	.word	0x3fe90000
 8013868:	3fd20000 	.word	0x3fd20000
 801386c:	00000000 	.word	0x00000000

08013870 <__kernel_rem_pio2>:
 8013870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013874:	ed2d 8b02 	vpush	{d8}
 8013878:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801387c:	f112 0f14 	cmn.w	r2, #20
 8013880:	9308      	str	r3, [sp, #32]
 8013882:	9101      	str	r1, [sp, #4]
 8013884:	4bc4      	ldr	r3, [pc, #784]	; (8013b98 <__kernel_rem_pio2+0x328>)
 8013886:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013888:	900b      	str	r0, [sp, #44]	; 0x2c
 801388a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801388e:	9302      	str	r3, [sp, #8]
 8013890:	9b08      	ldr	r3, [sp, #32]
 8013892:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8013896:	bfa8      	it	ge
 8013898:	1ed4      	subge	r4, r2, #3
 801389a:	9306      	str	r3, [sp, #24]
 801389c:	bfb2      	itee	lt
 801389e:	2400      	movlt	r4, #0
 80138a0:	2318      	movge	r3, #24
 80138a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80138a6:	f06f 0317 	mvn.w	r3, #23
 80138aa:	fb04 3303 	mla	r3, r4, r3, r3
 80138ae:	eb03 0a02 	add.w	sl, r3, r2
 80138b2:	9b02      	ldr	r3, [sp, #8]
 80138b4:	9a06      	ldr	r2, [sp, #24]
 80138b6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8013b88 <__kernel_rem_pio2+0x318>
 80138ba:	eb03 0802 	add.w	r8, r3, r2
 80138be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80138c0:	1aa7      	subs	r7, r4, r2
 80138c2:	ae22      	add	r6, sp, #136	; 0x88
 80138c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80138c8:	2500      	movs	r5, #0
 80138ca:	4545      	cmp	r5, r8
 80138cc:	dd13      	ble.n	80138f6 <__kernel_rem_pio2+0x86>
 80138ce:	9b08      	ldr	r3, [sp, #32]
 80138d0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8013b88 <__kernel_rem_pio2+0x318>
 80138d4:	aa22      	add	r2, sp, #136	; 0x88
 80138d6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80138da:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80138de:	f04f 0800 	mov.w	r8, #0
 80138e2:	9b02      	ldr	r3, [sp, #8]
 80138e4:	4598      	cmp	r8, r3
 80138e6:	dc2f      	bgt.n	8013948 <__kernel_rem_pio2+0xd8>
 80138e8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80138ec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80138f0:	462f      	mov	r7, r5
 80138f2:	2600      	movs	r6, #0
 80138f4:	e01b      	b.n	801392e <__kernel_rem_pio2+0xbe>
 80138f6:	42ef      	cmn	r7, r5
 80138f8:	d407      	bmi.n	801390a <__kernel_rem_pio2+0x9a>
 80138fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80138fe:	f7ec fe31 	bl	8000564 <__aeabi_i2d>
 8013902:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013906:	3501      	adds	r5, #1
 8013908:	e7df      	b.n	80138ca <__kernel_rem_pio2+0x5a>
 801390a:	ec51 0b18 	vmov	r0, r1, d8
 801390e:	e7f8      	b.n	8013902 <__kernel_rem_pio2+0x92>
 8013910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013914:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013918:	f7ec fe8e 	bl	8000638 <__aeabi_dmul>
 801391c:	4602      	mov	r2, r0
 801391e:	460b      	mov	r3, r1
 8013920:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013924:	f7ec fcd2 	bl	80002cc <__adddf3>
 8013928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801392c:	3601      	adds	r6, #1
 801392e:	9b06      	ldr	r3, [sp, #24]
 8013930:	429e      	cmp	r6, r3
 8013932:	f1a7 0708 	sub.w	r7, r7, #8
 8013936:	ddeb      	ble.n	8013910 <__kernel_rem_pio2+0xa0>
 8013938:	ed9d 7b04 	vldr	d7, [sp, #16]
 801393c:	f108 0801 	add.w	r8, r8, #1
 8013940:	ecab 7b02 	vstmia	fp!, {d7}
 8013944:	3508      	adds	r5, #8
 8013946:	e7cc      	b.n	80138e2 <__kernel_rem_pio2+0x72>
 8013948:	9b02      	ldr	r3, [sp, #8]
 801394a:	aa0e      	add	r2, sp, #56	; 0x38
 801394c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013950:	930d      	str	r3, [sp, #52]	; 0x34
 8013952:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013954:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013958:	9c02      	ldr	r4, [sp, #8]
 801395a:	930c      	str	r3, [sp, #48]	; 0x30
 801395c:	00e3      	lsls	r3, r4, #3
 801395e:	930a      	str	r3, [sp, #40]	; 0x28
 8013960:	ab9a      	add	r3, sp, #616	; 0x268
 8013962:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013966:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801396a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801396e:	ab72      	add	r3, sp, #456	; 0x1c8
 8013970:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8013974:	46c3      	mov	fp, r8
 8013976:	46a1      	mov	r9, r4
 8013978:	f1b9 0f00 	cmp.w	r9, #0
 801397c:	f1a5 0508 	sub.w	r5, r5, #8
 8013980:	dc77      	bgt.n	8013a72 <__kernel_rem_pio2+0x202>
 8013982:	ec47 6b10 	vmov	d0, r6, r7
 8013986:	4650      	mov	r0, sl
 8013988:	f000 fc0a 	bl	80141a0 <scalbn>
 801398c:	ec57 6b10 	vmov	r6, r7, d0
 8013990:	2200      	movs	r2, #0
 8013992:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013996:	ee10 0a10 	vmov	r0, s0
 801399a:	4639      	mov	r1, r7
 801399c:	f7ec fe4c 	bl	8000638 <__aeabi_dmul>
 80139a0:	ec41 0b10 	vmov	d0, r0, r1
 80139a4:	f000 fb7c 	bl	80140a0 <floor>
 80139a8:	4b7c      	ldr	r3, [pc, #496]	; (8013b9c <__kernel_rem_pio2+0x32c>)
 80139aa:	ec51 0b10 	vmov	r0, r1, d0
 80139ae:	2200      	movs	r2, #0
 80139b0:	f7ec fe42 	bl	8000638 <__aeabi_dmul>
 80139b4:	4602      	mov	r2, r0
 80139b6:	460b      	mov	r3, r1
 80139b8:	4630      	mov	r0, r6
 80139ba:	4639      	mov	r1, r7
 80139bc:	f7ec fc84 	bl	80002c8 <__aeabi_dsub>
 80139c0:	460f      	mov	r7, r1
 80139c2:	4606      	mov	r6, r0
 80139c4:	f7ed f8d2 	bl	8000b6c <__aeabi_d2iz>
 80139c8:	9004      	str	r0, [sp, #16]
 80139ca:	f7ec fdcb 	bl	8000564 <__aeabi_i2d>
 80139ce:	4602      	mov	r2, r0
 80139d0:	460b      	mov	r3, r1
 80139d2:	4630      	mov	r0, r6
 80139d4:	4639      	mov	r1, r7
 80139d6:	f7ec fc77 	bl	80002c8 <__aeabi_dsub>
 80139da:	f1ba 0f00 	cmp.w	sl, #0
 80139de:	4606      	mov	r6, r0
 80139e0:	460f      	mov	r7, r1
 80139e2:	dd6d      	ble.n	8013ac0 <__kernel_rem_pio2+0x250>
 80139e4:	1e62      	subs	r2, r4, #1
 80139e6:	ab0e      	add	r3, sp, #56	; 0x38
 80139e8:	9d04      	ldr	r5, [sp, #16]
 80139ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80139ee:	f1ca 0118 	rsb	r1, sl, #24
 80139f2:	fa40 f301 	asr.w	r3, r0, r1
 80139f6:	441d      	add	r5, r3
 80139f8:	408b      	lsls	r3, r1
 80139fa:	1ac0      	subs	r0, r0, r3
 80139fc:	ab0e      	add	r3, sp, #56	; 0x38
 80139fe:	9504      	str	r5, [sp, #16]
 8013a00:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013a04:	f1ca 0317 	rsb	r3, sl, #23
 8013a08:	fa40 fb03 	asr.w	fp, r0, r3
 8013a0c:	f1bb 0f00 	cmp.w	fp, #0
 8013a10:	dd65      	ble.n	8013ade <__kernel_rem_pio2+0x26e>
 8013a12:	9b04      	ldr	r3, [sp, #16]
 8013a14:	2200      	movs	r2, #0
 8013a16:	3301      	adds	r3, #1
 8013a18:	9304      	str	r3, [sp, #16]
 8013a1a:	4615      	mov	r5, r2
 8013a1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013a20:	4294      	cmp	r4, r2
 8013a22:	f300 809c 	bgt.w	8013b5e <__kernel_rem_pio2+0x2ee>
 8013a26:	f1ba 0f00 	cmp.w	sl, #0
 8013a2a:	dd07      	ble.n	8013a3c <__kernel_rem_pio2+0x1cc>
 8013a2c:	f1ba 0f01 	cmp.w	sl, #1
 8013a30:	f000 80c0 	beq.w	8013bb4 <__kernel_rem_pio2+0x344>
 8013a34:	f1ba 0f02 	cmp.w	sl, #2
 8013a38:	f000 80c6 	beq.w	8013bc8 <__kernel_rem_pio2+0x358>
 8013a3c:	f1bb 0f02 	cmp.w	fp, #2
 8013a40:	d14d      	bne.n	8013ade <__kernel_rem_pio2+0x26e>
 8013a42:	4632      	mov	r2, r6
 8013a44:	463b      	mov	r3, r7
 8013a46:	4956      	ldr	r1, [pc, #344]	; (8013ba0 <__kernel_rem_pio2+0x330>)
 8013a48:	2000      	movs	r0, #0
 8013a4a:	f7ec fc3d 	bl	80002c8 <__aeabi_dsub>
 8013a4e:	4606      	mov	r6, r0
 8013a50:	460f      	mov	r7, r1
 8013a52:	2d00      	cmp	r5, #0
 8013a54:	d043      	beq.n	8013ade <__kernel_rem_pio2+0x26e>
 8013a56:	4650      	mov	r0, sl
 8013a58:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8013b90 <__kernel_rem_pio2+0x320>
 8013a5c:	f000 fba0 	bl	80141a0 <scalbn>
 8013a60:	4630      	mov	r0, r6
 8013a62:	4639      	mov	r1, r7
 8013a64:	ec53 2b10 	vmov	r2, r3, d0
 8013a68:	f7ec fc2e 	bl	80002c8 <__aeabi_dsub>
 8013a6c:	4606      	mov	r6, r0
 8013a6e:	460f      	mov	r7, r1
 8013a70:	e035      	b.n	8013ade <__kernel_rem_pio2+0x26e>
 8013a72:	4b4c      	ldr	r3, [pc, #304]	; (8013ba4 <__kernel_rem_pio2+0x334>)
 8013a74:	2200      	movs	r2, #0
 8013a76:	4630      	mov	r0, r6
 8013a78:	4639      	mov	r1, r7
 8013a7a:	f7ec fddd 	bl	8000638 <__aeabi_dmul>
 8013a7e:	f7ed f875 	bl	8000b6c <__aeabi_d2iz>
 8013a82:	f7ec fd6f 	bl	8000564 <__aeabi_i2d>
 8013a86:	4602      	mov	r2, r0
 8013a88:	460b      	mov	r3, r1
 8013a8a:	ec43 2b18 	vmov	d8, r2, r3
 8013a8e:	4b46      	ldr	r3, [pc, #280]	; (8013ba8 <__kernel_rem_pio2+0x338>)
 8013a90:	2200      	movs	r2, #0
 8013a92:	f7ec fdd1 	bl	8000638 <__aeabi_dmul>
 8013a96:	4602      	mov	r2, r0
 8013a98:	460b      	mov	r3, r1
 8013a9a:	4630      	mov	r0, r6
 8013a9c:	4639      	mov	r1, r7
 8013a9e:	f7ec fc13 	bl	80002c8 <__aeabi_dsub>
 8013aa2:	f7ed f863 	bl	8000b6c <__aeabi_d2iz>
 8013aa6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013aaa:	f84b 0b04 	str.w	r0, [fp], #4
 8013aae:	ec51 0b18 	vmov	r0, r1, d8
 8013ab2:	f7ec fc0b 	bl	80002cc <__adddf3>
 8013ab6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8013aba:	4606      	mov	r6, r0
 8013abc:	460f      	mov	r7, r1
 8013abe:	e75b      	b.n	8013978 <__kernel_rem_pio2+0x108>
 8013ac0:	d106      	bne.n	8013ad0 <__kernel_rem_pio2+0x260>
 8013ac2:	1e63      	subs	r3, r4, #1
 8013ac4:	aa0e      	add	r2, sp, #56	; 0x38
 8013ac6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013aca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8013ace:	e79d      	b.n	8013a0c <__kernel_rem_pio2+0x19c>
 8013ad0:	4b36      	ldr	r3, [pc, #216]	; (8013bac <__kernel_rem_pio2+0x33c>)
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f7ed f836 	bl	8000b44 <__aeabi_dcmpge>
 8013ad8:	2800      	cmp	r0, #0
 8013ada:	d13d      	bne.n	8013b58 <__kernel_rem_pio2+0x2e8>
 8013adc:	4683      	mov	fp, r0
 8013ade:	2200      	movs	r2, #0
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	4630      	mov	r0, r6
 8013ae4:	4639      	mov	r1, r7
 8013ae6:	f7ed f80f 	bl	8000b08 <__aeabi_dcmpeq>
 8013aea:	2800      	cmp	r0, #0
 8013aec:	f000 80c0 	beq.w	8013c70 <__kernel_rem_pio2+0x400>
 8013af0:	1e65      	subs	r5, r4, #1
 8013af2:	462b      	mov	r3, r5
 8013af4:	2200      	movs	r2, #0
 8013af6:	9902      	ldr	r1, [sp, #8]
 8013af8:	428b      	cmp	r3, r1
 8013afa:	da6c      	bge.n	8013bd6 <__kernel_rem_pio2+0x366>
 8013afc:	2a00      	cmp	r2, #0
 8013afe:	f000 8089 	beq.w	8013c14 <__kernel_rem_pio2+0x3a4>
 8013b02:	ab0e      	add	r3, sp, #56	; 0x38
 8013b04:	f1aa 0a18 	sub.w	sl, sl, #24
 8013b08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	f000 80ad 	beq.w	8013c6c <__kernel_rem_pio2+0x3fc>
 8013b12:	4650      	mov	r0, sl
 8013b14:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8013b90 <__kernel_rem_pio2+0x320>
 8013b18:	f000 fb42 	bl	80141a0 <scalbn>
 8013b1c:	ab9a      	add	r3, sp, #616	; 0x268
 8013b1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013b22:	ec57 6b10 	vmov	r6, r7, d0
 8013b26:	00ec      	lsls	r4, r5, #3
 8013b28:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8013b2c:	46aa      	mov	sl, r5
 8013b2e:	f1ba 0f00 	cmp.w	sl, #0
 8013b32:	f280 80d6 	bge.w	8013ce2 <__kernel_rem_pio2+0x472>
 8013b36:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8013b88 <__kernel_rem_pio2+0x318>
 8013b3a:	462e      	mov	r6, r5
 8013b3c:	2e00      	cmp	r6, #0
 8013b3e:	f2c0 8104 	blt.w	8013d4a <__kernel_rem_pio2+0x4da>
 8013b42:	ab72      	add	r3, sp, #456	; 0x1c8
 8013b44:	ed8d 8b06 	vstr	d8, [sp, #24]
 8013b48:	f8df a064 	ldr.w	sl, [pc, #100]	; 8013bb0 <__kernel_rem_pio2+0x340>
 8013b4c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8013b50:	f04f 0800 	mov.w	r8, #0
 8013b54:	1baf      	subs	r7, r5, r6
 8013b56:	e0ea      	b.n	8013d2e <__kernel_rem_pio2+0x4be>
 8013b58:	f04f 0b02 	mov.w	fp, #2
 8013b5c:	e759      	b.n	8013a12 <__kernel_rem_pio2+0x1a2>
 8013b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8013b62:	b955      	cbnz	r5, 8013b7a <__kernel_rem_pio2+0x30a>
 8013b64:	b123      	cbz	r3, 8013b70 <__kernel_rem_pio2+0x300>
 8013b66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013b6a:	f8c8 3000 	str.w	r3, [r8]
 8013b6e:	2301      	movs	r3, #1
 8013b70:	3201      	adds	r2, #1
 8013b72:	f108 0804 	add.w	r8, r8, #4
 8013b76:	461d      	mov	r5, r3
 8013b78:	e752      	b.n	8013a20 <__kernel_rem_pio2+0x1b0>
 8013b7a:	1acb      	subs	r3, r1, r3
 8013b7c:	f8c8 3000 	str.w	r3, [r8]
 8013b80:	462b      	mov	r3, r5
 8013b82:	e7f5      	b.n	8013b70 <__kernel_rem_pio2+0x300>
 8013b84:	f3af 8000 	nop.w
	...
 8013b94:	3ff00000 	.word	0x3ff00000
 8013b98:	08014cd0 	.word	0x08014cd0
 8013b9c:	40200000 	.word	0x40200000
 8013ba0:	3ff00000 	.word	0x3ff00000
 8013ba4:	3e700000 	.word	0x3e700000
 8013ba8:	41700000 	.word	0x41700000
 8013bac:	3fe00000 	.word	0x3fe00000
 8013bb0:	08014c90 	.word	0x08014c90
 8013bb4:	1e62      	subs	r2, r4, #1
 8013bb6:	ab0e      	add	r3, sp, #56	; 0x38
 8013bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bbc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013bc0:	a90e      	add	r1, sp, #56	; 0x38
 8013bc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013bc6:	e739      	b.n	8013a3c <__kernel_rem_pio2+0x1cc>
 8013bc8:	1e62      	subs	r2, r4, #1
 8013bca:	ab0e      	add	r3, sp, #56	; 0x38
 8013bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bd0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013bd4:	e7f4      	b.n	8013bc0 <__kernel_rem_pio2+0x350>
 8013bd6:	a90e      	add	r1, sp, #56	; 0x38
 8013bd8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013bdc:	3b01      	subs	r3, #1
 8013bde:	430a      	orrs	r2, r1
 8013be0:	e789      	b.n	8013af6 <__kernel_rem_pio2+0x286>
 8013be2:	3301      	adds	r3, #1
 8013be4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013be8:	2900      	cmp	r1, #0
 8013bea:	d0fa      	beq.n	8013be2 <__kernel_rem_pio2+0x372>
 8013bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013bee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8013bf2:	446a      	add	r2, sp
 8013bf4:	3a98      	subs	r2, #152	; 0x98
 8013bf6:	920a      	str	r2, [sp, #40]	; 0x28
 8013bf8:	9a08      	ldr	r2, [sp, #32]
 8013bfa:	18e3      	adds	r3, r4, r3
 8013bfc:	18a5      	adds	r5, r4, r2
 8013bfe:	aa22      	add	r2, sp, #136	; 0x88
 8013c00:	f104 0801 	add.w	r8, r4, #1
 8013c04:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8013c08:	9304      	str	r3, [sp, #16]
 8013c0a:	9b04      	ldr	r3, [sp, #16]
 8013c0c:	4543      	cmp	r3, r8
 8013c0e:	da04      	bge.n	8013c1a <__kernel_rem_pio2+0x3aa>
 8013c10:	461c      	mov	r4, r3
 8013c12:	e6a3      	b.n	801395c <__kernel_rem_pio2+0xec>
 8013c14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013c16:	2301      	movs	r3, #1
 8013c18:	e7e4      	b.n	8013be4 <__kernel_rem_pio2+0x374>
 8013c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c1c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013c20:	f7ec fca0 	bl	8000564 <__aeabi_i2d>
 8013c24:	e8e5 0102 	strd	r0, r1, [r5], #8
 8013c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c2a:	46ab      	mov	fp, r5
 8013c2c:	461c      	mov	r4, r3
 8013c2e:	f04f 0900 	mov.w	r9, #0
 8013c32:	2600      	movs	r6, #0
 8013c34:	2700      	movs	r7, #0
 8013c36:	9b06      	ldr	r3, [sp, #24]
 8013c38:	4599      	cmp	r9, r3
 8013c3a:	dd06      	ble.n	8013c4a <__kernel_rem_pio2+0x3da>
 8013c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c3e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013c42:	f108 0801 	add.w	r8, r8, #1
 8013c46:	930a      	str	r3, [sp, #40]	; 0x28
 8013c48:	e7df      	b.n	8013c0a <__kernel_rem_pio2+0x39a>
 8013c4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013c4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013c52:	f7ec fcf1 	bl	8000638 <__aeabi_dmul>
 8013c56:	4602      	mov	r2, r0
 8013c58:	460b      	mov	r3, r1
 8013c5a:	4630      	mov	r0, r6
 8013c5c:	4639      	mov	r1, r7
 8013c5e:	f7ec fb35 	bl	80002cc <__adddf3>
 8013c62:	f109 0901 	add.w	r9, r9, #1
 8013c66:	4606      	mov	r6, r0
 8013c68:	460f      	mov	r7, r1
 8013c6a:	e7e4      	b.n	8013c36 <__kernel_rem_pio2+0x3c6>
 8013c6c:	3d01      	subs	r5, #1
 8013c6e:	e748      	b.n	8013b02 <__kernel_rem_pio2+0x292>
 8013c70:	ec47 6b10 	vmov	d0, r6, r7
 8013c74:	f1ca 0000 	rsb	r0, sl, #0
 8013c78:	f000 fa92 	bl	80141a0 <scalbn>
 8013c7c:	ec57 6b10 	vmov	r6, r7, d0
 8013c80:	4ba0      	ldr	r3, [pc, #640]	; (8013f04 <__kernel_rem_pio2+0x694>)
 8013c82:	ee10 0a10 	vmov	r0, s0
 8013c86:	2200      	movs	r2, #0
 8013c88:	4639      	mov	r1, r7
 8013c8a:	f7ec ff5b 	bl	8000b44 <__aeabi_dcmpge>
 8013c8e:	b1f8      	cbz	r0, 8013cd0 <__kernel_rem_pio2+0x460>
 8013c90:	4b9d      	ldr	r3, [pc, #628]	; (8013f08 <__kernel_rem_pio2+0x698>)
 8013c92:	2200      	movs	r2, #0
 8013c94:	4630      	mov	r0, r6
 8013c96:	4639      	mov	r1, r7
 8013c98:	f7ec fcce 	bl	8000638 <__aeabi_dmul>
 8013c9c:	f7ec ff66 	bl	8000b6c <__aeabi_d2iz>
 8013ca0:	4680      	mov	r8, r0
 8013ca2:	f7ec fc5f 	bl	8000564 <__aeabi_i2d>
 8013ca6:	4b97      	ldr	r3, [pc, #604]	; (8013f04 <__kernel_rem_pio2+0x694>)
 8013ca8:	2200      	movs	r2, #0
 8013caa:	f7ec fcc5 	bl	8000638 <__aeabi_dmul>
 8013cae:	460b      	mov	r3, r1
 8013cb0:	4602      	mov	r2, r0
 8013cb2:	4639      	mov	r1, r7
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	f7ec fb07 	bl	80002c8 <__aeabi_dsub>
 8013cba:	f7ec ff57 	bl	8000b6c <__aeabi_d2iz>
 8013cbe:	1c65      	adds	r5, r4, #1
 8013cc0:	ab0e      	add	r3, sp, #56	; 0x38
 8013cc2:	f10a 0a18 	add.w	sl, sl, #24
 8013cc6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013cca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8013cce:	e720      	b.n	8013b12 <__kernel_rem_pio2+0x2a2>
 8013cd0:	4630      	mov	r0, r6
 8013cd2:	4639      	mov	r1, r7
 8013cd4:	f7ec ff4a 	bl	8000b6c <__aeabi_d2iz>
 8013cd8:	ab0e      	add	r3, sp, #56	; 0x38
 8013cda:	4625      	mov	r5, r4
 8013cdc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013ce0:	e717      	b.n	8013b12 <__kernel_rem_pio2+0x2a2>
 8013ce2:	ab0e      	add	r3, sp, #56	; 0x38
 8013ce4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8013ce8:	f7ec fc3c 	bl	8000564 <__aeabi_i2d>
 8013cec:	4632      	mov	r2, r6
 8013cee:	463b      	mov	r3, r7
 8013cf0:	f7ec fca2 	bl	8000638 <__aeabi_dmul>
 8013cf4:	4b84      	ldr	r3, [pc, #528]	; (8013f08 <__kernel_rem_pio2+0x698>)
 8013cf6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	4630      	mov	r0, r6
 8013cfe:	4639      	mov	r1, r7
 8013d00:	f7ec fc9a 	bl	8000638 <__aeabi_dmul>
 8013d04:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013d08:	4606      	mov	r6, r0
 8013d0a:	460f      	mov	r7, r1
 8013d0c:	e70f      	b.n	8013b2e <__kernel_rem_pio2+0x2be>
 8013d0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8013d12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8013d16:	f7ec fc8f 	bl	8000638 <__aeabi_dmul>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	460b      	mov	r3, r1
 8013d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d22:	f7ec fad3 	bl	80002cc <__adddf3>
 8013d26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013d2a:	f108 0801 	add.w	r8, r8, #1
 8013d2e:	9b02      	ldr	r3, [sp, #8]
 8013d30:	4598      	cmp	r8, r3
 8013d32:	dc01      	bgt.n	8013d38 <__kernel_rem_pio2+0x4c8>
 8013d34:	45b8      	cmp	r8, r7
 8013d36:	ddea      	ble.n	8013d0e <__kernel_rem_pio2+0x49e>
 8013d38:	ed9d 7b06 	vldr	d7, [sp, #24]
 8013d3c:	ab4a      	add	r3, sp, #296	; 0x128
 8013d3e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013d42:	ed87 7b00 	vstr	d7, [r7]
 8013d46:	3e01      	subs	r6, #1
 8013d48:	e6f8      	b.n	8013b3c <__kernel_rem_pio2+0x2cc>
 8013d4a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8013d4c:	2b02      	cmp	r3, #2
 8013d4e:	dc0b      	bgt.n	8013d68 <__kernel_rem_pio2+0x4f8>
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	dc35      	bgt.n	8013dc0 <__kernel_rem_pio2+0x550>
 8013d54:	d059      	beq.n	8013e0a <__kernel_rem_pio2+0x59a>
 8013d56:	9b04      	ldr	r3, [sp, #16]
 8013d58:	f003 0007 	and.w	r0, r3, #7
 8013d5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013d60:	ecbd 8b02 	vpop	{d8}
 8013d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d68:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8013d6a:	2b03      	cmp	r3, #3
 8013d6c:	d1f3      	bne.n	8013d56 <__kernel_rem_pio2+0x4e6>
 8013d6e:	ab4a      	add	r3, sp, #296	; 0x128
 8013d70:	4423      	add	r3, r4
 8013d72:	9306      	str	r3, [sp, #24]
 8013d74:	461c      	mov	r4, r3
 8013d76:	469a      	mov	sl, r3
 8013d78:	9502      	str	r5, [sp, #8]
 8013d7a:	9b02      	ldr	r3, [sp, #8]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	f1aa 0a08 	sub.w	sl, sl, #8
 8013d82:	dc6b      	bgt.n	8013e5c <__kernel_rem_pio2+0x5ec>
 8013d84:	46aa      	mov	sl, r5
 8013d86:	f1ba 0f01 	cmp.w	sl, #1
 8013d8a:	f1a4 0408 	sub.w	r4, r4, #8
 8013d8e:	f300 8085 	bgt.w	8013e9c <__kernel_rem_pio2+0x62c>
 8013d92:	9c06      	ldr	r4, [sp, #24]
 8013d94:	2000      	movs	r0, #0
 8013d96:	3408      	adds	r4, #8
 8013d98:	2100      	movs	r1, #0
 8013d9a:	2d01      	cmp	r5, #1
 8013d9c:	f300 809d 	bgt.w	8013eda <__kernel_rem_pio2+0x66a>
 8013da0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013da4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8013da8:	f1bb 0f00 	cmp.w	fp, #0
 8013dac:	f040 809b 	bne.w	8013ee6 <__kernel_rem_pio2+0x676>
 8013db0:	9b01      	ldr	r3, [sp, #4]
 8013db2:	e9c3 5600 	strd	r5, r6, [r3]
 8013db6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013dba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013dbe:	e7ca      	b.n	8013d56 <__kernel_rem_pio2+0x4e6>
 8013dc0:	3408      	adds	r4, #8
 8013dc2:	ab4a      	add	r3, sp, #296	; 0x128
 8013dc4:	441c      	add	r4, r3
 8013dc6:	462e      	mov	r6, r5
 8013dc8:	2000      	movs	r0, #0
 8013dca:	2100      	movs	r1, #0
 8013dcc:	2e00      	cmp	r6, #0
 8013dce:	da36      	bge.n	8013e3e <__kernel_rem_pio2+0x5ce>
 8013dd0:	f1bb 0f00 	cmp.w	fp, #0
 8013dd4:	d039      	beq.n	8013e4a <__kernel_rem_pio2+0x5da>
 8013dd6:	4602      	mov	r2, r0
 8013dd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ddc:	9c01      	ldr	r4, [sp, #4]
 8013dde:	e9c4 2300 	strd	r2, r3, [r4]
 8013de2:	4602      	mov	r2, r0
 8013de4:	460b      	mov	r3, r1
 8013de6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013dea:	f7ec fa6d 	bl	80002c8 <__aeabi_dsub>
 8013dee:	ae4c      	add	r6, sp, #304	; 0x130
 8013df0:	2401      	movs	r4, #1
 8013df2:	42a5      	cmp	r5, r4
 8013df4:	da2c      	bge.n	8013e50 <__kernel_rem_pio2+0x5e0>
 8013df6:	f1bb 0f00 	cmp.w	fp, #0
 8013dfa:	d002      	beq.n	8013e02 <__kernel_rem_pio2+0x592>
 8013dfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e00:	4619      	mov	r1, r3
 8013e02:	9b01      	ldr	r3, [sp, #4]
 8013e04:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013e08:	e7a5      	b.n	8013d56 <__kernel_rem_pio2+0x4e6>
 8013e0a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8013e0e:	eb0d 0403 	add.w	r4, sp, r3
 8013e12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013e16:	2000      	movs	r0, #0
 8013e18:	2100      	movs	r1, #0
 8013e1a:	2d00      	cmp	r5, #0
 8013e1c:	da09      	bge.n	8013e32 <__kernel_rem_pio2+0x5c2>
 8013e1e:	f1bb 0f00 	cmp.w	fp, #0
 8013e22:	d002      	beq.n	8013e2a <__kernel_rem_pio2+0x5ba>
 8013e24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e28:	4619      	mov	r1, r3
 8013e2a:	9b01      	ldr	r3, [sp, #4]
 8013e2c:	e9c3 0100 	strd	r0, r1, [r3]
 8013e30:	e791      	b.n	8013d56 <__kernel_rem_pio2+0x4e6>
 8013e32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013e36:	f7ec fa49 	bl	80002cc <__adddf3>
 8013e3a:	3d01      	subs	r5, #1
 8013e3c:	e7ed      	b.n	8013e1a <__kernel_rem_pio2+0x5aa>
 8013e3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013e42:	f7ec fa43 	bl	80002cc <__adddf3>
 8013e46:	3e01      	subs	r6, #1
 8013e48:	e7c0      	b.n	8013dcc <__kernel_rem_pio2+0x55c>
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	460b      	mov	r3, r1
 8013e4e:	e7c5      	b.n	8013ddc <__kernel_rem_pio2+0x56c>
 8013e50:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013e54:	f7ec fa3a 	bl	80002cc <__adddf3>
 8013e58:	3401      	adds	r4, #1
 8013e5a:	e7ca      	b.n	8013df2 <__kernel_rem_pio2+0x582>
 8013e5c:	e9da 8900 	ldrd	r8, r9, [sl]
 8013e60:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013e64:	9b02      	ldr	r3, [sp, #8]
 8013e66:	3b01      	subs	r3, #1
 8013e68:	9302      	str	r3, [sp, #8]
 8013e6a:	4632      	mov	r2, r6
 8013e6c:	463b      	mov	r3, r7
 8013e6e:	4640      	mov	r0, r8
 8013e70:	4649      	mov	r1, r9
 8013e72:	f7ec fa2b 	bl	80002cc <__adddf3>
 8013e76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e7a:	4602      	mov	r2, r0
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	4640      	mov	r0, r8
 8013e80:	4649      	mov	r1, r9
 8013e82:	f7ec fa21 	bl	80002c8 <__aeabi_dsub>
 8013e86:	4632      	mov	r2, r6
 8013e88:	463b      	mov	r3, r7
 8013e8a:	f7ec fa1f 	bl	80002cc <__adddf3>
 8013e8e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8013e92:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013e96:	ed8a 7b00 	vstr	d7, [sl]
 8013e9a:	e76e      	b.n	8013d7a <__kernel_rem_pio2+0x50a>
 8013e9c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013ea0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013ea4:	4640      	mov	r0, r8
 8013ea6:	4632      	mov	r2, r6
 8013ea8:	463b      	mov	r3, r7
 8013eaa:	4649      	mov	r1, r9
 8013eac:	f7ec fa0e 	bl	80002cc <__adddf3>
 8013eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	460b      	mov	r3, r1
 8013eb8:	4640      	mov	r0, r8
 8013eba:	4649      	mov	r1, r9
 8013ebc:	f7ec fa04 	bl	80002c8 <__aeabi_dsub>
 8013ec0:	4632      	mov	r2, r6
 8013ec2:	463b      	mov	r3, r7
 8013ec4:	f7ec fa02 	bl	80002cc <__adddf3>
 8013ec8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ecc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013ed0:	ed84 7b00 	vstr	d7, [r4]
 8013ed4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013ed8:	e755      	b.n	8013d86 <__kernel_rem_pio2+0x516>
 8013eda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013ede:	f7ec f9f5 	bl	80002cc <__adddf3>
 8013ee2:	3d01      	subs	r5, #1
 8013ee4:	e759      	b.n	8013d9a <__kernel_rem_pio2+0x52a>
 8013ee6:	9b01      	ldr	r3, [sp, #4]
 8013ee8:	9a01      	ldr	r2, [sp, #4]
 8013eea:	601d      	str	r5, [r3, #0]
 8013eec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013ef0:	605c      	str	r4, [r3, #4]
 8013ef2:	609f      	str	r7, [r3, #8]
 8013ef4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8013ef8:	60d3      	str	r3, [r2, #12]
 8013efa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013efe:	6110      	str	r0, [r2, #16]
 8013f00:	6153      	str	r3, [r2, #20]
 8013f02:	e728      	b.n	8013d56 <__kernel_rem_pio2+0x4e6>
 8013f04:	41700000 	.word	0x41700000
 8013f08:	3e700000 	.word	0x3e700000
 8013f0c:	00000000 	.word	0x00000000

08013f10 <__kernel_sin>:
 8013f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f14:	ed2d 8b04 	vpush	{d8-d9}
 8013f18:	eeb0 8a41 	vmov.f32	s16, s2
 8013f1c:	eef0 8a61 	vmov.f32	s17, s3
 8013f20:	ec55 4b10 	vmov	r4, r5, d0
 8013f24:	b083      	sub	sp, #12
 8013f26:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013f2a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013f2e:	9001      	str	r0, [sp, #4]
 8013f30:	da06      	bge.n	8013f40 <__kernel_sin+0x30>
 8013f32:	ee10 0a10 	vmov	r0, s0
 8013f36:	4629      	mov	r1, r5
 8013f38:	f7ec fe18 	bl	8000b6c <__aeabi_d2iz>
 8013f3c:	2800      	cmp	r0, #0
 8013f3e:	d051      	beq.n	8013fe4 <__kernel_sin+0xd4>
 8013f40:	4622      	mov	r2, r4
 8013f42:	462b      	mov	r3, r5
 8013f44:	4620      	mov	r0, r4
 8013f46:	4629      	mov	r1, r5
 8013f48:	f7ec fb76 	bl	8000638 <__aeabi_dmul>
 8013f4c:	4682      	mov	sl, r0
 8013f4e:	468b      	mov	fp, r1
 8013f50:	4602      	mov	r2, r0
 8013f52:	460b      	mov	r3, r1
 8013f54:	4620      	mov	r0, r4
 8013f56:	4629      	mov	r1, r5
 8013f58:	f7ec fb6e 	bl	8000638 <__aeabi_dmul>
 8013f5c:	a341      	add	r3, pc, #260	; (adr r3, 8014064 <__kernel_sin+0x154>)
 8013f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f62:	4680      	mov	r8, r0
 8013f64:	4689      	mov	r9, r1
 8013f66:	4650      	mov	r0, sl
 8013f68:	4659      	mov	r1, fp
 8013f6a:	f7ec fb65 	bl	8000638 <__aeabi_dmul>
 8013f6e:	a33f      	add	r3, pc, #252	; (adr r3, 801406c <__kernel_sin+0x15c>)
 8013f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f74:	f7ec f9a8 	bl	80002c8 <__aeabi_dsub>
 8013f78:	4652      	mov	r2, sl
 8013f7a:	465b      	mov	r3, fp
 8013f7c:	f7ec fb5c 	bl	8000638 <__aeabi_dmul>
 8013f80:	a33c      	add	r3, pc, #240	; (adr r3, 8014074 <__kernel_sin+0x164>)
 8013f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f86:	f7ec f9a1 	bl	80002cc <__adddf3>
 8013f8a:	4652      	mov	r2, sl
 8013f8c:	465b      	mov	r3, fp
 8013f8e:	f7ec fb53 	bl	8000638 <__aeabi_dmul>
 8013f92:	a33a      	add	r3, pc, #232	; (adr r3, 801407c <__kernel_sin+0x16c>)
 8013f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f98:	f7ec f996 	bl	80002c8 <__aeabi_dsub>
 8013f9c:	4652      	mov	r2, sl
 8013f9e:	465b      	mov	r3, fp
 8013fa0:	f7ec fb4a 	bl	8000638 <__aeabi_dmul>
 8013fa4:	a337      	add	r3, pc, #220	; (adr r3, 8014084 <__kernel_sin+0x174>)
 8013fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013faa:	f7ec f98f 	bl	80002cc <__adddf3>
 8013fae:	9b01      	ldr	r3, [sp, #4]
 8013fb0:	4606      	mov	r6, r0
 8013fb2:	460f      	mov	r7, r1
 8013fb4:	b9eb      	cbnz	r3, 8013ff2 <__kernel_sin+0xe2>
 8013fb6:	4602      	mov	r2, r0
 8013fb8:	460b      	mov	r3, r1
 8013fba:	4650      	mov	r0, sl
 8013fbc:	4659      	mov	r1, fp
 8013fbe:	f7ec fb3b 	bl	8000638 <__aeabi_dmul>
 8013fc2:	a325      	add	r3, pc, #148	; (adr r3, 8014058 <__kernel_sin+0x148>)
 8013fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc8:	f7ec f97e 	bl	80002c8 <__aeabi_dsub>
 8013fcc:	4642      	mov	r2, r8
 8013fce:	464b      	mov	r3, r9
 8013fd0:	f7ec fb32 	bl	8000638 <__aeabi_dmul>
 8013fd4:	4602      	mov	r2, r0
 8013fd6:	460b      	mov	r3, r1
 8013fd8:	4620      	mov	r0, r4
 8013fda:	4629      	mov	r1, r5
 8013fdc:	f7ec f976 	bl	80002cc <__adddf3>
 8013fe0:	4604      	mov	r4, r0
 8013fe2:	460d      	mov	r5, r1
 8013fe4:	ec45 4b10 	vmov	d0, r4, r5
 8013fe8:	b003      	add	sp, #12
 8013fea:	ecbd 8b04 	vpop	{d8-d9}
 8013fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ff2:	4b1b      	ldr	r3, [pc, #108]	; (8014060 <__kernel_sin+0x150>)
 8013ff4:	ec51 0b18 	vmov	r0, r1, d8
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	f7ec fb1d 	bl	8000638 <__aeabi_dmul>
 8013ffe:	4632      	mov	r2, r6
 8014000:	ec41 0b19 	vmov	d9, r0, r1
 8014004:	463b      	mov	r3, r7
 8014006:	4640      	mov	r0, r8
 8014008:	4649      	mov	r1, r9
 801400a:	f7ec fb15 	bl	8000638 <__aeabi_dmul>
 801400e:	4602      	mov	r2, r0
 8014010:	460b      	mov	r3, r1
 8014012:	ec51 0b19 	vmov	r0, r1, d9
 8014016:	f7ec f957 	bl	80002c8 <__aeabi_dsub>
 801401a:	4652      	mov	r2, sl
 801401c:	465b      	mov	r3, fp
 801401e:	f7ec fb0b 	bl	8000638 <__aeabi_dmul>
 8014022:	ec53 2b18 	vmov	r2, r3, d8
 8014026:	f7ec f94f 	bl	80002c8 <__aeabi_dsub>
 801402a:	a30b      	add	r3, pc, #44	; (adr r3, 8014058 <__kernel_sin+0x148>)
 801402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014030:	4606      	mov	r6, r0
 8014032:	460f      	mov	r7, r1
 8014034:	4640      	mov	r0, r8
 8014036:	4649      	mov	r1, r9
 8014038:	f7ec fafe 	bl	8000638 <__aeabi_dmul>
 801403c:	4602      	mov	r2, r0
 801403e:	460b      	mov	r3, r1
 8014040:	4630      	mov	r0, r6
 8014042:	4639      	mov	r1, r7
 8014044:	f7ec f942 	bl	80002cc <__adddf3>
 8014048:	4602      	mov	r2, r0
 801404a:	460b      	mov	r3, r1
 801404c:	4620      	mov	r0, r4
 801404e:	4629      	mov	r1, r5
 8014050:	f7ec f93a 	bl	80002c8 <__aeabi_dsub>
 8014054:	e7c4      	b.n	8013fe0 <__kernel_sin+0xd0>
 8014056:	bf00      	nop
 8014058:	55555549 	.word	0x55555549
 801405c:	3fc55555 	.word	0x3fc55555
 8014060:	3fe00000 	.word	0x3fe00000
 8014064:	5acfd57c 	.word	0x5acfd57c
 8014068:	3de5d93a 	.word	0x3de5d93a
 801406c:	8a2b9ceb 	.word	0x8a2b9ceb
 8014070:	3e5ae5e6 	.word	0x3e5ae5e6
 8014074:	57b1fe7d 	.word	0x57b1fe7d
 8014078:	3ec71de3 	.word	0x3ec71de3
 801407c:	19c161d5 	.word	0x19c161d5
 8014080:	3f2a01a0 	.word	0x3f2a01a0
 8014084:	1110f8a6 	.word	0x1110f8a6
 8014088:	3f811111 	.word	0x3f811111

0801408c <fabs>:
 801408c:	ec51 0b10 	vmov	r0, r1, d0
 8014090:	ee10 2a10 	vmov	r2, s0
 8014094:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014098:	ec43 2b10 	vmov	d0, r2, r3
 801409c:	4770      	bx	lr
	...

080140a0 <floor>:
 80140a0:	ec51 0b10 	vmov	r0, r1, d0
 80140a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80140ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80140b0:	2e13      	cmp	r6, #19
 80140b2:	ee10 5a10 	vmov	r5, s0
 80140b6:	ee10 8a10 	vmov	r8, s0
 80140ba:	460c      	mov	r4, r1
 80140bc:	dc32      	bgt.n	8014124 <floor+0x84>
 80140be:	2e00      	cmp	r6, #0
 80140c0:	da14      	bge.n	80140ec <floor+0x4c>
 80140c2:	a333      	add	r3, pc, #204	; (adr r3, 8014190 <floor+0xf0>)
 80140c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c8:	f7ec f900 	bl	80002cc <__adddf3>
 80140cc:	2200      	movs	r2, #0
 80140ce:	2300      	movs	r3, #0
 80140d0:	f7ec fd42 	bl	8000b58 <__aeabi_dcmpgt>
 80140d4:	b138      	cbz	r0, 80140e6 <floor+0x46>
 80140d6:	2c00      	cmp	r4, #0
 80140d8:	da57      	bge.n	801418a <floor+0xea>
 80140da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80140de:	431d      	orrs	r5, r3
 80140e0:	d001      	beq.n	80140e6 <floor+0x46>
 80140e2:	4c2d      	ldr	r4, [pc, #180]	; (8014198 <floor+0xf8>)
 80140e4:	2500      	movs	r5, #0
 80140e6:	4621      	mov	r1, r4
 80140e8:	4628      	mov	r0, r5
 80140ea:	e025      	b.n	8014138 <floor+0x98>
 80140ec:	4f2b      	ldr	r7, [pc, #172]	; (801419c <floor+0xfc>)
 80140ee:	4137      	asrs	r7, r6
 80140f0:	ea01 0307 	and.w	r3, r1, r7
 80140f4:	4303      	orrs	r3, r0
 80140f6:	d01f      	beq.n	8014138 <floor+0x98>
 80140f8:	a325      	add	r3, pc, #148	; (adr r3, 8014190 <floor+0xf0>)
 80140fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140fe:	f7ec f8e5 	bl	80002cc <__adddf3>
 8014102:	2200      	movs	r2, #0
 8014104:	2300      	movs	r3, #0
 8014106:	f7ec fd27 	bl	8000b58 <__aeabi_dcmpgt>
 801410a:	2800      	cmp	r0, #0
 801410c:	d0eb      	beq.n	80140e6 <floor+0x46>
 801410e:	2c00      	cmp	r4, #0
 8014110:	bfbe      	ittt	lt
 8014112:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014116:	fa43 f606 	asrlt.w	r6, r3, r6
 801411a:	19a4      	addlt	r4, r4, r6
 801411c:	ea24 0407 	bic.w	r4, r4, r7
 8014120:	2500      	movs	r5, #0
 8014122:	e7e0      	b.n	80140e6 <floor+0x46>
 8014124:	2e33      	cmp	r6, #51	; 0x33
 8014126:	dd0b      	ble.n	8014140 <floor+0xa0>
 8014128:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801412c:	d104      	bne.n	8014138 <floor+0x98>
 801412e:	ee10 2a10 	vmov	r2, s0
 8014132:	460b      	mov	r3, r1
 8014134:	f7ec f8ca 	bl	80002cc <__adddf3>
 8014138:	ec41 0b10 	vmov	d0, r0, r1
 801413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014140:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8014144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014148:	fa23 f707 	lsr.w	r7, r3, r7
 801414c:	4207      	tst	r7, r0
 801414e:	d0f3      	beq.n	8014138 <floor+0x98>
 8014150:	a30f      	add	r3, pc, #60	; (adr r3, 8014190 <floor+0xf0>)
 8014152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014156:	f7ec f8b9 	bl	80002cc <__adddf3>
 801415a:	2200      	movs	r2, #0
 801415c:	2300      	movs	r3, #0
 801415e:	f7ec fcfb 	bl	8000b58 <__aeabi_dcmpgt>
 8014162:	2800      	cmp	r0, #0
 8014164:	d0bf      	beq.n	80140e6 <floor+0x46>
 8014166:	2c00      	cmp	r4, #0
 8014168:	da02      	bge.n	8014170 <floor+0xd0>
 801416a:	2e14      	cmp	r6, #20
 801416c:	d103      	bne.n	8014176 <floor+0xd6>
 801416e:	3401      	adds	r4, #1
 8014170:	ea25 0507 	bic.w	r5, r5, r7
 8014174:	e7b7      	b.n	80140e6 <floor+0x46>
 8014176:	2301      	movs	r3, #1
 8014178:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801417c:	fa03 f606 	lsl.w	r6, r3, r6
 8014180:	4435      	add	r5, r6
 8014182:	4545      	cmp	r5, r8
 8014184:	bf38      	it	cc
 8014186:	18e4      	addcc	r4, r4, r3
 8014188:	e7f2      	b.n	8014170 <floor+0xd0>
 801418a:	2500      	movs	r5, #0
 801418c:	462c      	mov	r4, r5
 801418e:	e7aa      	b.n	80140e6 <floor+0x46>
 8014190:	8800759c 	.word	0x8800759c
 8014194:	7e37e43c 	.word	0x7e37e43c
 8014198:	bff00000 	.word	0xbff00000
 801419c:	000fffff 	.word	0x000fffff

080141a0 <scalbn>:
 80141a0:	b570      	push	{r4, r5, r6, lr}
 80141a2:	ec55 4b10 	vmov	r4, r5, d0
 80141a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80141aa:	4606      	mov	r6, r0
 80141ac:	462b      	mov	r3, r5
 80141ae:	b99a      	cbnz	r2, 80141d8 <scalbn+0x38>
 80141b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80141b4:	4323      	orrs	r3, r4
 80141b6:	d036      	beq.n	8014226 <scalbn+0x86>
 80141b8:	4b39      	ldr	r3, [pc, #228]	; (80142a0 <scalbn+0x100>)
 80141ba:	4629      	mov	r1, r5
 80141bc:	ee10 0a10 	vmov	r0, s0
 80141c0:	2200      	movs	r2, #0
 80141c2:	f7ec fa39 	bl	8000638 <__aeabi_dmul>
 80141c6:	4b37      	ldr	r3, [pc, #220]	; (80142a4 <scalbn+0x104>)
 80141c8:	429e      	cmp	r6, r3
 80141ca:	4604      	mov	r4, r0
 80141cc:	460d      	mov	r5, r1
 80141ce:	da10      	bge.n	80141f2 <scalbn+0x52>
 80141d0:	a32b      	add	r3, pc, #172	; (adr r3, 8014280 <scalbn+0xe0>)
 80141d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d6:	e03a      	b.n	801424e <scalbn+0xae>
 80141d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80141dc:	428a      	cmp	r2, r1
 80141de:	d10c      	bne.n	80141fa <scalbn+0x5a>
 80141e0:	ee10 2a10 	vmov	r2, s0
 80141e4:	4620      	mov	r0, r4
 80141e6:	4629      	mov	r1, r5
 80141e8:	f7ec f870 	bl	80002cc <__adddf3>
 80141ec:	4604      	mov	r4, r0
 80141ee:	460d      	mov	r5, r1
 80141f0:	e019      	b.n	8014226 <scalbn+0x86>
 80141f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80141f6:	460b      	mov	r3, r1
 80141f8:	3a36      	subs	r2, #54	; 0x36
 80141fa:	4432      	add	r2, r6
 80141fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014200:	428a      	cmp	r2, r1
 8014202:	dd08      	ble.n	8014216 <scalbn+0x76>
 8014204:	2d00      	cmp	r5, #0
 8014206:	a120      	add	r1, pc, #128	; (adr r1, 8014288 <scalbn+0xe8>)
 8014208:	e9d1 0100 	ldrd	r0, r1, [r1]
 801420c:	da1c      	bge.n	8014248 <scalbn+0xa8>
 801420e:	a120      	add	r1, pc, #128	; (adr r1, 8014290 <scalbn+0xf0>)
 8014210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014214:	e018      	b.n	8014248 <scalbn+0xa8>
 8014216:	2a00      	cmp	r2, #0
 8014218:	dd08      	ble.n	801422c <scalbn+0x8c>
 801421a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801421e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014222:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014226:	ec45 4b10 	vmov	d0, r4, r5
 801422a:	bd70      	pop	{r4, r5, r6, pc}
 801422c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014230:	da19      	bge.n	8014266 <scalbn+0xc6>
 8014232:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014236:	429e      	cmp	r6, r3
 8014238:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801423c:	dd0a      	ble.n	8014254 <scalbn+0xb4>
 801423e:	a112      	add	r1, pc, #72	; (adr r1, 8014288 <scalbn+0xe8>)
 8014240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d1e2      	bne.n	801420e <scalbn+0x6e>
 8014248:	a30f      	add	r3, pc, #60	; (adr r3, 8014288 <scalbn+0xe8>)
 801424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801424e:	f7ec f9f3 	bl	8000638 <__aeabi_dmul>
 8014252:	e7cb      	b.n	80141ec <scalbn+0x4c>
 8014254:	a10a      	add	r1, pc, #40	; (adr r1, 8014280 <scalbn+0xe0>)
 8014256:	e9d1 0100 	ldrd	r0, r1, [r1]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d0b8      	beq.n	80141d0 <scalbn+0x30>
 801425e:	a10e      	add	r1, pc, #56	; (adr r1, 8014298 <scalbn+0xf8>)
 8014260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014264:	e7b4      	b.n	80141d0 <scalbn+0x30>
 8014266:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801426a:	3236      	adds	r2, #54	; 0x36
 801426c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014270:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014274:	4620      	mov	r0, r4
 8014276:	4b0c      	ldr	r3, [pc, #48]	; (80142a8 <scalbn+0x108>)
 8014278:	2200      	movs	r2, #0
 801427a:	e7e8      	b.n	801424e <scalbn+0xae>
 801427c:	f3af 8000 	nop.w
 8014280:	c2f8f359 	.word	0xc2f8f359
 8014284:	01a56e1f 	.word	0x01a56e1f
 8014288:	8800759c 	.word	0x8800759c
 801428c:	7e37e43c 	.word	0x7e37e43c
 8014290:	8800759c 	.word	0x8800759c
 8014294:	fe37e43c 	.word	0xfe37e43c
 8014298:	c2f8f359 	.word	0xc2f8f359
 801429c:	81a56e1f 	.word	0x81a56e1f
 80142a0:	43500000 	.word	0x43500000
 80142a4:	ffff3cb0 	.word	0xffff3cb0
 80142a8:	3c900000 	.word	0x3c900000

080142ac <_init>:
 80142ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142ae:	bf00      	nop
 80142b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142b2:	bc08      	pop	{r3}
 80142b4:	469e      	mov	lr, r3
 80142b6:	4770      	bx	lr

080142b8 <_fini>:
 80142b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142ba:	bf00      	nop
 80142bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142be:	bc08      	pop	{r3}
 80142c0:	469e      	mov	lr, r3
 80142c2:	4770      	bx	lr
